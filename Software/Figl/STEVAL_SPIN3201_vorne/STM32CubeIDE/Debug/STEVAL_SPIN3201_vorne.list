
STEVAL_SPIN3201_vorne.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065b8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e20  08006678  08006678  00007678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007498  08007498  000094a0  2**0
                  CONTENTS
  4 .ARM          00000000  08007498  08007498  000094a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007498  08007498  000094a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007498  08007498  00008498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800749c  0800749c  0000849c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004a0  20000000  080074a0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  200004a0  08007940  000094a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000484  20000854  08007940  00009854  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000094a0  2**0
                  CONTENTS, READONLY
 12 .debug_line   0003819c  00000000  00000000  000094c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000078  00000000  00000000  00041664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00034af5  00000000  00000000  000416dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000756f  00000000  00000000  000761d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018f8  00000000  00000000  0007d740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00084eec  00000000  00000000  0007f038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000023c1  00000000  00000000  00103f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00014299  00000000  00000000  001062e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001a832  00000000  00000000  0011a57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00134db0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003fcc  00000000  00000000  00134df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004a0 	.word	0x200004a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006660 	.word	0x08006660

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004a4 	.word	0x200004a4
 8000104:	08006660 	.word	0x08006660

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_lmul>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	46ce      	mov	lr, r9
 80003f8:	4699      	mov	r9, r3
 80003fa:	0c03      	lsrs	r3, r0, #16
 80003fc:	469c      	mov	ip, r3
 80003fe:	0413      	lsls	r3, r2, #16
 8000400:	4647      	mov	r7, r8
 8000402:	0c1b      	lsrs	r3, r3, #16
 8000404:	001d      	movs	r5, r3
 8000406:	000e      	movs	r6, r1
 8000408:	4661      	mov	r1, ip
 800040a:	0404      	lsls	r4, r0, #16
 800040c:	0c24      	lsrs	r4, r4, #16
 800040e:	b580      	push	{r7, lr}
 8000410:	0007      	movs	r7, r0
 8000412:	0c10      	lsrs	r0, r2, #16
 8000414:	434b      	muls	r3, r1
 8000416:	4365      	muls	r5, r4
 8000418:	4341      	muls	r1, r0
 800041a:	4360      	muls	r0, r4
 800041c:	0c2c      	lsrs	r4, r5, #16
 800041e:	18c0      	adds	r0, r0, r3
 8000420:	1824      	adds	r4, r4, r0
 8000422:	468c      	mov	ip, r1
 8000424:	42a3      	cmp	r3, r4
 8000426:	d903      	bls.n	8000430 <__aeabi_lmul+0x3c>
 8000428:	2380      	movs	r3, #128	@ 0x80
 800042a:	025b      	lsls	r3, r3, #9
 800042c:	4698      	mov	r8, r3
 800042e:	44c4      	add	ip, r8
 8000430:	4649      	mov	r1, r9
 8000432:	4379      	muls	r1, r7
 8000434:	4356      	muls	r6, r2
 8000436:	0c23      	lsrs	r3, r4, #16
 8000438:	042d      	lsls	r5, r5, #16
 800043a:	0c2d      	lsrs	r5, r5, #16
 800043c:	1989      	adds	r1, r1, r6
 800043e:	4463      	add	r3, ip
 8000440:	0424      	lsls	r4, r4, #16
 8000442:	1960      	adds	r0, r4, r5
 8000444:	18c9      	adds	r1, r1, r3
 8000446:	bcc0      	pop	{r6, r7}
 8000448:	46b9      	mov	r9, r7
 800044a:	46b0      	mov	r8, r6
 800044c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_fmul>:
 8000450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000452:	464f      	mov	r7, r9
 8000454:	4646      	mov	r6, r8
 8000456:	46d6      	mov	lr, sl
 8000458:	0243      	lsls	r3, r0, #9
 800045a:	0a5b      	lsrs	r3, r3, #9
 800045c:	0045      	lsls	r5, r0, #1
 800045e:	b5c0      	push	{r6, r7, lr}
 8000460:	4699      	mov	r9, r3
 8000462:	1c0f      	adds	r7, r1, #0
 8000464:	0e2d      	lsrs	r5, r5, #24
 8000466:	0fc6      	lsrs	r6, r0, #31
 8000468:	2d00      	cmp	r5, #0
 800046a:	d100      	bne.n	800046e <__aeabi_fmul+0x1e>
 800046c:	e088      	b.n	8000580 <__aeabi_fmul+0x130>
 800046e:	2dff      	cmp	r5, #255	@ 0xff
 8000470:	d100      	bne.n	8000474 <__aeabi_fmul+0x24>
 8000472:	e08d      	b.n	8000590 <__aeabi_fmul+0x140>
 8000474:	2280      	movs	r2, #128	@ 0x80
 8000476:	00db      	lsls	r3, r3, #3
 8000478:	04d2      	lsls	r2, r2, #19
 800047a:	431a      	orrs	r2, r3
 800047c:	2300      	movs	r3, #0
 800047e:	4691      	mov	r9, r2
 8000480:	4698      	mov	r8, r3
 8000482:	469a      	mov	sl, r3
 8000484:	3d7f      	subs	r5, #127	@ 0x7f
 8000486:	027c      	lsls	r4, r7, #9
 8000488:	007b      	lsls	r3, r7, #1
 800048a:	0a64      	lsrs	r4, r4, #9
 800048c:	0e1b      	lsrs	r3, r3, #24
 800048e:	0fff      	lsrs	r7, r7, #31
 8000490:	2b00      	cmp	r3, #0
 8000492:	d068      	beq.n	8000566 <__aeabi_fmul+0x116>
 8000494:	2bff      	cmp	r3, #255	@ 0xff
 8000496:	d021      	beq.n	80004dc <__aeabi_fmul+0x8c>
 8000498:	2280      	movs	r2, #128	@ 0x80
 800049a:	00e4      	lsls	r4, r4, #3
 800049c:	04d2      	lsls	r2, r2, #19
 800049e:	4314      	orrs	r4, r2
 80004a0:	4642      	mov	r2, r8
 80004a2:	3b7f      	subs	r3, #127	@ 0x7f
 80004a4:	195b      	adds	r3, r3, r5
 80004a6:	2100      	movs	r1, #0
 80004a8:	1c5d      	adds	r5, r3, #1
 80004aa:	2a0a      	cmp	r2, #10
 80004ac:	dc2e      	bgt.n	800050c <__aeabi_fmul+0xbc>
 80004ae:	407e      	eors	r6, r7
 80004b0:	4642      	mov	r2, r8
 80004b2:	2a02      	cmp	r2, #2
 80004b4:	dc23      	bgt.n	80004fe <__aeabi_fmul+0xae>
 80004b6:	3a01      	subs	r2, #1
 80004b8:	2a01      	cmp	r2, #1
 80004ba:	d900      	bls.n	80004be <__aeabi_fmul+0x6e>
 80004bc:	e0bd      	b.n	800063a <__aeabi_fmul+0x1ea>
 80004be:	2902      	cmp	r1, #2
 80004c0:	d06e      	beq.n	80005a0 <__aeabi_fmul+0x150>
 80004c2:	2901      	cmp	r1, #1
 80004c4:	d12c      	bne.n	8000520 <__aeabi_fmul+0xd0>
 80004c6:	2000      	movs	r0, #0
 80004c8:	2200      	movs	r2, #0
 80004ca:	05c0      	lsls	r0, r0, #23
 80004cc:	07f6      	lsls	r6, r6, #31
 80004ce:	4310      	orrs	r0, r2
 80004d0:	4330      	orrs	r0, r6
 80004d2:	bce0      	pop	{r5, r6, r7}
 80004d4:	46ba      	mov	sl, r7
 80004d6:	46b1      	mov	r9, r6
 80004d8:	46a8      	mov	r8, r5
 80004da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004dc:	002b      	movs	r3, r5
 80004de:	33ff      	adds	r3, #255	@ 0xff
 80004e0:	2c00      	cmp	r4, #0
 80004e2:	d065      	beq.n	80005b0 <__aeabi_fmul+0x160>
 80004e4:	2203      	movs	r2, #3
 80004e6:	4641      	mov	r1, r8
 80004e8:	4311      	orrs	r1, r2
 80004ea:	0032      	movs	r2, r6
 80004ec:	3501      	adds	r5, #1
 80004ee:	4688      	mov	r8, r1
 80004f0:	407a      	eors	r2, r7
 80004f2:	35ff      	adds	r5, #255	@ 0xff
 80004f4:	290a      	cmp	r1, #10
 80004f6:	dd00      	ble.n	80004fa <__aeabi_fmul+0xaa>
 80004f8:	e0d8      	b.n	80006ac <__aeabi_fmul+0x25c>
 80004fa:	0016      	movs	r6, r2
 80004fc:	2103      	movs	r1, #3
 80004fe:	4640      	mov	r0, r8
 8000500:	2201      	movs	r2, #1
 8000502:	4082      	lsls	r2, r0
 8000504:	20a6      	movs	r0, #166	@ 0xa6
 8000506:	00c0      	lsls	r0, r0, #3
 8000508:	4202      	tst	r2, r0
 800050a:	d020      	beq.n	800054e <__aeabi_fmul+0xfe>
 800050c:	4653      	mov	r3, sl
 800050e:	2b02      	cmp	r3, #2
 8000510:	d046      	beq.n	80005a0 <__aeabi_fmul+0x150>
 8000512:	2b03      	cmp	r3, #3
 8000514:	d100      	bne.n	8000518 <__aeabi_fmul+0xc8>
 8000516:	e0bb      	b.n	8000690 <__aeabi_fmul+0x240>
 8000518:	4651      	mov	r1, sl
 800051a:	464c      	mov	r4, r9
 800051c:	2901      	cmp	r1, #1
 800051e:	d0d2      	beq.n	80004c6 <__aeabi_fmul+0x76>
 8000520:	002b      	movs	r3, r5
 8000522:	337f      	adds	r3, #127	@ 0x7f
 8000524:	2b00      	cmp	r3, #0
 8000526:	dd70      	ble.n	800060a <__aeabi_fmul+0x1ba>
 8000528:	0762      	lsls	r2, r4, #29
 800052a:	d004      	beq.n	8000536 <__aeabi_fmul+0xe6>
 800052c:	220f      	movs	r2, #15
 800052e:	4022      	ands	r2, r4
 8000530:	2a04      	cmp	r2, #4
 8000532:	d000      	beq.n	8000536 <__aeabi_fmul+0xe6>
 8000534:	3404      	adds	r4, #4
 8000536:	0122      	lsls	r2, r4, #4
 8000538:	d503      	bpl.n	8000542 <__aeabi_fmul+0xf2>
 800053a:	4b63      	ldr	r3, [pc, #396]	@ (80006c8 <__aeabi_fmul+0x278>)
 800053c:	401c      	ands	r4, r3
 800053e:	002b      	movs	r3, r5
 8000540:	3380      	adds	r3, #128	@ 0x80
 8000542:	2bfe      	cmp	r3, #254	@ 0xfe
 8000544:	dc2c      	bgt.n	80005a0 <__aeabi_fmul+0x150>
 8000546:	01a2      	lsls	r2, r4, #6
 8000548:	0a52      	lsrs	r2, r2, #9
 800054a:	b2d8      	uxtb	r0, r3
 800054c:	e7bd      	b.n	80004ca <__aeabi_fmul+0x7a>
 800054e:	2090      	movs	r0, #144	@ 0x90
 8000550:	0080      	lsls	r0, r0, #2
 8000552:	4202      	tst	r2, r0
 8000554:	d127      	bne.n	80005a6 <__aeabi_fmul+0x156>
 8000556:	38b9      	subs	r0, #185	@ 0xb9
 8000558:	38ff      	subs	r0, #255	@ 0xff
 800055a:	4210      	tst	r0, r2
 800055c:	d06d      	beq.n	800063a <__aeabi_fmul+0x1ea>
 800055e:	003e      	movs	r6, r7
 8000560:	46a1      	mov	r9, r4
 8000562:	468a      	mov	sl, r1
 8000564:	e7d2      	b.n	800050c <__aeabi_fmul+0xbc>
 8000566:	2c00      	cmp	r4, #0
 8000568:	d141      	bne.n	80005ee <__aeabi_fmul+0x19e>
 800056a:	2301      	movs	r3, #1
 800056c:	4642      	mov	r2, r8
 800056e:	431a      	orrs	r2, r3
 8000570:	4690      	mov	r8, r2
 8000572:	002b      	movs	r3, r5
 8000574:	4642      	mov	r2, r8
 8000576:	2101      	movs	r1, #1
 8000578:	1c5d      	adds	r5, r3, #1
 800057a:	2a0a      	cmp	r2, #10
 800057c:	dd97      	ble.n	80004ae <__aeabi_fmul+0x5e>
 800057e:	e7c5      	b.n	800050c <__aeabi_fmul+0xbc>
 8000580:	2b00      	cmp	r3, #0
 8000582:	d126      	bne.n	80005d2 <__aeabi_fmul+0x182>
 8000584:	2304      	movs	r3, #4
 8000586:	4698      	mov	r8, r3
 8000588:	3b03      	subs	r3, #3
 800058a:	2500      	movs	r5, #0
 800058c:	469a      	mov	sl, r3
 800058e:	e77a      	b.n	8000486 <__aeabi_fmul+0x36>
 8000590:	2b00      	cmp	r3, #0
 8000592:	d118      	bne.n	80005c6 <__aeabi_fmul+0x176>
 8000594:	2308      	movs	r3, #8
 8000596:	4698      	mov	r8, r3
 8000598:	3b06      	subs	r3, #6
 800059a:	25ff      	movs	r5, #255	@ 0xff
 800059c:	469a      	mov	sl, r3
 800059e:	e772      	b.n	8000486 <__aeabi_fmul+0x36>
 80005a0:	20ff      	movs	r0, #255	@ 0xff
 80005a2:	2200      	movs	r2, #0
 80005a4:	e791      	b.n	80004ca <__aeabi_fmul+0x7a>
 80005a6:	2280      	movs	r2, #128	@ 0x80
 80005a8:	2600      	movs	r6, #0
 80005aa:	20ff      	movs	r0, #255	@ 0xff
 80005ac:	03d2      	lsls	r2, r2, #15
 80005ae:	e78c      	b.n	80004ca <__aeabi_fmul+0x7a>
 80005b0:	4641      	mov	r1, r8
 80005b2:	2202      	movs	r2, #2
 80005b4:	3501      	adds	r5, #1
 80005b6:	4311      	orrs	r1, r2
 80005b8:	4688      	mov	r8, r1
 80005ba:	35ff      	adds	r5, #255	@ 0xff
 80005bc:	290a      	cmp	r1, #10
 80005be:	dca5      	bgt.n	800050c <__aeabi_fmul+0xbc>
 80005c0:	2102      	movs	r1, #2
 80005c2:	407e      	eors	r6, r7
 80005c4:	e774      	b.n	80004b0 <__aeabi_fmul+0x60>
 80005c6:	230c      	movs	r3, #12
 80005c8:	4698      	mov	r8, r3
 80005ca:	3b09      	subs	r3, #9
 80005cc:	25ff      	movs	r5, #255	@ 0xff
 80005ce:	469a      	mov	sl, r3
 80005d0:	e759      	b.n	8000486 <__aeabi_fmul+0x36>
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 f908 	bl	80007e8 <__clzsi2>
 80005d8:	464a      	mov	r2, r9
 80005da:	1f43      	subs	r3, r0, #5
 80005dc:	2576      	movs	r5, #118	@ 0x76
 80005de:	409a      	lsls	r2, r3
 80005e0:	2300      	movs	r3, #0
 80005e2:	426d      	negs	r5, r5
 80005e4:	4691      	mov	r9, r2
 80005e6:	4698      	mov	r8, r3
 80005e8:	469a      	mov	sl, r3
 80005ea:	1a2d      	subs	r5, r5, r0
 80005ec:	e74b      	b.n	8000486 <__aeabi_fmul+0x36>
 80005ee:	0020      	movs	r0, r4
 80005f0:	f000 f8fa 	bl	80007e8 <__clzsi2>
 80005f4:	4642      	mov	r2, r8
 80005f6:	1f43      	subs	r3, r0, #5
 80005f8:	409c      	lsls	r4, r3
 80005fa:	1a2b      	subs	r3, r5, r0
 80005fc:	3b76      	subs	r3, #118	@ 0x76
 80005fe:	2100      	movs	r1, #0
 8000600:	1c5d      	adds	r5, r3, #1
 8000602:	2a0a      	cmp	r2, #10
 8000604:	dc00      	bgt.n	8000608 <__aeabi_fmul+0x1b8>
 8000606:	e752      	b.n	80004ae <__aeabi_fmul+0x5e>
 8000608:	e780      	b.n	800050c <__aeabi_fmul+0xbc>
 800060a:	2201      	movs	r2, #1
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	2b1b      	cmp	r3, #27
 8000610:	dd00      	ble.n	8000614 <__aeabi_fmul+0x1c4>
 8000612:	e758      	b.n	80004c6 <__aeabi_fmul+0x76>
 8000614:	359e      	adds	r5, #158	@ 0x9e
 8000616:	0022      	movs	r2, r4
 8000618:	40ac      	lsls	r4, r5
 800061a:	40da      	lsrs	r2, r3
 800061c:	1e63      	subs	r3, r4, #1
 800061e:	419c      	sbcs	r4, r3
 8000620:	4322      	orrs	r2, r4
 8000622:	0753      	lsls	r3, r2, #29
 8000624:	d004      	beq.n	8000630 <__aeabi_fmul+0x1e0>
 8000626:	230f      	movs	r3, #15
 8000628:	4013      	ands	r3, r2
 800062a:	2b04      	cmp	r3, #4
 800062c:	d000      	beq.n	8000630 <__aeabi_fmul+0x1e0>
 800062e:	3204      	adds	r2, #4
 8000630:	0153      	lsls	r3, r2, #5
 8000632:	d537      	bpl.n	80006a4 <__aeabi_fmul+0x254>
 8000634:	2001      	movs	r0, #1
 8000636:	2200      	movs	r2, #0
 8000638:	e747      	b.n	80004ca <__aeabi_fmul+0x7a>
 800063a:	0c21      	lsrs	r1, r4, #16
 800063c:	464a      	mov	r2, r9
 800063e:	0424      	lsls	r4, r4, #16
 8000640:	0c24      	lsrs	r4, r4, #16
 8000642:	0027      	movs	r7, r4
 8000644:	0c10      	lsrs	r0, r2, #16
 8000646:	0412      	lsls	r2, r2, #16
 8000648:	0c12      	lsrs	r2, r2, #16
 800064a:	4344      	muls	r4, r0
 800064c:	4357      	muls	r7, r2
 800064e:	4348      	muls	r0, r1
 8000650:	4351      	muls	r1, r2
 8000652:	0c3a      	lsrs	r2, r7, #16
 8000654:	1909      	adds	r1, r1, r4
 8000656:	1852      	adds	r2, r2, r1
 8000658:	4294      	cmp	r4, r2
 800065a:	d903      	bls.n	8000664 <__aeabi_fmul+0x214>
 800065c:	2180      	movs	r1, #128	@ 0x80
 800065e:	0249      	lsls	r1, r1, #9
 8000660:	468c      	mov	ip, r1
 8000662:	4460      	add	r0, ip
 8000664:	043f      	lsls	r7, r7, #16
 8000666:	0411      	lsls	r1, r2, #16
 8000668:	0c3f      	lsrs	r7, r7, #16
 800066a:	19c9      	adds	r1, r1, r7
 800066c:	018c      	lsls	r4, r1, #6
 800066e:	1e67      	subs	r7, r4, #1
 8000670:	41bc      	sbcs	r4, r7
 8000672:	0c12      	lsrs	r2, r2, #16
 8000674:	0e89      	lsrs	r1, r1, #26
 8000676:	1812      	adds	r2, r2, r0
 8000678:	430c      	orrs	r4, r1
 800067a:	0192      	lsls	r2, r2, #6
 800067c:	4314      	orrs	r4, r2
 800067e:	0112      	lsls	r2, r2, #4
 8000680:	d50e      	bpl.n	80006a0 <__aeabi_fmul+0x250>
 8000682:	2301      	movs	r3, #1
 8000684:	0862      	lsrs	r2, r4, #1
 8000686:	401c      	ands	r4, r3
 8000688:	4314      	orrs	r4, r2
 800068a:	e749      	b.n	8000520 <__aeabi_fmul+0xd0>
 800068c:	003e      	movs	r6, r7
 800068e:	46a1      	mov	r9, r4
 8000690:	2280      	movs	r2, #128	@ 0x80
 8000692:	464b      	mov	r3, r9
 8000694:	03d2      	lsls	r2, r2, #15
 8000696:	431a      	orrs	r2, r3
 8000698:	0252      	lsls	r2, r2, #9
 800069a:	20ff      	movs	r0, #255	@ 0xff
 800069c:	0a52      	lsrs	r2, r2, #9
 800069e:	e714      	b.n	80004ca <__aeabi_fmul+0x7a>
 80006a0:	001d      	movs	r5, r3
 80006a2:	e73d      	b.n	8000520 <__aeabi_fmul+0xd0>
 80006a4:	0192      	lsls	r2, r2, #6
 80006a6:	2000      	movs	r0, #0
 80006a8:	0a52      	lsrs	r2, r2, #9
 80006aa:	e70e      	b.n	80004ca <__aeabi_fmul+0x7a>
 80006ac:	290f      	cmp	r1, #15
 80006ae:	d1ed      	bne.n	800068c <__aeabi_fmul+0x23c>
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	464b      	mov	r3, r9
 80006b4:	03d2      	lsls	r2, r2, #15
 80006b6:	4213      	tst	r3, r2
 80006b8:	d0ea      	beq.n	8000690 <__aeabi_fmul+0x240>
 80006ba:	4214      	tst	r4, r2
 80006bc:	d1e8      	bne.n	8000690 <__aeabi_fmul+0x240>
 80006be:	003e      	movs	r6, r7
 80006c0:	20ff      	movs	r0, #255	@ 0xff
 80006c2:	4322      	orrs	r2, r4
 80006c4:	e701      	b.n	80004ca <__aeabi_fmul+0x7a>
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	f7ffffff 	.word	0xf7ffffff

080006cc <__aeabi_i2f>:
 80006cc:	b570      	push	{r4, r5, r6, lr}
 80006ce:	2800      	cmp	r0, #0
 80006d0:	d013      	beq.n	80006fa <__aeabi_i2f+0x2e>
 80006d2:	17c3      	asrs	r3, r0, #31
 80006d4:	18c5      	adds	r5, r0, r3
 80006d6:	405d      	eors	r5, r3
 80006d8:	0fc4      	lsrs	r4, r0, #31
 80006da:	0028      	movs	r0, r5
 80006dc:	f000 f884 	bl	80007e8 <__clzsi2>
 80006e0:	239e      	movs	r3, #158	@ 0x9e
 80006e2:	0001      	movs	r1, r0
 80006e4:	1a1b      	subs	r3, r3, r0
 80006e6:	2b96      	cmp	r3, #150	@ 0x96
 80006e8:	dc0f      	bgt.n	800070a <__aeabi_i2f+0x3e>
 80006ea:	2808      	cmp	r0, #8
 80006ec:	d034      	beq.n	8000758 <__aeabi_i2f+0x8c>
 80006ee:	3908      	subs	r1, #8
 80006f0:	408d      	lsls	r5, r1
 80006f2:	026d      	lsls	r5, r5, #9
 80006f4:	0a6d      	lsrs	r5, r5, #9
 80006f6:	b2d8      	uxtb	r0, r3
 80006f8:	e002      	b.n	8000700 <__aeabi_i2f+0x34>
 80006fa:	2400      	movs	r4, #0
 80006fc:	2000      	movs	r0, #0
 80006fe:	2500      	movs	r5, #0
 8000700:	05c0      	lsls	r0, r0, #23
 8000702:	4328      	orrs	r0, r5
 8000704:	07e4      	lsls	r4, r4, #31
 8000706:	4320      	orrs	r0, r4
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	2b99      	cmp	r3, #153	@ 0x99
 800070c:	dc16      	bgt.n	800073c <__aeabi_i2f+0x70>
 800070e:	1f42      	subs	r2, r0, #5
 8000710:	2805      	cmp	r0, #5
 8000712:	d000      	beq.n	8000716 <__aeabi_i2f+0x4a>
 8000714:	4095      	lsls	r5, r2
 8000716:	002a      	movs	r2, r5
 8000718:	4811      	ldr	r0, [pc, #68]	@ (8000760 <__aeabi_i2f+0x94>)
 800071a:	4002      	ands	r2, r0
 800071c:	076e      	lsls	r6, r5, #29
 800071e:	d009      	beq.n	8000734 <__aeabi_i2f+0x68>
 8000720:	260f      	movs	r6, #15
 8000722:	4035      	ands	r5, r6
 8000724:	2d04      	cmp	r5, #4
 8000726:	d005      	beq.n	8000734 <__aeabi_i2f+0x68>
 8000728:	3204      	adds	r2, #4
 800072a:	0155      	lsls	r5, r2, #5
 800072c:	d502      	bpl.n	8000734 <__aeabi_i2f+0x68>
 800072e:	239f      	movs	r3, #159	@ 0x9f
 8000730:	4002      	ands	r2, r0
 8000732:	1a5b      	subs	r3, r3, r1
 8000734:	0192      	lsls	r2, r2, #6
 8000736:	0a55      	lsrs	r5, r2, #9
 8000738:	b2d8      	uxtb	r0, r3
 800073a:	e7e1      	b.n	8000700 <__aeabi_i2f+0x34>
 800073c:	2205      	movs	r2, #5
 800073e:	1a12      	subs	r2, r2, r0
 8000740:	0028      	movs	r0, r5
 8000742:	40d0      	lsrs	r0, r2
 8000744:	0002      	movs	r2, r0
 8000746:	0008      	movs	r0, r1
 8000748:	301b      	adds	r0, #27
 800074a:	4085      	lsls	r5, r0
 800074c:	0028      	movs	r0, r5
 800074e:	1e45      	subs	r5, r0, #1
 8000750:	41a8      	sbcs	r0, r5
 8000752:	4302      	orrs	r2, r0
 8000754:	0015      	movs	r5, r2
 8000756:	e7de      	b.n	8000716 <__aeabi_i2f+0x4a>
 8000758:	026d      	lsls	r5, r5, #9
 800075a:	2096      	movs	r0, #150	@ 0x96
 800075c:	0a6d      	lsrs	r5, r5, #9
 800075e:	e7cf      	b.n	8000700 <__aeabi_i2f+0x34>
 8000760:	fbffffff 	.word	0xfbffffff

08000764 <__aeabi_ui2f>:
 8000764:	b570      	push	{r4, r5, r6, lr}
 8000766:	1e04      	subs	r4, r0, #0
 8000768:	d00e      	beq.n	8000788 <__aeabi_ui2f+0x24>
 800076a:	f000 f83d 	bl	80007e8 <__clzsi2>
 800076e:	239e      	movs	r3, #158	@ 0x9e
 8000770:	0001      	movs	r1, r0
 8000772:	1a1b      	subs	r3, r3, r0
 8000774:	2b96      	cmp	r3, #150	@ 0x96
 8000776:	dc0c      	bgt.n	8000792 <__aeabi_ui2f+0x2e>
 8000778:	2808      	cmp	r0, #8
 800077a:	d02f      	beq.n	80007dc <__aeabi_ui2f+0x78>
 800077c:	3908      	subs	r1, #8
 800077e:	408c      	lsls	r4, r1
 8000780:	0264      	lsls	r4, r4, #9
 8000782:	0a64      	lsrs	r4, r4, #9
 8000784:	b2d8      	uxtb	r0, r3
 8000786:	e001      	b.n	800078c <__aeabi_ui2f+0x28>
 8000788:	2000      	movs	r0, #0
 800078a:	2400      	movs	r4, #0
 800078c:	05c0      	lsls	r0, r0, #23
 800078e:	4320      	orrs	r0, r4
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	2b99      	cmp	r3, #153	@ 0x99
 8000794:	dc16      	bgt.n	80007c4 <__aeabi_ui2f+0x60>
 8000796:	1f42      	subs	r2, r0, #5
 8000798:	2805      	cmp	r0, #5
 800079a:	d000      	beq.n	800079e <__aeabi_ui2f+0x3a>
 800079c:	4094      	lsls	r4, r2
 800079e:	0022      	movs	r2, r4
 80007a0:	4810      	ldr	r0, [pc, #64]	@ (80007e4 <__aeabi_ui2f+0x80>)
 80007a2:	4002      	ands	r2, r0
 80007a4:	0765      	lsls	r5, r4, #29
 80007a6:	d009      	beq.n	80007bc <__aeabi_ui2f+0x58>
 80007a8:	250f      	movs	r5, #15
 80007aa:	402c      	ands	r4, r5
 80007ac:	2c04      	cmp	r4, #4
 80007ae:	d005      	beq.n	80007bc <__aeabi_ui2f+0x58>
 80007b0:	3204      	adds	r2, #4
 80007b2:	0154      	lsls	r4, r2, #5
 80007b4:	d502      	bpl.n	80007bc <__aeabi_ui2f+0x58>
 80007b6:	239f      	movs	r3, #159	@ 0x9f
 80007b8:	4002      	ands	r2, r0
 80007ba:	1a5b      	subs	r3, r3, r1
 80007bc:	0192      	lsls	r2, r2, #6
 80007be:	0a54      	lsrs	r4, r2, #9
 80007c0:	b2d8      	uxtb	r0, r3
 80007c2:	e7e3      	b.n	800078c <__aeabi_ui2f+0x28>
 80007c4:	0002      	movs	r2, r0
 80007c6:	0020      	movs	r0, r4
 80007c8:	321b      	adds	r2, #27
 80007ca:	4090      	lsls	r0, r2
 80007cc:	0002      	movs	r2, r0
 80007ce:	1e50      	subs	r0, r2, #1
 80007d0:	4182      	sbcs	r2, r0
 80007d2:	2005      	movs	r0, #5
 80007d4:	1a40      	subs	r0, r0, r1
 80007d6:	40c4      	lsrs	r4, r0
 80007d8:	4314      	orrs	r4, r2
 80007da:	e7e0      	b.n	800079e <__aeabi_ui2f+0x3a>
 80007dc:	0264      	lsls	r4, r4, #9
 80007de:	2096      	movs	r0, #150	@ 0x96
 80007e0:	0a64      	lsrs	r4, r4, #9
 80007e2:	e7d3      	b.n	800078c <__aeabi_ui2f+0x28>
 80007e4:	fbffffff 	.word	0xfbffffff

080007e8 <__clzsi2>:
 80007e8:	211c      	movs	r1, #28
 80007ea:	2301      	movs	r3, #1
 80007ec:	041b      	lsls	r3, r3, #16
 80007ee:	4298      	cmp	r0, r3
 80007f0:	d301      	bcc.n	80007f6 <__clzsi2+0xe>
 80007f2:	0c00      	lsrs	r0, r0, #16
 80007f4:	3910      	subs	r1, #16
 80007f6:	0a1b      	lsrs	r3, r3, #8
 80007f8:	4298      	cmp	r0, r3
 80007fa:	d301      	bcc.n	8000800 <__clzsi2+0x18>
 80007fc:	0a00      	lsrs	r0, r0, #8
 80007fe:	3908      	subs	r1, #8
 8000800:	091b      	lsrs	r3, r3, #4
 8000802:	4298      	cmp	r0, r3
 8000804:	d301      	bcc.n	800080a <__clzsi2+0x22>
 8000806:	0900      	lsrs	r0, r0, #4
 8000808:	3904      	subs	r1, #4
 800080a:	a202      	add	r2, pc, #8	@ (adr r2, 8000814 <__clzsi2+0x2c>)
 800080c:	5c10      	ldrb	r0, [r2, r0]
 800080e:	1840      	adds	r0, r0, r1
 8000810:	4770      	bx	lr
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	02020304 	.word	0x02020304
 8000818:	01010101 	.word	0x01010101
	...

08000824 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000824:	480d      	ldr	r0, [pc, #52]	@ (800085c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000826:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000828:	f002 ff38 	bl	800369c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800082c:	480c      	ldr	r0, [pc, #48]	@ (8000860 <LoopForever+0x6>)
  ldr r1, =_edata
 800082e:	490d      	ldr	r1, [pc, #52]	@ (8000864 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000830:	4a0d      	ldr	r2, [pc, #52]	@ (8000868 <LoopForever+0xe>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a0a      	ldr	r2, [pc, #40]	@ (800086c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000844:	4c0a      	ldr	r4, [pc, #40]	@ (8000870 <LoopForever+0x16>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000852:	f005 fed7 	bl	8006604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000856:	f000 fb9b 	bl	8000f90 <main>

0800085a <LoopForever>:

LoopForever:
    b LoopForever
 800085a:	e7fe      	b.n	800085a <LoopForever>
  ldr   r0, =_estack
 800085c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000864:	200004a0 	.word	0x200004a0
  ldr r2, =_sidata
 8000868:	080074a0 	.word	0x080074a0
  ldr r2, =_sbss
 800086c:	200004a0 	.word	0x200004a0
  ldr r4, =_ebss
 8000870:	20000854 	.word	0x20000854

08000874 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <ADC1_IRQHandler>
	...

08000878 <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000878:	b510      	push	{r4, lr}
 800087a:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->ASPEPIp);
 800087c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800087e:	6940      	ldr	r0, [r0, #20]
 8000880:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000882:	2200      	movs	r2, #0
 8000884:	234c      	movs	r3, #76	@ 0x4c
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
    /* Configure UART to receive first packet*/
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000886:	0021      	movs	r1, r4
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000888:	52e2      	strh	r2, [r4, r3]
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 800088a:	3b04      	subs	r3, #4
 800088c:	54e2      	strb	r2, [r4, r3]
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800088e:	6960      	ldr	r0, [r4, #20]
 8000890:	2204      	movs	r2, #4
 8000892:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000894:	311c      	adds	r1, #28
 8000896:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000898:	bd10      	pop	{r4, pc}
 800089a:	46c0      	nop			@ (mov r8, r8)

0800089c <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 800089c:	b570      	push	{r4, r5, r6, lr}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 800089e:	780a      	ldrb	r2, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 80008a0:	790b      	ldrb	r3, [r1, #4]
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80008a2:	01d2      	lsls	r2, r2, #7
             | (((uint32_t)capabilities->version) << 4U)
 80008a4:	011b      	lsls	r3, r3, #4
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80008a6:	4313      	orrs	r3, r2
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 80008a8:	784a      	ldrb	r2, [r1, #1]
{
 80008aa:	0004      	movs	r4, r0
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 80008ac:	0212      	lsls	r2, r2, #8
 80008ae:	4313      	orrs	r3, r2
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 80008b0:	788a      	ldrb	r2, [r1, #2]
  header &= 0x0fffffffU;
 80008b2:	2005      	movs	r0, #5
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 80008b4:	0392      	lsls	r2, r2, #14
 80008b6:	4313      	orrs	r3, r2
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80008b8:	78ca      	ldrb	r2, [r1, #3]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80008ba:	21ff      	movs	r1, #255	@ 0xff
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80008bc:	0552      	lsls	r2, r2, #21
 80008be:	4313      	orrs	r3, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80008c0:	4d16      	ldr	r5, [pc, #88]	@ (800091c <ASPEP_sendBeacon+0x80>)
 80008c2:	4019      	ands	r1, r3
 80008c4:	4301      	orrs	r1, r0
  header &= 0x0fffffffU;
 80008c6:	011a      	lsls	r2, r3, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80008c8:	5c69      	ldrb	r1, [r5, r1]
 80008ca:	0b16      	lsrs	r6, r2, #12
 80008cc:	4071      	eors	r1, r6
 80008ce:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80008d0:	5c69      	ldrb	r1, [r5, r1]
 80008d2:	0d16      	lsrs	r6, r2, #20
 80008d4:	4071      	eors	r1, r6
 80008d6:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80008d8:	5c69      	ldrb	r1, [r5, r1]
 80008da:	0f12      	lsrs	r2, r2, #28
 80008dc:	404a      	eors	r2, r1
 80008de:	4910      	ldr	r1, [pc, #64]	@ (8000920 <ASPEP_sendBeacon+0x84>)
  *headerPtr |= (uint32_t)crc << 28;
 80008e0:	5c8a      	ldrb	r2, [r1, r2]
 80008e2:	0712      	lsls	r2, r2, #28
 80008e4:	4313      	orrs	r3, r2
 80008e6:	4303      	orrs	r3, r0
 80008e8:	6223      	str	r3, [r4, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ea:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80008ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d007      	beq.n	8000902 <ASPEP_sendBeacon+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 80008f2:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80008f4:	2324      	movs	r3, #36	@ 0x24
 80008f6:	5ce2      	ldrb	r2, [r4, r3]
 80008f8:	2a00      	cmp	r2, #0
 80008fa:	d101      	bne.n	8000900 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80008fc:	3202      	adds	r2, #2
 80008fe:	54e2      	strb	r2, [r4, r3]
}
 8000900:	bd70      	pop	{r4, r5, r6, pc}
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000902:	0021      	movs	r1, r4
        pHandle->ctrlBuffer.state = readLock;
 8000904:	2203      	movs	r2, #3
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000906:	3120      	adds	r1, #32
        pHandle->ctrlBuffer.state = readLock;
 8000908:	3324      	adds	r3, #36	@ 0x24
 800090a:	54e2      	strb	r2, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800090c:	6321      	str	r1, [r4, #48]	@ 0x30
 800090e:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000910:	6960      	ldr	r0, [r4, #20]
 8000912:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000914:	3201      	adds	r2, #1
 8000916:	4798      	blx	r3
 8000918:	e7f2      	b.n	8000900 <ASPEP_sendBeacon+0x64>
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	08006688 	.word	0x08006688
 8000920:	08006678 	.word	0x08006678

08000924 <ASPEP_sendPing>:
{
 8000924:	000b      	movs	r3, r1
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000926:	2148      	movs	r1, #72	@ 0x48
{
 8000928:	b570      	push	{r4, r5, r6, lr}
 800092a:	0004      	movs	r4, r0
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 800092c:	5c41      	ldrb	r1, [r0, r1]
                   | (uint32_t)((uint32_t)Nbit << 6U)
 800092e:	2001      	movs	r0, #1
 8000930:	4008      	ands	r0, r1
    *packet = PING | (uint32_t)((uint32_t)cBit << 4U)
 8000932:	0119      	lsls	r1, r3, #4
                   | (uint32_t)((uint32_t)cBit << 5U)
 8000934:	015b      	lsls	r3, r3, #5
 8000936:	4319      	orrs	r1, r3
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000938:	0313      	lsls	r3, r2, #12
 800093a:	430b      	orrs	r3, r1
                   | (uint32_t)((uint32_t)Nbit << 6U)
 800093c:	0182      	lsls	r2, r0, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800093e:	4313      	orrs	r3, r2
    uint8_t ipID = pHandle->liid & 0xFU;
 8000940:	224b      	movs	r2, #75	@ 0x4b
 8000942:	5ca1      	ldrb	r1, [r4, r2]
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000944:	3a3c      	subs	r2, #60	@ 0x3c
                   | (uint32_t)((uint32_t)Nbit << 7U)
 8000946:	01c0      	lsls	r0, r0, #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000948:	400a      	ands	r2, r1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800094a:	4303      	orrs	r3, r0
                   | (uint32_t)((uint32_t)ipID << 8U)
 800094c:	0212      	lsls	r2, r2, #8
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800094e:	4313      	orrs	r3, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000950:	22ff      	movs	r2, #255	@ 0xff
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000952:	2506      	movs	r5, #6
 8000954:	0018      	movs	r0, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000956:	4916      	ldr	r1, [pc, #88]	@ (80009b0 <ASPEP_sendPing+0x8c>)
 8000958:	401a      	ands	r2, r3
 800095a:	432a      	orrs	r2, r5
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800095c:	5c8a      	ldrb	r2, [r1, r2]
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800095e:	4328      	orrs	r0, r5
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000960:	0a1d      	lsrs	r5, r3, #8
 8000962:	406a      	eors	r2, r5
 8000964:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000966:	5c8a      	ldrb	r2, [r1, r2]
 8000968:	0c1d      	lsrs	r5, r3, #16
 800096a:	406a      	eors	r2, r5
 800096c:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800096e:	5c8a      	ldrb	r2, [r1, r2]
 8000970:	0e1b      	lsrs	r3, r3, #24
 8000972:	4053      	eors	r3, r2
 8000974:	4a0f      	ldr	r2, [pc, #60]	@ (80009b4 <ASPEP_sendPing+0x90>)
  *headerPtr |= (uint32_t)crc << 28;
 8000976:	5cd3      	ldrb	r3, [r2, r3]
 8000978:	071b      	lsls	r3, r3, #28
 800097a:	4303      	orrs	r3, r0
 800097c:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800097e:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000980:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000982:	2b00      	cmp	r3, #0
 8000984:	d007      	beq.n	8000996 <ASPEP_sendPing+0x72>
  __ASM volatile ("cpsie i" : : : "memory");
 8000986:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000988:	2324      	movs	r3, #36	@ 0x24
 800098a:	5ce2      	ldrb	r2, [r4, r3]
 800098c:	2a00      	cmp	r2, #0
 800098e:	d101      	bne.n	8000994 <ASPEP_sendPing+0x70>
          pHandle->ctrlBuffer.state = pending;
 8000990:	3202      	adds	r2, #2
 8000992:	54e2      	strb	r2, [r4, r3]
}
 8000994:	bd70      	pop	{r4, r5, r6, pc}
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000996:	0021      	movs	r1, r4
        pHandle->ctrlBuffer.state = readLock;
 8000998:	2203      	movs	r2, #3
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800099a:	3120      	adds	r1, #32
        pHandle->ctrlBuffer.state = readLock;
 800099c:	3324      	adds	r3, #36	@ 0x24
 800099e:	54e2      	strb	r2, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80009a0:	6321      	str	r1, [r4, #48]	@ 0x30
 80009a2:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 80009a4:	6960      	ldr	r0, [r4, #20]
 80009a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80009a8:	3201      	adds	r2, #1
 80009aa:	4798      	blx	r3
 80009ac:	e7f2      	b.n	8000994 <ASPEP_sendPing+0x70>
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	08006688 	.word	0x08006688
 80009b4:	08006678 	.word	0x08006678

080009b8 <ASPEP_getBuffer>:
{
 80009b8:	0003      	movs	r3, r0
 80009ba:	b510      	push	{r4, lr}
        result = false;
 80009bc:	2000      	movs	r0, #0
    if (MCTL_SYNC == syncAsync)
 80009be:	2a0a      	cmp	r2, #10
 80009c0:	d000      	beq.n	80009c4 <ASPEP_getBuffer+0xc>
}
 80009c2:	bd10      	pop	{r4, pc}
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 80009c4:	3224      	adds	r2, #36	@ 0x24
 80009c6:	5c9c      	ldrb	r4, [r3, r2]
 80009c8:	2c01      	cmp	r4, #1
 80009ca:	d8fa      	bhi.n	80009c2 <ASPEP_getBuffer+0xa>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80009cc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80009ce:	3004      	adds	r0, #4
 80009d0:	6008      	str	r0, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 80009d2:	2101      	movs	r1, #1
  bool result = true;
 80009d4:	2001      	movs	r0, #1
        pHandle->syncBuffer.state = writeLock;
 80009d6:	5499      	strb	r1, [r3, r2]
 80009d8:	e7f3      	b.n	80009c2 <ASPEP_getBuffer+0xa>
 80009da:	46c0      	nop			@ (mov r8, r8)

080009dc <ASPEP_sendPacket>:
{
 80009dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009de:	46c6      	mov	lr, r8
 80009e0:	0004      	movs	r4, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80009e2:	204c      	movs	r0, #76	@ 0x4c
{
 80009e4:	b500      	push	{lr}
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80009e6:	5c25      	ldrb	r5, [r4, r0]
      result = ASPEP_NOT_CONNECTED;
 80009e8:	384a      	subs	r0, #74	@ 0x4a
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80009ea:	2d02      	cmp	r5, #2
 80009ec:	d002      	beq.n	80009f4 <ASPEP_sendPacket+0x18>
}
 80009ee:	bc80      	pop	{r7}
 80009f0:	46b8      	mov	r8, r7
 80009f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 80009f4:	0110      	lsls	r0, r2, #4
 80009f6:	4318      	orrs	r0, r3
      *header = tmpHeader;
 80009f8:	1f0e      	subs	r6, r1, #4
 80009fa:	6030      	str	r0, [r6, #0]
      if (1U == pHandle->Capabilities.DATA_CRC)
 80009fc:	2054      	movs	r0, #84	@ 0x54
 80009fe:	5c20      	ldrb	r0, [r4, r0]
 8000a00:	2801      	cmp	r0, #1
 8000a02:	d106      	bne.n	8000a12 <ASPEP_sendPacket+0x36>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000a04:	30c9      	adds	r0, #201	@ 0xc9
 8000a06:	5488      	strb	r0, [r1, r2]
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 8000a08:	1889      	adds	r1, r1, r2
 8000a0a:	3034      	adds	r0, #52	@ 0x34
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000a0c:	3202      	adds	r2, #2
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 8000a0e:	7048      	strb	r0, [r1, #1]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000a10:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8000a12:	2b0a      	cmp	r3, #10
 8000a14:	d105      	bne.n	8000a22 <ASPEP_sendPacket+0x46>
        if (pSupHandle->MCP_PacketAvailable)
 8000a16:	7c21      	ldrb	r1, [r4, #16]
          result = MCTL_SYNC_NOT_EXPECTED;
 8000a18:	2001      	movs	r0, #1
        if (pSupHandle->MCP_PacketAvailable)
 8000a1a:	2900      	cmp	r1, #0
 8000a1c:	d0e7      	beq.n	80009ee <ASPEP_sendPacket+0x12>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 8000a1e:	2100      	movs	r1, #0
 8000a20:	7421      	strb	r1, [r4, #16]
  uint32_t header = *headerPtr;
 8000a22:	6837      	ldr	r7, [r6, #0]
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000a24:	3204      	adds	r2, #4
  header &= 0x0fffffffU;
 8000a26:	0138      	lsls	r0, r7, #4
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000a28:	b292      	uxth	r2, r2
 8000a2a:	4694      	mov	ip, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000a2c:	21ff      	movs	r1, #255	@ 0xff
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000a2e:	0b02      	lsrs	r2, r0, #12
 8000a30:	4690      	mov	r8, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000a32:	4d24      	ldr	r5, [pc, #144]	@ (8000ac4 <ASPEP_sendPacket+0xe8>)
 8000a34:	4039      	ands	r1, r7
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000a36:	002a      	movs	r2, r5
 8000a38:	5c69      	ldrb	r1, [r5, r1]
 8000a3a:	4645      	mov	r5, r8
 8000a3c:	4069      	eors	r1, r5
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000a3e:	0d05      	lsrs	r5, r0, #20
 8000a40:	46a8      	mov	r8, r5
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000a42:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000a44:	5c55      	ldrb	r5, [r2, r1]
 8000a46:	4641      	mov	r1, r8
 8000a48:	404d      	eors	r5, r1
 8000a4a:	b2ed      	uxtb	r5, r5
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000a4c:	5d51      	ldrb	r1, [r2, r5]
 8000a4e:	0f00      	lsrs	r0, r0, #28
 8000a50:	4041      	eors	r1, r0
 8000a52:	481d      	ldr	r0, [pc, #116]	@ (8000ac8 <ASPEP_sendPacket+0xec>)
  *headerPtr |= (uint32_t)crc << 28;
 8000a54:	5c40      	ldrb	r0, [r0, r1]
 8000a56:	0700      	lsls	r0, r0, #28
 8000a58:	4338      	orrs	r0, r7
 8000a5a:	6030      	str	r0, [r6, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000a5e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8000a60:	2900      	cmp	r1, #0
 8000a62:	d017      	beq.n	8000a94 <ASPEP_sendPacket+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a64:	b662      	cpsie	i
      if (MCTL_SYNC == dataType)
 8000a66:	2b0a      	cmp	r3, #10
 8000a68:	d009      	beq.n	8000a7e <ASPEP_sendPacket+0xa2>
      else if(ASPEP_CTRL == dataType)
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d105      	bne.n	8000a7a <ASPEP_sendPacket+0x9e>
        if (pHandle->ctrlBuffer.state != available)
 8000a6e:	3324      	adds	r3, #36	@ 0x24
 8000a70:	5ce2      	ldrb	r2, [r4, r3]
 8000a72:	2a00      	cmp	r2, #0
 8000a74:	d124      	bne.n	8000ac0 <ASPEP_sendPacket+0xe4>
          pHandle->ctrlBuffer.state = pending;
 8000a76:	3202      	adds	r2, #2
 8000a78:	54e2      	strb	r2, [r4, r3]
  uint8_t result = ASPEP_OK;
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	e7b7      	b.n	80009ee <ASPEP_sendPacket+0x12>
        if (pHandle -> syncBuffer.state != writeLock)
 8000a7e:	3324      	adds	r3, #36	@ 0x24
 8000a80:	5ce1      	ldrb	r1, [r4, r3]
          result = ASPEP_BUFFER_ERROR;
 8000a82:	2003      	movs	r0, #3
        if (pHandle -> syncBuffer.state != writeLock)
 8000a84:	2901      	cmp	r1, #1
 8000a86:	d1b2      	bne.n	80009ee <ASPEP_sendPacket+0x12>
          pHandle->syncBuffer.state = pending;
 8000a88:	3101      	adds	r1, #1
 8000a8a:	54e1      	strb	r1, [r4, r3]
          pHandle->syncBuffer.length = bufferLength;
 8000a8c:	4663      	mov	r3, ip
  uint8_t result = ASPEP_OK;
 8000a8e:	2000      	movs	r0, #0
          pHandle->syncBuffer.length = bufferLength;
 8000a90:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8000a92:	e7ac      	b.n	80009ee <ASPEP_sendPacket+0x12>
      if (MCTL_SYNC == dataType)
 8000a94:	2b0a      	cmp	r3, #10
 8000a96:	d00d      	beq.n	8000ab4 <ASPEP_sendPacket+0xd8>
        pHandle->ctrlBuffer.state = readLock;
 8000a98:	2324      	movs	r3, #36	@ 0x24
 8000a9a:	2103      	movs	r1, #3
 8000a9c:	54e1      	strb	r1, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000a9e:	0023      	movs	r3, r4
 8000aa0:	3320      	adds	r3, #32
 8000aa2:	6323      	str	r3, [r4, #48]	@ 0x30
 8000aa4:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000aa6:	6960      	ldr	r0, [r4, #20]
 8000aa8:	4662      	mov	r2, ip
 8000aaa:	0031      	movs	r1, r6
 8000aac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000aae:	4798      	blx	r3
  uint8_t result = ASPEP_OK;
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	e79c      	b.n	80009ee <ASPEP_sendPacket+0x12>
        pHandle->syncBuffer.state = readLock;
 8000ab4:	3324      	adds	r3, #36	@ 0x24
 8000ab6:	3103      	adds	r1, #3
 8000ab8:	54e1      	strb	r1, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000aba:	0023      	movs	r3, r4
 8000abc:	3328      	adds	r3, #40	@ 0x28
 8000abe:	e7f0      	b.n	8000aa2 <ASPEP_sendPacket+0xc6>
          result = ASPEP_BUFFER_ERROR;
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	e794      	b.n	80009ee <ASPEP_sendPacket+0x12>
 8000ac4:	08006688 	.word	0x08006688
 8000ac8:	08006678 	.word	0x08006678

08000acc <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000acc:	b570      	push	{r4, r5, r6, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000ace:	2524      	movs	r5, #36	@ 0x24
 8000ad0:	5d43      	ldrb	r3, [r0, r5]
{
 8000ad2:	0004      	movs	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8000ad4:	2b03      	cmp	r3, #3
 8000ad6:	d012      	beq.n	8000afe <ASPEP_HWDataTransmittedIT+0x32>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000ad8:	2100      	movs	r1, #0
 8000ada:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8000adc:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000ade:	222e      	movs	r2, #46	@ 0x2e
 8000ae0:	5c82      	ldrb	r2, [r0, r2]
 8000ae2:	2a02      	cmp	r2, #2
 8000ae4:	d011      	beq.n	8000b0a <ASPEP_HWDataTransmittedIT+0x3e>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d11b      	bne.n	8000b22 <ASPEP_HWDataTransmittedIT+0x56>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000aea:	0001      	movs	r1, r0
 8000aec:	3120      	adds	r1, #32
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000aee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000af0:	6301      	str	r1, [r0, #48]	@ 0x30
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000af2:	2204      	movs	r2, #4
 8000af4:	6940      	ldr	r0, [r0, #20]
 8000af6:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000af8:	2303      	movs	r3, #3
 8000afa:	5563      	strb	r3, [r4, r5]
      pHandle->lockBuffer = NULL;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000afc:	bd70      	pop	{r4, r5, r6, pc}
      pHandle->ctrlBuffer.state = available;
 8000afe:	2300      	movs	r3, #0
 8000b00:	5543      	strb	r3, [r0, r5]
    if (pHandle->syncBuffer.state == pending)
 8000b02:	332e      	adds	r3, #46	@ 0x2e
 8000b04:	5cc3      	ldrb	r3, [r0, r3]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d10b      	bne.n	8000b22 <ASPEP_HWDataTransmittedIT+0x56>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000b0a:	0023      	movs	r3, r4
 8000b0c:	3328      	adds	r3, #40	@ 0x28
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000b0e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000b10:	6323      	str	r3, [r4, #48]	@ 0x30
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000b12:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000b14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b16:	6960      	ldr	r0, [r4, #20]
 8000b18:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000b1a:	232e      	movs	r3, #46	@ 0x2e
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	54e2      	strb	r2, [r4, r3]
 8000b20:	e7ec      	b.n	8000afc <ASPEP_HWDataTransmittedIT+0x30>
      pHandle->lockBuffer = NULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	6323      	str	r3, [r4, #48]	@ 0x30
}
 8000b26:	e7e9      	b.n	8000afc <ASPEP_HWDataTransmittedIT+0x30>

08000b28 <ASPEP_RXframeProcess>:
  * @param  *packetLength Length of the packet to be processed
  *
  * @return Returns the buffer of data transmitted by the MCP controller device
  */
uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8000b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b2a:	46de      	mov	lr, fp
 8000b2c:	4657      	mov	r7, sl
 8000b2e:	464e      	mov	r6, r9
 8000b30:	4645      	mov	r5, r8
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
 8000b32:	2200      	movs	r2, #0
{
 8000b34:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000b36:	69c3      	ldr	r3, [r0, #28]
    *packetLength = 0;
 8000b38:	800a      	strh	r2, [r1, #0]
    if (pHandle->NewPacketAvailable)
 8000b3a:	3249      	adds	r2, #73	@ 0x49
{
 8000b3c:	0004      	movs	r4, r0
    if (pHandle->NewPacketAvailable)
 8000b3e:	5c80      	ldrb	r0, [r0, r2]
{
 8000b40:	b085      	sub	sp, #20
    if (pHandle->NewPacketAvailable)
 8000b42:	2800      	cmp	r0, #0
 8000b44:	d011      	beq.n	8000b6a <ASPEP_RXframeProcess+0x42>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000b46:	2000      	movs	r0, #0
      switch (pHandle->ASPEP_State)
 8000b48:	254c      	movs	r5, #76	@ 0x4c
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000b4a:	54a0      	strb	r0, [r4, r2]
      switch (pHandle->ASPEP_State)
 8000b4c:	5d62      	ldrb	r2, [r4, r5]
 8000b4e:	2a01      	cmp	r2, #1
 8000b50:	d05f      	beq.n	8000c12 <ASPEP_RXframeProcess+0xea>
 8000b52:	2a02      	cmp	r2, #2
 8000b54:	d022      	beq.n	8000b9c <ASPEP_RXframeProcess+0x74>
 8000b56:	2a00      	cmp	r2, #0
 8000b58:	d014      	beq.n	8000b84 <ASPEP_RXframeProcess+0x5c>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000b5a:	2500      	movs	r5, #0

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000b5c:	0021      	movs	r1, r4
 8000b5e:	2204      	movs	r2, #4
 8000b60:	6960      	ldr	r0, [r4, #20]
 8000b62:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000b64:	311c      	adds	r1, #28
 8000b66:	4798      	blx	r3
 8000b68:	e004      	b.n	8000b74 <ASPEP_RXframeProcess+0x4c>
    }
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000b6a:	234a      	movs	r3, #74	@ 0x4a
 8000b6c:	5ce2      	ldrb	r2, [r4, r3]
 8000b6e:	2a00      	cmp	r2, #0
 8000b70:	d128      	bne.n	8000bc4 <ASPEP_RXframeProcess+0x9c>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000b72:	2500      	movs	r5, #0
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 8000b74:	0028      	movs	r0, r5
 8000b76:	b005      	add	sp, #20
 8000b78:	bcf0      	pop	{r4, r5, r6, r7}
 8000b7a:	46bb      	mov	fp, r7
 8000b7c:	46b2      	mov	sl, r6
 8000b7e:	46a9      	mov	r9, r5
 8000b80:	46a0      	mov	r8, r4
 8000b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (BEACON == pHandle->rxPacketType)
 8000b84:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8000b86:	2a05      	cmp	r2, #5
 8000b88:	d051      	beq.n	8000c2e <ASPEP_RXframeProcess+0x106>
          else if (PING == pHandle->rxPacketType)
 8000b8a:	2a06      	cmp	r2, #6
 8000b8c:	d1e5      	bne.n	8000b5a <ASPEP_RXframeProcess+0x32>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 8000b8e:	0b1b      	lsrs	r3, r3, #12
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000b90:	2100      	movs	r1, #0
 8000b92:	0020      	movs	r0, r4
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	f7ff fec5 	bl	8000924 <ASPEP_sendPing>
 8000b9a:	e7de      	b.n	8000b5a <ASPEP_RXframeProcess+0x32>
          if (BEACON == pHandle->rxPacketType)
 8000b9c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8000b9e:	2a05      	cmp	r2, #5
 8000ba0:	d100      	bne.n	8000ba4 <ASPEP_RXframeProcess+0x7c>
 8000ba2:	e0ec      	b.n	8000d7e <ASPEP_RXframeProcess+0x256>
          else if (PING == pHandle->rxPacketType)
 8000ba4:	2a06      	cmp	r2, #6
 8000ba6:	d100      	bne.n	8000baa <ASPEP_RXframeProcess+0x82>
 8000ba8:	e14b      	b.n	8000e42 <ASPEP_RXframeProcess+0x31a>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000baa:	2a09      	cmp	r2, #9
 8000bac:	d1d5      	bne.n	8000b5a <ASPEP_RXframeProcess+0x32>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000bae:	323f      	adds	r2, #63	@ 0x3f
 8000bb0:	5ca3      	ldrb	r3, [r4, r2]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	54a3      	strb	r3, [r4, r2]
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	7423      	strb	r3, [r4, #16]
              *packetLength = pHandle->rxLengthASPEP;
 8000bba:	3343      	adds	r3, #67	@ 0x43
 8000bbc:	5ae3      	ldrh	r3, [r4, r3]
              result = pHandle->rxBuffer;
 8000bbe:	69a5      	ldr	r5, [r4, #24]
              *packetLength = pHandle->rxLengthASPEP;
 8000bc0:	800b      	strh	r3, [r1, #0]
              result = pHandle->rxBuffer;
 8000bc2:	e7cb      	b.n	8000b5c <ASPEP_RXframeProcess+0x34>
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000bc4:	2509      	movs	r5, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000bc6:	200f      	movs	r0, #15
 8000bc8:	0213      	lsls	r3, r2, #8
 8000bca:	189b      	adds	r3, r3, r2
 8000bcc:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000bce:	0a1a      	lsrs	r2, r3, #8
 8000bd0:	499f      	ldr	r1, [pc, #636]	@ (8000e50 <ASPEP_RXframeProcess+0x328>)
 8000bd2:	406a      	eors	r2, r5
 8000bd4:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000bd6:	5c8a      	ldrb	r2, [r1, r2]
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000bd8:	4318      	orrs	r0, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000bda:	0c1b      	lsrs	r3, r3, #16
 8000bdc:	4053      	eors	r3, r2
 8000bde:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000be0:	5ccb      	ldrb	r3, [r1, r3]
 8000be2:	4a9c      	ldr	r2, [pc, #624]	@ (8000e54 <ASPEP_RXframeProcess+0x32c>)
  *headerPtr |= (uint32_t)crc << 28;
 8000be4:	5cd3      	ldrb	r3, [r2, r3]
 8000be6:	071b      	lsls	r3, r3, #28
 8000be8:	4303      	orrs	r3, r0
 8000bea:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000bee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d100      	bne.n	8000bf6 <ASPEP_RXframeProcess+0xce>
 8000bf4:	e119      	b.n	8000e2a <ASPEP_RXframeProcess+0x302>
  __ASM volatile ("cpsie i" : : : "memory");
 8000bf6:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000bf8:	2324      	movs	r3, #36	@ 0x24
 8000bfa:	5ce2      	ldrb	r2, [r4, r3]
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	d101      	bne.n	8000c04 <ASPEP_RXframeProcess+0xdc>
          pHandle->ctrlBuffer.state = pending;
 8000c00:	3202      	adds	r2, #2
 8000c02:	54e2      	strb	r2, [r4, r3]
      pHandle->badPacketFlag = ASPEP_OK;
 8000c04:	234a      	movs	r3, #74	@ 0x4a
 8000c06:	2200      	movs	r2, #0
 8000c08:	54e2      	strb	r2, [r4, r3]
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 8000c0a:	6960      	ldr	r0, [r4, #20]
 8000c0c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8000c0e:	4798      	blx	r3
 8000c10:	e7af      	b.n	8000b72 <ASPEP_RXframeProcess+0x4a>
          if (BEACON == pHandle->rxPacketType)
 8000c12:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8000c14:	2a05      	cmp	r2, #5
 8000c16:	d06a      	beq.n	8000cee <ASPEP_RXframeProcess+0x1c6>
          else if (PING == pHandle->rxPacketType)
 8000c18:	2a06      	cmp	r2, #6
 8000c1a:	d19e      	bne.n	8000b5a <ASPEP_RXframeProcess+0x32>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 8000c1c:	0b1b      	lsrs	r3, r3, #12
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	2101      	movs	r1, #1
 8000c22:	0020      	movs	r0, r4
 8000c24:	f7ff fe7e 	bl	8000924 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	5563      	strb	r3, [r4, r5]
 8000c2c:	e795      	b.n	8000b5a <ASPEP_RXframeProcess+0x32>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000c2e:	213f      	movs	r1, #63	@ 0x3f
 8000c30:	7f62      	ldrb	r2, [r4, #29]
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000c32:	3533      	adds	r5, #51	@ 0x33
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000c34:	4011      	ands	r1, r2
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000c36:	0b98      	lsrs	r0, r3, #14
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000c38:	0d5a      	lsrs	r2, r3, #21
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000c3a:	4028      	ands	r0, r5
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000c3c:	4015      	ands	r5, r2
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c3e:	2254      	movs	r2, #84	@ 0x54
 8000c40:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000c42:	468c      	mov	ip, r1
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c44:	4690      	mov	r8, r2
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000c46:	2255      	movs	r2, #85	@ 0x55
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000c48:	7f26      	ldrb	r6, [r4, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000c4a:	5ca1      	ldrb	r1, [r4, r2]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000c4c:	09f6      	lsrs	r6, r6, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000c4e:	1c0a      	adds	r2, r1, #0
 8000c50:	4561      	cmp	r1, ip
 8000c52:	d900      	bls.n	8000c56 <ASPEP_RXframeProcess+0x12e>
 8000c54:	4662      	mov	r2, ip
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000c56:	2156      	movs	r1, #86	@ 0x56
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	9201      	str	r2, [sp, #4]
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000c5c:	5c62      	ldrb	r2, [r4, r1]
 8000c5e:	1c01      	adds	r1, r0, #0
 8000c60:	4691      	mov	r9, r2
 8000c62:	4290      	cmp	r0, r2
 8000c64:	d900      	bls.n	8000c68 <ASPEP_RXframeProcess+0x140>
 8000c66:	1c11      	adds	r1, r2, #0
 8000c68:	b2ca      	uxtb	r2, r1
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000c6a:	2157      	movs	r1, #87	@ 0x57
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000c6c:	9202      	str	r2, [sp, #8]
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000c6e:	5c62      	ldrb	r2, [r4, r1]
 8000c70:	1c29      	adds	r1, r5, #0
 8000c72:	4692      	mov	sl, r2
 8000c74:	4295      	cmp	r5, r2
 8000c76:	d900      	bls.n	8000c7a <ASPEP_RXframeProcess+0x152>
 8000c78:	1c11      	adds	r1, r2, #0
 8000c7a:	b2ca      	uxtb	r2, r1
 8000c7c:	9203      	str	r2, [sp, #12]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c7e:	1c31      	adds	r1, r6, #0
 8000c80:	4546      	cmp	r6, r8
 8000c82:	d900      	bls.n	8000c86 <ASPEP_RXframeProcess+0x15e>
 8000c84:	4641      	mov	r1, r8
 8000c86:	9a01      	ldr	r2, [sp, #4]
 8000c88:	0217      	lsls	r7, r2, #8
 8000c8a:	b2ca      	uxtb	r2, r1
 8000c8c:	4693      	mov	fp, r2
 8000c8e:	9a02      	ldr	r2, [sp, #8]
 8000c90:	0411      	lsls	r1, r2, #16
 8000c92:	465a      	mov	r2, fp
 8000c94:	433a      	orrs	r2, r7
 8000c96:	4693      	mov	fp, r2
 8000c98:	9a03      	ldr	r2, [sp, #12]
 8000c9a:	0617      	lsls	r7, r2, #24
 8000c9c:	465a      	mov	r2, fp
 8000c9e:	4311      	orrs	r1, r2
 8000ca0:	4339      	orrs	r1, r7
 8000ca2:	6561      	str	r1, [r4, #84]	@ 0x54
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ca4:	4546      	cmp	r6, r8
 8000ca6:	d81c      	bhi.n	8000ce2 <ASPEP_RXframeProcess+0x1ba>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000ca8:	9a01      	ldr	r2, [sp, #4]
 8000caa:	4594      	cmp	ip, r2
 8000cac:	d819      	bhi.n	8000ce2 <ASPEP_RXframeProcess+0x1ba>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000cae:	4548      	cmp	r0, r9
 8000cb0:	d817      	bhi.n	8000ce2 <ASPEP_RXframeProcess+0x1ba>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000cb2:	4555      	cmp	r5, sl
 8000cb4:	d815      	bhi.n	8000ce2 <ASPEP_RXframeProcess+0x1ba>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000cb6:	2158      	movs	r1, #88	@ 0x58
 8000cb8:	5c61      	ldrb	r1, [r4, r1]
  MasterCapabilities.version = (uint8_t)((packetHeader &0x70U)>> 4U);           /*Bits 4 to 6*/
 8000cba:	065b      	lsls	r3, r3, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000cbc:	0f5b      	lsrs	r3, r3, #29
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	d10f      	bne.n	8000ce2 <ASPEP_RXframeProcess+0x1ba>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000cc2:	9b02      	ldr	r3, [sp, #8]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000cc4:	3201      	adds	r2, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	015b      	lsls	r3, r3, #5
 8000ccc:	81a3      	strh	r3, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000cce:	9b03      	ldr	r3, [sp, #12]
 8000cd0:	019b      	lsls	r3, r3, #6
 8000cd2:	81e3      	strh	r3, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000cd4:	b2d3      	uxtb	r3, r2
 8000cd6:	2246      	movs	r2, #70	@ 0x46
 8000cd8:	015b      	lsls	r3, r3, #5
 8000cda:	52a3      	strh	r3, [r4, r2]
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000cdc:	234c      	movs	r3, #76	@ 0x4c
 8000cde:	3a45      	subs	r2, #69	@ 0x45
 8000ce0:	54e2      	strb	r2, [r4, r3]
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000ce2:	0021      	movs	r1, r4
 8000ce4:	0020      	movs	r0, r4
 8000ce6:	3154      	adds	r1, #84	@ 0x54
 8000ce8:	f7ff fdd8 	bl	800089c <ASPEP_sendBeacon>
 8000cec:	e735      	b.n	8000b5a <ASPEP_RXframeProcess+0x32>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000cee:	213f      	movs	r1, #63	@ 0x3f
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000cf0:	257f      	movs	r5, #127	@ 0x7f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000cf2:	7f62      	ldrb	r2, [r4, #29]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000cf4:	7f26      	ldrb	r6, [r4, #28]
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000cf6:	4011      	ands	r1, r2
 8000cf8:	468c      	mov	ip, r1
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000cfa:	0d5a      	lsrs	r2, r3, #21
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000cfc:	0b99      	lsrs	r1, r3, #14
 8000cfe:	4029      	ands	r1, r5
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000d00:	4015      	ands	r5, r2
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d02:	2254      	movs	r2, #84	@ 0x54
 8000d04:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000d06:	09f6      	lsrs	r6, r6, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d08:	4690      	mov	r8, r2
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000d0a:	2255      	movs	r2, #85	@ 0x55
 8000d0c:	5ca2      	ldrb	r2, [r4, r2]
 8000d0e:	1c17      	adds	r7, r2, #0
 8000d10:	4562      	cmp	r2, ip
 8000d12:	d900      	bls.n	8000d16 <ASPEP_RXframeProcess+0x1ee>
 8000d14:	4667      	mov	r7, ip
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000d16:	2256      	movs	r2, #86	@ 0x56
 8000d18:	5ca2      	ldrb	r2, [r4, r2]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000d1a:	b2ff      	uxtb	r7, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000d1c:	4691      	mov	r9, r2
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000d1e:	2257      	movs	r2, #87	@ 0x57
 8000d20:	5ca2      	ldrb	r2, [r4, r2]
 8000d22:	4692      	mov	sl, r2
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d24:	1c32      	adds	r2, r6, #0
 8000d26:	4546      	cmp	r6, r8
 8000d28:	d900      	bls.n	8000d2c <ASPEP_RXframeProcess+0x204>
 8000d2a:	4642      	mov	r2, r8
 8000d2c:	0238      	lsls	r0, r7, #8
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	4302      	orrs	r2, r0
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000d32:	1c08      	adds	r0, r1, #0
 8000d34:	4549      	cmp	r1, r9
 8000d36:	d900      	bls.n	8000d3a <ASPEP_RXframeProcess+0x212>
 8000d38:	4648      	mov	r0, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d3a:	b2c0      	uxtb	r0, r0
 8000d3c:	0400      	lsls	r0, r0, #16
 8000d3e:	9001      	str	r0, [sp, #4]
 8000d40:	4845      	ldr	r0, [pc, #276]	@ (8000e58 <ASPEP_RXframeProcess+0x330>)
 8000d42:	4002      	ands	r2, r0
 8000d44:	9801      	ldr	r0, [sp, #4]
 8000d46:	4302      	orrs	r2, r0
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000d48:	1c28      	adds	r0, r5, #0
 8000d4a:	4555      	cmp	r5, sl
 8000d4c:	d900      	bls.n	8000d50 <ASPEP_RXframeProcess+0x228>
 8000d4e:	4650      	mov	r0, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d50:	0212      	lsls	r2, r2, #8
 8000d52:	0600      	lsls	r0, r0, #24
 8000d54:	0a12      	lsrs	r2, r2, #8
 8000d56:	4302      	orrs	r2, r0
 8000d58:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000d5a:	4546      	cmp	r6, r8
 8000d5c:	d80b      	bhi.n	8000d76 <ASPEP_RXframeProcess+0x24e>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000d5e:	45bc      	cmp	ip, r7
 8000d60:	d809      	bhi.n	8000d76 <ASPEP_RXframeProcess+0x24e>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000d62:	4549      	cmp	r1, r9
 8000d64:	d807      	bhi.n	8000d76 <ASPEP_RXframeProcess+0x24e>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000d66:	4555      	cmp	r5, sl
 8000d68:	d805      	bhi.n	8000d76 <ASPEP_RXframeProcess+0x24e>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000d6a:	2258      	movs	r2, #88	@ 0x58
 8000d6c:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.version = (uint8_t)((packetHeader &0x70U)>> 4U);           /*Bits 4 to 6*/
 8000d6e:	065b      	lsls	r3, r3, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000d70:	0f5b      	lsrs	r3, r3, #29
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d0b5      	beq.n	8000ce2 <ASPEP_RXframeProcess+0x1ba>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000d76:	234c      	movs	r3, #76	@ 0x4c
 8000d78:	2200      	movs	r2, #0
 8000d7a:	54e2      	strb	r2, [r4, r3]
 8000d7c:	e7b1      	b.n	8000ce2 <ASPEP_RXframeProcess+0x1ba>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000d7e:	213f      	movs	r1, #63	@ 0x3f
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000d80:	257f      	movs	r5, #127	@ 0x7f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000d82:	7f62      	ldrb	r2, [r4, #29]
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000d84:	0b98      	lsrs	r0, r3, #14
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000d86:	4011      	ands	r1, r2
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000d88:	0d5a      	lsrs	r2, r3, #21
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000d8a:	4028      	ands	r0, r5
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000d8c:	4015      	ands	r5, r2
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d8e:	2254      	movs	r2, #84	@ 0x54
 8000d90:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000d92:	7f26      	ldrb	r6, [r4, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d94:	4694      	mov	ip, r2
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000d96:	2255      	movs	r2, #85	@ 0x55
 8000d98:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000d9a:	09f6      	lsrs	r6, r6, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000d9c:	1c17      	adds	r7, r2, #0
 8000d9e:	428a      	cmp	r2, r1
 8000da0:	d900      	bls.n	8000da4 <ASPEP_RXframeProcess+0x27c>
 8000da2:	1c0f      	adds	r7, r1, #0
 8000da4:	b2fa      	uxtb	r2, r7
 8000da6:	9201      	str	r2, [sp, #4]
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000da8:	2256      	movs	r2, #86	@ 0x56
 8000daa:	5ca2      	ldrb	r2, [r4, r2]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000dac:	46b3      	mov	fp, r6
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000dae:	4690      	mov	r8, r2
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000db0:	2257      	movs	r2, #87	@ 0x57
 8000db2:	5ca2      	ldrb	r2, [r4, r2]
 8000db4:	4691      	mov	r9, r2
 8000db6:	2254      	movs	r2, #84	@ 0x54
 8000db8:	4692      	mov	sl, r2
 8000dba:	44a2      	add	sl, r4
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000dbc:	4566      	cmp	r6, ip
 8000dbe:	d900      	bls.n	8000dc2 <ASPEP_RXframeProcess+0x29a>
 8000dc0:	46e3      	mov	fp, ip
 8000dc2:	465f      	mov	r7, fp
 8000dc4:	9a01      	ldr	r2, [sp, #4]
 8000dc6:	b2ff      	uxtb	r7, r7
 8000dc8:	0212      	lsls	r2, r2, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000dca:	4683      	mov	fp, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000dcc:	433a      	orrs	r2, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000dce:	4540      	cmp	r0, r8
 8000dd0:	d900      	bls.n	8000dd4 <ASPEP_RXframeProcess+0x2ac>
 8000dd2:	46c3      	mov	fp, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000dd4:	465f      	mov	r7, fp
 8000dd6:	b2ff      	uxtb	r7, r7
 8000dd8:	043f      	lsls	r7, r7, #16
 8000dda:	46bb      	mov	fp, r7
 8000ddc:	4f1e      	ldr	r7, [pc, #120]	@ (8000e58 <ASPEP_RXframeProcess+0x330>)
 8000dde:	403a      	ands	r2, r7
 8000de0:	465f      	mov	r7, fp
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000de2:	46ab      	mov	fp, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000de4:	433a      	orrs	r2, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000de6:	454d      	cmp	r5, r9
 8000de8:	d900      	bls.n	8000dec <ASPEP_RXframeProcess+0x2c4>
 8000dea:	46cb      	mov	fp, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000dec:	465f      	mov	r7, fp
 8000dee:	0212      	lsls	r2, r2, #8
 8000df0:	063f      	lsls	r7, r7, #24
 8000df2:	0a12      	lsrs	r2, r2, #8
 8000df4:	433a      	orrs	r2, r7
 8000df6:	6562      	str	r2, [r4, #84]	@ 0x54
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000df8:	2200      	movs	r2, #0
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000dfa:	4566      	cmp	r6, ip
 8000dfc:	d80e      	bhi.n	8000e1c <ASPEP_RXframeProcess+0x2f4>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000dfe:	9e01      	ldr	r6, [sp, #4]
 8000e00:	42b1      	cmp	r1, r6
 8000e02:	d80b      	bhi.n	8000e1c <ASPEP_RXframeProcess+0x2f4>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000e04:	4540      	cmp	r0, r8
 8000e06:	d809      	bhi.n	8000e1c <ASPEP_RXframeProcess+0x2f4>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000e08:	454d      	cmp	r5, r9
 8000e0a:	d807      	bhi.n	8000e1c <ASPEP_RXframeProcess+0x2f4>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000e0c:	3258      	adds	r2, #88	@ 0x58
 8000e0e:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.version = (uint8_t)((packetHeader &0x70U)>> 4U);           /*Bits 4 to 6*/
 8000e10:	065b      	lsls	r3, r3, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000e12:	0f5b      	lsrs	r3, r3, #29
 8000e14:	1ad2      	subs	r2, r2, r3
 8000e16:	4253      	negs	r3, r2
 8000e18:	415a      	adcs	r2, r3
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	234c      	movs	r3, #76	@ 0x4c
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000e1e:	4651      	mov	r1, sl
 8000e20:	0020      	movs	r0, r4
 8000e22:	54e2      	strb	r2, [r4, r3]
 8000e24:	f7ff fd3a 	bl	800089c <ASPEP_sendBeacon>
 8000e28:	e697      	b.n	8000b5a <ASPEP_RXframeProcess+0x32>
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000e2a:	0021      	movs	r1, r4
        pHandle->ctrlBuffer.state = readLock;
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	3324      	adds	r3, #36	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000e30:	3120      	adds	r1, #32
        pHandle->ctrlBuffer.state = readLock;
 8000e32:	54e2      	strb	r2, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000e34:	6321      	str	r1, [r4, #48]	@ 0x30
 8000e36:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000e38:	6960      	ldr	r0, [r4, #20]
 8000e3a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000e3c:	3201      	adds	r2, #1
 8000e3e:	4798      	blx	r3
 8000e40:	e6e0      	b.n	8000c04 <ASPEP_RXframeProcess+0xdc>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 8000e42:	0b1b      	lsrs	r3, r3, #12
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000e44:	2101      	movs	r1, #1
 8000e46:	0020      	movs	r0, r4
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	f7ff fd6b 	bl	8000924 <ASPEP_sendPing>
 8000e4e:	e684      	b.n	8000b5a <ASPEP_RXframeProcess+0x32>
 8000e50:	08006688 	.word	0x08006688
 8000e54:	08006678 	.word	0x08006678
 8000e58:	ff00ffff 	.word	0xff00ffff

08000e5c <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000e5c:	b570      	push	{r4, r5, r6, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8000e5e:	254d      	movs	r5, #77	@ 0x4d
 8000e60:	5d43      	ldrb	r3, [r0, r5]
{
 8000e62:	0004      	movs	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d006      	beq.n	8000e76 <ASPEP_HWDataReceivedIT+0x1a>
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d103      	bne.n	8000e74 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	5542      	strb	r2, [r0, r5]
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000e70:	3249      	adds	r2, #73	@ 0x49
 8000e72:	5483      	strb	r3, [r0, r2]
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000e74:	bd70      	pop	{r4, r5, r6, pc}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000e76:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef4 <ASPEP_HWDataReceivedIT+0x98>)
 8000e78:	7f01      	ldrb	r1, [r0, #28]
 8000e7a:	69c2      	ldr	r2, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000e7c:	5c59      	ldrb	r1, [r3, r1]
 8000e7e:	0a10      	lsrs	r0, r2, #8
 8000e80:	4041      	eors	r1, r0
 8000e82:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000e84:	5c59      	ldrb	r1, [r3, r1]
 8000e86:	0c10      	lsrs	r0, r2, #16
 8000e88:	4041      	eors	r1, r0
 8000e8a:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000e8c:	5c59      	ldrb	r1, [r3, r1]
 8000e8e:	0e12      	lsrs	r2, r2, #24
 8000e90:	404a      	eors	r2, r1
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000e92:	5c9b      	ldrb	r3, [r3, r2]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d10b      	bne.n	8000eb0 <ASPEP_HWDataReceivedIT+0x54>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000e98:	7f22      	ldrb	r2, [r4, #28]
 8000e9a:	330f      	adds	r3, #15
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	6523      	str	r3, [r4, #80]	@ 0x50
          switch (pHandle->rxPacketType)
 8000ea0:	2b06      	cmp	r3, #6
 8000ea2:	d809      	bhi.n	8000eb8 <ASPEP_HWDataReceivedIT+0x5c>
 8000ea4:	2b04      	cmp	r3, #4
 8000ea6:	d81d      	bhi.n	8000ee4 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000ea8:	234a      	movs	r3, #74	@ 0x4a
 8000eaa:	2201      	movs	r2, #1
 8000eac:	54e2      	strb	r2, [r4, r3]
              break;
 8000eae:	e7e1      	b.n	8000e74 <ASPEP_HWDataReceivedIT+0x18>
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000eb0:	234a      	movs	r3, #74	@ 0x4a
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	54e2      	strb	r2, [r4, r3]
 8000eb6:	e7dd      	b.n	8000e74 <ASPEP_HWDataReceivedIT+0x18>
 8000eb8:	2b09      	cmp	r3, #9
 8000eba:	d1f5      	bne.n	8000ea8 <ASPEP_HWDataReceivedIT+0x4c>
              pHandle->rxLengthASPEP = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000ebc:	8ba2      	ldrh	r2, [r4, #28]
 8000ebe:	333b      	adds	r3, #59	@ 0x3b
 8000ec0:	0912      	lsrs	r2, r2, #4
 8000ec2:	52e2      	strh	r2, [r4, r3]
              if (0U == pHandle->rxLengthASPEP) /* data packet with length 0 is a valid packet */
 8000ec4:	d00e      	beq.n	8000ee4 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLengthASPEP <= pHandle->maxRXPayload)
 8000ec6:	2346      	movs	r3, #70	@ 0x46
 8000ec8:	5ae3      	ldrh	r3, [r4, r3]
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d30e      	bcc.n	8000eec <ASPEP_HWDataReceivedIT+0x90>
                                        (pHandle->rxLengthASPEP + ((uint16_t)ASPEP_DATACRC_SIZE * (uint16_t)pHandle->Capabilities.DATA_CRC)));
 8000ece:	2354      	movs	r3, #84	@ 0x54
                pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000ed0:	5ce3      	ldrb	r3, [r4, r3]
 8000ed2:	69a1      	ldr	r1, [r4, #24]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	18d2      	adds	r2, r2, r3
 8000ed8:	6960      	ldr	r0, [r4, #20]
 8000eda:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000edc:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	5563      	strb	r3, [r4, r5]
 8000ee2:	e7c7      	b.n	8000e74 <ASPEP_HWDataReceivedIT+0x18>
              pHandle->NewPacketAvailable = true;
 8000ee4:	2349      	movs	r3, #73	@ 0x49
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	54e2      	strb	r2, [r4, r3]
              break;
 8000eea:	e7c3      	b.n	8000e74 <ASPEP_HWDataReceivedIT+0x18>
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000eec:	234a      	movs	r3, #74	@ 0x4a
 8000eee:	2202      	movs	r2, #2
 8000ef0:	54e2      	strb	r2, [r4, r3]
 8000ef2:	e7bf      	b.n	8000e74 <ASPEP_HWDataReceivedIT+0x18>
 8000ef4:	08006688 	.word	0x08006688

08000ef8 <ASPEP_HWReset>:
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000ef8:	224d      	movs	r2, #77	@ 0x4d
 8000efa:	2100      	movs	r1, #0
{
 8000efc:	b510      	push	{r4, lr}
 8000efe:	0003      	movs	r3, r0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000f00:	5481      	strb	r1, [r0, r2]
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000f02:	0001      	movs	r1, r0
 8000f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f06:	6940      	ldr	r0, [r0, #20]
 8000f08:	311c      	adds	r1, #28
 8000f0a:	3a49      	subs	r2, #73	@ 0x49
 8000f0c:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000f0e:	bd10      	pop	{r4, pc}

08000f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f10:	b530      	push	{r4, r5, lr}
 8000f12:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f14:	2224      	movs	r2, #36	@ 0x24
 8000f16:	2100      	movs	r1, #0
 8000f18:	a809      	add	r0, sp, #36	@ 0x24
 8000f1a:	f005 fb6b 	bl	80065f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1e:	2210      	movs	r2, #16
 8000f20:	2100      	movs	r1, #0
 8000f22:	4668      	mov	r0, sp
 8000f24:	f005 fb66 	bl	80065f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f28:	2210      	movs	r2, #16
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	a804      	add	r0, sp, #16
 8000f2e:	f005 fb61 	bl	80065f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000f32:	2312      	movs	r3, #18
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f34:	2510      	movs	r5, #16
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000f36:	22a0      	movs	r2, #160	@ 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f38:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000f3a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000f3c:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3e:	950c      	str	r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000f40:	950e      	str	r5, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000f42:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f44:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f46:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000f48:	9212      	str	r2, [sp, #72]	@ 0x48
 8000f4a:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f4c:	940b      	str	r4, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000f4e:	940d      	str	r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f50:	9510      	str	r5, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f52:	f002 feb5 	bl	8003cc0 <HAL_RCC_OscConfig>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x4e>
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5e:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f60:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f62:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f64:	2101      	movs	r1, #1
 8000f66:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f68:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6a:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f6c:	f003 f900 	bl	8004170 <HAL_RCC_ClockConfig>
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d001      	beq.n	8000f78 <SystemClock_Config+0x68>
 8000f74:	b672      	cpsid	i
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <SystemClock_Config+0x66>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f78:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f7a:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f7c:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f7e:	f003 f9e7 	bl	8004350 <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	2800      	cmp	r0, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0x7a>
 8000f86:	b672      	cpsid	i
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <SystemClock_Config+0x78>
}
 8000f8a:	b015      	add	sp, #84	@ 0x54
 8000f8c:	bd30      	pop	{r4, r5, pc}
 8000f8e:	46c0      	nop			@ (mov r8, r8)

08000f90 <main>:
{
 8000f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f92:	46ce      	mov	lr, r9
 8000f94:	4647      	mov	r7, r8
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b097      	sub	sp, #92	@ 0x5c
  HAL_Init();
 8000f9a:	f002 fba7 	bl	80036ec <HAL_Init>
  SystemClock_Config();
 8000f9e:	f7ff ffb7 	bl	8000f10 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	2214      	movs	r2, #20
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	a80e      	add	r0, sp, #56	@ 0x38
 8000fa8:	f005 fb24 	bl	80065f4 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fac:	2280      	movs	r2, #128	@ 0x80
 8000fae:	4cae      	ldr	r4, [pc, #696]	@ (8001268 <main+0x2d8>)
 8000fb0:	03d2      	lsls	r2, r2, #15
 8000fb2:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 8000fb4:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	6163      	str	r3, [r4, #20]
 8000fba:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 8000fbc:	2090      	movs	r0, #144	@ 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fbe:	4013      	ands	r3, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fc2:	9302      	str	r3, [sp, #8]
 8000fc4:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	6963      	ldr	r3, [r4, #20]
 8000fc8:	0292      	lsls	r2, r2, #10
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	6163      	str	r3, [r4, #20]
 8000fce:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 8000fd0:	0109      	lsls	r1, r1, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4013      	ands	r3, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd4:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	9303      	str	r3, [sp, #12]
 8000fd8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	6963      	ldr	r3, [r4, #20]
 8000fdc:	02d2      	lsls	r2, r2, #11
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	6163      	str	r3, [r4, #20]
 8000fe2:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 8000fe4:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
  HAL_GPIO_WritePin(_3FG_HIZ_GPIO_Port, _3FG_HIZ_Pin, GPIO_PIN_RESET);
 8000fec:	2780      	movs	r7, #128	@ 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 8000ff0:	f002 fe60 	bl	8003cb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_3FG_HIZ_GPIO_Port, _3FG_HIZ_Pin, GPIO_PIN_RESET);
 8000ff4:	2090      	movs	r0, #144	@ 0x90
 8000ff6:	017f      	lsls	r7, r7, #5
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	0039      	movs	r1, r7
 8000ffc:	05c0      	lsls	r0, r0, #23
 8000ffe:	f002 fe59 	bl	8003cb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, OCTH_STBY2_Pin|OCTH_STBY1_Pin, GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	21c0      	movs	r1, #192	@ 0xc0
 8001006:	4899      	ldr	r0, [pc, #612]	@ (800126c <main+0x2dc>)
 8001008:	f002 fe54 	bl	8003cb4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800100c:	2384      	movs	r3, #132	@ 0x84
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800100e:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001010:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001012:	4896      	ldr	r0, [pc, #600]	@ (800126c <main+0x2dc>)
 8001014:	a90e      	add	r1, sp, #56	@ 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001016:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001018:	950e      	str	r5, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101a:	9510      	str	r5, [sp, #64]	@ 0x40
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800101c:	f002 fd54 	bl	8003ac8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OC_SEL_Pin|_3FG_HIZ_Pin;
 8001020:	23c0      	movs	r3, #192	@ 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Pin = OC_SEL_Pin|_3FG_HIZ_Pin;
 8001024:	015b      	lsls	r3, r3, #5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2600      	movs	r6, #0
  GPIO_InitStruct.Pin = OC_SEL_Pin|_3FG_HIZ_Pin;
 8001028:	930e      	str	r3, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800102a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	a90e      	add	r1, sp, #56	@ 0x38
 800102e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001030:	4698      	mov	r8, r3
 8001032:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	950f      	str	r5, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	9611      	str	r6, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f002 fd46 	bl	8003ac8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OCTH_STBY2_Pin|OCTH_STBY1_Pin;
 800103c:	23c0      	movs	r3, #192	@ 0xc0
 800103e:	930e      	str	r3, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001040:	4643      	mov	r3, r8
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001042:	488a      	ldr	r0, [pc, #552]	@ (800126c <main+0x2dc>)
 8001044:	a90e      	add	r1, sp, #56	@ 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001046:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	950f      	str	r5, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	9611      	str	r6, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800104c:	f002 fd3c 	bl	8003ac8 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001050:	6963      	ldr	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001052:	220c      	movs	r2, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001054:	432b      	orrs	r3, r5
 8001056:	6163      	str	r3, [r4, #20]
 8001058:	6963      	ldr	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800105a:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800105c:	402b      	ands	r3, r5
 800105e:	9301      	str	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001060:	a80e      	add	r0, sp, #56	@ 0x38
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	9b01      	ldr	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001064:	f005 fac6 	bl	80065f4 <memset>
  hadc.Instance = ADC1;
 8001068:	4c81      	ldr	r4, [pc, #516]	@ (8001270 <main+0x2e0>)
 800106a:	4b82      	ldr	r3, [pc, #520]	@ (8001274 <main+0x2e4>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800106c:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 800106e:	6023      	str	r3, [r4, #0]
  hadc.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001070:	2320      	movs	r3, #32
 8001072:	4698      	mov	r8, r3
 8001074:	60e3      	str	r3, [r4, #12]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001076:	3b1c      	subs	r3, #28
 8001078:	4699      	mov	r9, r3
 800107a:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800107c:	2380      	movs	r3, #128	@ 0x80
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	6223      	str	r3, [r4, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001082:	2324      	movs	r3, #36	@ 0x24
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001084:	6066      	str	r6, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001086:	60a6      	str	r6, [r4, #8]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001088:	6125      	str	r5, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800108a:	61a6      	str	r6, [r4, #24]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 800108c:	61e6      	str	r6, [r4, #28]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800108e:	54e5      	strb	r5, [r4, r3]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001090:	62a5      	str	r5, [r4, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001092:	f002 fb4d 	bl	8003730 <HAL_ADC_Init>
 8001096:	2800      	cmp	r0, #0
 8001098:	d001      	beq.n	800109e <main+0x10e>
 800109a:	b672      	cpsid	i
  while (1)
 800109c:	e7fe      	b.n	800109c <main+0x10c>
  sConfig.Channel = ADC_CHANNEL_3;
 800109e:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010a0:	0020      	movs	r0, r4
 80010a2:	a90e      	add	r1, sp, #56	@ 0x38
  sConfig.Channel = ADC_CHANNEL_3;
 80010a4:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80010a6:	970f      	str	r7, [sp, #60]	@ 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80010a8:	9510      	str	r5, [sp, #64]	@ 0x40
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010aa:	f002 fbe5 	bl	8003878 <HAL_ADC_ConfigChannel>
 80010ae:	2800      	cmp	r0, #0
 80010b0:	d001      	beq.n	80010b6 <main+0x126>
 80010b2:	b672      	cpsid	i
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <main+0x124>
  sConfig.Channel = ADC_CHANNEL_4;
 80010b6:	464b      	mov	r3, r9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010b8:	0020      	movs	r0, r4
 80010ba:	a90e      	add	r1, sp, #56	@ 0x38
  sConfig.Channel = ADC_CHANNEL_4;
 80010bc:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010be:	f002 fbdb 	bl	8003878 <HAL_ADC_ConfigChannel>
 80010c2:	2800      	cmp	r0, #0
 80010c4:	d001      	beq.n	80010ca <main+0x13a>
 80010c6:	b672      	cpsid	i
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <main+0x138>
  sConfig.Channel = ADC_CHANNEL_5;
 80010ca:	2605      	movs	r6, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010cc:	0020      	movs	r0, r4
 80010ce:	a90e      	add	r1, sp, #56	@ 0x38
  sConfig.Channel = ADC_CHANNEL_5;
 80010d0:	960e      	str	r6, [sp, #56]	@ 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010d2:	f002 fbd1 	bl	8003878 <HAL_ADC_ConfigChannel>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d001      	beq.n	80010de <main+0x14e>
 80010da:	b672      	cpsid	i
  while (1)
 80010dc:	e7fe      	b.n	80010dc <main+0x14c>
  sConfig.Channel = ADC_CHANNEL_9;
 80010de:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010e0:	0020      	movs	r0, r4
 80010e2:	a90e      	add	r1, sp, #56	@ 0x38
  sConfig.Channel = ADC_CHANNEL_9;
 80010e4:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010e6:	f002 fbc7 	bl	8003878 <HAL_ADC_ConfigChannel>
 80010ea:	1e05      	subs	r5, r0, #0
 80010ec:	d001      	beq.n	80010f2 <main+0x162>
 80010ee:	b672      	cpsid	i
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <main+0x160>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f2:	0001      	movs	r1, r0
 80010f4:	2208      	movs	r2, #8
 80010f6:	a805      	add	r0, sp, #20
 80010f8:	f005 fa7c 	bl	80065f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fc:	221c      	movs	r2, #28
 80010fe:	0029      	movs	r1, r5
 8001100:	a807      	add	r0, sp, #28
 8001102:	f005 fa77 	bl	80065f4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001106:	2220      	movs	r2, #32
 8001108:	0029      	movs	r1, r5
 800110a:	a80e      	add	r0, sp, #56	@ 0x38
 800110c:	f005 fa72 	bl	80065f4 <memset>
  htim1.Instance = TIM1;
 8001110:	4c59      	ldr	r4, [pc, #356]	@ (8001278 <main+0x2e8>)
 8001112:	4b5a      	ldr	r3, [pc, #360]	@ (800127c <main+0x2ec>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001114:	0020      	movs	r0, r4
  htim1.Instance = TIM1;
 8001116:	6023      	str	r3, [r4, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001118:	4643      	mov	r3, r8
 800111a:	60a3      	str	r3, [r4, #8]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 800111c:	23c8      	movs	r3, #200	@ 0xc8
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001122:	2380      	movs	r3, #128	@ 0x80
 8001124:	005b      	lsls	r3, r3, #1
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001126:	6065      	str	r5, [r4, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001128:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800112a:	6166      	str	r6, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112c:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800112e:	f003 f9a7 	bl	8004480 <HAL_TIM_PWM_Init>
 8001132:	2800      	cmp	r0, #0
 8001134:	d001      	beq.n	800113a <main+0x1aa>
 8001136:	b672      	cpsid	i
  while (1)
 8001138:	e7fe      	b.n	8001138 <main+0x1a8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800113a:	2370      	movs	r3, #112	@ 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113c:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800113e:	a905      	add	r1, sp, #20
 8001140:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001142:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001144:	f003 fb32 	bl	80047ac <HAL_TIMEx_MasterConfigSynchronization>
 8001148:	1e02      	subs	r2, r0, #0
 800114a:	d001      	beq.n	8001150 <main+0x1c0>
 800114c:	b672      	cpsid	i
  while (1)
 800114e:	e7fe      	b.n	800114e <main+0x1be>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001150:	2360      	movs	r3, #96	@ 0x60
 8001152:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001154:	3331      	adds	r3, #49	@ 0x31
 8001156:	33ff      	adds	r3, #255	@ 0xff
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001158:	9009      	str	r0, [sp, #36]	@ 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800115a:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800115c:	900b      	str	r0, [sp, #44]	@ 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800115e:	900c      	str	r0, [sp, #48]	@ 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001160:	900d      	str	r0, [sp, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001162:	a907      	add	r1, sp, #28
 8001164:	0020      	movs	r0, r4
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001166:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001168:	f003 fa00 	bl	800456c <HAL_TIM_PWM_ConfigChannel>
 800116c:	2800      	cmp	r0, #0
 800116e:	d001      	beq.n	8001174 <main+0x1e4>
 8001170:	b672      	cpsid	i
  while (1)
 8001172:	e7fe      	b.n	8001172 <main+0x1e2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001174:	2204      	movs	r2, #4
 8001176:	0020      	movs	r0, r4
 8001178:	a907      	add	r1, sp, #28
 800117a:	f003 f9f7 	bl	800456c <HAL_TIM_PWM_ConfigChannel>
 800117e:	2800      	cmp	r0, #0
 8001180:	d001      	beq.n	8001186 <main+0x1f6>
 8001182:	b672      	cpsid	i
  while (1)
 8001184:	e7fe      	b.n	8001184 <main+0x1f4>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001186:	2208      	movs	r2, #8
 8001188:	0020      	movs	r0, r4
 800118a:	a907      	add	r1, sp, #28
 800118c:	f003 f9ee 	bl	800456c <HAL_TIM_PWM_ConfigChannel>
 8001190:	2800      	cmp	r0, #0
 8001192:	d001      	beq.n	8001198 <main+0x208>
 8001194:	b672      	cpsid	i
  while (1)
 8001196:	e7fe      	b.n	8001196 <main+0x206>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001198:	2370      	movs	r3, #112	@ 0x70
 800119a:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 800119c:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <main+0x2f0>)
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800119e:	220c      	movs	r2, #12
 80011a0:	0020      	movs	r0, r4
 80011a2:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80011a4:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011a6:	f003 f9e1 	bl	800456c <HAL_TIM_PWM_ConfigChannel>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d001      	beq.n	80011b2 <main+0x222>
 80011ae:	b672      	cpsid	i
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <main+0x220>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80011b2:	2380      	movs	r3, #128	@ 0x80
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	930e      	str	r3, [sp, #56]	@ 0x38
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80011b8:	2380      	movs	r3, #128	@ 0x80
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	930f      	str	r3, [sp, #60]	@ 0x3c
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80011be:	2310      	movs	r3, #16
 80011c0:	9311      	str	r3, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80011c2:	2380      	movs	r3, #128	@ 0x80
 80011c4:	015b      	lsls	r3, r3, #5
 80011c6:	9312      	str	r3, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011c8:	2380      	movs	r3, #128	@ 0x80
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011ca:	9010      	str	r0, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011cc:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011ce:	9015      	str	r0, [sp, #84]	@ 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011d0:	a90e      	add	r1, sp, #56	@ 0x38
 80011d2:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011d4:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011d6:	f003 fb17 	bl	8004808 <HAL_TIMEx_ConfigBreakDeadTime>
 80011da:	1e05      	subs	r5, r0, #0
 80011dc:	d001      	beq.n	80011e2 <main+0x252>
 80011de:	b672      	cpsid	i
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <main+0x250>
  HAL_TIM_MspPostInit(&htim1);
 80011e2:	0020      	movs	r0, r4
 80011e4:	f002 f8fa 	bl	80033dc <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 80011e8:	4826      	ldr	r0, [pc, #152]	@ (8001284 <main+0x2f4>)
 80011ea:	4b27      	ldr	r3, [pc, #156]	@ (8001288 <main+0x2f8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ec:	6085      	str	r5, [r0, #8]
  huart1.Instance = USART1;
 80011ee:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 1843200;
 80011f0:	23e1      	movs	r3, #225	@ 0xe1
 80011f2:	035b      	lsls	r3, r3, #13
 80011f4:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f6:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011f8:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011fa:	6105      	str	r5, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011fc:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001200:	61c5      	str	r5, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001202:	6205      	str	r5, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001204:	6245      	str	r5, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001206:	f003 fce7 	bl	8004bd8 <HAL_UART_Init>
 800120a:	1e04      	subs	r4, r0, #0
 800120c:	d001      	beq.n	8001212 <main+0x282>
 800120e:	b672      	cpsid	i
  while (1)
 8001210:	e7fe      	b.n	8001210 <main+0x280>
  MX_MotorControl_Init();
 8001212:	f001 f82d 	bl	8002270 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001216:	0022      	movs	r2, r4
 8001218:	2103      	movs	r1, #3
 800121a:	201b      	movs	r0, #27
 800121c:	f002 fbbc 	bl	8003998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001220:	201b      	movs	r0, #27
 8001222:	f002 fbe3 	bl	80039ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001226:	0022      	movs	r2, r4
 8001228:	2101      	movs	r1, #1
 800122a:	2009      	movs	r0, #9
 800122c:	f002 fbb4 	bl	8003998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001230:	2009      	movs	r0, #9
 8001232:	f002 fbdb 	bl	80039ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 8001236:	0022      	movs	r2, r4
 8001238:	2103      	movs	r1, #3
 800123a:	200a      	movs	r0, #10
 800123c:	f002 fbac 	bl	8003998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001240:	200a      	movs	r0, #10
 8001242:	f002 fbd3 	bl	80039ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001246:	0022      	movs	r2, r4
 8001248:	0021      	movs	r1, r4
 800124a:	200d      	movs	r0, #13
 800124c:	f002 fba4 	bl	8003998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001250:	200d      	movs	r0, #13
 8001252:	f002 fbcb 	bl	80039ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8001256:	2005      	movs	r0, #5
 8001258:	0022      	movs	r2, r4
 800125a:	2103      	movs	r1, #3
 800125c:	f002 fb9c 	bl	8003998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001260:	2005      	movs	r0, #5
 8001262:	f002 fbc3 	bl	80039ec <HAL_NVIC_EnableIRQ>
  while (1)
 8001266:	e7fe      	b.n	8001266 <main+0x2d6>
 8001268:	40021000 	.word	0x40021000
 800126c:	48001400 	.word	0x48001400
 8001270:	20000658 	.word	0x20000658
 8001274:	40012400 	.word	0x40012400
 8001278:	200005cc 	.word	0x200005cc
 800127c:	40012c00 	.word	0x40012c00
 8001280:	0000031f 	.word	0x0000031f
 8001284:	20000544 	.word	0x20000544
 8001288:	40013800 	.word	0x40013800

0800128c <Error_Handler>:
 800128c:	b672      	cpsid	i
  while (1)
 800128e:	e7fe      	b.n	800128e <Error_Handler+0x2>

08001290 <MC_StartMotor1>:
  * Note also that if the startup sequence fails the #RUN state may never be reached.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
 8001290:	b510      	push	{r4, lr}
  return (MCI_StartMotor(pMCI[M1]));
 8001292:	4b02      	ldr	r3, [pc, #8]	@ (800129c <MC_StartMotor1+0xc>)
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	f000 f877 	bl	8001388 <MCI_StartMotor>
}
 800129a:	bd10      	pop	{r4, pc}
 800129c:	200007f8 	.word	0x200007f8

080012a0 <MC_StopMotor1>:
  * machine and check if the #IDLE state has been reached.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
 80012a0:	b510      	push	{r4, lr}
  return (MCI_StopMotor(pMCI[M1]));
 80012a2:	4b02      	ldr	r3, [pc, #8]	@ (80012ac <MC_StopMotor1+0xc>)
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	f000 f887 	bl	80013b8 <MCI_StopMotor>
}
 80012aa:	bd10      	pop	{r4, pc}
 80012ac:	200007f8 	.word	0x200007f8

080012b0 <MC_GetSTMStateMotor1>:

/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
 80012b0:	b510      	push	{r4, lr}
  return (MCI_GetSTMState(pMCI[M1]));
 80012b2:	4b02      	ldr	r3, [pc, #8]	@ (80012bc <MC_GetSTMStateMotor1+0xc>)
 80012b4:	6818      	ldr	r0, [r3, #0]
 80012b6:	f000 f861 	bl	800137c <MCI_GetSTMState>
}
 80012ba:	bd10      	pop	{r4, pc}
 80012bc:	200007f8 	.word	0x200007f8

080012c0 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return (MCP_CMD_UNKNOWN);
}
 80012c0:	2002      	movs	r0, #2
 80012c2:	4770      	bx	lr

080012c4 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 80012c4:	4770      	bx	lr
 80012c6:	46c0      	nop			@ (mov r8, r8)

080012c8 <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 80012c8:	4770      	bx	lr
 80012ca:	46c0      	nop			@ (mov r8, r8)

080012cc <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80012d0:	4b02      	ldr	r3, [pc, #8]	@ (80012dc <MCI_ExecSpeedRamp+0x10>)
    pHandle->hFinalSpeed = hFinalSpeed;
 80012d2:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 80012d4:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80012d6:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80012d8:	4770      	bx	lr
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	00000301 	.word	0x00000301

080012e0 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80012e4:	4b02      	ldr	r3, [pc, #8]	@ (80012f0 <MCI_ExecTorqueRamp+0x10>)
    pHandle->hFinalTorque = hFinalTorque;
 80012e6:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 80012e8:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80012ea:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80012ec:	4770      	bx	lr
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	00000401 	.word	0x00000401

080012f4 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80012f4:	8c03      	ldrh	r3, [r0, #32]
 80012f6:	430b      	orrs	r3, r1
 80012f8:	4393      	bics	r3, r2
 80012fa:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 80012fc:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80012fe:	4319      	orrs	r1, r3
 8001300:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001302:	4770      	bx	lr

08001304 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001304:	2324      	movs	r3, #36	@ 0x24
{
 8001306:	b510      	push	{r4, lr}
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001308:	5cc2      	ldrb	r2, [r0, r3]
{
 800130a:	0004      	movs	r4, r0
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 800130c:	2a01      	cmp	r2, #1
 800130e:	d000      	beq.n	8001312 <MCI_ExecBufferedCommands+0xe>
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001310:	bd10      	pop	{r4, pc}
      switch (pHandle->lastCommand)
 8001312:	7b01      	ldrb	r1, [r0, #12]
 8001314:	2902      	cmp	r1, #2
 8001316:	d007      	beq.n	8001328 <MCI_ExecBufferedCommands+0x24>
 8001318:	2903      	cmp	r1, #3
 800131a:	d026      	beq.n	800136a <MCI_ExecBufferedCommands+0x66>
 800131c:	2901      	cmp	r1, #1
 800131e:	d016      	beq.n	800134e <MCI_ExecBufferedCommands+0x4a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8001320:	2324      	movs	r3, #36	@ 0x24
 8001322:	2203      	movs	r2, #3
 8001324:	54e2      	strb	r2, [r4, r3]
}
 8001326:	e7f3      	b.n	8001310 <MCI_ExecBufferedCommands+0xc>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001328:	2100      	movs	r1, #0
 800132a:	6842      	ldr	r2, [r0, #4]
 800132c:	54d1      	strb	r1, [r2, r3]
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 800132e:	6800      	ldr	r0, [r0, #0]
 8001330:	3104      	adds	r1, #4
 8001332:	f004 fccf 	bl	8005cd4 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8001336:	8ba2      	ldrh	r2, [r4, #28]
 8001338:	2310      	movs	r3, #16
 800133a:	5ee1      	ldrsh	r1, [r4, r3]
 800133c:	6820      	ldr	r0, [r4, #0]
 800133e:	f004 fccd 	bl	8005cdc <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8001342:	2800      	cmp	r0, #0
 8001344:	d0ec      	beq.n	8001320 <MCI_ExecBufferedCommands+0x1c>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 8001346:	2324      	movs	r3, #36	@ 0x24
 8001348:	2202      	movs	r2, #2
 800134a:	54e2      	strb	r2, [r4, r3]
 800134c:	e7e0      	b.n	8001310 <MCI_ExecBufferedCommands+0xc>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800134e:	2100      	movs	r1, #0
 8001350:	6842      	ldr	r2, [r0, #4]
 8001352:	54d1      	strb	r1, [r2, r3]
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8001354:	6800      	ldr	r0, [r0, #0]
 8001356:	3103      	adds	r1, #3
 8001358:	f004 fcbc 	bl	8005cd4 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 800135c:	8ba2      	ldrh	r2, [r4, #28]
 800135e:	230e      	movs	r3, #14
 8001360:	5ee1      	ldrsh	r1, [r4, r3]
 8001362:	6820      	ldr	r0, [r4, #0]
 8001364:	f004 fcba 	bl	8005cdc <STC_ExecRamp>
          break;
 8001368:	e7eb      	b.n	8001342 <MCI_ExecBufferedCommands+0x3e>
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 800136a:	0021      	movs	r1, r4
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 800136c:	6840      	ldr	r0, [r0, #4]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 800136e:	3112      	adds	r1, #18
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001370:	54c2      	strb	r2, [r0, r3]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001372:	2204      	movs	r2, #4
 8001374:	3010      	adds	r0, #16
 8001376:	f005 f969 	bl	800664c <memcpy>
      if (commandHasBeenExecuted)
 800137a:	e7e4      	b.n	8001346 <MCI_ExecBufferedCommands+0x42>

0800137c <MCI_GetSTMState>:
__weak MCI_State_t MCI_GetSTMState(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
 800137c:	7fc0      	ldrb	r0, [r0, #31]
#endif
}
 800137e:	4770      	bx	lr

08001380 <MCI_GetOccurredFaults>:
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
 8001380:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
#endif
}
 8001382:	4770      	bx	lr

08001384 <MCI_GetCurrentFaults>:
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
 8001384:	8c00      	ldrh	r0, [r0, #32]
#endif
}
 8001386:	4770      	bx	lr

08001388 <MCI_StartMotor>:
{
 8001388:	b510      	push	{r4, lr}
 800138a:	0004      	movs	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 800138c:	f7ff fff6 	bl	800137c <MCI_GetSTMState>
 8001390:	2800      	cmp	r0, #0
 8001392:	d001      	beq.n	8001398 <MCI_StartMotor+0x10>
  bool retVal = false;
 8001394:	2000      	movs	r0, #0
}
 8001396:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001398:	0020      	movs	r0, r4
 800139a:	f7ff fff1 	bl	8001380 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 800139e:	2800      	cmp	r0, #0
 80013a0:	d1f8      	bne.n	8001394 <MCI_StartMotor+0xc>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80013a2:	0020      	movs	r0, r4
 80013a4:	f7ff ffee 	bl	8001384 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80013a8:	2800      	cmp	r0, #0
 80013aa:	d1f3      	bne.n	8001394 <MCI_StartMotor+0xc>
      pHandle->DirectCommand = MCI_START;
 80013ac:	2301      	movs	r3, #1
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80013ae:	2224      	movs	r2, #36	@ 0x24
      pHandle->DirectCommand = MCI_START;
 80013b0:	77a3      	strb	r3, [r4, #30]
      retVal = true;
 80013b2:	3001      	adds	r0, #1
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80013b4:	54a3      	strb	r3, [r4, r2]
      retVal = true;
 80013b6:	e7ee      	b.n	8001396 <MCI_StartMotor+0xe>

080013b8 <MCI_StopMotor>:
{
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	0004      	movs	r4, r0
    State = MCI_GetSTMState(pHandle);
 80013bc:	f7ff ffde 	bl	800137c <MCI_GetSTMState>
      status = false;
 80013c0:	2500      	movs	r5, #0
    if ((IDLE == State) || (ICLWAIT == State))
 80013c2:	2800      	cmp	r0, #0
 80013c4:	d004      	beq.n	80013d0 <MCI_StopMotor+0x18>
 80013c6:	0003      	movs	r3, r0
 80013c8:	3b0c      	subs	r3, #12
 80013ca:	1e5a      	subs	r2, r3, #1
 80013cc:	4193      	sbcs	r3, r2
 80013ce:	b2dd      	uxtb	r5, r3
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80013d0:	0020      	movs	r0, r4
 80013d2:	f7ff ffd5 	bl	8001380 <MCI_GetOccurredFaults>
 80013d6:	2800      	cmp	r0, #0
 80013d8:	d002      	beq.n	80013e0 <MCI_StopMotor+0x28>
  bool retVal = false;
 80013da:	2500      	movs	r5, #0
}
 80013dc:	0028      	movs	r0, r5
 80013de:	bd70      	pop	{r4, r5, r6, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80013e0:	0020      	movs	r0, r4
 80013e2:	f7ff ffcf 	bl	8001384 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80013e6:	2800      	cmp	r0, #0
 80013e8:	d1f7      	bne.n	80013da <MCI_StopMotor+0x22>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80013ea:	2d00      	cmp	r5, #0
 80013ec:	d0f5      	beq.n	80013da <MCI_StopMotor+0x22>
      pHandle->DirectCommand = MCI_STOP;
 80013ee:	2305      	movs	r3, #5
 80013f0:	77a3      	strb	r3, [r4, #30]
      retVal = true;
 80013f2:	e7f3      	b.n	80013dc <MCI_StopMotor+0x24>

080013f4 <MCI_FaultAcknowledged>:
{
 80013f4:	b510      	push	{r4, lr}
 80013f6:	0004      	movs	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80013f8:	f7ff ffc0 	bl	800137c <MCI_GetSTMState>
 80013fc:	280b      	cmp	r0, #11
 80013fe:	d001      	beq.n	8001404 <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 8001400:	2000      	movs	r0, #0
}
 8001402:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001404:	0020      	movs	r0, r4
 8001406:	f7ff ffbd 	bl	8001384 <MCI_GetCurrentFaults>
 800140a:	2800      	cmp	r0, #0
 800140c:	d1f8      	bne.n	8001400 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 800140e:	2302      	movs	r3, #2
      pHandle->PastFaults = MC_NO_FAULTS;
 8001410:	8460      	strh	r0, [r4, #34]	@ 0x22
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 8001412:	77a3      	strb	r3, [r4, #30]
      reVal = true;
 8001414:	3001      	adds	r0, #1
 8001416:	e7f4      	b.n	8001402 <MCI_FaultAcknowledged+0xe>

08001418 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001418:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 800141a:	8c00      	ldrh	r0, [r0, #32]
 800141c:	0400      	lsls	r0, r0, #16
 800141e:	4318      	orrs	r0, r3
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 8001420:	4770      	bx	lr
 8001422:	46c0      	nop			@ (mov r8, r8)

08001424 <MCI_GetControlMode>:
__weak MC_ControlMode_t MCI_GetControlMode(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
 8001424:	2325      	movs	r3, #37	@ 0x25
 8001426:	5cc0      	ldrb	r0, [r0, r3]
#endif
}
 8001428:	4770      	bx	lr
 800142a:	46c0      	nop			@ (mov r8, r8)

0800142c <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 800142c:	7b02      	ldrb	r2, [r0, #12]
{
 800142e:	0003      	movs	r3, r0
    switch (pHandle->lastCommand)
 8001430:	2a02      	cmp	r2, #2
 8001432:	d005      	beq.n	8001440 <MCI_GetImposedMotorDirection+0x14>
 8001434:	2a03      	cmp	r2, #3
 8001436:	d012      	beq.n	800145e <MCI_GetImposedMotorDirection+0x32>
  int16_t retVal = 1;
 8001438:	2001      	movs	r0, #1
    switch (pHandle->lastCommand)
 800143a:	2a01      	cmp	r2, #1
 800143c:	d007      	beq.n	800144e <MCI_GetImposedMotorDirection+0x22>
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (retVal);
}
 800143e:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 8001440:	2010      	movs	r0, #16
 8001442:	5e18      	ldrsh	r0, [r3, r0]
          retVal = -1;
 8001444:	43c0      	mvns	r0, r0
 8001446:	17c0      	asrs	r0, r0, #31
 8001448:	4010      	ands	r0, r2
 800144a:	3801      	subs	r0, #1
 800144c:	e7f7      	b.n	800143e <MCI_GetImposedMotorDirection+0x12>
        if (pHandle->hFinalSpeed < 0)
 800144e:	200e      	movs	r0, #14
 8001450:	5e18      	ldrsh	r0, [r3, r0]
          retVal = -1;
 8001452:	43c0      	mvns	r0, r0
 8001454:	2302      	movs	r3, #2
 8001456:	17c0      	asrs	r0, r0, #31
 8001458:	4018      	ands	r0, r3
 800145a:	3801      	subs	r0, #1
 800145c:	e7ef      	b.n	800143e <MCI_GetImposedMotorDirection+0x12>
        if (pHandle->Iqdref.q < 0)
 800145e:	2012      	movs	r0, #18
 8001460:	5e18      	ldrsh	r0, [r3, r0]
 8001462:	e7f6      	b.n	8001452 <MCI_GetImposedMotorDirection+0x26>

08001464 <MCI_GetLastRampFinalSpeed>:
  {
    retVal = pHandle->hFinalSpeed;
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
 8001464:	230e      	movs	r3, #14
 8001466:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8001468:	4770      	bx	lr
 800146a:	46c0      	nop			@ (mov r8, r8)

0800146c <MCI_GetLastRampFinalDuration>:
  {
    retVal = pHandle->hDurationms;
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
 800146c:	8b80      	ldrh	r0, [r0, #28]
#endif
}
 800146e:	4770      	bx	lr

08001470 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8001470:	2200      	movs	r2, #0
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8001472:	6803      	ldr	r3, [r0, #0]
 8001474:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 8001476:	619a      	str	r2, [r3, #24]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001478:	4770      	bx	lr
 800147a:	46c0      	nop			@ (mov r8, r8)

0800147c <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 800147c:	b510      	push	{r4, lr}
static inline SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 800147e:	6803      	ldr	r3, [r0, #0]
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8001480:	6958      	ldr	r0, [r3, #20]
 8001482:	f004 fbc9 	bl	8005c18 <SPD_GetAvrgMecSpeedUnit>
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_speed);
}
 8001486:	bd10      	pop	{r4, pc}

08001488 <MCI_GetMecSpeedRefUnit>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
 8001488:	b510      	push	{r4, lr}
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 800148a:	6800      	ldr	r0, [r0, #0]
 800148c:	f004 fc1e 	bl	8005ccc <STC_GetMecSpeedRefUnit>
#endif
}
 8001490:	bd10      	pop	{r4, pc}
 8001492:	46c0      	nop			@ (mov r8, r8)

08001494 <MCI_GetVqd>:
  * @brief  It returns stator current Vqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
 8001494:	b500      	push	{lr}
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8001496:	6841      	ldr	r1, [r0, #4]
{
 8001498:	b083      	sub	sp, #12
  return (pHandle->pFOCVars->Vqd);
 800149a:	2204      	movs	r2, #4
 800149c:	3116      	adds	r1, #22
 800149e:	a801      	add	r0, sp, #4
 80014a0:	f005 f8d4 	bl	800664c <memcpy>
 80014a4:	466b      	mov	r3, sp
 80014a6:	466a      	mov	r2, sp
 80014a8:	88db      	ldrh	r3, [r3, #6]
 80014aa:	8890      	ldrh	r0, [r2, #4]
 80014ac:	041b      	lsls	r3, r3, #16
 80014ae:	4318      	orrs	r0, r3
#endif
}
 80014b0:	b003      	add	sp, #12
 80014b2:	bd00      	pop	{pc}

080014b4 <MCI_GetValphabeta>:
  * @brief  It returns stator current Valphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
 80014b4:	b500      	push	{lr}
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 80014b6:	6841      	ldr	r1, [r0, #4]
{
 80014b8:	b083      	sub	sp, #12
  return (pHandle->pFOCVars->Valphabeta);
 80014ba:	2204      	movs	r2, #4
 80014bc:	311a      	adds	r1, #26
 80014be:	a801      	add	r0, sp, #4
 80014c0:	f005 f8c4 	bl	800664c <memcpy>
 80014c4:	466b      	mov	r3, sp
 80014c6:	466a      	mov	r2, sp
 80014c8:	88db      	ldrh	r3, [r3, #6]
 80014ca:	8890      	ldrh	r0, [r2, #4]
 80014cc:	041b      	lsls	r3, r3, #16
 80014ce:	4318      	orrs	r0, r3
#endif
}
 80014d0:	b003      	add	sp, #12
 80014d2:	bd00      	pop	{pc}

080014d4 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 80014d4:	6843      	ldr	r3, [r0, #4]
 80014d6:	201e      	movs	r0, #30
 80014d8:	5e18      	ldrsh	r0, [r3, r0]
#endif
}
 80014da:	4770      	bx	lr

080014dc <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 80014dc:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 80014de:	c811      	ldmia	r0, {r0, r4}
 80014e0:	f004 fc78 	bl	8005dd4 <STC_GetDefaultIqdref>
 80014e4:	8220      	strh	r0, [r4, #16]
 80014e6:	0c00      	lsrs	r0, r0, #16
 80014e8:	8260      	strh	r0, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80014ea:	bd10      	pop	{r4, pc}

080014ec <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 80014ec:	b201      	sxth	r1, r0
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80014ee:	014a      	lsls	r2, r1, #5
 80014f0:	1852      	adds	r2, r2, r1
 80014f2:	00d2      	lsls	r2, r2, #3
 80014f4:	1a52      	subs	r2, r2, r1
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80014f6:	1403      	asrs	r3, r0, #16
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80014f8:	0092      	lsls	r2, r2, #2
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80014fa:	4812      	ldr	r0, [pc, #72]	@ (8001544 <MCM_Clarke+0x58>)
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80014fc:	1a52      	subs	r2, r2, r1
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80014fe:	4358      	muls	r0, r3
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8001500:	00d3      	lsls	r3, r2, #3
 8001502:	18d3      	adds	r3, r2, r3
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8001504:	2280      	movs	r2, #128	@ 0x80
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	425b      	negs	r3, r3
 800150a:	1a1b      	subs	r3, r3, r0
 800150c:	1a1b      	subs	r3, r3, r0
{
 800150e:	b084      	sub	sp, #16
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8001510:	13db      	asrs	r3, r3, #15
  if (wbeta_tmp > INT16_MAX)
 8001512:	0212      	lsls	r2, r2, #8
 8001514:	4293      	cmp	r3, r2
 8001516:	da04      	bge.n	8001522 <MCM_Clarke+0x36>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8001518:	4a0b      	ldr	r2, [pc, #44]	@ (8001548 <MCM_Clarke+0x5c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	da08      	bge.n	8001530 <MCM_Clarke+0x44>
 800151e:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <MCM_Clarke+0x60>)
 8001520:	e000      	b.n	8001524 <MCM_Clarke+0x38>
 8001522:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <MCM_Clarke+0x64>)
  else
  {
    /* Nothing to do */
  }

  return (Output);
 8001524:	0408      	lsls	r0, r1, #16
 8001526:	041b      	lsls	r3, r3, #16
 8001528:	0c00      	lsrs	r0, r0, #16
 800152a:	4318      	orrs	r0, r3
}
 800152c:	b004      	add	sp, #16
 800152e:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8001530:	4806      	ldr	r0, [pc, #24]	@ (800154c <MCM_Clarke+0x60>)
 8001532:	1c1a      	adds	r2, r3, #0
 8001534:	b21b      	sxth	r3, r3
 8001536:	4283      	cmp	r3, r0
 8001538:	db01      	blt.n	800153e <MCM_Clarke+0x52>
 800153a:	b213      	sxth	r3, r2
 800153c:	e7f2      	b.n	8001524 <MCM_Clarke+0x38>
 800153e:	1c02      	adds	r2, r0, #0
 8001540:	b213      	sxth	r3, r2
 8001542:	e7ef      	b.n	8001524 <MCM_Clarke+0x38>
 8001544:	000049e6 	.word	0x000049e6
 8001548:	ffff8000 	.word	0xffff8000
 800154c:	ffff8001 	.word	0xffff8001
 8001550:	00007fff 	.word	0x00007fff

08001554 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 8001554:	2380      	movs	r3, #128	@ 0x80
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	18c3      	adds	r3, r0, r3
  uhindex = (uint16_t)shindex;
 800155a:	b29b      	uxth	r3, r3
{
 800155c:	b530      	push	{r4, r5, lr}
  uhindex /= ((uint16_t)64);
 800155e:	099b      	lsrs	r3, r3, #6

  switch (((uint16_t)uhindex) & SIN_MASK)
 8001560:	24c0      	movs	r4, #192	@ 0xc0
 8001562:	0018      	movs	r0, r3
 8001564:	2580      	movs	r5, #128	@ 0x80
 8001566:	00a4      	lsls	r4, r4, #2
{
 8001568:	2100      	movs	r1, #0
 800156a:	2200      	movs	r2, #0
 800156c:	b083      	sub	sp, #12
 800156e:	4020      	ands	r0, r4
  switch (((uint16_t)uhindex) & SIN_MASK)
 8001570:	00ad      	lsls	r5, r5, #2
 8001572:	42a8      	cmp	r0, r5
 8001574:	d023      	beq.n	80015be <MCM_Trig_Functions+0x6a>
 8001576:	d815      	bhi.n	80015a4 <MCM_Trig_Functions+0x50>
 8001578:	2800      	cmp	r0, #0
 800157a:	d029      	beq.n	80015d0 <MCM_Trig_Functions+0x7c>
 800157c:	2480      	movs	r4, #128	@ 0x80
 800157e:	0064      	lsls	r4, r4, #1
 8001580:	42a0      	cmp	r0, r4
 8001582:	d109      	bne.n	8001598 <MCM_Trig_Functions+0x44>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001584:	b2db      	uxtb	r3, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	4918      	ldr	r1, [pc, #96]	@ (80015ec <MCM_Trig_Functions+0x98>)
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	0052      	lsls	r2, r2, #1
 800158e:	5a52      	ldrh	r2, [r2, r1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8001590:	005b      	lsls	r3, r3, #1
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001592:	4252      	negs	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8001594:	5e59      	ldrsh	r1, [r3, r1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001596:	b212      	sxth	r2, r2
    }

    default:
      break;
  }
  return (Local_Components);
 8001598:	0408      	lsls	r0, r1, #16
 800159a:	0412      	lsls	r2, r2, #16
 800159c:	0c00      	lsrs	r0, r0, #16
 800159e:	4310      	orrs	r0, r2
}
 80015a0:	b003      	add	sp, #12
 80015a2:	bd30      	pop	{r4, r5, pc}
  switch (((uint16_t)uhindex) & SIN_MASK)
 80015a4:	42a0      	cmp	r0, r4
 80015a6:	d1f7      	bne.n	8001598 <MCM_Trig_Functions+0x44>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	490f      	ldr	r1, [pc, #60]	@ (80015ec <MCM_Trig_Functions+0x98>)
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	0052      	lsls	r2, r2, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80015b2:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015b4:	5e52      	ldrsh	r2, [r2, r1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80015b6:	5a59      	ldrh	r1, [r3, r1]
 80015b8:	4249      	negs	r1, r1
 80015ba:	b209      	sxth	r1, r1
      break;
 80015bc:	e7ec      	b.n	8001598 <MCM_Trig_Functions+0x44>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	005a      	lsls	r2, r3, #1
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015c2:	43db      	mvns	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80015c4:	4909      	ldr	r1, [pc, #36]	@ (80015ec <MCM_Trig_Functions+0x98>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80015ca:	5e52      	ldrsh	r2, [r2, r1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015cc:	5e59      	ldrsh	r1, [r3, r1]
      break;
 80015ce:	e7e3      	b.n	8001598 <MCM_Trig_Functions+0x44>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	005a      	lsls	r2, r3, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015d4:	43db      	mvns	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80015d6:	4905      	ldr	r1, [pc, #20]	@ (80015ec <MCM_Trig_Functions+0x98>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80015dc:	5a52      	ldrh	r2, [r2, r1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015de:	5a59      	ldrh	r1, [r3, r1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80015e0:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015e2:	4249      	negs	r1, r1
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80015e4:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015e6:	b209      	sxth	r1, r1
      break;
 80015e8:	e7d6      	b.n	8001598 <MCM_Trig_Functions+0x44>
 80015ea:	46c0      	nop			@ (mov r8, r8)
 80015ec:	080067b4 	.word	0x080067b4

080015f0 <MCM_Park>:
{
 80015f0:	b570      	push	{r4, r5, r6, lr}
 80015f2:	b205      	sxth	r5, r0
 80015f4:	1404      	asrs	r4, r0, #16
 80015f6:	b084      	sub	sp, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80015f8:	0008      	movs	r0, r1
 80015fa:	f7ff ffab 	bl	8001554 <MCM_Trig_Functions>
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 80015fe:	b201      	sxth	r1, r0
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8001600:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001602:	000a      	movs	r2, r1
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8001604:	0018      	movs	r0, r3
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001606:	436a      	muls	r2, r5
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8001608:	4360      	muls	r0, r4
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800160a:	1a12      	subs	r2, r2, r0
  if (wqd_tmp > INT16_MAX)
 800160c:	2080      	movs	r0, #128	@ 0x80
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800160e:	13d2      	asrs	r2, r2, #15
  if (wqd_tmp > INT16_MAX)
 8001610:	0200      	lsls	r0, r0, #8
 8001612:	4282      	cmp	r2, r0
 8001614:	da12      	bge.n	800163c <MCM_Park+0x4c>
  else if (wqd_tmp < (-32768))
 8001616:	481a      	ldr	r0, [pc, #104]	@ (8001680 <MCM_Park+0x90>)
 8001618:	4282      	cmp	r2, r0
 800161a:	da24      	bge.n	8001666 <MCM_Park+0x76>
  if (wqd_tmp > INT16_MAX)
 800161c:	2280      	movs	r2, #128	@ 0x80
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 800161e:	436b      	muls	r3, r5
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8001620:	4361      	muls	r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001622:	185b      	adds	r3, r3, r1
 8001624:	4817      	ldr	r0, [pc, #92]	@ (8001684 <MCM_Park+0x94>)
 8001626:	13db      	asrs	r3, r3, #15
  if (wqd_tmp > INT16_MAX)
 8001628:	0212      	lsls	r2, r2, #8
 800162a:	4293      	cmp	r3, r2
 800162c:	db0f      	blt.n	800164e <MCM_Park+0x5e>
 800162e:	4b16      	ldr	r3, [pc, #88]	@ (8001688 <MCM_Park+0x98>)
  return (Output);
 8001630:	0400      	lsls	r0, r0, #16
 8001632:	041b      	lsls	r3, r3, #16
 8001634:	0c00      	lsrs	r0, r0, #16
 8001636:	4318      	orrs	r0, r3
}
 8001638:	b004      	add	sp, #16
 800163a:	bd70      	pop	{r4, r5, r6, pc}
 800163c:	4812      	ldr	r0, [pc, #72]	@ (8001688 <MCM_Park+0x98>)
  if (wqd_tmp > INT16_MAX)
 800163e:	2280      	movs	r2, #128	@ 0x80
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 8001640:	436b      	muls	r3, r5
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8001642:	4361      	muls	r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001644:	185b      	adds	r3, r3, r1
 8001646:	13db      	asrs	r3, r3, #15
  if (wqd_tmp > INT16_MAX)
 8001648:	0212      	lsls	r2, r2, #8
 800164a:	4293      	cmp	r3, r2
 800164c:	daef      	bge.n	800162e <MCM_Park+0x3e>
  else if (wqd_tmp < (-32768))
 800164e:	4a0c      	ldr	r2, [pc, #48]	@ (8001680 <MCM_Park+0x90>)
 8001650:	4293      	cmp	r3, r2
 8001652:	da01      	bge.n	8001658 <MCM_Park+0x68>
 8001654:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <MCM_Park+0x94>)
 8001656:	e7eb      	b.n	8001630 <MCM_Park+0x40>
    hqd_tmp = ((int16_t)wqd_tmp);
 8001658:	490a      	ldr	r1, [pc, #40]	@ (8001684 <MCM_Park+0x94>)
 800165a:	1c1a      	adds	r2, r3, #0
 800165c:	b21b      	sxth	r3, r3
 800165e:	428b      	cmp	r3, r1
 8001660:	db0b      	blt.n	800167a <MCM_Park+0x8a>
 8001662:	b213      	sxth	r3, r2
 8001664:	e7e4      	b.n	8001630 <MCM_Park+0x40>
    hqd_tmp = ((int16_t)wqd_tmp);
 8001666:	4e07      	ldr	r6, [pc, #28]	@ (8001684 <MCM_Park+0x94>)
 8001668:	1c10      	adds	r0, r2, #0
 800166a:	b212      	sxth	r2, r2
 800166c:	42b2      	cmp	r2, r6
 800166e:	db01      	blt.n	8001674 <MCM_Park+0x84>
 8001670:	b200      	sxth	r0, r0
 8001672:	e7e4      	b.n	800163e <MCM_Park+0x4e>
 8001674:	1c30      	adds	r0, r6, #0
 8001676:	b200      	sxth	r0, r0
 8001678:	e7e1      	b.n	800163e <MCM_Park+0x4e>
 800167a:	1c0a      	adds	r2, r1, #0
 800167c:	b213      	sxth	r3, r2
 800167e:	e7d7      	b.n	8001630 <MCM_Park+0x40>
 8001680:	ffff8000 	.word	0xffff8000
 8001684:	ffff8001 	.word	0xffff8001
 8001688:	00007fff 	.word	0x00007fff

0800168c <MCM_Rev_Park>:
{
 800168c:	b530      	push	{r4, r5, lr}
 800168e:	b205      	sxth	r5, r0
 8001690:	b085      	sub	sp, #20
 8001692:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001694:	0008      	movs	r0, r1
 8001696:	f7ff ff5d 	bl	8001554 <MCM_Trig_Functions>
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 800169a:	b202      	sxth	r2, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 800169c:	1403      	asrs	r3, r0, #16
 800169e:	0019      	movs	r1, r3
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 80016a0:	0010      	movs	r0, r2
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 80016a2:	4361      	muls	r1, r4
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 80016a4:	4368      	muls	r0, r5
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 80016a6:	4354      	muls	r4, r2
  beta_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hSin);
 80016a8:	436b      	muls	r3, r5
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 80016aa:	1840      	adds	r0, r0, r1
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 80016ac:	1ae4      	subs	r4, r4, r3
 80016ae:	13e4      	asrs	r4, r4, #15
  return (Output);
 80016b0:	0040      	lsls	r0, r0, #1
 80016b2:	0424      	lsls	r4, r4, #16
 80016b4:	0c00      	lsrs	r0, r0, #16
 80016b6:	4320      	orrs	r0, r4
}
 80016b8:	b005      	add	sp, #20
 80016ba:	bd30      	pop	{r4, r5, pc}

080016bc <MCboot>:
  * @param  pMCIList pointer to the vector of MCInterface objects that will be
  *         created and initialized. The vector must have length equal to the
  *         number of motor drives.
  */
__weak void MCboot( MCI_Handle_t* pMCIList[NBR_OF_MOTORS] )
{
 80016bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MCboot 0 */

  /* USER CODE END MCboot 0 */

  if (MC_NULL == pMCIList)
 80016be:	2800      	cmp	r0, #0
 80016c0:	d01c      	beq.n	80016fc <MCboot+0x40>
    /* Nothing to do */
  }
  else
  {

    bMCBootCompleted = (uint8_t )0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	4c0e      	ldr	r4, [pc, #56]	@ (8001700 <MCboot+0x44>)
 80016c6:	7023      	strb	r3, [r4, #0]

    /*************************************************/
    /*    FOC initialization         */
    /*************************************************/
    pMCIList[M1] = &Mci[M1];
 80016c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001704 <MCboot+0x48>)
 80016ca:	6003      	str	r3, [r0, #0]
    FOC_Init();
 80016cc:	f000 f992 	bl	80019f4 <FOC_Init>

    ASPEP_start(&aspepOverUartA);
 80016d0:	480d      	ldr	r0, [pc, #52]	@ (8001708 <MCboot+0x4c>)
 80016d2:	f7ff f8d1 	bl	8000878 <ASPEP_start>
    /* USER CODE END MCboot 1 */

    /******************************************************/
    /*   PID component initialization: speed regulation   */
    /******************************************************/
    PID_HandleInit(&PIDSpeedHandle_M1);
 80016d6:	480d      	ldr	r0, [pc, #52]	@ (800170c <MCboot+0x50>)
 80016d8:	f003 fb9c 	bl	8004e14 <PID_HandleInit>

    /****************************************************/
    /*   Virtual speed sensor component initialization  */
    /****************************************************/
    VSS_Init(&VirtualSpeedSensorM1);
 80016dc:	480c      	ldr	r0, [pc, #48]	@ (8001710 <MCboot+0x54>)
 80016de:	f004 fe8d 	bl	80063fc <VSS_Init>

    /********************************************************/
    /*   Bus voltage sensor component initialization        */
    /********************************************************/
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 80016e2:	480c      	ldr	r0, [pc, #48]	@ (8001714 <MCboot+0x58>)
 80016e4:	f001 fb22 	bl	8002d2c <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 80016e8:	480b      	ldr	r0, [pc, #44]	@ (8001718 <MCboot+0x5c>)
 80016ea:	f004 f80b 	bl	8005704 <RVBS_Init>

    /*******************************************************/
    /*   Temperature measurement component initialization  */
    /*******************************************************/
    NTC_Init(&TempSensor_M1);
 80016ee:	480b      	ldr	r0, [pc, #44]	@ (800171c <MCboot+0x60>)
 80016f0:	f003 fb70 	bl	8004dd4 <NTC_Init>

    /* Applicative hook in MCBoot() */
    MC_APP_BootHook();
 80016f4:	f7ff fde6 	bl	80012c4 <MC_APP_BootHook>

    /* USER CODE BEGIN MCboot 2 */

    /* USER CODE END MCboot 2 */

    bMCBootCompleted = 1U;
 80016f8:	2301      	movs	r3, #1
 80016fa:	7023      	strb	r3, [r4, #0]
  }
}
 80016fc:	bd10      	pop	{r4, pc}
 80016fe:	46c0      	nop			@ (mov r8, r8)
 8001700:	200006dc 	.word	0x200006dc
 8001704:	20000000 	.word	0x20000000
 8001708:	20000420 	.word	0x20000420
 800170c:	2000033c 	.word	0x2000033c
 8001710:	200003c0 	.word	0x200003c0
 8001714:	20000394 	.word	0x20000394
 8001718:	20000378 	.word	0x20000378
 800171c:	200003a4 	.word	0x200003a4

08001720 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001720:	4b01      	ldr	r3, [pc, #4]	@ (8001728 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001722:	8018      	strh	r0, [r3, #0]
}
 8001724:	4770      	bx	lr
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	200006de 	.word	0x200006de

0800172c <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 800172c:	4b02      	ldr	r3, [pc, #8]	@ (8001738 <TSK_StopPermanencyTimeHasElapsedM1+0xc>)
 800172e:	8818      	ldrh	r0, [r3, #0]
 8001730:	4243      	negs	r3, r0
 8001732:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8001734:	b2c0      	uxtb	r0, r0
}
 8001736:	4770      	bx	lr
 8001738:	200006de 	.word	0x200006de

0800173c <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 800173c:	b510      	push	{r4, lr}
  bMotorNbr = 0;

  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */
  FOC_HighFrequencyTask(bMotorNbr);
 800173e:	2000      	movs	r0, #0
 8001740:	f000 fb46 	bl	8001dd0 <FOC_HighFrequencyTask>

  /* USER CODE END HighFrequencyTask 1 */

  return (bMotorNbr);

}
 8001744:	2000      	movs	r0, #0
 8001746:	bd10      	pop	{r4, pc}

08001748 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800174a:	46c6      	mov	lr, r8
  uint8_t lbmotor = M1;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */

/* Due to warning array subscript 1 is above array bounds of PWMC_Handle_t *[1] [-Warray-bounds] */
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 800174c:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <TSK_SafetyTask_PWMOFF+0x68>)
{
 800174e:	0005      	movs	r5, r0
 8001750:	b500      	push	{lr}
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	4698      	mov	r8, r3
 8001756:	f000 ff01 	bl	800255c <PWMC_IsFaultOccurred>
 800175a:	0006      	movs	r6, r0
                                                     (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */

  if (M1 == bMotor)
 800175c:	2d00      	cmp	r5, #0
 800175e:	d012      	beq.n	8001786 <TSK_SafetyTask_PWMOFF+0x3e>
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001760:	43f2      	mvns	r2, r6
 8001762:	00af      	lsls	r7, r5, #2
 8001764:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <TSK_SafetyTask_PWMOFF+0x6c>)
 8001766:	197c      	adds	r4, r7, r5
 8001768:	00e4      	lsls	r4, r4, #3
 800176a:	18e4      	adds	r4, r4, r3
 800176c:	0020      	movs	r0, r4
 800176e:	0031      	movs	r1, r6
 8001770:	b292      	uxth	r2, r2
 8001772:	f7ff fdbf 	bl	80012f4 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8001776:	0020      	movs	r0, r4
 8001778:	f7ff fe4e 	bl	8001418 <MCI_GetFaultState>
 800177c:	2800      	cmp	r0, #0
 800177e:	d10f      	bne.n	80017a0 <TSK_SafetyTask_PWMOFF+0x58>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001780:	bc80      	pop	{r7}
 8001782:	46b8      	mov	r8, r7
 8001784:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8001786:	480c      	ldr	r0, [pc, #48]	@ (80017b8 <TSK_SafetyTask_PWMOFF+0x70>)
 8001788:	f001 fb86 	bl	8002e98 <RCM_ExecRegularConv>
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 800178c:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <TSK_SafetyTask_PWMOFF+0x74>)
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 800178e:	0001      	movs	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8001790:	0018      	movs	r0, r3
 8001792:	f003 ffdd 	bl	8005750 <RVBS_CalcAvVbus>
 8001796:	230a      	movs	r3, #10
 8001798:	4398      	bics	r0, r3
 800179a:	4306      	orrs	r6, r0
 800179c:	b2b6      	uxth	r6, r6
 800179e:	e7df      	b.n	8001760 <TSK_SafetyTask_PWMOFF+0x18>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80017a0:	4643      	mov	r3, r8
 80017a2:	59d8      	ldr	r0, [r3, r7]
 80017a4:	f000 fe98 	bl	80024d8 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80017a8:	0028      	movs	r0, r5
 80017aa:	f000 f8f1 	bl	8001990 <FOC_Clear>
}
 80017ae:	e7e7      	b.n	8001780 <TSK_SafetyTask_PWMOFF+0x38>
 80017b0:	200006c4 	.word	0x200006c4
 80017b4:	20000000 	.word	0x20000000
 80017b8:	20000394 	.word	0x20000394
 80017bc:	20000378 	.word	0x20000378

080017c0 <TSK_SafetyTask>:
{
 80017c0:	b510      	push	{r4, lr}
  if (1U == bMCBootCompleted)
 80017c2:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <TSK_SafetyTask+0x18>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d000      	beq.n	80017cc <TSK_SafetyTask+0xc>
}
 80017ca:	bd10      	pop	{r4, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80017cc:	2000      	movs	r0, #0
 80017ce:	f7ff ffbb 	bl	8001748 <TSK_SafetyTask_PWMOFF>
    RCM_ExecUserConv();
 80017d2:	f001 fc23 	bl	800301c <RCM_ExecUserConv>
}
 80017d6:	e7f8      	b.n	80017ca <TSK_SafetyTask+0xa>
 80017d8:	200006dc 	.word	0x200006dc

080017dc <MC_RunMotorControlTasks>:
{
 80017dc:	b570      	push	{r4, r5, r6, lr}
  if (0U == bMCBootCompleted)
 80017de:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <MC_RunMotorControlTasks+0x84>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d018      	beq.n	8001818 <MC_RunMotorControlTasks+0x3c>
    if(hMFTaskCounterM1 > 0u)
 80017e6:	4c1f      	ldr	r4, [pc, #124]	@ (8001864 <MC_RunMotorControlTasks+0x88>)
 80017e8:	8823      	ldrh	r3, [r4, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d015      	beq.n	800181a <MC_RunMotorControlTasks+0x3e>
      hMFTaskCounterM1--;
 80017ee:	3b01      	subs	r3, #1
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 80017f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001868 <MC_RunMotorControlTasks+0x8c>)
 80017f6:	881a      	ldrh	r2, [r3, #0]
 80017f8:	2a00      	cmp	r2, #0
 80017fa:	d003      	beq.n	8001804 <MC_RunMotorControlTasks+0x28>
      hBootCapDelayCounterM1--;
 80017fc:	881a      	ldrh	r2, [r3, #0]
 80017fe:	3a01      	subs	r2, #1
 8001800:	b292      	uxth	r2, r2
 8001802:	801a      	strh	r2, [r3, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001804:	4b19      	ldr	r3, [pc, #100]	@ (800186c <MC_RunMotorControlTasks+0x90>)
 8001806:	881a      	ldrh	r2, [r3, #0]
 8001808:	2a00      	cmp	r2, #0
 800180a:	d003      	beq.n	8001814 <MC_RunMotorControlTasks+0x38>
      hStopPermanencyCounterM1--;
 800180c:	881a      	ldrh	r2, [r3, #0]
 800180e:	3a01      	subs	r2, #1
 8001810:	b292      	uxth	r2, r2
 8001812:	801a      	strh	r2, [r3, #0]
    TSK_SafetyTask();
 8001814:	f7ff ffd4 	bl	80017c0 <TSK_SafetyTask>
}
 8001818:	bd70      	pop	{r4, r5, r6, pc}
      TSK_MediumFrequencyTaskM1();
 800181a:	f000 f97b 	bl	8001b14 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 800181e:	f7ff fd53 	bl	80012c8 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001822:	4d13      	ldr	r5, [pc, #76]	@ (8001870 <MC_RunMotorControlTasks+0x94>)
 8001824:	0029      	movs	r1, r5
 8001826:	6828      	ldr	r0, [r5, #0]
 8001828:	310c      	adds	r1, #12
 800182a:	6883      	ldr	r3, [r0, #8]
 800182c:	4798      	blx	r3
 800182e:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8001830:	2800      	cmp	r0, #0
 8001832:	d007      	beq.n	8001844 <MC_RunMotorControlTasks+0x68>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8001834:	0029      	movs	r1, r5
 8001836:	6828      	ldr	r0, [r5, #0]
 8001838:	220a      	movs	r2, #10
 800183a:	6803      	ldr	r3, [r0, #0]
 800183c:	3108      	adds	r1, #8
 800183e:	4798      	blx	r3
 8001840:	2800      	cmp	r0, #0
 8001842:	d101      	bne.n	8001848 <MC_RunMotorControlTasks+0x6c>
{
 8001844:	23c7      	movs	r3, #199	@ 0xc7
 8001846:	e7d4      	b.n	80017f2 <MC_RunMotorControlTasks+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001848:	0028      	movs	r0, r5
 800184a:	f000 fc5d 	bl	8002108 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 800184e:	6828      	ldr	r0, [r5, #0]
 8001850:	230a      	movs	r3, #10
 8001852:	89ea      	ldrh	r2, [r5, #14]
 8001854:	68a9      	ldr	r1, [r5, #8]
 8001856:	6845      	ldr	r5, [r0, #4]
 8001858:	47a8      	blx	r5
{
 800185a:	23c7      	movs	r3, #199	@ 0xc7
 800185c:	e7c9      	b.n	80017f2 <MC_RunMotorControlTasks+0x16>
 800185e:	46c0      	nop			@ (mov r8, r8)
 8001860:	200006dc 	.word	0x200006dc
 8001864:	200006e2 	.word	0x200006e2
 8001868:	200006e0 	.word	0x200006e0
 800186c:	200006de 	.word	0x200006de
 8001870:	20000410 	.word	0x20000410

08001874 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001874:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
   FOC_Clear(M1);
 8001876:	2000      	movs	r0, #0
 8001878:	f000 f88a 	bl	8001990 <FOC_Clear>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2180      	movs	r1, #128	@ 0x80
 8001880:	4801      	ldr	r0, [pc, #4]	@ (8001888 <TSK_HardwareFaultTask+0x14>)
 8001882:	f7ff fd37 	bl	80012f4 <MCI_FaultProcessing>

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001886:	bd10      	pop	{r4, pc}
 8001888:	20000000 	.word	0x20000000

0800188c <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 800188c:	b510      	push	{r4, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 800188e:	f7ff fd0f 	bl	80012b0 <MC_GetSTMStateMotor1>
 8001892:	2800      	cmp	r0, #0
 8001894:	d102      	bne.n	800189c <UI_HandleStartStopButton_cb+0x10>
  {
    /* Ramp parameters should be tuned for the actual motor */
    (void)MC_StartMotor1();
 8001896:	f7ff fcfb 	bl	8001290 <MC_StartMotor1>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 800189a:	bd10      	pop	{r4, pc}
    (void)MC_StopMotor1();
 800189c:	f7ff fd00 	bl	80012a0 <MC_StopMotor1>
}
 80018a0:	e7fb      	b.n	800189a <UI_HandleStartStopButton_cb+0xe>
 80018a2:	46c0      	nop			@ (mov r8, r8)

080018a4 <mc_lock_pins>:
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018a4:	2390      	movs	r3, #144	@ 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018a6:	2108      	movs	r1, #8
 80018a8:	2002      	movs	r0, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018aa:	4a33      	ldr	r2, [pc, #204]	@ (8001978 <mc_lock_pins+0xd4>)
 80018ac:	05db      	lsls	r3, r3, #23
 80018ae:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018b0:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018b2:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018b4:	69da      	ldr	r2, [r3, #28]

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 80018b6:	b08c      	sub	sp, #48	@ 0x30
 80018b8:	920b      	str	r2, [sp, #44]	@ 0x2c
  (void) temp;
 80018ba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018bc:	4a2f      	ldr	r2, [pc, #188]	@ (800197c <mc_lock_pins+0xd8>)
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018be:	3118      	adds	r1, #24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018c0:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018c2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018c4:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018c6:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018c8:	3910      	subs	r1, #16
  temp = READ_REG(GPIOx->LCKR);
 80018ca:	920a      	str	r2, [sp, #40]	@ 0x28
  (void) temp;
 80018cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018ce:	4a2c      	ldr	r2, [pc, #176]	@ (8001980 <mc_lock_pins+0xdc>)
 80018d0:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018d2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018d4:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018d6:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018d8:	492a      	ldr	r1, [pc, #168]	@ (8001984 <mc_lock_pins+0xe0>)
  temp = READ_REG(GPIOx->LCKR);
 80018da:	9209      	str	r2, [sp, #36]	@ 0x24
  (void) temp;
 80018dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018de:	4a2a      	ldr	r2, [pc, #168]	@ (8001988 <mc_lock_pins+0xe4>)
 80018e0:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018e2:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018e4:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018e6:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018e8:	30fe      	adds	r0, #254	@ 0xfe
  temp = READ_REG(GPIOx->LCKR);
 80018ea:	9108      	str	r1, [sp, #32]
  (void) temp;
 80018ec:	9908      	ldr	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018ee:	4927      	ldr	r1, [pc, #156]	@ (800198c <mc_lock_pins+0xe8>)
 80018f0:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018f2:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018f4:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018f6:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018f8:	3001      	adds	r0, #1
  temp = READ_REG(GPIOx->LCKR);
 80018fa:	9107      	str	r1, [sp, #28]
  (void) temp;
 80018fc:	9907      	ldr	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018fe:	2181      	movs	r1, #129	@ 0x81
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001900:	30ff      	adds	r0, #255	@ 0xff
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001902:	0249      	lsls	r1, r1, #9
 8001904:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001906:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001908:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800190a:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800190c:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 800190e:	9106      	str	r1, [sp, #24]
  (void) temp;
 8001910:	9906      	ldr	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001912:	2188      	movs	r1, #136	@ 0x88
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001914:	0140      	lsls	r0, r0, #5
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001916:	0249      	lsls	r1, r1, #9
 8001918:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800191a:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800191c:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800191e:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001920:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001922:	9105      	str	r1, [sp, #20]
  (void) temp;
 8001924:	9905      	ldr	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001926:	21a0      	movs	r1, #160	@ 0xa0
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001928:	01c0      	lsls	r0, r0, #7
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800192a:	0249      	lsls	r1, r1, #9
 800192c:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800192e:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001930:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001932:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001934:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001936:	9104      	str	r1, [sp, #16]
  (void) temp;
 8001938:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800193a:	2182      	movs	r1, #130	@ 0x82
  WRITE_REG(GPIOx->LCKR, PinMask);
 800193c:	00c0      	lsls	r0, r0, #3
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800193e:	0249      	lsls	r1, r1, #9
 8001940:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001942:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001944:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001946:	69db      	ldr	r3, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001948:	2180      	movs	r1, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 800194a:	9303      	str	r3, [sp, #12]
  (void) temp;
 800194c:	9b03      	ldr	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800194e:	23c0      	movs	r3, #192	@ 0xc0
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001950:	0209      	lsls	r1, r1, #8
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001952:	025b      	lsls	r3, r3, #9
 8001954:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001956:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001958:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800195a:	69d3      	ldr	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800195c:	2180      	movs	r1, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 800195e:	9302      	str	r3, [sp, #8]
  (void) temp;
 8001960:	9b02      	ldr	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001962:	2390      	movs	r3, #144	@ 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001964:	0189      	lsls	r1, r1, #6
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001966:	025b      	lsls	r3, r3, #9
 8001968:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800196a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800196c:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800196e:	69d3      	ldr	r3, [r2, #28]
 8001970:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001972:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_OCP_GPIO_Port, M1_OCP_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8001974:	b00c      	add	sp, #48	@ 0x30
 8001976:	4770      	bx	lr
 8001978:	00010008 	.word	0x00010008
 800197c:	00010020 	.word	0x00010020
 8001980:	00010010 	.word	0x00010010
 8001984:	00010002 	.word	0x00010002
 8001988:	48000400 	.word	0x48000400
 800198c:	00010100 	.word	0x00010100

08001990 <FOC_Clear>:

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8001990:	2126      	movs	r1, #38	@ 0x26
 8001992:	2200      	movs	r2, #0
 8001994:	4341      	muls	r1, r0
 8001996:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <FOC_Clear+0x50>)
{
 8001998:	b510      	push	{r4, lr}
  FOCVars[bMotor].Iab = NULL_ab;
 800199a:	52ca      	strh	r2, [r1, r3]
 800199c:	185b      	adds	r3, r3, r1
 800199e:	805a      	strh	r2, [r3, #2]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 80019a0:	809a      	strh	r2, [r3, #4]
 80019a2:	80da      	strh	r2, [r3, #6]
  FOCVars[bMotor].Iqd = NULL_qd;
 80019a4:	819a      	strh	r2, [r3, #12]
 80019a6:	81da      	strh	r2, [r3, #14]
    FOCVars[bMotor].Iqdref = NULL_qd;
 80019a8:	821a      	strh	r2, [r3, #16]
 80019aa:	825a      	strh	r2, [r3, #18]
  FOCVars[bMotor].hTeref = (int16_t)0;
 80019ac:	83da      	strh	r2, [r3, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 80019ae:	82da      	strh	r2, [r3, #22]
 80019b0:	831a      	strh	r2, [r3, #24]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 80019b2:	835a      	strh	r2, [r3, #26]
 80019b4:	839a      	strh	r2, [r3, #28]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 80019b6:	841a      	strh	r2, [r3, #32]

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80019b8:	4b0a      	ldr	r3, [pc, #40]	@ (80019e4 <FOC_Clear+0x54>)
 80019ba:	0084      	lsls	r4, r0, #2
 80019bc:	58e0      	ldr	r0, [r4, r3]
 80019be:	2100      	movs	r1, #0
 80019c0:	f003 fa3c 	bl	8004e3c <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <FOC_Clear+0x58>)
 80019c6:	2100      	movs	r1, #0
 80019c8:	58e0      	ldr	r0, [r4, r3]
 80019ca:	f003 fa37 	bl	8004e3c <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 80019ce:	4b07      	ldr	r3, [pc, #28]	@ (80019ec <FOC_Clear+0x5c>)
 80019d0:	58e0      	ldr	r0, [r4, r3]
 80019d2:	f004 f971 	bl	8005cb8 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80019d6:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <FOC_Clear+0x60>)
 80019d8:	58e0      	ldr	r0, [r4, r3]
 80019da:	f000 fd7d 	bl	80024d8 <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 80019de:	bd10      	pop	{r4, pc}
 80019e0:	2000069c 	.word	0x2000069c
 80019e4:	20000030 	.word	0x20000030
 80019e8:	2000002c 	.word	0x2000002c
 80019ec:	20000034 	.word	0x20000034
 80019f0:	200006c4 	.word	0x200006c4

080019f4 <FOC_Init>:
{
 80019f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80019f6:	4824      	ldr	r0, [pc, #144]	@ (8001a88 <FOC_Init+0x94>)
 80019f8:	4d24      	ldr	r5, [pc, #144]	@ (8001a8c <FOC_Init+0x98>)
{
 80019fa:	b085      	sub	sp, #20
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80019fc:	6028      	str	r0, [r5, #0]
    R3_1_Init(&PWM_Handle_M1);
 80019fe:	f003 fae5 	bl	8004fcc <R3_1_Init>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001a02:	4e23      	ldr	r6, [pc, #140]	@ (8001a90 <FOC_Init+0x9c>)
 8001a04:	0030      	movs	r0, r6
 8001a06:	f003 fa05 	bl	8004e14 <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 8001a0a:	4f22      	ldr	r7, [pc, #136]	@ (8001a94 <FOC_Init+0xa0>)
 8001a0c:	0038      	movs	r0, r7
 8001a0e:	f004 fc1f 	bl	8006250 <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8001a12:	4c21      	ldr	r4, [pc, #132]	@ (8001a98 <FOC_Init+0xa4>)
 8001a14:	003a      	movs	r2, r7
 8001a16:	0031      	movs	r1, r6
 8001a18:	6820      	ldr	r0, [r4, #0]
 8001a1a:	f004 f939 	bl	8005c90 <STC_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8001a1e:	682d      	ldr	r5, [r5, #0]
 8001a20:	6821      	ldr	r1, [r4, #0]
 8001a22:	4b1e      	ldr	r3, [pc, #120]	@ (8001a9c <FOC_Init+0xa8>)
 8001a24:	4a1e      	ldr	r2, [pc, #120]	@ (8001aa0 <FOC_Init+0xac>)
 8001a26:	9500      	str	r5, [sp, #0]
 8001a28:	481e      	ldr	r0, [pc, #120]	@ (8001aa4 <FOC_Init+0xb0>)
 8001a2a:	f003 ff53 	bl	80058d4 <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8001a2e:	481e      	ldr	r0, [pc, #120]	@ (8001aa8 <FOC_Init+0xb4>)
 8001a30:	f003 f9f0 	bl	8004e14 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8001a34:	481d      	ldr	r0, [pc, #116]	@ (8001aac <FOC_Init+0xb8>)
 8001a36:	f003 f9ed 	bl	8004e14 <PID_HandleInit>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <FOC_Init+0xbc>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001a3c:	4d1d      	ldr	r5, [pc, #116]	@ (8001ab4 <FOC_Init+0xc0>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab8 <FOC_Init+0xc4>)
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001a42:	481e      	ldr	r0, [pc, #120]	@ (8001abc <FOC_Init+0xc8>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001a44:	60da      	str	r2, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001a46:	609d      	str	r5, [r3, #8]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001a48:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac0 <FOC_Init+0xcc>)
 8001a4a:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 8001a4c:	f003 feb4 	bl	80057b8 <REMNG_Init>
    FOC_Clear(M1);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff ff9d 	bl	8001990 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001a56:	2324      	movs	r3, #36	@ 0x24
 8001a58:	2201      	movs	r2, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001a5a:	6820      	ldr	r0, [r4, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001a5c:	54ea      	strb	r2, [r5, r3]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001a5e:	f004 f9b9 	bl	8005dd4 <STC_GetDefaultIqdref>
 8001a62:	8228      	strh	r0, [r5, #16]
 8001a64:	0c00      	lsrs	r0, r0, #16
 8001a66:	8268      	strh	r0, [r5, #18]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001a68:	6820      	ldr	r0, [r4, #0]
 8001a6a:	f004 f9b3 	bl	8005dd4 <STC_GetDefaultIqdref>
 8001a6e:	0c00      	lsrs	r0, r0, #16
 8001a70:	82a8      	strh	r0, [r5, #20]
    MCI_ExecSpeedRamp(&Mci[M1],
 8001a72:	6820      	ldr	r0, [r4, #0]
 8001a74:	f004 f9aa 	bl	8005dcc <STC_GetMecSpeedRefUnitDefault>
 8001a78:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <FOC_Init+0xd0>)
 8001a7a:	0001      	movs	r1, r0
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f7ff fc24 	bl	80012cc <MCI_ExecSpeedRamp>
}
 8001a84:	b005      	add	sp, #20
 8001a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a88:	20000190 	.word	0x20000190
 8001a8c:	200006c4 	.word	0x200006c4
 8001a90:	2000033c 	.word	0x2000033c
 8001a94:	20000068 	.word	0x20000068
 8001a98:	20000034 	.word	0x20000034
 8001a9c:	20000054 	.word	0x20000054
 8001aa0:	200003c0 	.word	0x200003c0
 8001aa4:	20000238 	.word	0x20000238
 8001aa8:	20000310 	.word	0x20000310
 8001aac:	200002e4 	.word	0x200002e4
 8001ab0:	20000028 	.word	0x20000028
 8001ab4:	2000069c 	.word	0x2000069c
 8001ab8:	20000378 	.word	0x20000378
 8001abc:	2000003c 	.word	0x2000003c
 8001ac0:	20000698 	.word	0x20000698
 8001ac4:	20000000 	.word	0x20000000

08001ac8 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8001ac8:	4770      	bx	lr
 8001aca:	46c0      	nop			@ (mov r8, r8)

08001acc <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ace:	0006      	movs	r6, r0
 8001ad0:	b672      	cpsid	i

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference latching */
  /* to avoid MF task writing them while HF task reading them */
  __disable_irq();
  IqdTmp = FOCVars[bMotor].Iqdref;
 8001ad2:	2426      	movs	r4, #38	@ 0x26
 8001ad4:	4344      	muls	r4, r0
 8001ad6:	4d0d      	ldr	r5, [pc, #52]	@ (8001b0c <FOC_CalcCurrRef+0x40>)
 8001ad8:	192c      	adds	r4, r5, r4
 8001ada:	2310      	movs	r3, #16
 8001adc:	5ee0      	ldrsh	r0, [r4, r3]
 8001ade:	2312      	movs	r3, #18
 8001ae0:	5ee7      	ldrsh	r7, [r4, r3]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ae2:	b662      	cpsie	i
  __enable_irq();

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8001ae4:	0023      	movs	r3, r4
 8001ae6:	3324      	adds	r3, #36	@ 0x24
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d007      	beq.n	8001afe <FOC_CalcCurrRef+0x32>
  __ASM volatile ("cpsid i" : : : "memory");
 8001aee:	b672      	cpsid	i
  }

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference restoring */
  __disable_irq();
  FOCVars[bMotor].Iqdref = IqdTmp;
 8001af0:	2326      	movs	r3, #38	@ 0x26
 8001af2:	4373      	muls	r3, r6
 8001af4:	18eb      	adds	r3, r5, r3
 8001af6:	8218      	strh	r0, [r3, #16]
 8001af8:	825f      	strh	r7, [r3, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 8001afa:	b662      	cpsie	i
  /* Exit critical section */
  __enable_irq();
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001afe:	4b04      	ldr	r3, [pc, #16]	@ (8001b10 <FOC_CalcCurrRef+0x44>)
 8001b00:	00b2      	lsls	r2, r6, #2
 8001b02:	58d0      	ldr	r0, [r2, r3]
 8001b04:	f004 f92c 	bl	8005d60 <STC_CalcTorqueReference>
 8001b08:	83e0      	strh	r0, [r4, #30]
    IqdTmp.q = FOCVars[bMotor].hTeref;
 8001b0a:	e7f0      	b.n	8001aee <FOC_CalcCurrRef+0x22>
 8001b0c:	2000069c 	.word	0x2000069c
 8001b10:	20000034 	.word	0x20000034

08001b14 <TSK_MediumFrequencyTaskM1>:
{
 8001b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b16:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	466a      	mov	r2, sp
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001b1c:	4ea1      	ldr	r6, [pc, #644]	@ (8001da4 <TSK_MediumFrequencyTaskM1+0x290>)
 8001b1e:	4669      	mov	r1, sp
 8001b20:	0030      	movs	r0, r6
  int16_t wAux = 0;
 8001b22:	8013      	strh	r3, [r2, #0]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001b24:	f004 fa7a 	bl	800601c <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8001b28:	4b9f      	ldr	r3, [pc, #636]	@ (8001da8 <TSK_MediumFrequencyTaskM1+0x294>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001b2a:	0005      	movs	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	f003 f9cd 	bl	8004ecc <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001b32:	4c9e      	ldr	r4, [pc, #632]	@ (8001dac <TSK_MediumFrequencyTaskM1+0x298>)
 8001b34:	0020      	movs	r0, r4
 8001b36:	f7ff fc25 	bl	8001384 <MCI_GetCurrentFaults>
 8001b3a:	2800      	cmp	r0, #0
 8001b3c:	d003      	beq.n	8001b46 <TSK_MediumFrequencyTaskM1+0x32>
    Mci[M1].State = FAULT_NOW;
 8001b3e:	230a      	movs	r3, #10
 8001b40:	77e3      	strb	r3, [r4, #31]
}
 8001b42:	b003      	add	sp, #12
 8001b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001b46:	0020      	movs	r0, r4
 8001b48:	f7ff fc1a 	bl	8001380 <MCI_GetOccurredFaults>
 8001b4c:	2800      	cmp	r0, #0
 8001b4e:	d106      	bne.n	8001b5e <TSK_MediumFrequencyTaskM1+0x4a>
      switch (Mci[M1].State)
 8001b50:	7fe3      	ldrb	r3, [r4, #31]
 8001b52:	2b13      	cmp	r3, #19
 8001b54:	d8f5      	bhi.n	8001b42 <TSK_MediumFrequencyTaskM1+0x2e>
 8001b56:	4a96      	ldr	r2, [pc, #600]	@ (8001db0 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	58d3      	ldr	r3, [r2, r3]
 8001b5c:	469f      	mov	pc, r3
      Mci[M1].State = FAULT_OVER;
 8001b5e:	230b      	movs	r3, #11
 8001b60:	77e3      	strb	r3, [r4, #31]
 8001b62:	e7ee      	b.n	8001b42 <TSK_MediumFrequencyTaskM1+0x2e>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001b64:	7fa3      	ldrb	r3, [r4, #30]
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d100      	bne.n	8001b6c <TSK_MediumFrequencyTaskM1+0x58>
 8001b6a:	e0b5      	b.n	8001cd8 <TSK_MediumFrequencyTaskM1+0x1c4>
            if (! RUC_OTF_Exec(&RevUpControlM1))
 8001b6c:	4891      	ldr	r0, [pc, #580]	@ (8001db4 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001b6e:	f003 ff31 	bl	80059d4 <RUC_OTF_Exec>
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d000      	beq.n	8001b78 <TSK_MediumFrequencyTaskM1+0x64>
 8001b76:	e0c7      	b.n	8001d08 <TSK_MediumFrequencyTaskM1+0x1f4>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	0020      	movs	r0, r4
 8001b7e:	f7ff fbb9 	bl	80012f4 <MCI_FaultProcessing>
 8001b82:	e7de      	b.n	8001b42 <TSK_MediumFrequencyTaskM1+0x2e>
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8001b84:	4d8c      	ldr	r5, [pc, #560]	@ (8001db8 <TSK_MediumFrequencyTaskM1+0x2a4>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001b86:	7fa3      	ldrb	r3, [r4, #30]
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8001b88:	6828      	ldr	r0, [r5, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001b8a:	2b05      	cmp	r3, #5
 8001b8c:	d100      	bne.n	8001b90 <TSK_MediumFrequencyTaskM1+0x7c>
 8001b8e:	e0a5      	b.n	8001cdc <TSK_MediumFrequencyTaskM1+0x1c8>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8001b90:	2101      	movs	r1, #1
 8001b92:	f000 fca9 	bl	80024e8 <PWMC_CurrentReadingCalibr>
 8001b96:	2800      	cmp	r0, #0
 8001b98:	d0d3      	beq.n	8001b42 <TSK_MediumFrequencyTaskM1+0x2e>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8001b9a:	7fa3      	ldrb	r3, [r4, #30]
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d100      	bne.n	8001ba2 <TSK_MediumFrequencyTaskM1+0x8e>
 8001ba0:	e0fa      	b.n	8001d98 <TSK_MediumFrequencyTaskM1+0x284>
                FOCVars[M1].bDriveInput = EXTERNAL;
 8001ba2:	2224      	movs	r2, #36	@ 0x24
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	4b85      	ldr	r3, [pc, #532]	@ (8001dbc <TSK_MediumFrequencyTaskM1+0x2a8>)
 8001ba8:	5499      	strb	r1, [r3, r2]
                STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);
 8001baa:	4b85      	ldr	r3, [pc, #532]	@ (8001dc0 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001bac:	4985      	ldr	r1, [pc, #532]	@ (8001dc4 <TSK_MediumFrequencyTaskM1+0x2b0>)
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	f004 f880 	bl	8005cb4 <STC_SetSpeedSensor>
                STO_PLL_Clear(&STO_PLL_M1);
 8001bb4:	0030      	movs	r0, r6
 8001bb6:	f004 fb21 	bl	80061fc <STO_PLL_Clear>
                FOC_Clear(M1);
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f7ff fee8 	bl	8001990 <FOC_Clear>
                R3_1_SwitchOnPWM(pwmcHandle[M1]);
 8001bc0:	6828      	ldr	r0, [r5, #0]
 8001bc2:	f003 fbd5 	bl	8005370 <R3_1_SwitchOnPWM>
                Mci[M1].State = START;
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	77e3      	strb	r3, [r4, #31]
 8001bca:	e7ba      	b.n	8001b42 <TSK_MediumFrequencyTaskM1+0x2e>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001bcc:	7fa3      	ldrb	r3, [r4, #30]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d1b7      	bne.n	8001b42 <TSK_MediumFrequencyTaskM1+0x2e>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	83e3      	strh	r3, [r4, #30]
 8001bd6:	e7b4      	b.n	8001b42 <TSK_MediumFrequencyTaskM1+0x2e>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8001bd8:	f7ff fda8 	bl	800172c <TSK_StopPermanencyTimeHasElapsedM1>
 8001bdc:	2800      	cmp	r0, #0
 8001bde:	d0b0      	beq.n	8001b42 <TSK_MediumFrequencyTaskM1+0x2e>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);    /* Sensor-less */
 8001be0:	4b77      	ldr	r3, [pc, #476]	@ (8001dc0 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001be2:	4d78      	ldr	r5, [pc, #480]	@ (8001dc4 <TSK_MediumFrequencyTaskM1+0x2b0>)
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	0029      	movs	r1, r5
 8001be8:	f004 f864 	bl	8005cb4 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8001bec:	0028      	movs	r0, r5
 8001bee:	f004 fbf7 	bl	80063e0 <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	83e3      	strh	r3, [r4, #30]
 8001bf6:	e7a4      	b.n	8001b42 <TSK_MediumFrequencyTaskM1+0x2e>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001bf8:	7fa3      	ldrb	r3, [r4, #30]
 8001bfa:	2b05      	cmp	r3, #5
 8001bfc:	d06c      	beq.n	8001cd8 <TSK_MediumFrequencyTaskM1+0x1c4>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001bfe:	0020      	movs	r0, r4
 8001c00:	f7ff fb80 	bl	8001304 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8001c04:	2000      	movs	r0, #0
 8001c06:	f7ff ff61 	bl	8001acc <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 8001c0a:	2d00      	cmp	r5, #0
 8001c0c:	d199      	bne.n	8001b42 <TSK_MediumFrequencyTaskM1+0x2e>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2120      	movs	r1, #32
 8001c12:	0020      	movs	r0, r4
 8001c14:	f7ff fb6e 	bl	80012f4 <MCI_FaultProcessing>
 8001c18:	e793      	b.n	8001b42 <TSK_MediumFrequencyTaskM1+0x2e>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001c1a:	7fa3      	ldrb	r3, [r4, #30]
 8001c1c:	2b05      	cmp	r3, #5
 8001c1e:	d05b      	beq.n	8001cd8 <TSK_MediumFrequencyTaskM1+0x1c4>
            if (! RUC_OTF_Exec(&RevUpControlM1))
 8001c20:	4864      	ldr	r0, [pc, #400]	@ (8001db4 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001c22:	f003 fed7 	bl	80059d4 <RUC_OTF_Exec>
 8001c26:	2800      	cmp	r0, #0
 8001c28:	d164      	bne.n	8001cf4 <TSK_MediumFrequencyTaskM1+0x1e0>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2110      	movs	r1, #16
 8001c2e:	0020      	movs	r0, r4
 8001c30:	f7ff fb60 	bl	80012f4 <MCI_FaultProcessing>
            (void)VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001c34:	466b      	mov	r3, sp
 8001c36:	4f63      	ldr	r7, [pc, #396]	@ (8001dc4 <TSK_MediumFrequencyTaskM1+0x2b0>)
 8001c38:	1c99      	adds	r1, r3, #2
 8001c3a:	0038      	movs	r0, r7
 8001c3c:	f004 fc3a 	bl	80064b4 <VSS_CalcAvrgMecSpeedUnit>
              ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 8001c40:	466b      	mov	r3, sp
 8001c42:	0030      	movs	r0, r6
 8001c44:	1c99      	adds	r1, r3, #2
 8001c46:	f004 fb3d 	bl	80062c4 <STO_PLL_IsObserverConverged>
 8001c4a:	0005      	movs	r5, r0
              STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 8001c4c:	0020      	movs	r0, r4
 8001c4e:	f7ff fbed 	bl	800142c <MCI_GetImposedMotorDirection>
 8001c52:	b241      	sxtb	r1, r0
 8001c54:	0030      	movs	r0, r6
 8001c56:	f004 fbbf 	bl	80063d8 <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 8001c5a:	0029      	movs	r1, r5
 8001c5c:	0038      	movs	r0, r7
 8001c5e:	f004 fcb5 	bl	80065cc <VSS_SetStartTransition>
            if (ObserverConverged)
 8001c62:	2d00      	cmp	r5, #0
 8001c64:	d100      	bne.n	8001c68 <TSK_MediumFrequencyTaskM1+0x154>
 8001c66:	e76c      	b.n	8001b42 <TSK_MediumFrequencyTaskM1+0x2e>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001c68:	2304      	movs	r3, #4
 8001c6a:	5ef1      	ldrsh	r1, [r6, r3]
 8001c6c:	4e53      	ldr	r6, [pc, #332]	@ (8001dbc <TSK_MediumFrequencyTaskM1+0x2a8>)
 8001c6e:	88f0      	ldrh	r0, [r6, #6]
 8001c70:	88b3      	ldrh	r3, [r6, #4]
 8001c72:	0400      	lsls	r0, r0, #16
 8001c74:	4318      	orrs	r0, r3
 8001c76:	f7ff fcbb 	bl	80015f0 <MCM_Park>
              REMNG_Init(pREMNG[M1]);
 8001c7a:	4d53      	ldr	r5, [pc, #332]	@ (8001dc8 <TSK_MediumFrequencyTaskM1+0x2b4>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001c7c:	9001      	str	r0, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 8001c7e:	6828      	ldr	r0, [r5, #0]
 8001c80:	f003 fd9a 	bl	80057b8 <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 8001c84:	2310      	movs	r3, #16
 8001c86:	5ef1      	ldrsh	r1, [r6, r3]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	6828      	ldr	r0, [r5, #0]
 8001c8c:	f003 fddc 	bl	8005848 <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 8001c90:	ab01      	add	r3, sp, #4
 8001c92:	2100      	movs	r1, #0
 8001c94:	5e59      	ldrsh	r1, [r3, r1]
 8001c96:	2200      	movs	r2, #0
 8001c98:	6828      	ldr	r0, [r5, #0]
 8001c9a:	f003 fdd5 	bl	8005848 <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 8001c9e:	2313      	movs	r3, #19
 8001ca0:	77e3      	strb	r3, [r4, #31]
 8001ca2:	e74e      	b.n	8001b42 <TSK_MediumFrequencyTaskM1+0x2e>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	7fa5      	ldrb	r5, [r4, #30]
 8001ca8:	439d      	bics	r5, r3
 8001caa:	2d01      	cmp	r5, #1
 8001cac:	d000      	beq.n	8001cb0 <TSK_MediumFrequencyTaskM1+0x19c>
 8001cae:	e748      	b.n	8001b42 <TSK_MediumFrequencyTaskM1+0x2e>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001cb0:	0020      	movs	r0, r4
 8001cb2:	f7ff fbbb 	bl	800142c <MCI_GetImposedMotorDirection>
 8001cb6:	4b3f      	ldr	r3, [pc, #252]	@ (8001db4 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001cb8:	0001      	movs	r1, r0
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f003 fe44 	bl	8005948 <RUC_Clear>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001cc0:	237f      	movs	r3, #127	@ 0x7f
 8001cc2:	4f3d      	ldr	r7, [pc, #244]	@ (8001db8 <TSK_MediumFrequencyTaskM1+0x2a4>)
 8001cc4:	6838      	ldr	r0, [r7, #0]
 8001cc6:	5cc3      	ldrb	r3, [r0, r3]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d14b      	bne.n	8001d64 <TSK_MediumFrequencyTaskM1+0x250>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8001ccc:	2100      	movs	r1, #0
 8001cce:	f000 fc0b 	bl	80024e8 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 8001cd2:	2311      	movs	r3, #17
 8001cd4:	77e3      	strb	r3, [r4, #31]
 8001cd6:	e734      	b.n	8001b42 <TSK_MediumFrequencyTaskM1+0x2e>
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8001cd8:	4b37      	ldr	r3, [pc, #220]	@ (8001db8 <TSK_MediumFrequencyTaskM1+0x2a4>)
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	f003 fbc0 	bl	8005460 <R3_1_SwitchOffPWM>
  FOC_Clear(motor);
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f7ff fe55 	bl	8001990 <FOC_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001ce6:	20c8      	movs	r0, #200	@ 0xc8
 8001ce8:	0080      	lsls	r0, r0, #2
 8001cea:	f7ff fd19 	bl	8001720 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001cee:	2308      	movs	r3, #8
 8001cf0:	77e3      	strb	r3, [r4, #31]
}
 8001cf2:	e726      	b.n	8001b42 <TSK_MediumFrequencyTaskM1+0x2e>
              IqdRef.q = STC_CalcTorqueReference(pSTC[M1]);
 8001cf4:	4b32      	ldr	r3, [pc, #200]	@ (8001dc0 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	f004 f832 	bl	8005d60 <STC_CalcTorqueReference>
              IqdRef.d = FOCVars[M1].UserIdref;
 8001cfc:	4b2f      	ldr	r3, [pc, #188]	@ (8001dbc <TSK_MediumFrequencyTaskM1+0x2a8>)
 8001cfe:	2114      	movs	r1, #20
 8001d00:	5e5a      	ldrsh	r2, [r3, r1]
              FOCVars[M1].Iqdref = IqdRef;
 8001d02:	8218      	strh	r0, [r3, #16]
 8001d04:	825a      	strh	r2, [r3, #18]
 8001d06:	e795      	b.n	8001c34 <TSK_MediumFrequencyTaskM1+0x120>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001d08:	4d2e      	ldr	r5, [pc, #184]	@ (8001dc4 <TSK_MediumFrequencyTaskM1+0x2b0>)
 8001d0a:	a901      	add	r1, sp, #4
 8001d0c:	0028      	movs	r0, r5
 8001d0e:	f004 fbd1 	bl	80064b4 <VSS_CalcAvrgMecSpeedUnit>
 8001d12:	0007      	movs	r7, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 8001d14:	0028      	movs	r0, r5
 8001d16:	f004 fc69 	bl	80065ec <VSS_TransitionEnded>
              if (true ==  LoopClosed)
 8001d1a:	2f00      	cmp	r7, #0
 8001d1c:	d102      	bne.n	8001d24 <TSK_MediumFrequencyTaskM1+0x210>
 8001d1e:	2800      	cmp	r0, #0
 8001d20:	d100      	bne.n	8001d24 <TSK_MediumFrequencyTaskM1+0x210>
 8001d22:	e70e      	b.n	8001b42 <TSK_MediumFrequencyTaskM1+0x2e>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001d24:	4f29      	ldr	r7, [pc, #164]	@ (8001dcc <TSK_MediumFrequencyTaskM1+0x2b8>)
 8001d26:	4b25      	ldr	r3, [pc, #148]	@ (8001dbc <TSK_MediumFrequencyTaskM1+0x2a8>)
 8001d28:	0038      	movs	r0, r7
 8001d2a:	2510      	movs	r5, #16
 8001d2c:	5f5d      	ldrsh	r5, [r3, r5]
 8001d2e:	f003 f887 	bl	8004e40 <PID_GetKIDivisor>
 8001d32:	b201      	sxth	r1, r0
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8001d34:	4369      	muls	r1, r5
 8001d36:	0038      	movs	r0, r7
 8001d38:	f003 f880 	bl	8004e3c <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 8001d3c:	4d20      	ldr	r5, [pc, #128]	@ (8001dc0 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001d3e:	0031      	movs	r1, r6
 8001d40:	6828      	ldr	r0, [r5, #0]
 8001d42:	f003 ffb7 	bl	8005cb4 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8001d46:	2000      	movs	r0, #0
 8001d48:	f7ff febe 	bl	8001ac8 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f7ff febd 	bl	8001acc <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001d52:	6828      	ldr	r0, [r5, #0]
 8001d54:	f004 f846 	bl	8005de4 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001d58:	0020      	movs	r0, r4
 8001d5a:	f7ff fad3 	bl	8001304 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8001d5e:	2306      	movs	r3, #6
 8001d60:	77e3      	strb	r3, [r4, #31]
 8001d62:	e6ee      	b.n	8001b42 <TSK_MediumFrequencyTaskM1+0x2e>
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001d64:	2360      	movs	r3, #96	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001d66:	2101      	movs	r1, #1
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001d68:	52c5      	strh	r5, [r0, r3]
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001d6a:	f000 fbbd 	bl	80024e8 <PWMC_CurrentReadingCalibr>
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001d6e:	2224      	movs	r2, #36	@ 0x24
 8001d70:	2101      	movs	r1, #1
 8001d72:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <TSK_MediumFrequencyTaskM1+0x2a8>)
 8001d74:	5499      	strb	r1, [r3, r2]
              STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);
 8001d76:	4b12      	ldr	r3, [pc, #72]	@ (8001dc0 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001d78:	4912      	ldr	r1, [pc, #72]	@ (8001dc4 <TSK_MediumFrequencyTaskM1+0x2b0>)
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	f003 ff9a 	bl	8005cb4 <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 8001d80:	0030      	movs	r0, r6
 8001d82:	f004 fa3b 	bl	80061fc <STO_PLL_Clear>
              FOC_Clear(M1);
 8001d86:	2000      	movs	r0, #0
 8001d88:	f7ff fe02 	bl	8001990 <FOC_Clear>
              R3_1_SwitchOnPWM(pwmcHandle[M1]);
 8001d8c:	6838      	ldr	r0, [r7, #0]
 8001d8e:	f003 faef 	bl	8005370 <R3_1_SwitchOnPWM>
              Mci[M1].State = START;
 8001d92:	2304      	movs	r3, #4
 8001d94:	77e3      	strb	r3, [r4, #31]
 8001d96:	e6d4      	b.n	8001b42 <TSK_MediumFrequencyTaskM1+0x2e>
                FOC_Clear(M1);
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f7ff fdf9 	bl	8001990 <FOC_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	83e3      	strh	r3, [r4, #30]
 8001da2:	e6ce      	b.n	8001b42 <TSK_MediumFrequencyTaskM1+0x2e>
 8001da4:	20000068 	.word	0x20000068
 8001da8:	20000028 	.word	0x20000028
 8001dac:	20000000 	.word	0x20000000
 8001db0:	08006a14 	.word	0x08006a14
 8001db4:	20000238 	.word	0x20000238
 8001db8:	200006c4 	.word	0x200006c4
 8001dbc:	2000069c 	.word	0x2000069c
 8001dc0:	20000034 	.word	0x20000034
 8001dc4:	200003c0 	.word	0x200003c0
 8001dc8:	20000698 	.word	0x20000698
 8001dcc:	2000033c 	.word	0x2000033c

08001dd0 <FOC_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t FOC_HighFrequencyTask(uint8_t bMotorNbr)
{
 8001dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd2:	46de      	mov	lr, fp
 8001dd4:	4657      	mov	r7, sl
 8001dd6:	4645      	mov	r5, r8
 8001dd8:	464e      	mov	r6, r9

  /* USER CODE END HighFrequencyTask 0 */

  Observer_Inputs_t STO_Inputs; /* Only if sensorless main */

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8001dda:	4c5b      	ldr	r4, [pc, #364]	@ (8001f48 <FOC_HighFrequencyTask+0x178>)
{
 8001ddc:	b5e0      	push	{r5, r6, r7, lr}
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8001dde:	0021      	movs	r1, r4
{
 8001de0:	b089      	sub	sp, #36	@ 0x24
 8001de2:	0005      	movs	r5, r0
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8001de4:	2204      	movs	r2, #4
 8001de6:	311a      	adds	r1, #26
 8001de8:	a805      	add	r0, sp, #20
 8001dea:	f004 fc2f 	bl	800664c <memcpy>
  if (SWITCH_OVER == Mci[M1].State)
 8001dee:	4f57      	ldr	r7, [pc, #348]	@ (8001f4c <FOC_HighFrequencyTask+0x17c>)
 8001df0:	7ffb      	ldrb	r3, [r7, #31]
 8001df2:	2b13      	cmp	r3, #19
 8001df4:	d100      	bne.n	8001df8 <FOC_HighFrequencyTask+0x28>
 8001df6:	e095      	b.n	8001f24 <FOC_HighFrequencyTask+0x154>
static inline bool RUC_Get_SCLowsideOTF_Status(RevUpCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  return ((MC_NULL == pHandle) ? false : pHandle->OTFSCLowside);
#else
  return (pHandle->OTFSCLowside);
 8001df8:	2354      	movs	r3, #84	@ 0x54
 8001dfa:	4e55      	ldr	r6, [pc, #340]	@ (8001f50 <FOC_HighFrequencyTask+0x180>)
  }
  else
  {
    /* Nothing to do */
  }
  if(!RUC_Get_SCLowsideOTF_Status(&RevUpControlM1))
 8001dfc:	5cf3      	ldrb	r3, [r6, r3]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d15f      	bne.n	8001ec2 <FOC_HighFrequencyTask+0xf2>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001e02:	4b54      	ldr	r3, [pc, #336]	@ (8001f54 <FOC_HighFrequencyTask+0x184>)
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8001e04:	a902      	add	r1, sp, #8
 8001e06:	681b      	ldr	r3, [r3, #0]
static inline int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	2204      	movs	r2, #4
 8001e0c:	5e9b      	ldrsh	r3, [r3, r2]
 8001e0e:	4698      	mov	r8, r3
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001e10:	4b51      	ldr	r3, [pc, #324]	@ (8001f58 <FOC_HighFrequencyTask+0x188>)
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	4699      	mov	r9, r3
 8001e16:	6803      	ldr	r3, [r0, #0]
 8001e18:	4798      	blx	r3
  RCM_ExecNextConv();
 8001e1a:	f001 f931 	bl	8003080 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8001e1e:	9802      	ldr	r0, [sp, #8]
 8001e20:	f7ff fb64 	bl	80014ec <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001e24:	4641      	mov	r1, r8
  Ialphabeta = MCM_Clarke(Iab);
 8001e26:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001e28:	f7ff fbe2 	bl	80015f0 <MCM_Park>
 8001e2c:	9000      	str	r0, [sp, #0]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001e2e:	2310      	movs	r3, #16
 8001e30:	5ee1      	ldrsh	r1, [r4, r3]
 8001e32:	4b4a      	ldr	r3, [pc, #296]	@ (8001f5c <FOC_HighFrequencyTask+0x18c>)
 8001e34:	b200      	sxth	r0, r0
 8001e36:	1a09      	subs	r1, r1, r0
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	f003 f809 	bl	8004e50 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001e3e:	2312      	movs	r3, #18
 8001e40:	5ee1      	ldrsh	r1, [r4, r3]
 8001e42:	466b      	mov	r3, sp
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001e44:	4682      	mov	sl, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001e46:	2202      	movs	r2, #2
 8001e48:	5e9b      	ldrsh	r3, [r3, r2]
 8001e4a:	1ac9      	subs	r1, r1, r3
 8001e4c:	4b44      	ldr	r3, [pc, #272]	@ (8001f60 <FOC_HighFrequencyTask+0x190>)
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	f002 fffe 	bl	8004e50 <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001e54:	4652      	mov	r2, sl
 8001e56:	ab01      	add	r3, sp, #4
 8001e58:	801a      	strh	r2, [r3, #0]
 8001e5a:	8058      	strh	r0, [r3, #2]
 8001e5c:	9901      	ldr	r1, [sp, #4]
 8001e5e:	4841      	ldr	r0, [pc, #260]	@ (8001f64 <FOC_HighFrequencyTask+0x194>)
 8001e60:	f002 ff7e 	bl	8004d60 <Circle_Limitation>
 8001e64:	b203      	sxth	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001e66:	4641      	mov	r1, r8
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001e68:	469b      	mov	fp, r3
 8001e6a:	1403      	asrs	r3, r0, #16
 8001e6c:	469a      	mov	sl, r3
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001e6e:	f7ff fc0d 	bl	800168c <MCM_Rev_Park>
 8001e72:	9004      	str	r0, [sp, #16]
  RCM_ReadOngoingConv();
 8001e74:	f001 f93c 	bl	80030f0 <RCM_ReadOngoingConv>
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001e78:	464b      	mov	r3, r9
 8001e7a:	9904      	ldr	r1, [sp, #16]
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	f000 fa2b 	bl	80022d8 <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
 8001e82:	465b      	mov	r3, fp
 8001e84:	82e3      	strh	r3, [r4, #22]
 8001e86:	4653      	mov	r3, sl
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001e88:	4681      	mov	r9, r0
  FOCVars[M1].Iab = Iab;
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	a902      	add	r1, sp, #8
 8001e8e:	0020      	movs	r0, r4
  FOCVars[M1].Vqd = Vqd;
 8001e90:	8323      	strh	r3, [r4, #24]
  FOCVars[M1].Iab = Iab;
 8001e92:	f004 fbdb 	bl	800664c <memcpy>
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001e96:	2204      	movs	r2, #4
 8001e98:	a903      	add	r1, sp, #12
 8001e9a:	1d20      	adds	r0, r4, #4
 8001e9c:	f004 fbd6 	bl	800664c <memcpy>
  FOCVars[M1].Iqd = Iqd;
 8001ea0:	0020      	movs	r0, r4
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	4669      	mov	r1, sp
 8001ea6:	300c      	adds	r0, #12
 8001ea8:	f004 fbd0 	bl	800664c <memcpy>
  FOCVars[M1].Valphabeta = Valphabeta;
 8001eac:	0020      	movs	r0, r4
 8001eae:	2204      	movs	r2, #4
 8001eb0:	301a      	adds	r0, #26
 8001eb2:	a904      	add	r1, sp, #16
 8001eb4:	f004 fbca 	bl	800664c <memcpy>
  FOCVars[M1].hElAngle = hElAngle;
 8001eb8:	4643      	mov	r3, r8
 8001eba:	8423      	strh	r3, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 8001ebc:	464b      	mov	r3, r9
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d03c      	beq.n	8001f3c <FOC_HighFrequencyTask+0x16c>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001ec2:	0030      	movs	r0, r6
 8001ec4:	f003 fe9e 	bl	8005c04 <RUC_FirstAccelerationStageReached>
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 8001ec8:	1d21      	adds	r1, r4, #4
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001eca:	0006      	movs	r6, r0
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 8001ecc:	2204      	movs	r2, #4
 8001ece:	a806      	add	r0, sp, #24
 8001ed0:	f004 fbbc 	bl	800664c <memcpy>
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001ed4:	466a      	mov	r2, sp
  {
    temp_avBusVoltage_d = pHandle->AvBusVoltage_d;
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
 8001ed6:	4b24      	ldr	r3, [pc, #144]	@ (8001f68 <FOC_HighFrequencyTask+0x198>)
    (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001ed8:	4c24      	ldr	r4, [pc, #144]	@ (8001f6c <FOC_HighFrequencyTask+0x19c>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001eda:	88db      	ldrh	r3, [r3, #6]
    (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001edc:	0020      	movs	r0, r4
 8001ede:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001ee0:	8393      	strh	r3, [r2, #28]
    (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001ee2:	f003 ff87 	bl	8005df4 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /* Only in case of Sensor-less */
 8001ee6:	0020      	movs	r0, r4
 8001ee8:	f004 f954 	bl	8006194 <STO_PLL_CalcAvrgElSpeedDpp>
    if (false == IsAccelerationStageReached)
 8001eec:	2e00      	cmp	r6, #0
 8001eee:	d013      	beq.n	8001f18 <FOC_HighFrequencyTask+0x148>
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State))
 8001ef0:	7ffb      	ldrb	r3, [r7, #31]
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d009      	beq.n	8001f0a <FOC_HighFrequencyTask+0x13a>
 8001ef6:	2b13      	cmp	r3, #19
 8001ef8:	d007      	beq.n	8001f0a <FOC_HighFrequencyTask+0x13a>
}
 8001efa:	0028      	movs	r0, r5
 8001efc:	b009      	add	sp, #36	@ 0x24
 8001efe:	bcf0      	pop	{r4, r5, r6, r7}
 8001f00:	46bb      	mov	fp, r7
 8001f02:	46b2      	mov	sl, r6
 8001f04:	46a9      	mov	r9, r5
 8001f06:	46a0      	mov	r8, r4
 8001f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001f0a:	88a3      	ldrh	r3, [r4, #4]
 8001f0c:	a904      	add	r1, sp, #16
 8001f0e:	800b      	strh	r3, [r1, #0]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001f10:	4817      	ldr	r0, [pc, #92]	@ (8001f70 <FOC_HighFrequencyTask+0x1a0>)
 8001f12:	f004 fa77 	bl	8006404 <VSS_CalcElAngle>
 8001f16:	e7f0      	b.n	8001efa <FOC_HighFrequencyTask+0x12a>
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 8001f18:	0020      	movs	r0, r4
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	3034      	adds	r0, #52	@ 0x34
 8001f1e:	f002 ff8d 	bl	8004e3c <PID_SetIntegralTerm>
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8001f22:	e7e5      	b.n	8001ef0 <FOC_HighFrequencyTask+0x120>
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8001f24:	4e13      	ldr	r6, [pc, #76]	@ (8001f74 <FOC_HighFrequencyTask+0x1a4>)
 8001f26:	6830      	ldr	r0, [r6, #0]
 8001f28:	f003 fc6a 	bl	8005800 <REMNG_RampCompleted>
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	d000      	beq.n	8001f32 <FOC_HighFrequencyTask+0x162>
 8001f30:	e762      	b.n	8001df8 <FOC_HighFrequencyTask+0x28>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 8001f32:	6830      	ldr	r0, [r6, #0]
 8001f34:	f003 fc48 	bl	80057c8 <REMNG_Calc>
 8001f38:	8220      	strh	r0, [r4, #16]
 8001f3a:	e75d      	b.n	8001df8 <FOC_HighFrequencyTask+0x28>
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2101      	movs	r1, #1
 8001f40:	0038      	movs	r0, r7
 8001f42:	f7ff f9d7 	bl	80012f4 <MCI_FaultProcessing>
 8001f46:	e7d8      	b.n	8001efa <FOC_HighFrequencyTask+0x12a>
 8001f48:	2000069c 	.word	0x2000069c
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	20000238 	.word	0x20000238
 8001f54:	20000034 	.word	0x20000034
 8001f58:	200006c4 	.word	0x200006c4
 8001f5c:	20000030 	.word	0x20000030
 8001f60:	2000002c 	.word	0x2000002c
 8001f64:	20000038 	.word	0x20000038
 8001f68:	20000378 	.word	0x20000378
 8001f6c:	20000068 	.word	0x20000068
 8001f70:	200003c0 	.word	0x200003c0
 8001f74:	20000698 	.word	0x20000698

08001f78 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8001f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f7a:	46de      	mov	lr, fp
 8001f7c:	4645      	mov	r5, r8
 8001f7e:	4657      	mov	r7, sl
 8001f80:	464e      	mov	r6, r9
  }
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
 8001f82:	0003      	movs	r3, r0
{
 8001f84:	4683      	mov	fp, r0
 8001f86:	b5e0      	push	{r5, r6, r7, lr}
    uint8_t * rxData = pHandle->rxBuffer;
 8001f88:	6842      	ldr	r2, [r0, #4]
{
 8001f8a:	b08b      	sub	sp, #44	@ 0x2c
    uint8_t * txData = pHandle->txBuffer;
 8001f8c:	6880      	ldr	r0, [r0, #8]
{
 8001f8e:	9104      	str	r1, [sp, #16]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001f90:	4936      	ldr	r1, [pc, #216]	@ (800206c <RI_SetRegCommandParser+0xf4>)
    uint8_t * txData = pHandle->txBuffer;
 8001f92:	9003      	str	r0, [sp, #12]
    int16_t rxLength = pHandle->rxLength;
 8001f94:	240c      	movs	r4, #12
 8001f96:	5f1c      	ldrsh	r4, [r3, r4]
    uint16_t size = 0U;
 8001f98:	ab04      	add	r3, sp, #16
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001f9a:	9108      	str	r1, [sp, #32]
 8001f9c:	4934      	ldr	r1, [pc, #208]	@ (8002070 <RI_SetRegCommandParser+0xf8>)
    uint16_t size = 0U;
 8001f9e:	469c      	mov	ip, r3
 8001fa0:	250e      	movs	r5, #14
 8001fa2:	2300      	movs	r3, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001fa4:	9109      	str	r1, [sp, #36]	@ 0x24
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8001fa6:	4659      	mov	r1, fp
    uint16_t size = 0U;
 8001fa8:	4465      	add	r5, ip
 8001faa:	802b      	strh	r3, [r5, #0]
    pHandle->txLength = 0;
 8001fac:	81cb      	strh	r3, [r1, #14]

    while (rxLength > 0)
 8001fae:	2c00      	cmp	r4, #0
 8001fb0:	dd52      	ble.n	8002058 <RI_SetRegCommandParser+0xe0>
  uint8_t retVal = MCP_CMD_OK;
 8001fb2:	9305      	str	r3, [sp, #20]
      regID = *dataElementID & REG_MASK;
      typeID = (uint8_t)*dataElementID & TYPE_MASK;

      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));

      if (motorID > NBR_OF_MOTORS)
 8001fb4:	3306      	adds	r3, #6
 8001fb6:	4699      	mov	r9, r3
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 8001fb8:	2301      	movs	r3, #1
 8001fba:	1a1b      	subs	r3, r3, r0
 8001fbc:	0026      	movs	r6, r4
    uint8_t * txData = pHandle->txBuffer;
 8001fbe:	0007      	movs	r7, r0
        if ((1U == number_of_item) && (0 == rxLength))
 8001fc0:	0014      	movs	r4, r2
 8001fc2:	469a      	mov	sl, r3
      if (motorID > NBR_OF_MOTORS)
 8001fc4:	464b      	mov	r3, r9
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8001fc6:	7822      	ldrb	r2, [r4, #0]
      regID = *dataElementID & REG_MASK;
 8001fc8:	8820      	ldrh	r0, [r4, #0]
      if (motorID > NBR_OF_MOTORS)
 8001fca:	4213      	tst	r3, r2
 8001fcc:	d135      	bne.n	800203a <RI_SetRegCommandParser+0xc2>
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8001fce:	1eb3      	subs	r3, r6, #2
 8001fd0:	469c      	mov	ip, r3
 8001fd2:	b29e      	uxth	r6, r3
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001fd4:	2138      	movs	r1, #56	@ 0x38
      regID = *dataElementID & REG_MASK;
 8001fd6:	2307      	movs	r3, #7
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001fd8:	4011      	ands	r1, r2
 8001fda:	4398      	bics	r0, r3
 8001fdc:	4013      	ands	r3, r2
 8001fde:	4662      	mov	r2, ip
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4698      	mov	r8, r3
 8001fe4:	2310      	movs	r3, #16
 8001fe6:	b212      	sxth	r2, r2
 8001fe8:	9200      	str	r2, [sp, #0]
 8001fea:	aa04      	add	r2, sp, #16
 8001fec:	18d2      	adds	r2, r2, r3
 8001fee:	4643      	mov	r3, r8
 8001ff0:	58d3      	ldr	r3, [r2, r3]
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8001ff2:	3402      	adds	r4, #2
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001ff4:	0022      	movs	r2, r4
 8001ff6:	4698      	mov	r8, r3
 8001ff8:	002b      	movs	r3, r5
 8001ffa:	47c0      	blx	r8
        if ((1U == number_of_item) && (0 == rxLength))
 8001ffc:	4652      	mov	r2, sl
        rxLength = (int16_t) (rxLength - size);
 8001ffe:	8829      	ldrh	r1, [r5, #0]
        if ((1U == number_of_item) && (0 == rxLength))
 8002000:	18ba      	adds	r2, r7, r2
        rxLength = (int16_t) (rxLength - size);
 8002002:	1a76      	subs	r6, r6, r1
        if ((1U == number_of_item) && (0 == rxLength))
 8002004:	b2d2      	uxtb	r2, r2
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8002006:	0003      	movs	r3, r0
        rxLength = (int16_t) (rxLength - size);
 8002008:	b236      	sxth	r6, r6
        rxData = rxData+size;
 800200a:	1864      	adds	r4, r4, r1
        if ((1U == number_of_item) && (0 == rxLength))
 800200c:	2a01      	cmp	r2, #1
 800200e:	d01f      	beq.n	8002050 <RI_SetRegCommandParser+0xd8>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 8002010:	9a04      	ldr	r2, [sp, #16]
 8002012:	9b03      	ldr	r3, [sp, #12]
 8002014:	4694      	mov	ip, r2
 8002016:	4463      	add	r3, ip
 8002018:	b2ba      	uxth	r2, r7
 800201a:	b29b      	uxth	r3, r3
 800201c:	429a      	cmp	r2, r3
 800201e:	d015      	beq.n	800204c <RI_SetRegCommandParser+0xd4>
          {
            *txData = accessResult;
            txData = txData+1;
            pHandle->txLength++;
 8002020:	465b      	mov	r3, fp
 8002022:	465a      	mov	r2, fp
            *txData = accessResult;
 8002024:	7038      	strb	r0, [r7, #0]
            pHandle->txLength++;
 8002026:	89db      	ldrh	r3, [r3, #14]
            txData = txData+1;
 8002028:	3701      	adds	r7, #1
            pHandle->txLength++;
 800202a:	3301      	adds	r3, #1
 800202c:	81d3      	strh	r3, [r2, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 800202e:	2800      	cmp	r0, #0
 8002030:	d018      	beq.n	8002064 <RI_SetRegCommandParser+0xec>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002032:	2807      	cmp	r0, #7
 8002034:	d001      	beq.n	800203a <RI_SetRegCommandParser+0xc2>
 8002036:	280a      	cmp	r0, #10
 8002038:	d112      	bne.n	8002060 <RI_SetRegCommandParser+0xe8>
        retVal = MCP_CMD_NOK;
 800203a:	2301      	movs	r3, #1
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 800203c:	0018      	movs	r0, r3
 800203e:	b00b      	add	sp, #44	@ 0x2c
 8002040:	bcf0      	pop	{r4, r5, r6, r7}
 8002042:	46bb      	mov	fp, r7
 8002044:	46b2      	mov	sl, r6
 8002046:	46a9      	mov	r9, r5
 8002048:	46a0      	mov	r8, r4
 800204a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800204c:	2308      	movs	r3, #8
  return (retVal);
 800204e:	e7f5      	b.n	800203c <RI_SetRegCommandParser+0xc4>
        if ((1U == number_of_item) && (0 == rxLength))
 8002050:	2e00      	cmp	r6, #0
 8002052:	d1dd      	bne.n	8002010 <RI_SetRegCommandParser+0x98>
    if (MCP_CMD_OK == retVal)
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f1      	bne.n	800203c <RI_SetRegCommandParser+0xc4>
      pHandle->txLength = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	465a      	mov	r2, fp
 800205c:	81d3      	strh	r3, [r2, #14]
 800205e:	e7ed      	b.n	800203c <RI_SetRegCommandParser+0xc4>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002060:	2301      	movs	r3, #1
 8002062:	9305      	str	r3, [sp, #20]
    while (rxLength > 0)
 8002064:	2e00      	cmp	r6, #0
 8002066:	dcad      	bgt.n	8001fc4 <RI_SetRegCommandParser+0x4c>
 8002068:	9b05      	ldr	r3, [sp, #20]
 800206a:	e7f3      	b.n	8002054 <RI_SetRegCommandParser+0xdc>
 800206c:	0800259d 	.word	0x0800259d
 8002070:	0800264d 	.word	0x0800264d

08002074 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002076:	464e      	mov	r6, r9
 8002078:	4645      	mov	r5, r8
 800207a:	4657      	mov	r7, sl
 800207c:	46de      	mov	lr, fp
 800207e:	b5e0      	push	{r5, r6, r7, lr}
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
 8002080:	6883      	ldr	r3, [r0, #8]
{
 8002082:	b087      	sub	sp, #28
    uint16_t size = 0U;
 8002084:	2200      	movs	r2, #0
    uint8_t * txData = pHandle->txBuffer;
 8002086:	4698      	mov	r8, r3
    uint16_t size = 0U;
 8002088:	466b      	mov	r3, sp
    uint16_t rxLength = pHandle->rxLength;
    int16_t freeSpaceS16 = (int16_t) txSyncFreeSpace;
 800208a:	b20d      	sxth	r5, r1

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 800208c:	491c      	ldr	r1, [pc, #112]	@ (8002100 <RI_GetRegCommandParser+0x8c>)
    uint16_t size = 0U;
 800208e:	81da      	strh	r2, [r3, #14]
    uint16_t rxLength = pHandle->rxLength;
 8002090:	8983      	ldrh	r3, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8002092:	9104      	str	r1, [sp, #16]
 8002094:	491b      	ldr	r1, [pc, #108]	@ (8002104 <RI_GetRegCommandParser+0x90>)
 8002096:	ae04      	add	r6, sp, #16
{
 8002098:	0007      	movs	r7, r0
    uint8_t * rxData = pHandle->rxBuffer;
 800209a:	6844      	ldr	r4, [r0, #4]
    pHandle->txLength = 0;
 800209c:	81c2      	strh	r2, [r0, #14]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 800209e:	6071      	str	r1, [r6, #4]
    while (rxLength > 0U)
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d009      	beq.n	80020b8 <RI_GetRegCommandParser+0x44>
 80020a4:	18e3      	adds	r3, r4, r3
      regID = *dataElementID & REG_MASK;
      typeID = (uint8_t)*dataElementID & TYPE_MASK;

      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));

      if (motorID > NBR_OF_MOTORS)
 80020a6:	3206      	adds	r2, #6
    while (rxLength > 0U)
 80020a8:	b29b      	uxth	r3, r3
      if (motorID > NBR_OF_MOTORS)
 80020aa:	4691      	mov	r9, r2
    while (rxLength > 0U)
 80020ac:	469a      	mov	sl, r3
      if (motorID > NBR_OF_MOTORS)
 80020ae:	464b      	mov	r3, r9
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 80020b0:	7822      	ldrb	r2, [r4, #0]
      regID = *dataElementID & REG_MASK;
 80020b2:	8820      	ldrh	r0, [r4, #0]
      if (motorID > NBR_OF_MOTORS)
 80020b4:	4213      	tst	r3, r2
 80020b6:	d007      	beq.n	80020c8 <RI_GetRegCommandParser+0x54>
      {
        retVal = MCP_CMD_NOK;
 80020b8:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 80020ba:	b007      	add	sp, #28
 80020bc:	bcf0      	pop	{r4, r5, r6, r7}
 80020be:	46bb      	mov	fp, r7
 80020c0:	46b2      	mov	sl, r6
 80020c2:	46a9      	mov	r9, r5
 80020c4:	46a0      	mov	r8, r4
 80020c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regID = *dataElementID & REG_MASK;
 80020c8:	2307      	movs	r3, #7
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 80020ca:	4398      	bics	r0, r3
 80020cc:	4013      	ands	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	9500      	str	r5, [sp, #0]
 80020d2:	58f3      	ldr	r3, [r6, r3]
 80020d4:	2138      	movs	r1, #56	@ 0x38
 80020d6:	469b      	mov	fp, r3
 80020d8:	230e      	movs	r3, #14
 80020da:	4011      	ands	r1, r2
 80020dc:	446b      	add	r3, sp
 80020de:	4642      	mov	r2, r8
 80020e0:	47d8      	blx	fp
        if (retVal == MCP_CMD_OK )
 80020e2:	2800      	cmp	r0, #0
 80020e4:	d1e9      	bne.n	80020ba <RI_GetRegCommandParser+0x46>
          txData = txData+size;
 80020e6:	466b      	mov	r3, sp
          pHandle->txLength += size;
 80020e8:	89fa      	ldrh	r2, [r7, #14]
          txData = txData+size;
 80020ea:	89db      	ldrh	r3, [r3, #14]
    while (rxLength > 0U)
 80020ec:	3402      	adds	r4, #2
          pHandle->txLength += size;
 80020ee:	189a      	adds	r2, r3, r2
          freeSpaceS16 = freeSpaceS16-size;
 80020f0:	1aed      	subs	r5, r5, r3
          txData = txData+size;
 80020f2:	4498      	add	r8, r3
    while (rxLength > 0U)
 80020f4:	b2a3      	uxth	r3, r4
          pHandle->txLength += size;
 80020f6:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 80020f8:	b22d      	sxth	r5, r5
    while (rxLength > 0U)
 80020fa:	4553      	cmp	r3, sl
 80020fc:	d1d7      	bne.n	80020ae <RI_GetRegCommandParser+0x3a>
 80020fe:	e7dc      	b.n	80020ba <RI_GetRegCommandParser+0x46>
 8002100:	080028f5 	.word	0x080028f5
 8002104:	0800299d 	.word	0x0800299d

08002108 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8002108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800210a:	464f      	mov	r7, r9
 800210c:	4646      	mov	r6, r8
 800210e:	46d6      	mov	lr, sl
 8002110:	0004      	movs	r4, r0
 8002112:	b5c0      	push	{r6, r7, lr}
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002114:	6822      	ldr	r2, [r4, #0]
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 8002116:	6847      	ldr	r7, [r0, #4]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002118:	8992      	ldrh	r2, [r2, #12]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800211a:	883d      	ldrh	r5, [r7, #0]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800211c:	3a01      	subs	r2, #1
 800211e:	b291      	uxth	r1, r2
 8002120:	b212      	sxth	r2, r2
 8002122:	4692      	mov	sl, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8002124:	2280      	movs	r2, #128	@ 0x80
 8002126:	0052      	lsls	r2, r2, #1
 8002128:	4694      	mov	ip, r2
 800212a:	3a01      	subs	r2, #1
 800212c:	4690      	mov	r8, r2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800212e:	2607      	movs	r6, #7
 8002130:	002b      	movs	r3, r5
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002132:	4689      	mov	r9, r1
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8002134:	002a      	movs	r2, r5
 8002136:	4641      	mov	r1, r8
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002138:	8980      	ldrh	r0, [r0, #12]
{
 800213a:	b082      	sub	sp, #8
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800213c:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800213e:	43b3      	bics	r3, r6
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002140:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002142:	3702      	adds	r7, #2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8002144:	438a      	bics	r2, r1
 8002146:	4562      	cmp	r2, ip
 8002148:	d02f      	beq.n	80021aa <MCP_ReceivedPacket+0xa2>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 800214a:	3d01      	subs	r5, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 800214c:	4035      	ands	r5, r6
 800214e:	00ae      	lsls	r6, r5, #2
 8002150:	1975      	adds	r5, r6, r5
 8002152:	4e44      	ldr	r6, [pc, #272]	@ (8002264 <MCP_ReceivedPacket+0x15c>)
 8002154:	00ed      	lsls	r5, r5, #3
 8002156:	19ad      	adds	r5, r5, r6

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 8002158:	2600      	movs	r6, #0
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800215a:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 800215c:	6067      	str	r7, [r4, #4]
    pHandle->txLength = 0U;
 800215e:	81e6      	strh	r6, [r4, #14]

    switch (command)
 8002160:	2b38      	cmp	r3, #56	@ 0x38
 8002162:	d810      	bhi.n	8002186 <MCP_ReceivedPacket+0x7e>
 8002164:	4a40      	ldr	r2, [pc, #256]	@ (8002268 <MCP_ReceivedPacket+0x160>)
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	58d3      	ldr	r3, [r2, r3]
 800216a:	469f      	mov	pc, r3
 800216c:	2300      	movs	r3, #0
 800216e:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002170:	68a2      	ldr	r2, [r4, #8]
 8002172:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 8002174:	89e3      	ldrh	r3, [r4, #14]
 8002176:	3301      	adds	r3, #1
 8002178:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 800217a:	b002      	add	sp, #8
 800217c:	bce0      	pop	{r5, r6, r7}
 800217e:	46ba      	mov	sl, r7
 8002180:	46b1      	mov	r9, r6
 8002182:	46a8      	mov	r8, r5
 8002184:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 8002186:	2b68      	cmp	r3, #104	@ 0x68
 8002188:	d04f      	beq.n	800222a <MCP_ReceivedPacket+0x122>
 800218a:	d906      	bls.n	800219a <MCP_ReceivedPacket+0x92>
 800218c:	2b78      	cmp	r3, #120	@ 0x78
 800218e:	d1ed      	bne.n	800216c <MCP_ReceivedPacket+0x64>
        HAL_NVIC_SystemReset();
 8002190:	f001 fc38 	bl	8003a04 <HAL_NVIC_SystemReset>
        MCPResponse = MCP_CMD_OK;
 8002194:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002196:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002198:	e7ea      	b.n	8002170 <MCP_ReceivedPacket+0x68>
    switch (command)
 800219a:	2b48      	cmp	r3, #72	@ 0x48
 800219c:	d1e6      	bne.n	800216c <MCP_ReceivedPacket+0x64>
        MCI_Clear_Iqdref(pMCI);
 800219e:	0028      	movs	r0, r5
 80021a0:	f7ff f99c 	bl	80014dc <MCI_Clear_Iqdref>
        MCPResponse = MCP_CMD_OK;
 80021a4:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80021a6:	89e3      	ldrh	r3, [r4, #14]
        break;
 80021a8:	e7e2      	b.n	8002170 <MCP_ReceivedPacket+0x68>
    pHandle->txLength = 0U;
 80021aa:	2100      	movs	r1, #0
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	08dd      	lsrs	r5, r3, #3
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80021b0:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 80021b2:	6067      	str	r7, [r4, #4]
    pHandle->txLength = 0U;
 80021b4:	81e1      	strh	r1, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80021b6:	2b0f      	cmp	r3, #15
 80021b8:	d941      	bls.n	800223e <MCP_ReceivedPacket+0x136>
 80021ba:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 80021bc:	200d      	movs	r0, #13
 80021be:	e7d7      	b.n	8002170 <MCP_ReceivedPacket+0x68>
        if (IDLE == MCI_GetSTMState(pMCI))
 80021c0:	0028      	movs	r0, r5
 80021c2:	f7ff f8db 	bl	800137c <MCI_GetSTMState>
 80021c6:	2800      	cmp	r0, #0
 80021c8:	d005      	beq.n	80021d6 <MCP_ReceivedPacket+0xce>
          (void)MCI_StopMotor(pMCI);
 80021ca:	0028      	movs	r0, r5
 80021cc:	f7ff f8f4 	bl	80013b8 <MCI_StopMotor>
        MCPResponse = MCP_CMD_OK;
 80021d0:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80021d2:	89e3      	ldrh	r3, [r4, #14]
 80021d4:	e7cc      	b.n	8002170 <MCP_ReceivedPacket+0x68>
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 80021d6:	0028      	movs	r0, r5
 80021d8:	f7ff f8d6 	bl	8001388 <MCI_StartMotor>
 80021dc:	2301      	movs	r3, #1
 80021de:	4058      	eors	r0, r3
 80021e0:	b2c0      	uxtb	r0, r0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80021e2:	89e3      	ldrh	r3, [r4, #14]
 80021e4:	e7c4      	b.n	8002170 <MCP_ReceivedPacket+0x68>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 80021e6:	4649      	mov	r1, r9
 80021e8:	0020      	movs	r0, r4
 80021ea:	f7ff ff43 	bl	8002074 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80021ee:	89e3      	ldrh	r3, [r4, #14]
        break;
 80021f0:	e7be      	b.n	8002170 <MCP_ReceivedPacket+0x68>
        pHandle->txLength = 4U;
 80021f2:	2304      	movs	r3, #4
        *pHandle->txBuffer = MCP_VERSION;
 80021f4:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 80021f6:	81e3      	strh	r3, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 80021f8:	68a3      	ldr	r3, [r4, #8]
        MCPResponse = MCP_CMD_OK;
 80021fa:	2000      	movs	r0, #0
        *pHandle->txBuffer = MCP_VERSION;
 80021fc:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80021fe:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002200:	e7b6      	b.n	8002170 <MCP_ReceivedPacket+0x68>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8002202:	4649      	mov	r1, r9
 8002204:	0020      	movs	r0, r4
 8002206:	f7ff feb7 	bl	8001f78 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800220a:	89e3      	ldrh	r3, [r4, #14]
        break;
 800220c:	e7b0      	b.n	8002170 <MCP_ReceivedPacket+0x68>
        if (RUN == MCI_GetSTMState(pMCI))
 800220e:	0028      	movs	r0, r5
 8002210:	f7ff f8b4 	bl	800137c <MCI_GetSTMState>
 8002214:	2806      	cmp	r0, #6
 8002216:	d020      	beq.n	800225a <MCP_ReceivedPacket+0x152>
        MCPResponse = MCP_CMD_OK;
 8002218:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800221a:	89e3      	ldrh	r3, [r4, #14]
 800221c:	e7a8      	b.n	8002170 <MCP_ReceivedPacket+0x68>
        (void)MCI_FaultAcknowledged(pMCI);
 800221e:	0028      	movs	r0, r5
 8002220:	f7ff f8e8 	bl	80013f4 <MCI_FaultAcknowledged>
        MCPResponse = MCP_CMD_OK;
 8002224:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002226:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002228:	e7a2      	b.n	8002170 <MCP_ReceivedPacket+0x68>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 800222a:	68a3      	ldr	r3, [r4, #8]
 800222c:	4652      	mov	r2, sl
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	0023      	movs	r3, r4
 8002232:	0039      	movs	r1, r7
 8002234:	330e      	adds	r3, #14
 8002236:	f7ff f843 	bl	80012c0 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800223a:	89e3      	ldrh	r3, [r4, #14]
        break;
 800223c:	e798      	b.n	8002170 <MCP_ReceivedPacket+0x68>
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 800223e:	4b0b      	ldr	r3, [pc, #44]	@ (800226c <MCP_ReceivedPacket+0x164>)
 8002240:	00ad      	lsls	r5, r5, #2
 8002242:	58ed      	ldr	r5, [r5, r3]
 8002244:	2d00      	cmp	r5, #0
 8002246:	d0b8      	beq.n	80021ba <MCP_ReceivedPacket+0xb2>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8002248:	68a3      	ldr	r3, [r4, #8]
 800224a:	4652      	mov	r2, sl
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	0023      	movs	r3, r4
 8002250:	0039      	movs	r1, r7
 8002252:	330e      	adds	r3, #14
 8002254:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002256:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8002258:	e78a      	b.n	8002170 <MCP_ReceivedPacket+0x68>
          MCI_StopRamp(pMCI);
 800225a:	0028      	movs	r0, r5
 800225c:	f7ff f908 	bl	8001470 <MCI_StopRamp>
 8002260:	e7da      	b.n	8002218 <MCP_ReceivedPacket+0x110>
 8002262:	46c0      	nop			@ (mov r8, r8)
 8002264:	20000000 	.word	0x20000000
 8002268:	08006a64 	.word	0x08006a64
 800226c:	200006e4 	.word	0x200006e4

08002270 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002270:	b510      	push	{r4, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8002272:	f002 f857 	bl	8004324 <HAL_RCC_GetHCLKFreq>
 8002276:	21fa      	movs	r1, #250	@ 0xfa
 8002278:	00c9      	lsls	r1, r1, #3
 800227a:	f7fd ff45 	bl	8000108 <__udivsi3>
 800227e:	f001 fbcf 	bl	8003a20 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8002282:	2001      	movs	r0, #1
 8002284:	4b05      	ldr	r3, [pc, #20]	@ (800229c <MX_MotorControl_Init+0x2c>)
 8002286:	2200      	movs	r2, #0
 8002288:	6819      	ldr	r1, [r3, #0]
 800228a:	4240      	negs	r0, r0
 800228c:	f001 fb84 	bl	8003998 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002290:	4803      	ldr	r0, [pc, #12]	@ (80022a0 <MX_MotorControl_Init+0x30>)
 8002292:	f7ff fa13 	bl	80016bc <MCboot>
  mc_lock_pins();
 8002296:	f7ff fb05 	bl	80018a4 <mc_lock_pins>
}
 800229a:	bd10      	pop	{r4, pc}
 800229c:	2000049c 	.word	0x2000049c
 80022a0:	200007f8 	.word	0x200007f8

080022a4 <waitForPolarizationEnd>:
  * @param  repCnt Repetition counter value.
  * @param  cnt Polarization counter value.
  */
//cstat !MISRAC2012-Rule-8.13
__weak void waitForPolarizationEnd(TIM_TypeDef *TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt)
{
 80022a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80022a6:	2703      	movs	r7, #3
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80022a8:	3201      	adds	r2, #1
 80022aa:	0856      	lsrs	r6, r2, #1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80022ac:	2502      	movs	r5, #2

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 80022ae:	2200      	movs	r2, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80022b0:	427f      	negs	r7, r7
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80022b2:	0176      	lsls	r6, r6, #5
 80022b4:	6107      	str	r7, [r0, #16]
    while (*cnt < NB_CONVERSIONS)
 80022b6:	781c      	ldrb	r4, [r3, #0]
 80022b8:	2c0f      	cmp	r4, #15
 80022ba:	d80c      	bhi.n	80022d6 <waitForPolarizationEnd+0x32>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80022bc:	6904      	ldr	r4, [r0, #16]
 80022be:	4225      	tst	r5, r4
 80022c0:	d0f9      	beq.n	80022b6 <waitForPolarizationEnd+0x12>
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 80022c2:	3201      	adds	r2, #1
 80022c4:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80022c6:	6107      	str	r7, [r0, #16]
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 80022c8:	4296      	cmp	r6, r2
 80022ca:	d8f4      	bhi.n	80022b6 <waitForPolarizationEnd+0x12>
        {
          if (*cnt < NB_CONVERSIONS)
 80022cc:	781c      	ldrb	r4, [r3, #0]
 80022ce:	2c0f      	cmp	r4, #15
 80022d0:	d8f1      	bhi.n	80022b6 <waitForPolarizationEnd+0x12>
          {
            *SWerror = 1u;
 80022d2:	2301      	movs	r3, #1
 80022d4:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 80022d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022d8 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 80022d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022da:	46c6      	mov	lr, r8
    int32_t wUBeta;
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80022dc:	224e      	movs	r2, #78	@ 0x4e
{
 80022de:	b500      	push	{lr}
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80022e0:	5a84      	ldrh	r4, [r0, r2]
 80022e2:	b20b      	sxth	r3, r1
 80022e4:	435c      	muls	r4, r3
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80022e6:	2370      	movs	r3, #112	@ 0x70
 80022e8:	5ac2      	ldrh	r2, [r0, r3]
 80022ea:	1409      	asrs	r1, r1, #16
 80022ec:	4351      	muls	r1, r2
 80022ee:	004b      	lsls	r3, r1, #1
 80022f0:	425e      	negs	r6, r3

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 80022f2:	1ae3      	subs	r3, r4, r3
 80022f4:	0fd9      	lsrs	r1, r3, #31
 80022f6:	18c9      	adds	r1, r1, r3
    wZ = (wUBeta - wUAlpha) / 2;
 80022f8:	1b34      	subs	r4, r6, r4
    wY = (wUBeta + wUAlpha) / 2;
 80022fa:	104d      	asrs	r5, r1, #1
    wZ = (wUBeta - wUAlpha) / 2;
 80022fc:	0fe1      	lsrs	r1, r4, #31
 80022fe:	1909      	adds	r1, r1, r4
{
 8002300:	b082      	sub	sp, #8
    wZ = (wUBeta - wUAlpha) / 2;
 8002302:	1049      	asrs	r1, r1, #1
    if (wY < 0)
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002304:	0892      	lsrs	r2, r2, #2
    if (wY < 0)
 8002306:	1c5f      	adds	r7, r3, #1
 8002308:	db5a      	blt.n	80023c0 <PWMC_SetPhaseVoltage+0xe8>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 800230a:	1c67      	adds	r7, r4, #1
 800230c:	db37      	blt.n	800237e <PWMC_SetPhaseVoltage+0xa6>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800230e:	1a69      	subs	r1, r5, r1
 8002310:	17cd      	asrs	r5, r1, #31
 8002312:	03ad      	lsls	r5, r5, #14
 8002314:	0bad      	lsrs	r5, r5, #14
 8002316:	1869      	adds	r1, r5, r1
 8002318:	1489      	asrs	r1, r1, #18
        pHandle->Sector = SECTOR_2;
 800231a:	267a      	movs	r6, #122	@ 0x7a
 800231c:	2701      	movs	r7, #1
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800231e:	188a      	adds	r2, r1, r2
        wTimePhB = wTimePhA + (wZ / 131072);
        wTimePhC = wTimePhA - (wY / 131072);

        if(true == pHandle->SingleShuntTopology)
 8002320:	2185      	movs	r1, #133	@ 0x85
        wTimePhB = wTimePhA + (wZ / 131072);
 8002322:	17e5      	asrs	r5, r4, #31
 8002324:	03ad      	lsls	r5, r5, #14
 8002326:	0bad      	lsrs	r5, r5, #14
 8002328:	192d      	adds	r5, r5, r4
        wTimePhC = wTimePhA - (wY / 131072);
 800232a:	17dc      	asrs	r4, r3, #31
 800232c:	03a4      	lsls	r4, r4, #14
        pHandle->Sector = SECTOR_2;
 800232e:	5587      	strb	r7, [r0, r6]
        wTimePhC = wTimePhA - (wY / 131072);
 8002330:	0ba4      	lsrs	r4, r4, #14
 8002332:	18e3      	adds	r3, r4, r3
        if(true == pHandle->SingleShuntTopology)
 8002334:	5c41      	ldrb	r1, [r0, r1]
        wTimePhB = wTimePhA + (wZ / 131072);
 8002336:	14ad      	asrs	r5, r5, #18
        wTimePhC = wTimePhA - (wY / 131072);
 8002338:	149b      	asrs	r3, r3, #18
        wTimePhB = wTimePhA + (wZ / 131072);
 800233a:	18ad      	adds	r5, r5, r2
        wTimePhC = wTimePhA - (wY / 131072);
 800233c:	1ad3      	subs	r3, r2, r3
        if(true == pHandle->SingleShuntTopology)
 800233e:	2900      	cmp	r1, #0
 8002340:	d15e      	bne.n	8002400 <PWMC_SetPhaseVoltage+0x128>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 8002342:	b2af      	uxth	r7, r5
        pHandle->midDuty = (uint16_t)wTimePhA;
 8002344:	b296      	uxth	r6, r2
        pHandle->highDuty = (uint16_t)wTimePhC;
 8002346:	b29c      	uxth	r4, r3
            pHandle->lowDuty = 0U;
 8002348:	2158      	movs	r1, #88	@ 0x58
 800234a:	5247      	strh	r7, [r0, r1]
            pHandle->midDuty = 1U;
 800234c:	3102      	adds	r1, #2
 800234e:	5246      	strh	r6, [r0, r1]
            pHandle->highDuty = 2U;
 8002350:	3102      	adds	r1, #2
 8002352:	5244      	strh	r4, [r0, r1]
            pHandle->highDuty = (uint16_t)wTimePhC;
        }
        }
    }

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8002354:	43d1      	mvns	r1, r2
 8002356:	17c9      	asrs	r1, r1, #31
 8002358:	400a      	ands	r2, r1
 800235a:	2150      	movs	r1, #80	@ 0x50
 800235c:	5242      	strh	r2, [r0, r1]
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 800235e:	43e9      	mvns	r1, r5
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002360:	43da      	mvns	r2, r3
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002362:	17c9      	asrs	r1, r1, #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002364:	17d2      	asrs	r2, r2, #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002366:	400d      	ands	r5, r1
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002368:	4013      	ands	r3, r2
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 800236a:	2152      	movs	r1, #82	@ 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 800236c:	2254      	movs	r2, #84	@ 0x54
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 800236e:	5245      	strh	r5, [r0, r1]
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002370:	5283      	strh	r3, [r0, r2]

    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002372:	6943      	ldr	r3, [r0, #20]
 8002374:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8002376:	b002      	add	sp, #8
 8002378:	bc80      	pop	{r7}
 800237a:	46b8      	mov	r8, r7
 800237c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( wX <= 0 )
 800237e:	2e00      	cmp	r6, #0
 8002380:	dd5f      	ble.n	8002442 <PWMC_SetPhaseVoltage+0x16a>
          pHandle->Sector = SECTOR_1;
 8002382:	237a      	movs	r3, #122	@ 0x7a
 8002384:	2500      	movs	r5, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002386:	1a71      	subs	r1, r6, r1
 8002388:	1489      	asrs	r1, r1, #18
 800238a:	188a      	adds	r2, r1, r2
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 800238c:	217d      	movs	r1, #125	@ 0x7d
          pHandle->Sector = SECTOR_1;
 800238e:	54c5      	strb	r5, [r0, r3]
          wTimePhB = wTimePhA + (wZ / 131072);
 8002390:	17e5      	asrs	r5, r4, #31
 8002392:	03ad      	lsls	r5, r5, #14
          wTimePhC = wTimePhB - (wX / 131072);
 8002394:	17f3      	asrs	r3, r6, #31
          wTimePhB = wTimePhA + (wZ / 131072);
 8002396:	0bad      	lsrs	r5, r5, #14
          wTimePhC = wTimePhB - (wX / 131072);
 8002398:	03db      	lsls	r3, r3, #15
          wTimePhB = wTimePhA + (wZ / 131072);
 800239a:	192d      	adds	r5, r5, r4
          wTimePhC = wTimePhB - (wX / 131072);
 800239c:	0bdb      	lsrs	r3, r3, #15
          wTimePhB = wTimePhA + (wZ / 131072);
 800239e:	14ad      	asrs	r5, r5, #18
          wTimePhC = wTimePhB - (wX / 131072);
 80023a0:	199b      	adds	r3, r3, r6
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 80023a2:	5c41      	ldrb	r1, [r0, r1]
          wTimePhB = wTimePhA + (wZ / 131072);
 80023a4:	18ad      	adds	r5, r5, r2
          wTimePhC = wTimePhB - (wX / 131072);
 80023a6:	145b      	asrs	r3, r3, #17
 80023a8:	1aeb      	subs	r3, r5, r3
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 80023aa:	2900      	cmp	r1, #0
 80023ac:	d104      	bne.n	80023b8 <PWMC_SetPhaseVoltage+0xe0>
 80023ae:	3185      	adds	r1, #133	@ 0x85
 80023b0:	5c41      	ldrb	r1, [r0, r1]
 80023b2:	2900      	cmp	r1, #0
 80023b4:	d100      	bne.n	80023b8 <PWMC_SetPhaseVoltage+0xe0>
 80023b6:	e08b      	b.n	80024d0 <PWMC_SetPhaseVoltage+0x1f8>
 80023b8:	2702      	movs	r7, #2
 80023ba:	2601      	movs	r6, #1
 80023bc:	2400      	movs	r4, #0
 80023be:	e7c3      	b.n	8002348 <PWMC_SetPhaseVoltage+0x70>
        if(true == pHandle->SingleShuntTopology)
 80023c0:	2785      	movs	r7, #133	@ 0x85
 80023c2:	5dc7      	ldrb	r7, [r0, r7]
 80023c4:	46b8      	mov	r8, r7
      if (wZ < 0)
 80023c6:	1c67      	adds	r7, r4, #1
 80023c8:	db55      	blt.n	8002476 <PWMC_SetPhaseVoltage+0x19e>
        if (wX <= 0)
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	dd1c      	ble.n	8002408 <PWMC_SetPhaseVoltage+0x130>
          pHandle->Sector = SECTOR_3;
 80023ce:	217a      	movs	r1, #122	@ 0x7a
 80023d0:	2402      	movs	r4, #2
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80023d2:	1bad      	subs	r5, r5, r6
          pHandle->Sector = SECTOR_3;
 80023d4:	5444      	strb	r4, [r0, r1]
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80023d6:	17e9      	asrs	r1, r5, #31
 80023d8:	0389      	lsls	r1, r1, #14
 80023da:	0b89      	lsrs	r1, r1, #14
 80023dc:	1949      	adds	r1, r1, r5
 80023de:	1489      	asrs	r1, r1, #18
 80023e0:	188a      	adds	r2, r1, r2
          wTimePhC = wTimePhA - (wY / 131072);
 80023e2:	17d9      	asrs	r1, r3, #31
 80023e4:	0389      	lsls	r1, r1, #14
 80023e6:	0b89      	lsrs	r1, r1, #14
 80023e8:	18cb      	adds	r3, r1, r3
          if(true == pHandle->SingleShuntTopology)
 80023ea:	4641      	mov	r1, r8
          wTimePhC = wTimePhA - (wY / 131072);
 80023ec:	149b      	asrs	r3, r3, #18
 80023ee:	1ad3      	subs	r3, r2, r3
          wTimePhB = wTimePhC + (wX / 131072);
 80023f0:	1476      	asrs	r6, r6, #17
 80023f2:	18f5      	adds	r5, r6, r3
          if(true == pHandle->SingleShuntTopology)
 80023f4:	2900      	cmp	r1, #0
 80023f6:	d15f      	bne.n	80024b8 <PWMC_SetPhaseVoltage+0x1e0>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 80023f8:	b2af      	uxth	r7, r5
          pHandle->midDuty = (uint16_t)wTimePhC;
 80023fa:	b29e      	uxth	r6, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 80023fc:	b294      	uxth	r4, r2
 80023fe:	e7a3      	b.n	8002348 <PWMC_SetPhaseVoltage+0x70>
 8002400:	2702      	movs	r7, #2
 8002402:	2600      	movs	r6, #0
 8002404:	2401      	movs	r4, #1
 8002406:	e79f      	b.n	8002348 <PWMC_SetPhaseVoltage+0x70>
          pHandle->Sector = SECTOR_4;
 8002408:	237a      	movs	r3, #122	@ 0x7a
 800240a:	2503      	movs	r5, #3
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800240c:	1a71      	subs	r1, r6, r1
          pHandle->Sector = SECTOR_4;
 800240e:	54c5      	strb	r5, [r0, r3]
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002410:	17cb      	asrs	r3, r1, #31
 8002412:	039b      	lsls	r3, r3, #14
 8002414:	0b9b      	lsrs	r3, r3, #14
 8002416:	185b      	adds	r3, r3, r1
          if(true == pHandle->SingleShuntTopology)
 8002418:	4641      	mov	r1, r8
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800241a:	149b      	asrs	r3, r3, #18
          wTimePhB = wTimePhA + (wZ / 131072);
 800241c:	17e5      	asrs	r5, r4, #31
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800241e:	189a      	adds	r2, r3, r2
          wTimePhB = wTimePhA + (wZ / 131072);
 8002420:	03ad      	lsls	r5, r5, #14
          wTimePhC = wTimePhB - (wX / 131072);
 8002422:	17f3      	asrs	r3, r6, #31
          wTimePhB = wTimePhA + (wZ / 131072);
 8002424:	0bad      	lsrs	r5, r5, #14
          wTimePhC = wTimePhB - (wX / 131072);
 8002426:	03db      	lsls	r3, r3, #15
          wTimePhB = wTimePhA + (wZ / 131072);
 8002428:	192d      	adds	r5, r5, r4
          wTimePhC = wTimePhB - (wX / 131072);
 800242a:	0bdb      	lsrs	r3, r3, #15
          wTimePhB = wTimePhA + (wZ / 131072);
 800242c:	14ad      	asrs	r5, r5, #18
          wTimePhC = wTimePhB - (wX / 131072);
 800242e:	199b      	adds	r3, r3, r6
          wTimePhB = wTimePhA + (wZ / 131072);
 8002430:	18ad      	adds	r5, r5, r2
          wTimePhC = wTimePhB - (wX / 131072);
 8002432:	145b      	asrs	r3, r3, #17
 8002434:	1aeb      	subs	r3, r5, r3
          if(true == pHandle->SingleShuntTopology)
 8002436:	2900      	cmp	r1, #0
 8002438:	d046      	beq.n	80024c8 <PWMC_SetPhaseVoltage+0x1f0>
 800243a:	2700      	movs	r7, #0
 800243c:	2601      	movs	r6, #1
 800243e:	2402      	movs	r4, #2
 8002440:	e782      	b.n	8002348 <PWMC_SetPhaseVoltage+0x70>
          pHandle->Sector = SECTOR_6;
 8002442:	217a      	movs	r1, #122	@ 0x7a
 8002444:	2405      	movs	r4, #5
 8002446:	5444      	strb	r4, [r0, r1]
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002448:	1ba9      	subs	r1, r5, r6
 800244a:	1489      	asrs	r1, r1, #18
 800244c:	188a      	adds	r2, r1, r2
          wTimePhC = wTimePhA - (wY / 131072);
 800244e:	17d9      	asrs	r1, r3, #31
 8002450:	0389      	lsls	r1, r1, #14
 8002452:	0b89      	lsrs	r1, r1, #14
 8002454:	18cb      	adds	r3, r1, r3
          if(true == pHandle->SingleShuntTopology)
 8002456:	2185      	movs	r1, #133	@ 0x85
          wTimePhB = wTimePhC + (wX / 131072);
 8002458:	17f5      	asrs	r5, r6, #31
 800245a:	03ed      	lsls	r5, r5, #15
 800245c:	0bed      	lsrs	r5, r5, #15
          wTimePhC = wTimePhA - (wY / 131072);
 800245e:	149b      	asrs	r3, r3, #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002460:	19ad      	adds	r5, r5, r6
          if(true == pHandle->SingleShuntTopology)
 8002462:	5c41      	ldrb	r1, [r0, r1]
          wTimePhC = wTimePhA - (wY / 131072);
 8002464:	1ad3      	subs	r3, r2, r3
          wTimePhB = wTimePhC + (wX / 131072);
 8002466:	146d      	asrs	r5, r5, #17
 8002468:	18ed      	adds	r5, r5, r3
          if(true == pHandle->SingleShuntTopology)
 800246a:	2900      	cmp	r1, #0
 800246c:	d028      	beq.n	80024c0 <PWMC_SetPhaseVoltage+0x1e8>
 800246e:	2701      	movs	r7, #1
 8002470:	2602      	movs	r6, #2
 8002472:	2400      	movs	r4, #0
 8002474:	e768      	b.n	8002348 <PWMC_SetPhaseVoltage+0x70>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002476:	1a69      	subs	r1, r5, r1
 8002478:	17cd      	asrs	r5, r1, #31
 800247a:	03ad      	lsls	r5, r5, #14
 800247c:	0bad      	lsrs	r5, r5, #14
 800247e:	1869      	adds	r1, r5, r1
 8002480:	1489      	asrs	r1, r1, #18
 8002482:	188a      	adds	r2, r1, r2
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002484:	17d9      	asrs	r1, r3, #31
 8002486:	0389      	lsls	r1, r1, #14
 8002488:	0b89      	lsrs	r1, r1, #14
 800248a:	18cb      	adds	r3, r1, r3
        pHandle->Sector = SECTOR_5;
 800248c:	267a      	movs	r6, #122	@ 0x7a
 800248e:	2704      	movs	r7, #4
        if(true == pHandle->SingleShuntTopology)
 8002490:	4641      	mov	r1, r8
        wTimePhB = wTimePhA + (wZ / 131072);
 8002492:	17e5      	asrs	r5, r4, #31
 8002494:	03ad      	lsls	r5, r5, #14
 8002496:	0bad      	lsrs	r5, r5, #14
 8002498:	192d      	adds	r5, r5, r4
 800249a:	14ad      	asrs	r5, r5, #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 800249c:	149b      	asrs	r3, r3, #18
        pHandle->Sector = SECTOR_5;
 800249e:	5587      	strb	r7, [r0, r6]
        wTimePhB = wTimePhA + (wZ / 131072);
 80024a0:	18ad      	adds	r5, r5, r2
        wTimePhC = wTimePhA - (wY / 131072) ;
 80024a2:	1ad3      	subs	r3, r2, r3
        if(true == pHandle->SingleShuntTopology)
 80024a4:	2900      	cmp	r1, #0
 80024a6:	d103      	bne.n	80024b0 <PWMC_SetPhaseVoltage+0x1d8>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80024a8:	b29f      	uxth	r7, r3
          pHandle->midDuty = (uint16_t)wTimePhA;
 80024aa:	b296      	uxth	r6, r2
          pHandle->highDuty = (uint16_t)wTimePhB;
 80024ac:	b2ac      	uxth	r4, r5
 80024ae:	e74b      	b.n	8002348 <PWMC_SetPhaseVoltage+0x70>
 80024b0:	2701      	movs	r7, #1
 80024b2:	2600      	movs	r6, #0
 80024b4:	2402      	movs	r4, #2
 80024b6:	e747      	b.n	8002348 <PWMC_SetPhaseVoltage+0x70>
 80024b8:	2700      	movs	r7, #0
 80024ba:	2602      	movs	r6, #2
 80024bc:	2401      	movs	r4, #1
 80024be:	e743      	b.n	8002348 <PWMC_SetPhaseVoltage+0x70>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 80024c0:	b297      	uxth	r7, r2
            pHandle->midDuty = (uint16_t)wTimePhC;
 80024c2:	b29e      	uxth	r6, r3
            pHandle->highDuty = (uint16_t)wTimePhB;
 80024c4:	b2ac      	uxth	r4, r5
 80024c6:	e73f      	b.n	8002348 <PWMC_SetPhaseVoltage+0x70>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80024c8:	b29f      	uxth	r7, r3
          pHandle->midDuty = (uint16_t)wTimePhB;
 80024ca:	b2ae      	uxth	r6, r5
          pHandle->highDuty = (uint16_t)wTimePhA;
 80024cc:	b294      	uxth	r4, r2
 80024ce:	e73b      	b.n	8002348 <PWMC_SetPhaseVoltage+0x70>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 80024d0:	b297      	uxth	r7, r2
            pHandle->midDuty = (uint16_t)wTimePhB;
 80024d2:	b2ae      	uxth	r6, r5
            pHandle->highDuty = (uint16_t)wTimePhC;
 80024d4:	b29c      	uxth	r4, r3
 80024d6:	e737      	b.n	8002348 <PWMC_SetPhaseVoltage+0x70>

080024d8 <PWMC_SwitchOffPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOffPWM(PWMC_Handle_t *pHandle)
{
 80024d8:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 80024da:	6843      	ldr	r3, [r0, #4]
 80024dc:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 80024de:	bd10      	pop	{r4, pc}

080024e0 <PWMC_SwitchOnPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOnPWM(PWMC_Handle_t *pHandle)
{
 80024e0:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 80024e2:	6883      	ldr	r3, [r0, #8]
 80024e4:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 80024e6:	bd10      	pop	{r4, pc}

080024e8 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 80024e8:	b510      	push	{r4, lr}
 80024ea:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 80024ec:	2900      	cmp	r1, #0
 80024ee:	d010      	beq.n	8002512 <PWMC_CurrentReadingCalibr+0x2a>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 80024f0:	2901      	cmp	r1, #1
 80024f2:	d001      	beq.n	80024f8 <PWMC_CurrentReadingCalibr+0x10>
  bool retVal = false;
 80024f4:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 80024f6:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 80024f8:	2260      	movs	r2, #96	@ 0x60
 80024fa:	5a83      	ldrh	r3, [r0, r2]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d006      	beq.n	800250e <PWMC_CurrentReadingCalibr+0x26>
        pHandle->OffCalibrWaitTimeCounter--;
 8002500:	3b01      	subs	r3, #1
 8002502:	b29b      	uxth	r3, r3
 8002504:	5283      	strh	r3, [r0, r2]
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f4      	bne.n	80024f4 <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 800250a:	68c3      	ldr	r3, [r0, #12]
 800250c:	4798      	blx	r3
      retVal = true;
 800250e:	2001      	movs	r0, #1
 8002510:	e7f1      	b.n	80024f6 <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 8002512:	f7ff ffe1 	bl	80024d8 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8002516:	0020      	movs	r0, r4
 8002518:	68e3      	ldr	r3, [r4, #12]
 800251a:	4798      	blx	r3
      retVal = true;
 800251c:	2001      	movs	r0, #1
 800251e:	e7ea      	b.n	80024f6 <PWMC_CurrentReadingCalibr+0xe>

08002520 <PWMC_TurnOnLowSides>:
  *                Min value: 0 (low sides ON)
  *                Max value: PWM_PERIOD_CYCLES/2 (low sides OFF)
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_TurnOnLowSides(PWMC_Handle_t *pHandle, uint32_t ticks)
{
 8002520:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctTurnOnLowSides(pHandle, ticks);
 8002522:	6903      	ldr	r3, [r0, #16]
 8002524:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 8002526:	bd10      	pop	{r4, pc}

08002528 <PWMC_OCP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    if (false == pHandle->BrakeActionLock)
 8002528:	2383      	movs	r3, #131	@ 0x83
 800252a:	5cc3      	ldrb	r3, [r0, r3]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d103      	bne.n	8002538 <PWMC_OCP_Handler+0x10>
    {
      if (ES_GPIO == pHandle->LowSideOutputs)
 8002530:	337b      	adds	r3, #123	@ 0x7b
 8002532:	5cc3      	ldrb	r3, [r0, r3]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d004      	beq.n	8002542 <PWMC_OCP_Handler+0x1a>
    }
    else
    {
      /* Nothing to do */
    }
    pHandle->OverCurrentFlag = true;
 8002538:	2380      	movs	r3, #128	@ 0x80
 800253a:	2201      	movs	r2, #1
 800253c:	54c2      	strb	r2, [r0, r3]
    tempPointer = &(pHandle->Motor);
 800253e:	3078      	adds	r0, #120	@ 0x78
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8002540:	4770      	bx	lr
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_u_port, pHandle->pwm_en_u_pin);
 8002542:	2248      	movs	r2, #72	@ 0x48
 8002544:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002546:	5a82      	ldrh	r2, [r0, r2]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8002548:	629a      	str	r2, [r3, #40]	@ 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 800254a:	224a      	movs	r2, #74	@ 0x4a
 800254c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800254e:	5a82      	ldrh	r2, [r0, r2]
 8002550:	629a      	str	r2, [r3, #40]	@ 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 8002552:	224c      	movs	r2, #76	@ 0x4c
 8002554:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002556:	5a82      	ldrh	r2, [r0, r2]
 8002558:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800255a:	e7ed      	b.n	8002538 <PWMC_OCP_Handler+0x10>

0800255c <PWMC_IsFaultOccurred>:
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 800255c:	2281      	movs	r2, #129	@ 0x81
{
 800255e:	b510      	push	{r4, lr}
  if (true == pHandle->OverVoltageFlag)
 8002560:	5c81      	ldrb	r1, [r0, r2]
{
 8002562:	0003      	movs	r3, r0
  if (true == pHandle->OverVoltageFlag)
 8002564:	2900      	cmp	r1, #0
 8002566:	d015      	beq.n	8002594 <PWMC_IsFaultOccurred+0x38>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8002568:	2100      	movs	r1, #0
 800256a:	2442      	movs	r4, #66	@ 0x42
 800256c:	5481      	strb	r1, [r0, r2]
    retVal = MC_OVER_VOLT;
 800256e:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 8002570:	2280      	movs	r2, #128	@ 0x80
 8002572:	5c99      	ldrb	r1, [r3, r2]
 8002574:	2900      	cmp	r1, #0
 8002576:	d002      	beq.n	800257e <PWMC_IsFaultOccurred+0x22>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 8002578:	2100      	movs	r1, #0
    retVal |= MC_OVER_CURR;
 800257a:	0020      	movs	r0, r4
    pHandle->OverCurrentFlag = false;
 800257c:	5499      	strb	r1, [r3, r2]
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 800257e:	2282      	movs	r2, #130	@ 0x82
 8002580:	5c99      	ldrb	r1, [r3, r2]
 8002582:	2900      	cmp	r1, #0
 8002584:	d005      	beq.n	8002592 <PWMC_IsFaultOccurred+0x36>
  {
    retVal |= MC_DP_FAULT;
 8002586:	2180      	movs	r1, #128	@ 0x80
 8002588:	00c9      	lsls	r1, r1, #3
 800258a:	4308      	orrs	r0, r1
    pHandle->driverProtectionFlag = false;
 800258c:	2100      	movs	r1, #0
    retVal |= MC_DP_FAULT;
 800258e:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 8002590:	5499      	strb	r1, [r3, r2]
  {
    /* Nothing to do */
  }

  return (retVal);
}
 8002592:	bd10      	pop	{r4, pc}
 8002594:	2440      	movs	r4, #64	@ 0x40
  uint16_t retVal = MC_NO_FAULTS;
 8002596:	2000      	movs	r0, #0
 8002598:	e7ea      	b.n	8002570 <PWMC_IsFaultOccurred+0x14>
 800259a:	46c0      	nop			@ (mov r8, r8)

0800259c <RI_SetRegisterGlobal>:
#include "mcp.h"
#include "mcp_config.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 800259c:	b530      	push	{r4, r5, lr}
 800259e:	ac03      	add	r4, sp, #12
 80025a0:	2500      	movs	r5, #0
 80025a2:	5f64      	ldrsh	r4, [r4, r5]
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 80025a4:	2918      	cmp	r1, #24
 80025a6:	d032      	beq.n	800260e <RI_SetRegisterGlobal+0x72>
 80025a8:	d815      	bhi.n	80025d6 <RI_SetRegisterGlobal+0x3a>
 80025aa:	2908      	cmp	r1, #8
 80025ac:	d03a      	beq.n	8002624 <RI_SetRegisterGlobal+0x88>
 80025ae:	2910      	cmp	r1, #16
 80025b0:	d134      	bne.n	800261c <RI_SetRegisterGlobal+0x80>
      break;
    }

    case TYPE_DATA_16BIT:
    {
      switch (regID)
 80025b2:	22e5      	movs	r2, #229	@ 0xe5
 80025b4:	0112      	lsls	r2, r2, #4
 80025b6:	4290      	cmp	r0, r2
 80025b8:	d03b      	beq.n	8002632 <RI_SetRegisterGlobal+0x96>
 80025ba:	d91f      	bls.n	80025fc <RI_SetRegisterGlobal+0x60>
 80025bc:	22e9      	movs	r2, #233	@ 0xe9
 80025be:	0112      	lsls	r2, r2, #4
 80025c0:	4290      	cmp	r0, r2
 80025c2:	d036      	beq.n	8002632 <RI_SetRegisterGlobal+0x96>
        case MC_REG_DAC_USER2:
        break;

        default:
        {
          retVal = MCP_ERROR_UNKNOWN_REG;
 80025c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002644 <RI_SetRegisterGlobal+0xa8>)
 80025c6:	4694      	mov	ip, r2
 80025c8:	4460      	add	r0, ip
 80025ca:	1e42      	subs	r2, r0, #1
 80025cc:	4190      	sbcs	r0, r2
 80025ce:	3004      	adds	r0, #4
          break;
        }
      }
      *size = 2;
 80025d0:	2202      	movs	r2, #2
 80025d2:	801a      	strh	r2, [r3, #0]
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
      break;
    }
  }
  return (retVal);
}
 80025d4:	bd30      	pop	{r4, r5, pc}
  switch(typeID)
 80025d6:	2928      	cmp	r1, #40	@ 0x28
 80025d8:	d120      	bne.n	800261c <RI_SetRegisterGlobal+0x80>
      *size = rawSize + 2U;
 80025da:	8812      	ldrh	r2, [r2, #0]
      if (*size > (uint16_t)dataAvailable)
 80025dc:	b2a4      	uxth	r4, r4
      *size = rawSize + 2U;
 80025de:	3202      	adds	r2, #2
 80025e0:	b292      	uxth	r2, r2
 80025e2:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 80025e4:	42a2      	cmp	r2, r4
 80025e6:	d826      	bhi.n	8002636 <RI_SetRegisterGlobal+0x9a>
        switch (regID)
 80025e8:	2380      	movs	r3, #128	@ 0x80
 80025ea:	0002      	movs	r2, r0
 80025ec:	439a      	bics	r2, r3
 80025ee:	2a28      	cmp	r2, #40	@ 0x28
 80025f0:	d025      	beq.n	800263e <RI_SetRegisterGlobal+0xa2>
 80025f2:	38e8      	subs	r0, #232	@ 0xe8
 80025f4:	1e43      	subs	r3, r0, #1
 80025f6:	4198      	sbcs	r0, r3
 80025f8:	3004      	adds	r0, #4
 80025fa:	e7eb      	b.n	80025d4 <RI_SetRegisterGlobal+0x38>
 80025fc:	2240      	movs	r2, #64	@ 0x40
 80025fe:	4390      	bics	r0, r2
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002600:	4a11      	ldr	r2, [pc, #68]	@ (8002648 <RI_SetRegisterGlobal+0xac>)
 8002602:	4694      	mov	ip, r2
 8002604:	4460      	add	r0, ip
 8002606:	1e42      	subs	r2, r0, #1
 8002608:	4190      	sbcs	r0, r2
 800260a:	3004      	adds	r0, #4
 800260c:	e7e0      	b.n	80025d0 <RI_SetRegisterGlobal+0x34>
          retVal = MCP_ERROR_RO_REG;
 800260e:	3818      	subs	r0, #24
 8002610:	1e42      	subs	r2, r0, #1
 8002612:	4190      	sbcs	r0, r2
      *size = 4;
 8002614:	2204      	movs	r2, #4
          retVal = MCP_ERROR_RO_REG;
 8002616:	3004      	adds	r0, #4
      *size = 4;
 8002618:	801a      	strh	r2, [r3, #0]
      break;
 800261a:	e7db      	b.n	80025d4 <RI_SetRegisterGlobal+0x38>
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 800261c:	2200      	movs	r2, #0
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 800261e:	2007      	movs	r0, #7
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8002620:	801a      	strh	r2, [r3, #0]
      break;
 8002622:	e7d7      	b.n	80025d4 <RI_SetRegisterGlobal+0x38>
          retVal = MCP_ERROR_RO_REG;
 8002624:	3848      	subs	r0, #72	@ 0x48
 8002626:	1e42      	subs	r2, r0, #1
 8002628:	4190      	sbcs	r0, r2
      *size = 1;
 800262a:	2201      	movs	r2, #1
          retVal = MCP_ERROR_RO_REG;
 800262c:	3004      	adds	r0, #4
      *size = 1;
 800262e:	801a      	strh	r2, [r3, #0]
      break;
 8002630:	e7d0      	b.n	80025d4 <RI_SetRegisterGlobal+0x38>
  uint8_t retVal = MCP_CMD_OK;
 8002632:	2000      	movs	r0, #0
 8002634:	e7cc      	b.n	80025d0 <RI_SetRegisterGlobal+0x34>
        *size = 0;
 8002636:	2200      	movs	r2, #0
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8002638:	200a      	movs	r0, #10
        *size = 0;
 800263a:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 800263c:	e7ca      	b.n	80025d4 <RI_SetRegisterGlobal+0x38>
            retVal = MCP_ERROR_RO_REG;
 800263e:	2004      	movs	r0, #4
 8002640:	e7c8      	b.n	80025d4 <RI_SetRegisterGlobal+0x38>
 8002642:	46c0      	nop			@ (mov r8, r8)
 8002644:	ffffe4a8 	.word	0xffffe4a8
 8002648:	fffffa70 	.word	0xfffffa70

0800264c <RI_SetRegisterMotor1>:

uint8_t RI_SetRegisterMotor1(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 800264c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800264e:	b083      	sub	sp, #12
 8002650:	001c      	movs	r4, r3
 8002652:	ab08      	add	r3, sp, #32
 8002654:	0005      	movs	r5, r0
 8002656:	2000      	movs	r0, #0
 8002658:	5e1b      	ldrsh	r3, [r3, r0]
  uint8_t retVal = MCP_CMD_OK;
  uint8_t motorID=0;
  MCI_Handle_t *pMCIN = &Mci[motorID];

  switch(typeID)
 800265a:	2918      	cmp	r1, #24
 800265c:	d100      	bne.n	8002660 <RI_SetRegisterMotor1+0x14>
 800265e:	e09b      	b.n	8002798 <RI_SetRegisterMotor1+0x14c>
 8002660:	d81d      	bhi.n	800269e <RI_SetRegisterMotor1+0x52>
 8002662:	2908      	cmp	r1, #8
 8002664:	d100      	bne.n	8002668 <RI_SetRegisterMotor1+0x1c>
 8002666:	e0b4      	b.n	80027d2 <RI_SetRegisterMotor1+0x186>
 8002668:	2910      	cmp	r1, #16
 800266a:	d000      	beq.n	800266e <RI_SetRegisterMotor1+0x22>
 800266c:	e090      	b.n	8002790 <RI_SetRegisterMotor1+0x144>
      break;
    }

    case TYPE_DATA_16BIT:
    {
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 800266e:	23e4      	movs	r3, #228	@ 0xe4
 8002670:	8816      	ldrh	r6, [r2, #0]
      switch (regID)
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	429d      	cmp	r5, r3
 8002676:	d100      	bne.n	800267a <RI_SetRegisterMotor1+0x2e>
 8002678:	e0ef      	b.n	800285a <RI_SetRegisterMotor1+0x20e>
 800267a:	d92e      	bls.n	80026da <RI_SetRegisterMotor1+0x8e>
 800267c:	23b2      	movs	r3, #178	@ 0xb2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	429d      	cmp	r5, r3
 8002682:	d100      	bne.n	8002686 <RI_SetRegisterMotor1+0x3a>
 8002684:	e0d3      	b.n	800282e <RI_SetRegisterMotor1+0x1e2>
 8002686:	d943      	bls.n	8002710 <RI_SetRegisterMotor1+0xc4>
 8002688:	23e5      	movs	r3, #229	@ 0xe5
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	429d      	cmp	r5, r3
 800268e:	d004      	beq.n	800269a <RI_SetRegisterMotor1+0x4e>
 8002690:	d962      	bls.n	8002758 <RI_SetRegisterMotor1+0x10c>
 8002692:	23e9      	movs	r3, #233	@ 0xe9
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	429d      	cmp	r5, r3
 8002698:	d155      	bne.n	8002746 <RI_SetRegisterMotor1+0xfa>
  uint8_t retVal = MCP_CMD_OK;
 800269a:	2000      	movs	r0, #0
 800269c:	e058      	b.n	8002750 <RI_SetRegisterMotor1+0x104>
  switch(typeID)
 800269e:	2928      	cmp	r1, #40	@ 0x28
 80026a0:	d000      	beq.n	80026a4 <RI_SetRegisterMotor1+0x58>
 80026a2:	e075      	b.n	8002790 <RI_SetRegisterMotor1+0x144>

    case TYPE_DATA_RAW:
    {
      uint16_t rawSize = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
      /* The size consumed by the structure is the structure size + 2 bytes used to store the size */
      *size = rawSize + 2U;
 80026a4:	8811      	ldrh	r1, [r2, #0]
      uint8_t *rawData = data; /* rawData points to the first data (after size extraction) */
      rawData++;
      rawData++;

      if (*size > (uint16_t)dataAvailable)
 80026a6:	b29b      	uxth	r3, r3
      *size = rawSize + 2U;
 80026a8:	3102      	adds	r1, #2
 80026aa:	b289      	uxth	r1, r1
 80026ac:	8021      	strh	r1, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 80026ae:	4299      	cmp	r1, r3
 80026b0:	d900      	bls.n	80026b4 <RI_SetRegisterMotor1+0x68>
 80026b2:	e0a5      	b.n	8002800 <RI_SetRegisterMotor1+0x1b4>
        *size = 0;
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
      }
      else
      {
        switch (regID)
 80026b4:	23d4      	movs	r3, #212	@ 0xd4
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	429d      	cmp	r5, r3
 80026ba:	d100      	bne.n	80026be <RI_SetRegisterMotor1+0x72>
 80026bc:	e0e8      	b.n	8002890 <RI_SetRegisterMotor1+0x244>
 80026be:	d900      	bls.n	80026c2 <RI_SetRegisterMotor1+0x76>
 80026c0:	e0f5      	b.n	80028ae <RI_SetRegisterMotor1+0x262>
 80026c2:	002a      	movs	r2, r5
 80026c4:	3b29      	subs	r3, #41	@ 0x29
 80026c6:	3bff      	subs	r3, #255	@ 0xff
 80026c8:	439a      	bics	r2, r3
 80026ca:	2a28      	cmp	r2, #40	@ 0x28
 80026cc:	d100      	bne.n	80026d0 <RI_SetRegisterMotor1+0x84>
 80026ce:	e0f0      	b.n	80028b2 <RI_SetRegisterMotor1+0x266>
 80026d0:	3de8      	subs	r5, #232	@ 0xe8
 80026d2:	1e6b      	subs	r3, r5, #1
 80026d4:	419d      	sbcs	r5, r3
 80026d6:	1d28      	adds	r0, r5, #4
 80026d8:	e03c      	b.n	8002754 <RI_SetRegisterMotor1+0x108>
 80026da:	2388      	movs	r3, #136	@ 0x88
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	429d      	cmp	r5, r3
 80026e0:	d100      	bne.n	80026e4 <RI_SetRegisterMotor1+0x98>
 80026e2:	e0b2      	b.n	800284a <RI_SetRegisterMotor1+0x1fe>
 80026e4:	d923      	bls.n	800272e <RI_SetRegisterMotor1+0xe2>
 80026e6:	23d4      	movs	r3, #212	@ 0xd4
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	429d      	cmp	r5, r3
 80026ec:	d000      	beq.n	80026f0 <RI_SetRegisterMotor1+0xa4>
 80026ee:	e0b2      	b.n	8002856 <RI_SetRegisterMotor1+0x20a>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 80026f0:	466b      	mov	r3, sp
 80026f2:	4d76      	ldr	r5, [pc, #472]	@ (80028cc <RI_SetRegisterMotor1+0x280>)
 80026f4:	1d9f      	adds	r7, r3, #6
 80026f6:	003a      	movs	r2, r7
 80026f8:	0028      	movs	r0, r5
 80026fa:	a901      	add	r1, sp, #4
 80026fc:	f003 fe48 	bl	8006390 <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, (int16_t)regdata16, hC2);
 8002700:	0028      	movs	r0, r5
 8002702:	2300      	movs	r3, #0
 8002704:	5efa      	ldrsh	r2, [r7, r3]
 8002706:	b231      	sxth	r1, r6
 8002708:	f003 fe4a 	bl	80063a0 <STO_PLL_SetObserverGains>
  uint8_t retVal = MCP_CMD_OK;
 800270c:	2000      	movs	r0, #0
 800270e:	e01f      	b.n	8002750 <RI_SetRegisterMotor1+0x104>
 8002710:	3b41      	subs	r3, #65	@ 0x41
 8002712:	3bff      	subs	r3, #255	@ 0xff
 8002714:	429d      	cmp	r5, r3
 8002716:	d100      	bne.n	800271a <RI_SetRegisterMotor1+0xce>
 8002718:	e08b      	b.n	8002832 <RI_SetRegisterMotor1+0x1e6>
 800271a:	3340      	adds	r3, #64	@ 0x40
 800271c:	429d      	cmp	r5, r3
 800271e:	d000      	beq.n	8002722 <RI_SetRegisterMotor1+0xd6>
 8002720:	e099      	b.n	8002856 <RI_SetRegisterMotor1+0x20a>
          PID_SetKP (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 8002722:	486b      	ldr	r0, [pc, #428]	@ (80028d0 <RI_SetRegisterMotor1+0x284>)
 8002724:	b231      	sxth	r1, r6
 8002726:	f002 fb7d 	bl	8004e24 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 800272a:	2000      	movs	r0, #0
 800272c:	e010      	b.n	8002750 <RI_SetRegisterMotor1+0x104>
 800272e:	2d90      	cmp	r5, #144	@ 0x90
 8002730:	d100      	bne.n	8002734 <RI_SetRegisterMotor1+0xe8>
 8002732:	e084      	b.n	800283e <RI_SetRegisterMotor1+0x1f2>
 8002734:	2dd0      	cmp	r5, #208	@ 0xd0
 8002736:	d000      	beq.n	800273a <RI_SetRegisterMotor1+0xee>
 8002738:	e08d      	b.n	8002856 <RI_SetRegisterMotor1+0x20a>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 800273a:	4866      	ldr	r0, [pc, #408]	@ (80028d4 <RI_SetRegisterMotor1+0x288>)
 800273c:	b231      	sxth	r1, r6
 800273e:	f002 fb73 	bl	8004e28 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 8002742:	2000      	movs	r0, #0
 8002744:	e004      	b.n	8002750 <RI_SetRegisterMotor1+0x104>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002746:	4b64      	ldr	r3, [pc, #400]	@ (80028d8 <RI_SetRegisterMotor1+0x28c>)
 8002748:	18e8      	adds	r0, r5, r3
 800274a:	1e43      	subs	r3, r0, #1
 800274c:	4198      	sbcs	r0, r3
 800274e:	3004      	adds	r0, #4
      *size = 2;
 8002750:	2302      	movs	r3, #2
 8002752:	8023      	strh	r3, [r4, #0]
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
      break;
    }
  }
  return (retVal);
}
 8002754:	b003      	add	sp, #12
 8002756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002758:	23a9      	movs	r3, #169	@ 0xa9
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	429d      	cmp	r5, r3
 800275e:	d066      	beq.n	800282e <RI_SetRegisterMotor1+0x1e2>
 8002760:	d90a      	bls.n	8002778 <RI_SetRegisterMotor1+0x12c>
 8002762:	23c5      	movs	r3, #197	@ 0xc5
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	429d      	cmp	r5, r3
 8002768:	d061      	beq.n	800282e <RI_SetRegisterMotor1+0x1e2>
 800276a:	d92a      	bls.n	80027c2 <RI_SetRegisterMotor1+0x176>
          retVal = MCP_ERROR_UNKNOWN_REG;
 800276c:	4b5b      	ldr	r3, [pc, #364]	@ (80028dc <RI_SetRegisterMotor1+0x290>)
 800276e:	18e8      	adds	r0, r5, r3
 8002770:	1e43      	subs	r3, r0, #1
 8002772:	4198      	sbcs	r0, r3
 8002774:	3004      	adds	r0, #4
 8002776:	e7eb      	b.n	8002750 <RI_SetRegisterMotor1+0x104>
 8002778:	3bc0      	subs	r3, #192	@ 0xc0
 800277a:	429d      	cmp	r5, r3
 800277c:	d057      	beq.n	800282e <RI_SetRegisterMotor1+0x1e2>
 800277e:	d934      	bls.n	80027ea <RI_SetRegisterMotor1+0x19e>
 8002780:	2340      	movs	r3, #64	@ 0x40
 8002782:	439d      	bics	r5, r3
 8002784:	4b56      	ldr	r3, [pc, #344]	@ (80028e0 <RI_SetRegisterMotor1+0x294>)
 8002786:	18e8      	adds	r0, r5, r3
 8002788:	1e43      	subs	r3, r0, #1
 800278a:	4198      	sbcs	r0, r3
 800278c:	3004      	adds	r0, #4
 800278e:	e7df      	b.n	8002750 <RI_SetRegisterMotor1+0x104>
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8002790:	2300      	movs	r3, #0
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8002792:	2007      	movs	r0, #7
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8002794:	8023      	strh	r3, [r4, #0]
      break;
 8002796:	e7dd      	b.n	8002754 <RI_SetRegisterMotor1+0x108>
      switch (regID)
 8002798:	2d98      	cmp	r5, #152	@ 0x98
 800279a:	d03c      	beq.n	8002816 <RI_SetRegisterMotor1+0x1ca>
 800279c:	d909      	bls.n	80027b2 <RI_SetRegisterMotor1+0x166>
 800279e:	0028      	movs	r0, r5
 80027a0:	4b50      	ldr	r3, [pc, #320]	@ (80028e4 <RI_SetRegisterMotor1+0x298>)
 80027a2:	38d8      	subs	r0, #216	@ 0xd8
 80027a4:	4018      	ands	r0, r3
 80027a6:	1e43      	subs	r3, r0, #1
 80027a8:	4198      	sbcs	r0, r3
 80027aa:	3004      	adds	r0, #4
      *size = 4;
 80027ac:	2304      	movs	r3, #4
 80027ae:	8023      	strh	r3, [r4, #0]
      break;
 80027b0:	e7d0      	b.n	8002754 <RI_SetRegisterMotor1+0x108>
 80027b2:	2340      	movs	r3, #64	@ 0x40
 80027b4:	0028      	movs	r0, r5
 80027b6:	4398      	bics	r0, r3
 80027b8:	3818      	subs	r0, #24
 80027ba:	1e43      	subs	r3, r0, #1
 80027bc:	4198      	sbcs	r0, r3
 80027be:	3004      	adds	r0, #4
 80027c0:	e7f4      	b.n	80027ac <RI_SetRegisterMotor1+0x160>
 80027c2:	4b49      	ldr	r3, [pc, #292]	@ (80028e8 <RI_SetRegisterMotor1+0x29c>)
 80027c4:	18e8      	adds	r0, r5, r3
 80027c6:	4b47      	ldr	r3, [pc, #284]	@ (80028e4 <RI_SetRegisterMotor1+0x298>)
 80027c8:	4018      	ands	r0, r3
          retVal = MCP_ERROR_UNKNOWN_REG;
 80027ca:	1e43      	subs	r3, r0, #1
 80027cc:	4198      	sbcs	r0, r3
 80027ce:	3004      	adds	r0, #4
 80027d0:	e7be      	b.n	8002750 <RI_SetRegisterMotor1+0x104>
      switch (regID)
 80027d2:	2d88      	cmp	r5, #136	@ 0x88
 80027d4:	d018      	beq.n	8002808 <RI_SetRegisterMotor1+0x1bc>
 80027d6:	2380      	movs	r3, #128	@ 0x80
 80027d8:	0028      	movs	r0, r5
 80027da:	4398      	bics	r0, r3
 80027dc:	3848      	subs	r0, #72	@ 0x48
 80027de:	1e43      	subs	r3, r0, #1
 80027e0:	4198      	sbcs	r0, r3
 80027e2:	3004      	adds	r0, #4
      *size = 1;
 80027e4:	2301      	movs	r3, #1
 80027e6:	8023      	strh	r3, [r4, #0]
      break;
 80027e8:	e7b4      	b.n	8002754 <RI_SetRegisterMotor1+0x108>
 80027ea:	23ba      	movs	r3, #186	@ 0xba
          retVal = MCP_ERROR_RO_REG;
 80027ec:	2004      	movs	r0, #4
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	429d      	cmp	r5, r3
 80027f2:	d0ad      	beq.n	8002750 <RI_SetRegisterMotor1+0x104>
          retVal = MCP_ERROR_UNKNOWN_REG;
 80027f4:	4b3d      	ldr	r3, [pc, #244]	@ (80028ec <RI_SetRegisterMotor1+0x2a0>)
 80027f6:	18e8      	adds	r0, r5, r3
 80027f8:	1e43      	subs	r3, r0, #1
 80027fa:	4198      	sbcs	r0, r3
 80027fc:	3004      	adds	r0, #4
 80027fe:	e7a7      	b.n	8002750 <RI_SetRegisterMotor1+0x104>
        *size = 0;
 8002800:	2300      	movs	r3, #0
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8002802:	200a      	movs	r0, #10
        *size = 0;
 8002804:	8023      	strh	r3, [r4, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8002806:	e7a5      	b.n	8002754 <RI_SetRegisterMotor1+0x108>
          uint8_t regdata8 = *data;
 8002808:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 800280a:	2b04      	cmp	r3, #4
 800280c:	d053      	beq.n	80028b6 <RI_SetRegisterMotor1+0x26a>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 800280e:	2b03      	cmp	r3, #3
 8002810:	d033      	beq.n	800287a <RI_SetRegisterMotor1+0x22e>
  uint8_t retVal = MCP_CMD_OK;
 8002812:	2000      	movs	r0, #0
 8002814:	e7e6      	b.n	80027e4 <RI_SetRegisterMotor1+0x198>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8002816:	2300      	movs	r3, #0
 8002818:	5ed0      	ldrsh	r0, [r2, r3]
 800281a:	2106      	movs	r1, #6
 800281c:	f7fd fcfe 	bl	800021c <__divsi3>
 8002820:	2200      	movs	r2, #0
 8002822:	b201      	sxth	r1, r0
 8002824:	4832      	ldr	r0, [pc, #200]	@ (80028f0 <RI_SetRegisterMotor1+0x2a4>)
 8002826:	f7fe fd51 	bl	80012cc <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 800282a:	2000      	movs	r0, #0
          break;
 800282c:	e7be      	b.n	80027ac <RI_SetRegisterMotor1+0x160>
          retVal = MCP_ERROR_RO_REG;
 800282e:	2004      	movs	r0, #4
 8002830:	e78e      	b.n	8002750 <RI_SetRegisterMotor1+0x104>
          PID_SetKI (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 8002832:	4827      	ldr	r0, [pc, #156]	@ (80028d0 <RI_SetRegisterMotor1+0x284>)
 8002834:	b231      	sxth	r1, r6
 8002836:	f002 faf7 	bl	8004e28 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 800283a:	2000      	movs	r0, #0
 800283c:	e788      	b.n	8002750 <RI_SetRegisterMotor1+0x104>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 800283e:	4825      	ldr	r0, [pc, #148]	@ (80028d4 <RI_SetRegisterMotor1+0x288>)
 8002840:	b231      	sxth	r1, r6
 8002842:	f002 faef 	bl	8004e24 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 8002846:	2000      	movs	r0, #0
 8002848:	e782      	b.n	8002750 <RI_SetRegisterMotor1+0x104>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 800284a:	4822      	ldr	r0, [pc, #136]	@ (80028d4 <RI_SetRegisterMotor1+0x288>)
 800284c:	b231      	sxth	r1, r6
 800284e:	f002 faf9 	bl	8004e44 <PID_SetKD>
  uint8_t retVal = MCP_CMD_OK;
 8002852:	2000      	movs	r0, #0
 8002854:	e77c      	b.n	8002750 <RI_SetRegisterMotor1+0x104>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002856:	2005      	movs	r0, #5
 8002858:	e77a      	b.n	8002750 <RI_SetRegisterMotor1+0x104>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 800285a:	466b      	mov	r3, sp
 800285c:	4d1b      	ldr	r5, [pc, #108]	@ (80028cc <RI_SetRegisterMotor1+0x280>)
 800285e:	af01      	add	r7, sp, #4
 8002860:	1d9a      	adds	r2, r3, #6
 8002862:	0039      	movs	r1, r7
 8002864:	0028      	movs	r0, r5
 8002866:	f003 fd93 	bl	8006390 <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, hC1, (int16_t)regdata16);
 800286a:	0028      	movs	r0, r5
 800286c:	2300      	movs	r3, #0
 800286e:	5ef9      	ldrsh	r1, [r7, r3]
 8002870:	b232      	sxth	r2, r6
 8002872:	f003 fd95 	bl	80063a0 <STO_PLL_SetObserverGains>
  uint8_t retVal = MCP_CMD_OK;
 8002876:	2000      	movs	r0, #0
 8002878:	e76a      	b.n	8002750 <RI_SetRegisterMotor1+0x104>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 800287a:	4d1d      	ldr	r5, [pc, #116]	@ (80028f0 <RI_SetRegisterMotor1+0x2a4>)
 800287c:	0028      	movs	r0, r5
 800287e:	f7fe fe03 	bl	8001488 <MCI_GetMecSpeedRefUnit>
 8002882:	2200      	movs	r2, #0
 8002884:	0001      	movs	r1, r0
 8002886:	0028      	movs	r0, r5
 8002888:	f7fe fd20 	bl	80012cc <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 800288c:	2000      	movs	r0, #0
 800288e:	e7a9      	b.n	80027e4 <RI_SetRegisterMotor1+0x198>
            rpm = (((int32_t)(*(int16_t *)&rawData[2])) << 16) | *(uint16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8002890:	8890      	ldrh	r0, [r2, #4]
 8002892:	8853      	ldrh	r3, [r2, #2]
 8002894:	0400      	lsls	r0, r0, #16
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8002896:	2106      	movs	r1, #6
            rpm = (((int32_t)(*(int16_t *)&rawData[2])) << 16) | *(uint16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8002898:	4318      	orrs	r0, r3
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 800289a:	88d4      	ldrh	r4, [r2, #6]
 800289c:	f7fd fcbe 	bl	800021c <__divsi3>
 80028a0:	0022      	movs	r2, r4
 80028a2:	b201      	sxth	r1, r0
 80028a4:	4812      	ldr	r0, [pc, #72]	@ (80028f0 <RI_SetRegisterMotor1+0x2a4>)
 80028a6:	f7fe fd11 	bl	80012cc <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 80028aa:	2000      	movs	r0, #0
            break;
 80028ac:	e752      	b.n	8002754 <RI_SetRegisterMotor1+0x108>
 80028ae:	2005      	movs	r0, #5
 80028b0:	e750      	b.n	8002754 <RI_SetRegisterMotor1+0x108>
            retVal = MCP_ERROR_RO_REG;
 80028b2:	2004      	movs	r0, #4
 80028b4:	e74e      	b.n	8002754 <RI_SetRegisterMotor1+0x108>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 80028b6:	4d0e      	ldr	r5, [pc, #56]	@ (80028f0 <RI_SetRegisterMotor1+0x2a4>)
 80028b8:	0028      	movs	r0, r5
 80028ba:	f7fe fe0b 	bl	80014d4 <MCI_GetTeref>
 80028be:	2200      	movs	r2, #0
 80028c0:	0001      	movs	r1, r0
 80028c2:	0028      	movs	r0, r5
 80028c4:	f7fe fd0c 	bl	80012e0 <MCI_ExecTorqueRamp>
  uint8_t retVal = MCP_CMD_OK;
 80028c8:	2000      	movs	r0, #0
 80028ca:	e78b      	b.n	80027e4 <RI_SetRegisterMotor1+0x198>
 80028cc:	20000068 	.word	0x20000068
 80028d0:	2000009c 	.word	0x2000009c
 80028d4:	2000033c 	.word	0x2000033c
 80028d8:	ffffe4a8 	.word	0xffffe4a8
 80028dc:	fffff370 	.word	0xfffff370
 80028e0:	fffff5f0 	.word	0xfffff5f0
 80028e4:	0000ffbf 	.word	0x0000ffbf
 80028e8:	fffff4b0 	.word	0xfffff4b0
 80028ec:	fffff870 	.word	0xfffff870
 80028f0:	20000000 	.word	0x20000000

080028f4 <RI_GetRegisterGlobal>:

uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 80028f4:	b570      	push	{r4, r5, r6, lr}
    uint8_t retVal = MCP_CMD_OK;
    switch (typeID)
 80028f6:	000c      	movs	r4, r1
 80028f8:	3c08      	subs	r4, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 80028fa:	001d      	movs	r5, r3
    switch (typeID)
 80028fc:	b2e4      	uxtb	r4, r4
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 80028fe:	ab04      	add	r3, sp, #16
 8002900:	0006      	movs	r6, r0
 8002902:	2000      	movs	r0, #0
 8002904:	5e1b      	ldrsh	r3, [r3, r0]
    switch (typeID)
 8002906:	2c20      	cmp	r4, #32
 8002908:	d803      	bhi.n	8002912 <RI_GetRegisterGlobal+0x1e>
 800290a:	4820      	ldr	r0, [pc, #128]	@ (800298c <RI_GetRegisterGlobal+0x98>)
 800290c:	00a4      	lsls	r4, r4, #2
 800290e:	5900      	ldr	r0, [r0, r4]
 8002910:	4687      	mov	pc, r0
 8002912:	2007      	movs	r0, #7
        retVal = MCP_ERROR_BAD_DATA_TYPE;
        break;
      }
    }
  return (retVal);
}
 8002914:	bd70      	pop	{r4, r5, r6, pc}
        switch (regID)
 8002916:	2e28      	cmp	r6, #40	@ 0x28
 8002918:	d024      	beq.n	8002964 <RI_GetRegisterGlobal+0x70>
        *size = (*rawSize) + 2U;
 800291a:	8813      	ldrh	r3, [r2, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 800291c:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 800291e:	3302      	adds	r3, #2
 8002920:	b29b      	uxth	r3, r3
 8002922:	802b      	strh	r3, [r5, #0]
        break;
 8002924:	e7f6      	b.n	8002914 <RI_GetRegisterGlobal+0x20>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002926:	0008      	movs	r0, r1
        if (freeSpace > 0)
 8002928:	2b00      	cmp	r3, #0
 800292a:	ddf3      	ble.n	8002914 <RI_GetRegisterGlobal+0x20>
 800292c:	2301      	movs	r3, #1
            retVal = MCP_ERROR_UNKNOWN_REG;
 800292e:	2005      	movs	r0, #5
          *size = 1;
 8002930:	802b      	strh	r3, [r5, #0]
 8002932:	e7ef      	b.n	8002914 <RI_GetRegisterGlobal+0x20>
        if (freeSpace >= 2)
 8002934:	2b01      	cmp	r3, #1
 8002936:	dd27      	ble.n	8002988 <RI_GetRegisterGlobal+0x94>
          switch (regID)
 8002938:	4b15      	ldr	r3, [pc, #84]	@ (8002990 <RI_GetRegisterGlobal+0x9c>)
 800293a:	18f0      	adds	r0, r6, r3
 800293c:	4b15      	ldr	r3, [pc, #84]	@ (8002994 <RI_GetRegisterGlobal+0xa0>)
 800293e:	4018      	ands	r0, r3
 8002940:	4243      	negs	r3, r0
 8002942:	4158      	adcs	r0, r3
 8002944:	2304      	movs	r3, #4
 8002946:	4240      	negs	r0, r0
 8002948:	4398      	bics	r0, r3
          *size = 2;
 800294a:	3b02      	subs	r3, #2
 800294c:	3005      	adds	r0, #5
 800294e:	802b      	strh	r3, [r5, #0]
 8002950:	e7e0      	b.n	8002914 <RI_GetRegisterGlobal+0x20>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002952:	2008      	movs	r0, #8
        if (freeSpace >= 4)
 8002954:	2b03      	cmp	r3, #3
 8002956:	dddd      	ble.n	8002914 <RI_GetRegisterGlobal+0x20>
          *size = 4;
 8002958:	2304      	movs	r3, #4
            retVal = MCP_ERROR_UNKNOWN_REG;
 800295a:	3803      	subs	r0, #3
          *size = 4;
 800295c:	802b      	strh	r3, [r5, #0]
 800295e:	e7d9      	b.n	8002914 <RI_GetRegisterGlobal+0x20>
    switch (typeID)
 8002960:	2300      	movs	r3, #0
 8002962:	e7e4      	b.n	800292e <RI_GetRegisterGlobal+0x3a>
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002964:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002966:	b29b      	uxth	r3, r3
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002968:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800296a:	2b0b      	cmp	r3, #11
 800296c:	d803      	bhi.n	8002976 <RI_GetRegisterGlobal+0x82>
 800296e:	230c      	movs	r3, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002970:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 8002972:	802b      	strh	r3, [r5, #0]
        break;
 8002974:	e7ce      	b.n	8002914 <RI_GetRegisterGlobal+0x20>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002976:	1c90      	adds	r0, r2, #2
 8002978:	4907      	ldr	r1, [pc, #28]	@ (8002998 <RI_GetRegisterGlobal+0xa4>)
 800297a:	220a      	movs	r2, #10
 800297c:	f003 fe66 	bl	800664c <memcpy>
 8002980:	230c      	movs	r3, #12
    uint8_t retVal = MCP_CMD_OK;
 8002982:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8002984:	802b      	strh	r3, [r5, #0]
        break;
 8002986:	e7c5      	b.n	8002914 <RI_GetRegisterGlobal+0x20>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002988:	2008      	movs	r0, #8
 800298a:	e7c3      	b.n	8002914 <RI_GetRegisterGlobal+0x20>
 800298c:	08006b48 	.word	0x08006b48
 8002990:	fffff1b0 	.word	0xfffff1b0
 8002994:	0000ffbf 	.word	0x0000ffbf
 8002998:	080067a8 	.word	0x080067a8

0800299c <RI_GetRegisterMotor1>:

  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 800299c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t retVal = MCP_CMD_OK;
    uint8_t motorID=0;
    MCI_Handle_t *pMCIN = &Mci[motorID];
    BusVoltageSensor_Handle_t* BusVoltageSensor= &BusVoltageSensor_M1._Super;
    switch (typeID)
 800299e:	000d      	movs	r5, r1
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 80029a0:	b087      	sub	sp, #28
    switch (typeID)
 80029a2:	3d08      	subs	r5, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 80029a4:	001e      	movs	r6, r3
    switch (typeID)
 80029a6:	b2ed      	uxtb	r5, r5
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 80029a8:	ab0c      	add	r3, sp, #48	@ 0x30
 80029aa:	0017      	movs	r7, r2
 80029ac:	0004      	movs	r4, r0
 80029ae:	2200      	movs	r2, #0
 80029b0:	5e9b      	ldrsh	r3, [r3, r2]
    switch (typeID)
 80029b2:	2d20      	cmp	r5, #32
 80029b4:	d803      	bhi.n	80029be <RI_GetRegisterMotor1+0x22>
 80029b6:	4ab7      	ldr	r2, [pc, #732]	@ (8002c94 <RI_GetRegisterMotor1+0x2f8>)
 80029b8:	00ad      	lsls	r5, r5, #2
 80029ba:	5952      	ldr	r2, [r2, r5]
 80029bc:	4697      	mov	pc, r2
 80029be:	2007      	movs	r0, #7
        retVal = MCP_ERROR_BAD_DATA_TYPE;
        break;
      }
    }
    return (retVal);
  }
 80029c0:	b007      	add	sp, #28
 80029c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rawData++;
 80029c4:	2294      	movs	r2, #148	@ 0x94
 80029c6:	1cb8      	adds	r0, r7, #2
        switch (regID)
 80029c8:	0052      	lsls	r2, r2, #1
 80029ca:	4294      	cmp	r4, r2
 80029cc:	d100      	bne.n	80029d0 <RI_GetRegisterMotor1+0x34>
 80029ce:	e105      	b.n	8002bdc <RI_GetRegisterMotor1+0x240>
 80029d0:	d85c      	bhi.n	8002a8c <RI_GetRegisterMotor1+0xf0>
 80029d2:	2ca8      	cmp	r4, #168	@ 0xa8
 80029d4:	d100      	bne.n	80029d8 <RI_GetRegisterMotor1+0x3c>
 80029d6:	e10e      	b.n	8002bf6 <RI_GetRegisterMotor1+0x25a>
 80029d8:	2ce8      	cmp	r4, #232	@ 0xe8
 80029da:	d000      	beq.n	80029de <RI_GetRegisterMotor1+0x42>
 80029dc:	e0f8      	b.n	8002bd0 <RI_GetRegisterMotor1+0x234>
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 80029de:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80029e0:	b29b      	uxth	r3, r3
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 80029e2:	803a      	strh	r2, [r7, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80029e4:	2b0f      	cmp	r3, #15
 80029e6:	d900      	bls.n	80029ea <RI_GetRegisterMotor1+0x4e>
 80029e8:	e0e8      	b.n	8002bbc <RI_GetRegisterMotor1+0x220>
 80029ea:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80029ec:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 80029ee:	8033      	strh	r3, [r6, #0]
        break;
 80029f0:	e7e6      	b.n	80029c0 <RI_GetRegisterMotor1+0x24>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80029f2:	0008      	movs	r0, r1
        if (freeSpace > 0)
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	dde3      	ble.n	80029c0 <RI_GetRegisterMotor1+0x24>
          switch (regID)
 80029f8:	2c88      	cmp	r4, #136	@ 0x88
 80029fa:	d100      	bne.n	80029fe <RI_GetRegisterMotor1+0x62>
 80029fc:	e104      	b.n	8002c08 <RI_GetRegisterMotor1+0x26c>
 80029fe:	2cc8      	cmp	r4, #200	@ 0xc8
 8002a00:	d100      	bne.n	8002a04 <RI_GetRegisterMotor1+0x68>
 8002a02:	e10b      	b.n	8002c1c <RI_GetRegisterMotor1+0x280>
 8002a04:	2005      	movs	r0, #5
 8002a06:	2c48      	cmp	r4, #72	@ 0x48
 8002a08:	d100      	bne.n	8002a0c <RI_GetRegisterMotor1+0x70>
 8002a0a:	e103      	b.n	8002c14 <RI_GetRegisterMotor1+0x278>
          *size = 1;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	8033      	strh	r3, [r6, #0]
 8002a10:	e7d6      	b.n	80029c0 <RI_GetRegisterMotor1+0x24>
        if (freeSpace >= 2)
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	dc00      	bgt.n	8002a18 <RI_GetRegisterMotor1+0x7c>
 8002a16:	e0cf      	b.n	8002bb8 <RI_GetRegisterMotor1+0x21c>
          switch (regID)
 8002a18:	239d      	movs	r3, #157	@ 0x9d
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	4298      	cmp	r0, r3
 8002a1e:	d100      	bne.n	8002a22 <RI_GetRegisterMotor1+0x86>
 8002a20:	e15e      	b.n	8002ce0 <RI_GetRegisterMotor1+0x344>
 8002a22:	d900      	bls.n	8002a26 <RI_GetRegisterMotor1+0x8a>
 8002a24:	e07d      	b.n	8002b22 <RI_GetRegisterMotor1+0x186>
 8002a26:	23e4      	movs	r3, #228	@ 0xe4
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4298      	cmp	r0, r3
 8002a2c:	d100      	bne.n	8002a30 <RI_GetRegisterMotor1+0x94>
 8002a2e:	e14d      	b.n	8002ccc <RI_GetRegisterMotor1+0x330>
 8002a30:	d963      	bls.n	8002afa <RI_GetRegisterMotor1+0x15e>
 8002a32:	23b2      	movs	r3, #178	@ 0xb2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4298      	cmp	r0, r3
 8002a38:	d100      	bne.n	8002a3c <RI_GetRegisterMotor1+0xa0>
 8002a3a:	e16b      	b.n	8002d14 <RI_GetRegisterMotor1+0x378>
 8002a3c:	d94f      	bls.n	8002ade <RI_GetRegisterMotor1+0x142>
 8002a3e:	23ba      	movs	r3, #186	@ 0xba
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4298      	cmp	r0, r3
 8002a44:	d147      	bne.n	8002ad6 <RI_GetRegisterMotor1+0x13a>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 8002a46:	4894      	ldr	r0, [pc, #592]	@ (8002c98 <RI_GetRegisterMotor1+0x2fc>)
 8002a48:	f002 f9d4 	bl	8004df4 <NTC_GetAvTemp_C>
 8002a4c:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002a4e:	2000      	movs	r0, #0
 8002a50:	e042      	b.n	8002ad8 <RI_GetRegisterMotor1+0x13c>
        if (freeSpace >= 4)
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	dc00      	bgt.n	8002a58 <RI_GetRegisterMotor1+0xbc>
 8002a56:	e0af      	b.n	8002bb8 <RI_GetRegisterMotor1+0x21c>
          switch (regID)
 8002a58:	28d8      	cmp	r0, #216	@ 0xd8
 8002a5a:	d100      	bne.n	8002a5e <RI_GetRegisterMotor1+0xc2>
 8002a5c:	e0ee      	b.n	8002c3c <RI_GetRegisterMotor1+0x2a0>
 8002a5e:	d900      	bls.n	8002a62 <RI_GetRegisterMotor1+0xc6>
 8002a60:	e09d      	b.n	8002b9e <RI_GetRegisterMotor1+0x202>
 8002a62:	2858      	cmp	r0, #88	@ 0x58
 8002a64:	d100      	bne.n	8002a68 <RI_GetRegisterMotor1+0xcc>
 8002a66:	e0e1      	b.n	8002c2c <RI_GetRegisterMotor1+0x290>
 8002a68:	2898      	cmp	r0, #152	@ 0x98
 8002a6a:	d000      	beq.n	8002a6e <RI_GetRegisterMotor1+0xd2>
 8002a6c:	e090      	b.n	8002b90 <RI_GetRegisterMotor1+0x1f4>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002a6e:	488b      	ldr	r0, [pc, #556]	@ (8002c9c <RI_GetRegisterMotor1+0x300>)
 8002a70:	f7fe fd0a 	bl	8001488 <MCI_GetMecSpeedRefUnit>
 8002a74:	0043      	lsls	r3, r0, #1
 8002a76:	181b      	adds	r3, r3, r0
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	603b      	str	r3, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002a7c:	2000      	movs	r0, #0
          *size = 4;
 8002a7e:	2304      	movs	r3, #4
 8002a80:	8033      	strh	r3, [r6, #0]
 8002a82:	e79d      	b.n	80029c0 <RI_GetRegisterMotor1+0x24>
            *size= 0 ; /* */
 8002a84:	2300      	movs	r3, #0
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002a86:	2005      	movs	r0, #5
            *size= 0 ; /* */
 8002a88:	8033      	strh	r3, [r6, #0]
            break;
 8002a8a:	e799      	b.n	80029c0 <RI_GetRegisterMotor1+0x24>
 8002a8c:	23d4      	movs	r3, #212	@ 0xd4
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	429c      	cmp	r4, r3
 8002a92:	d000      	beq.n	8002a96 <RI_GetRegisterMotor1+0xfa>
 8002a94:	e09c      	b.n	8002bd0 <RI_GetRegisterMotor1+0x234>
            int32_t rpm32 = ((int32_t)(MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8002a96:	4c81      	ldr	r4, [pc, #516]	@ (8002c9c <RI_GetRegisterMotor1+0x300>)
 8002a98:	0020      	movs	r0, r4
 8002a9a:	f7fe fce3 	bl	8001464 <MCI_GetLastRampFinalSpeed>
 8002a9e:	0043      	lsls	r3, r0, #1
 8002aa0:	181b      	adds	r3, r3, r0
 8002aa2:	005b      	lsls	r3, r3, #1
            *rpm16p = (uint16_t)rpm32;
 8002aa4:	807b      	strh	r3, [r7, #2]
            *(rpm16p+1) = (uint16_t)(rpm32>>16);
 8002aa6:	141b      	asrs	r3, r3, #16
 8002aa8:	80bb      	strh	r3, [r7, #4]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8002aaa:	0020      	movs	r0, r4
 8002aac:	f7fe fcde 	bl	800146c <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8002ab0:	2306      	movs	r3, #6
 8002ab2:	803b      	strh	r3, [r7, #0]
            break;
 8002ab4:	3302      	adds	r3, #2
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8002ab6:	80f8      	strh	r0, [r7, #6]
    uint8_t retVal = MCP_CMD_OK;
 8002ab8:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8002aba:	8033      	strh	r3, [r6, #0]
        break;
 8002abc:	e780      	b.n	80029c0 <RI_GetRegisterMotor1+0x24>
 8002abe:	23c9      	movs	r3, #201	@ 0xc9
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	4298      	cmp	r0, r3
 8002ac4:	d100      	bne.n	8002ac8 <RI_GetRegisterMotor1+0x12c>
 8002ac6:	e11e      	b.n	8002d06 <RI_GetRegisterMotor1+0x36a>
 8002ac8:	d959      	bls.n	8002b7e <RI_GetRegisterMotor1+0x1e2>
 8002aca:	4b75      	ldr	r3, [pc, #468]	@ (8002ca0 <RI_GetRegisterMotor1+0x304>)
 8002acc:	469c      	mov	ip, r3
 8002ace:	4b75      	ldr	r3, [pc, #468]	@ (8002ca4 <RI_GetRegisterMotor1+0x308>)
 8002ad0:	4464      	add	r4, ip
 8002ad2:	421c      	tst	r4, r3
 8002ad4:	d0bb      	beq.n	8002a4e <RI_GetRegisterMotor1+0xb2>
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002ad6:	2005      	movs	r0, #5
          *size = 2;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	8033      	strh	r3, [r6, #0]
 8002adc:	e770      	b.n	80029c0 <RI_GetRegisterMotor1+0x24>
 8002ade:	3b41      	subs	r3, #65	@ 0x41
 8002ae0:	3bff      	subs	r3, #255	@ 0xff
 8002ae2:	4298      	cmp	r0, r3
 8002ae4:	d100      	bne.n	8002ae8 <RI_GetRegisterMotor1+0x14c>
 8002ae6:	e0c2      	b.n	8002c6e <RI_GetRegisterMotor1+0x2d2>
 8002ae8:	3340      	adds	r3, #64	@ 0x40
 8002aea:	4298      	cmp	r0, r3
 8002aec:	d1f3      	bne.n	8002ad6 <RI_GetRegisterMotor1+0x13a>
              *regdata16 = PID_GetKP (&(&STO_PLL_M1)->PIRegulator);
 8002aee:	486e      	ldr	r0, [pc, #440]	@ (8002ca8 <RI_GetRegisterMotor1+0x30c>)
 8002af0:	f002 f99c 	bl	8004e2c <PID_GetKP>
 8002af4:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002af6:	2000      	movs	r0, #0
 8002af8:	e7ee      	b.n	8002ad8 <RI_GetRegisterMotor1+0x13c>
 8002afa:	2388      	movs	r3, #136	@ 0x88
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4298      	cmp	r0, r3
 8002b00:	d100      	bne.n	8002b04 <RI_GetRegisterMotor1+0x168>
 8002b02:	e0c1      	b.n	8002c88 <RI_GetRegisterMotor1+0x2ec>
 8002b04:	d923      	bls.n	8002b4e <RI_GetRegisterMotor1+0x1b2>
 8002b06:	23d4      	movs	r3, #212	@ 0xd4
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4298      	cmp	r0, r3
 8002b0c:	d1e3      	bne.n	8002ad6 <RI_GetRegisterMotor1+0x13a>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8002b0e:	ac04      	add	r4, sp, #16
 8002b10:	4866      	ldr	r0, [pc, #408]	@ (8002cac <RI_GetRegisterMotor1+0x310>)
 8002b12:	0021      	movs	r1, r4
 8002b14:	aa05      	add	r2, sp, #20
 8002b16:	f003 fc3b 	bl	8006390 <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 8002b1a:	8823      	ldrh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002b1c:	2000      	movs	r0, #0
              *regdata16 = hC1;
 8002b1e:	803b      	strh	r3, [r7, #0]
              break;
 8002b20:	e7da      	b.n	8002ad8 <RI_GetRegisterMotor1+0x13c>
 8002b22:	23b9      	movs	r3, #185	@ 0xb9
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	4298      	cmp	r0, r3
 8002b28:	d100      	bne.n	8002b2c <RI_GetRegisterMotor1+0x190>
 8002b2a:	e0e6      	b.n	8002cfa <RI_GetRegisterMotor1+0x35e>
 8002b2c:	d8c7      	bhi.n	8002abe <RI_GetRegisterMotor1+0x122>
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	3bff      	subs	r3, #255	@ 0xff
 8002b32:	4298      	cmp	r0, r3
 8002b34:	d100      	bne.n	8002b38 <RI_GetRegisterMotor1+0x19c>
 8002b36:	e0d9      	b.n	8002cec <RI_GetRegisterMotor1+0x350>
 8002b38:	d914      	bls.n	8002b64 <RI_GetRegisterMotor1+0x1c8>
 8002b3a:	23b5      	movs	r3, #181	@ 0xb5
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	4298      	cmp	r0, r3
 8002b40:	d1c9      	bne.n	8002ad6 <RI_GetRegisterMotor1+0x13a>
 8002b42:	4b5a      	ldr	r3, [pc, #360]	@ (8002cac <RI_GetRegisterMotor1+0x310>)
    uint8_t retVal = MCP_CMD_OK;
 8002b44:	2000      	movs	r0, #0
 8002b46:	2204      	movs	r2, #4
 8002b48:	5e9b      	ldrsh	r3, [r3, r2]
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 8002b4a:	803b      	strh	r3, [r7, #0]
              break;
 8002b4c:	e7c4      	b.n	8002ad8 <RI_GetRegisterMotor1+0x13c>
 8002b4e:	2890      	cmp	r0, #144	@ 0x90
 8002b50:	d100      	bne.n	8002b54 <RI_GetRegisterMotor1+0x1b8>
 8002b52:	e086      	b.n	8002c62 <RI_GetRegisterMotor1+0x2c6>
 8002b54:	28d0      	cmp	r0, #208	@ 0xd0
 8002b56:	d1be      	bne.n	8002ad6 <RI_GetRegisterMotor1+0x13a>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 8002b58:	4855      	ldr	r0, [pc, #340]	@ (8002cb0 <RI_GetRegisterMotor1+0x314>)
 8002b5a:	f002 f96b 	bl	8004e34 <PID_GetKI>
 8002b5e:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002b60:	2000      	movs	r0, #0
 8002b62:	e7b9      	b.n	8002ad8 <RI_GetRegisterMotor1+0x13c>
 8002b64:	3b80      	subs	r3, #128	@ 0x80
 8002b66:	4298      	cmp	r0, r3
 8002b68:	d100      	bne.n	8002b6c <RI_GetRegisterMotor1+0x1d0>
 8002b6a:	e086      	b.n	8002c7a <RI_GetRegisterMotor1+0x2de>
 8002b6c:	3340      	adds	r3, #64	@ 0x40
 8002b6e:	4298      	cmp	r0, r3
 8002b70:	d1b1      	bne.n	8002ad6 <RI_GetRegisterMotor1+0x13a>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8002b72:	484a      	ldr	r0, [pc, #296]	@ (8002c9c <RI_GetRegisterMotor1+0x300>)
 8002b74:	f7fe fc9e 	bl	80014b4 <MCI_GetValphabeta>
 8002b78:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	e7ac      	b.n	8002ad8 <RI_GetRegisterMotor1+0x13c>
 8002b7e:	3b40      	subs	r3, #64	@ 0x40
 8002b80:	4298      	cmp	r0, r3
 8002b82:	d1a8      	bne.n	8002ad6 <RI_GetRegisterMotor1+0x13a>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).alpha;
 8002b84:	4849      	ldr	r0, [pc, #292]	@ (8002cac <RI_GetRegisterMotor1+0x310>)
 8002b86:	f003 fbf9 	bl	800637c <STO_PLL_GetEstimatedBemf>
 8002b8a:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	e7a3      	b.n	8002ad8 <RI_GetRegisterMotor1+0x13c>
 8002b90:	2818      	cmp	r0, #24
 8002b92:	d11b      	bne.n	8002bcc <RI_GetRegisterMotor1+0x230>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8002b94:	4841      	ldr	r0, [pc, #260]	@ (8002c9c <RI_GetRegisterMotor1+0x300>)
 8002b96:	f7fe fc3f 	bl	8001418 <MCI_GetFaultState>
 8002b9a:	6038      	str	r0, [r7, #0]
              break;
 8002b9c:	e76e      	b.n	8002a7c <RI_GetRegisterMotor1+0xe0>
 8002b9e:	238c      	movs	r3, #140	@ 0x8c
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4298      	cmp	r0, r3
 8002ba4:	d050      	beq.n	8002c48 <RI_GetRegisterMotor1+0x2ac>
 8002ba6:	4b43      	ldr	r3, [pc, #268]	@ (8002cb4 <RI_GetRegisterMotor1+0x318>)
 8002ba8:	4298      	cmp	r0, r3
 8002baa:	d10f      	bne.n	8002bcc <RI_GetRegisterMotor1+0x230>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8002bac:	4b42      	ldr	r3, [pc, #264]	@ (8002cb8 <RI_GetRegisterMotor1+0x31c>)
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	f002 f9aa 	bl	8004f08 <PQD_GetAvrgElMotorPowerW>
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 8002bb4:	6038      	str	r0, [r7, #0]
              break;
 8002bb6:	e761      	b.n	8002a7c <RI_GetRegisterMotor1+0xe0>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002bb8:	2008      	movs	r0, #8
 8002bba:	e701      	b.n	80029c0 <RI_GetRegisterMotor1+0x24>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8002bbc:	4b3f      	ldr	r3, [pc, #252]	@ (8002cbc <RI_GetRegisterMotor1+0x320>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8002bbe:	6819      	ldr	r1, [r3, #0]
 8002bc0:	f003 fd44 	bl	800664c <memcpy>
 8002bc4:	2310      	movs	r3, #16
    uint8_t retVal = MCP_CMD_OK;
 8002bc6:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8002bc8:	8033      	strh	r3, [r6, #0]
        break;
 8002bca:	e6f9      	b.n	80029c0 <RI_GetRegisterMotor1+0x24>
 8002bcc:	2005      	movs	r0, #5
 8002bce:	e756      	b.n	8002a7e <RI_GetRegisterMotor1+0xe2>
        *size = (*rawSize) + 2U;
 8002bd0:	883b      	ldrh	r3, [r7, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002bd2:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	8033      	strh	r3, [r6, #0]
        break;
 8002bda:	e6f1      	b.n	80029c0 <RI_GetRegisterMotor1+0x24>
            *rawSize = 12;
 8002bdc:	220c      	movs	r2, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8002bde:	b29b      	uxth	r3, r3
            *rawSize = 12;
 8002be0:	803a      	strh	r2, [r7, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8002be2:	2b0d      	cmp	r3, #13
 8002be4:	d91e      	bls.n	8002c24 <RI_GetRegisterMotor1+0x288>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8002be6:	4936      	ldr	r1, [pc, #216]	@ (8002cc0 <RI_GetRegisterMotor1+0x324>)
 8002be8:	3204      	adds	r2, #4
 8002bea:	f003 fd2f 	bl	800664c <memcpy>
 8002bee:	230e      	movs	r3, #14
    uint8_t retVal = MCP_CMD_OK;
 8002bf0:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8002bf2:	8033      	strh	r3, [r6, #0]
        break;
 8002bf4:	e6e4      	b.n	80029c0 <RI_GetRegisterMotor1+0x24>
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8002bf6:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002bf8:	b29b      	uxth	r3, r3
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8002bfa:	803a      	strh	r2, [r7, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002bfc:	2b11      	cmp	r3, #17
 8002bfe:	d828      	bhi.n	8002c52 <RI_GetRegisterMotor1+0x2b6>
 8002c00:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002c02:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 8002c04:	8033      	strh	r3, [r6, #0]
        break;
 8002c06:	e6db      	b.n	80029c0 <RI_GetRegisterMotor1+0x24>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8002c08:	4824      	ldr	r0, [pc, #144]	@ (8002c9c <RI_GetRegisterMotor1+0x300>)
 8002c0a:	f7fe fc0b 	bl	8001424 <MCI_GetControlMode>
 8002c0e:	7038      	strb	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002c10:	2000      	movs	r0, #0
 8002c12:	e6fb      	b.n	8002a0c <RI_GetRegisterMotor1+0x70>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8002c14:	4821      	ldr	r0, [pc, #132]	@ (8002c9c <RI_GetRegisterMotor1+0x300>)
 8002c16:	f7fe fbb1 	bl	800137c <MCI_GetSTMState>
              break;
 8002c1a:	e7f8      	b.n	8002c0e <RI_GetRegisterMotor1+0x272>
  return ((uint8_t)pHandle->bPhaseNbr);
 8002c1c:	2248      	movs	r2, #72	@ 0x48
 8002c1e:	4b29      	ldr	r3, [pc, #164]	@ (8002cc4 <RI_GetRegisterMotor1+0x328>)
 8002c20:	5c98      	ldrb	r0, [r3, r2]
              break;
 8002c22:	e7f4      	b.n	8002c0e <RI_GetRegisterMotor1+0x272>
 8002c24:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002c26:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 8002c28:	8033      	strh	r3, [r6, #0]
        break;
 8002c2a:	e6c9      	b.n	80029c0 <RI_GetRegisterMotor1+0x24>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002c2c:	481b      	ldr	r0, [pc, #108]	@ (8002c9c <RI_GetRegisterMotor1+0x300>)
 8002c2e:	f7fe fc25 	bl	800147c <MCI_GetAvrgMecSpeedUnit>
 8002c32:	0043      	lsls	r3, r0, #1
 8002c34:	181b      	adds	r3, r3, r0
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	603b      	str	r3, [r7, #0]
              break;
 8002c3a:	e71f      	b.n	8002a7c <RI_GetRegisterMotor1+0xe0>
static inline int32_t STO_PLL_GetEstimatedBemfLevel(STO_PLL_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Est_Bemf_Level);
#else
  return (pHandle->Est_Bemf_Level);
 8002c3c:	2280      	movs	r2, #128	@ 0x80
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cac <RI_GetRegisterMotor1+0x310>)
 8002c40:	0052      	lsls	r2, r2, #1
 8002c42:	589b      	ldr	r3, [r3, r2]
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(&STO_PLL_M1);
 8002c44:	603b      	str	r3, [r7, #0]
              break;
 8002c46:	e719      	b.n	8002a7c <RI_GetRegisterMotor1+0xe0>
static inline int32_t STO_PLL_GetObservedBemfLevel(STO_PLL_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
 8002c48:	22fc      	movs	r2, #252	@ 0xfc
 8002c4a:	4b18      	ldr	r3, [pc, #96]	@ (8002cac <RI_GetRegisterMotor1+0x310>)
 8002c4c:	589b      	ldr	r3, [r3, r2]
              *regdata32 = STO_PLL_GetObservedBemfLevel(&STO_PLL_M1);
 8002c4e:	603b      	str	r3, [r7, #0]
              break;
 8002c50:	e714      	b.n	8002a7c <RI_GetRegisterMotor1+0xe0>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 8002c52:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc8 <RI_GetRegisterMotor1+0x32c>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8002c54:	6819      	ldr	r1, [r3, #0]
 8002c56:	f003 fcf9 	bl	800664c <memcpy>
 8002c5a:	2312      	movs	r3, #18
    uint8_t retVal = MCP_CMD_OK;
 8002c5c:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8002c5e:	8033      	strh	r3, [r6, #0]
        break;
 8002c60:	e6ae      	b.n	80029c0 <RI_GetRegisterMotor1+0x24>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 8002c62:	4813      	ldr	r0, [pc, #76]	@ (8002cb0 <RI_GetRegisterMotor1+0x314>)
 8002c64:	f002 f8e2 	bl	8004e2c <PID_GetKP>
 8002c68:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	e734      	b.n	8002ad8 <RI_GetRegisterMotor1+0x13c>
              *regdata16 = PID_GetKI (&(&STO_PLL_M1)->PIRegulator);
 8002c6e:	480e      	ldr	r0, [pc, #56]	@ (8002ca8 <RI_GetRegisterMotor1+0x30c>)
 8002c70:	f002 f8e0 	bl	8004e34 <PID_GetKI>
 8002c74:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002c76:	2000      	movs	r0, #0
 8002c78:	e72e      	b.n	8002ad8 <RI_GetRegisterMotor1+0x13c>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8002c7a:	4808      	ldr	r0, [pc, #32]	@ (8002c9c <RI_GetRegisterMotor1+0x300>)
 8002c7c:	f7fe fc0a 	bl	8001494 <MCI_GetVqd>
 8002c80:	0c00      	lsrs	r0, r0, #16
 8002c82:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002c84:	2000      	movs	r0, #0
 8002c86:	e727      	b.n	8002ad8 <RI_GetRegisterMotor1+0x13c>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 8002c88:	4809      	ldr	r0, [pc, #36]	@ (8002cb0 <RI_GetRegisterMotor1+0x314>)
 8002c8a:	f002 f8dd 	bl	8004e48 <PID_GetKD>
 8002c8e:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002c90:	2000      	movs	r0, #0
 8002c92:	e721      	b.n	8002ad8 <RI_GetRegisterMotor1+0x13c>
 8002c94:	08006bcc 	.word	0x08006bcc
 8002c98:	200003a4 	.word	0x200003a4
 8002c9c:	20000000 	.word	0x20000000
 8002ca0:	fffff1b0 	.word	0xfffff1b0
 8002ca4:	0000ffbf 	.word	0x0000ffbf
 8002ca8:	2000009c 	.word	0x2000009c
 8002cac:	20000068 	.word	0x20000068
 8002cb0:	2000033c 	.word	0x2000033c
 8002cb4:	00001b58 	.word	0x00001b58
 8002cb8:	20000028 	.word	0x20000028
 8002cbc:	200003fc 	.word	0x200003fc
 8002cc0:	20000400 	.word	0x20000400
 8002cc4:	20000238 	.word	0x20000238
 8002cc8:	200003f8 	.word	0x200003f8
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8002ccc:	ac05      	add	r4, sp, #20
 8002cce:	4814      	ldr	r0, [pc, #80]	@ (8002d20 <RI_GetRegisterMotor1+0x384>)
 8002cd0:	0022      	movs	r2, r4
 8002cd2:	a904      	add	r1, sp, #16
 8002cd4:	f003 fb5c 	bl	8006390 <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 8002cd8:	8823      	ldrh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002cda:	2000      	movs	r0, #0
              *regdata16 = hC2;
 8002cdc:	803b      	strh	r3, [r7, #0]
              break;
 8002cde:	e6fb      	b.n	8002ad8 <RI_GetRegisterMotor1+0x13c>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8002ce0:	4810      	ldr	r0, [pc, #64]	@ (8002d24 <RI_GetRegisterMotor1+0x388>)
 8002ce2:	f7fe fbd7 	bl	8001494 <MCI_GetVqd>
 8002ce6:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002ce8:	2000      	movs	r0, #0
 8002cea:	e6f5      	b.n	8002ad8 <RI_GetRegisterMotor1+0x13c>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8002cec:	480d      	ldr	r0, [pc, #52]	@ (8002d24 <RI_GetRegisterMotor1+0x388>)
 8002cee:	f7fe fbe1 	bl	80014b4 <MCI_GetValphabeta>
 8002cf2:	0c00      	lsrs	r0, r0, #16
 8002cf4:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	e6ee      	b.n	8002ad8 <RI_GetRegisterMotor1+0x13c>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 8002cfa:	4809      	ldr	r0, [pc, #36]	@ (8002d20 <RI_GetRegisterMotor1+0x384>)
 8002cfc:	f002 ffbc 	bl	8005c78 <SPD_GetS16Speed>
 8002d00:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002d02:	2000      	movs	r0, #0
 8002d04:	e6e8      	b.n	8002ad8 <RI_GetRegisterMotor1+0x13c>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).beta;
 8002d06:	4806      	ldr	r0, [pc, #24]	@ (8002d20 <RI_GetRegisterMotor1+0x384>)
 8002d08:	f003 fb38 	bl	800637c <STO_PLL_GetEstimatedBemf>
 8002d0c:	0c00      	lsrs	r0, r0, #16
 8002d0e:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002d10:	2000      	movs	r0, #0
 8002d12:	e6e1      	b.n	8002ad8 <RI_GetRegisterMotor1+0x13c>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 8002d14:	4804      	ldr	r0, [pc, #16]	@ (8002d28 <RI_GetRegisterMotor1+0x38c>)
 8002d16:	f002 f81d 	bl	8004d54 <VBS_GetAvBusVoltage_V>
 8002d1a:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	e6db      	b.n	8002ad8 <RI_GetRegisterMotor1+0x13c>
 8002d20:	20000068 	.word	0x20000068
 8002d24:	20000000 	.word	0x20000000
 8002d28:	20000378 	.word	0x20000378

08002d2c <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002d2c:	4954      	ldr	r1, [pc, #336]	@ (8002e80 <RCM_RegisterRegConv+0x154>)
{
 8002d2e:	b570      	push	{r4, r5, r6, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002d30:	680b      	ldr	r3, [r1, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d030      	beq.n	8002d98 <RCM_RegisterRegConv+0x6c>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002d36:	791a      	ldrb	r2, [r3, #4]
 8002d38:	7904      	ldrb	r4, [r0, #4]
 8002d3a:	42a2      	cmp	r2, r4
 8002d3c:	d019      	beq.n	8002d72 <RCM_RegisterRegConv+0x46>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002d3e:	684d      	ldr	r5, [r1, #4]
 8002d40:	2d00      	cmp	r5, #0
 8002d42:	d03d      	beq.n	8002dc0 <RCM_RegisterRegConv+0x94>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002d44:	792a      	ldrb	r2, [r5, #4]
  uint8_t handle = 255U;
 8002d46:	23ff      	movs	r3, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002d48:	42a2      	cmp	r2, r4
 8002d4a:	d02d      	beq.n	8002da8 <RCM_RegisterRegConv+0x7c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002d4c:	688d      	ldr	r5, [r1, #8]
 8002d4e:	2d00      	cmp	r5, #0
 8002d50:	d068      	beq.n	8002e24 <RCM_RegisterRegConv+0xf8>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002d52:	792a      	ldrb	r2, [r5, #4]
 8002d54:	42a2      	cmp	r2, r4
 8002d56:	d02d      	beq.n	8002db4 <RCM_RegisterRegConv+0x88>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002d58:	68cd      	ldr	r5, [r1, #12]
 8002d5a:	2d00      	cmp	r5, #0
 8002d5c:	d100      	bne.n	8002d60 <RCM_RegisterRegConv+0x34>
 8002d5e:	e06e      	b.n	8002e3e <RCM_RegisterRegConv+0x112>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002d60:	792a      	ldrb	r2, [r5, #4]
 8002d62:	42a2      	cmp	r2, r4
 8002d64:	d100      	bne.n	8002d68 <RCM_RegisterRegConv+0x3c>
 8002d66:	e071      	b.n	8002e4c <RCM_RegisterRegConv+0x120>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d933      	bls.n	8002dd4 <RCM_RegisterRegConv+0xa8>
 8002d6c:	23ff      	movs	r3, #255	@ 0xff
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 8002d6e:	7303      	strb	r3, [r0, #12]
}
 8002d70:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002d72:	6802      	ldr	r2, [r0, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d030      	beq.n	8002ddc <RCM_RegisterRegConv+0xb0>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002d7a:	684d      	ldr	r5, [r1, #4]
 8002d7c:	2d00      	cmp	r5, #0
 8002d7e:	d1e1      	bne.n	8002d44 <RCM_RegisterRegConv+0x18>
 8002d80:	688d      	ldr	r5, [r1, #8]
      i++;
 8002d82:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002d84:	2d00      	cmp	r5, #0
 8002d86:	d1e4      	bne.n	8002d52 <RCM_RegisterRegConv+0x26>
 8002d88:	68cd      	ldr	r5, [r1, #12]
 8002d8a:	2d00      	cmp	r5, #0
 8002d8c:	d027      	beq.n	8002dde <RCM_RegisterRegConv+0xb2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002d8e:	792e      	ldrb	r6, [r5, #4]
 8002d90:	7904      	ldrb	r4, [r0, #4]
 8002d92:	42a6      	cmp	r6, r4
 8002d94:	d123      	bne.n	8002dde <RCM_RegisterRegConv+0xb2>
 8002d96:	e05a      	b.n	8002e4e <RCM_RegisterRegConv+0x122>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002d98:	684d      	ldr	r5, [r1, #4]
 8002d9a:	2d00      	cmp	r5, #0
 8002d9c:	d05d      	beq.n	8002e5a <RCM_RegisterRegConv+0x12e>
 8002d9e:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002da0:	792a      	ldrb	r2, [r5, #4]
    uint8_t i = 0;
 8002da2:	2300      	movs	r3, #0
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002da4:	42a2      	cmp	r2, r4
 8002da6:	d1d1      	bne.n	8002d4c <RCM_RegisterRegConv+0x20>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002da8:	682d      	ldr	r5, [r5, #0]
 8002daa:	6802      	ldr	r2, [r0, #0]
 8002dac:	4295      	cmp	r5, r2
 8002dae:	d1cd      	bne.n	8002d4c <RCM_RegisterRegConv+0x20>
      i++;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e014      	b.n	8002dde <RCM_RegisterRegConv+0xb2>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002db4:	682d      	ldr	r5, [r5, #0]
 8002db6:	6802      	ldr	r2, [r0, #0]
 8002db8:	4295      	cmp	r5, r2
 8002dba:	d1cd      	bne.n	8002d58 <RCM_RegisterRegConv+0x2c>
      i++;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e00e      	b.n	8002dde <RCM_RegisterRegConv+0xb2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002dc0:	688d      	ldr	r5, [r1, #8]
      i++;
 8002dc2:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002dc4:	2d00      	cmp	r5, #0
 8002dc6:	d1c4      	bne.n	8002d52 <RCM_RegisterRegConv+0x26>
 8002dc8:	68cd      	ldr	r5, [r1, #12]
 8002dca:	2d00      	cmp	r5, #0
 8002dcc:	d002      	beq.n	8002dd4 <RCM_RegisterRegConv+0xa8>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002dce:	792a      	ldrb	r2, [r5, #4]
 8002dd0:	42a2      	cmp	r2, r4
 8002dd2:	d03b      	beq.n	8002e4c <RCM_RegisterRegConv+0x120>
 8002dd4:	021c      	lsls	r4, r3, #8
 8002dd6:	6802      	ldr	r2, [r0, #0]
 8002dd8:	431c      	orrs	r4, r3
 8002dda:	e002      	b.n	8002de2 <RCM_RegisterRegConv+0xb6>
    uint8_t i = 0;
 8002ddc:	2300      	movs	r3, #0
    while (i < RCM_MAX_CONV)
 8002dde:	021c      	lsls	r4, r3, #8
 8002de0:	431c      	orrs	r4, r3
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8002de2:	2600      	movs	r6, #0
      RCM_handle_array [handle] = regConv;
 8002de4:	009d      	lsls	r5, r3, #2
 8002de6:	5148      	str	r0, [r1, r5]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8002de8:	4926      	ldr	r1, [pc, #152]	@ (8002e84 <RCM_RegisterRegConv+0x158>)
 8002dea:	00dd      	lsls	r5, r3, #3
 8002dec:	506e      	str	r6, [r5, r1]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8002dee:	6891      	ldr	r1, [r2, #8]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8002df0:	07c9      	lsls	r1, r1, #31
 8002df2:	d40e      	bmi.n	8002e12 <RCM_RegisterRegConv+0xe6>
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002df4:	6895      	ldr	r5, [r2, #8]
 8002df6:	4924      	ldr	r1, [pc, #144]	@ (8002e88 <RCM_RegisterRegConv+0x15c>)
 8002df8:	400d      	ands	r5, r1
 8002dfa:	3118      	adds	r1, #24
 8002dfc:	4329      	orrs	r1, r5
 8002dfe:	6091      	str	r1, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002e00:	6891      	ldr	r1, [r2, #8]
        while (1U == LL_ADC_IsCalibrationOnGoing(regConv->regADC))
 8002e02:	2900      	cmp	r1, #0
 8002e04:	dbfc      	blt.n	8002e00 <RCM_RegisterRegConv+0xd4>
  MODIFY_REG(ADCx->CR,
 8002e06:	6891      	ldr	r1, [r2, #8]
 8002e08:	4d1f      	ldr	r5, [pc, #124]	@ (8002e88 <RCM_RegisterRegConv+0x15c>)
 8002e0a:	4029      	ands	r1, r5
 8002e0c:	2501      	movs	r5, #1
 8002e0e:	4329      	orrs	r1, r5
 8002e10:	6091      	str	r1, [r2, #8]
      RCM_NoInj_array[handle].enable = false;
 8002e12:	2500      	movs	r5, #0
 8002e14:	005a      	lsls	r2, r3, #1
 8002e16:	491d      	ldr	r1, [pc, #116]	@ (8002e8c <RCM_RegisterRegConv+0x160>)
 8002e18:	18d2      	adds	r2, r2, r3
 8002e1a:	0052      	lsls	r2, r2, #1
 8002e1c:	5455      	strb	r5, [r2, r1]
      RCM_NoInj_array[handle].prev = handle;
 8002e1e:	3104      	adds	r1, #4
 8002e20:	528c      	strh	r4, [r1, r2]
 8002e22:	e7a4      	b.n	8002d6e <RCM_RegisterRegConv+0x42>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d91e      	bls.n	8002e66 <RCM_RegisterRegConv+0x13a>
 8002e28:	68cb      	ldr	r3, [r1, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <RCM_RegisterRegConv+0x108>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002e2e:	791a      	ldrb	r2, [r3, #4]
 8002e30:	4294      	cmp	r4, r2
 8002e32:	d01c      	beq.n	8002e6e <RCM_RegisterRegConv+0x142>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002e34:	4b16      	ldr	r3, [pc, #88]	@ (8002e90 <RCM_RegisterRegConv+0x164>)
 8002e36:	6802      	ldr	r2, [r0, #0]
 8002e38:	1c1c      	adds	r4, r3, #0
      i++;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e7d1      	b.n	8002de2 <RCM_RegisterRegConv+0xb6>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d9c8      	bls.n	8002dd4 <RCM_RegisterRegConv+0xa8>
 8002e42:	4b14      	ldr	r3, [pc, #80]	@ (8002e94 <RCM_RegisterRegConv+0x168>)
 8002e44:	6802      	ldr	r2, [r0, #0]
 8002e46:	1c1c      	adds	r4, r3, #0
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e7ca      	b.n	8002de2 <RCM_RegisterRegConv+0xb6>
 8002e4c:	6802      	ldr	r2, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002e4e:	682c      	ldr	r4, [r5, #0]
 8002e50:	4294      	cmp	r4, r2
 8002e52:	d000      	beq.n	8002e56 <RCM_RegisterRegConv+0x12a>
 8002e54:	e788      	b.n	8002d68 <RCM_RegisterRegConv+0x3c>
      i++;
 8002e56:	2303      	movs	r3, #3
    while (i < RCM_MAX_CONV)
 8002e58:	e7c1      	b.n	8002dde <RCM_RegisterRegConv+0xb2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002e5a:	688d      	ldr	r5, [r1, #8]
    uint8_t i = 0;
 8002e5c:	2300      	movs	r3, #0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002e5e:	2d00      	cmp	r5, #0
 8002e60:	d003      	beq.n	8002e6a <RCM_RegisterRegConv+0x13e>
 8002e62:	7904      	ldrb	r4, [r0, #4]
 8002e64:	e775      	b.n	8002d52 <RCM_RegisterRegConv+0x26>
 8002e66:	2300      	movs	r3, #0
 8002e68:	e7ae      	b.n	8002dc8 <RCM_RegisterRegConv+0x9c>
 8002e6a:	6802      	ldr	r2, [r0, #0]
 8002e6c:	e78c      	b.n	8002d88 <RCM_RegisterRegConv+0x5c>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002e6e:	681c      	ldr	r4, [r3, #0]
 8002e70:	6802      	ldr	r2, [r0, #0]
      i++;
 8002e72:	2303      	movs	r3, #3
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002e74:	42a2      	cmp	r2, r4
 8002e76:	d0b2      	beq.n	8002dde <RCM_RegisterRegConv+0xb2>
 8002e78:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <RCM_RegisterRegConv+0x164>)
 8002e7a:	1c1c      	adds	r4, r3, #0
      i++;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e7b0      	b.n	8002de2 <RCM_RegisterRegConv+0xb6>
 8002e80:	20000840 	.word	0x20000840
 8002e84:	20000820 	.word	0x20000820
 8002e88:	7fffffe8 	.word	0x7fffffe8
 8002e8c:	20000808 	.word	0x20000808
 8002e90:	00000202 	.word	0x00000202
 8002e94:	00000303 	.word	0x00000303

08002e98 <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 8002e98:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 8002e9a:	7b02      	ldrb	r2, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8002e9c:	4b59      	ldr	r3, [pc, #356]	@ (8003004 <RCM_ExecRegularConv+0x16c>)
 8002e9e:	0050      	lsls	r0, r2, #1
 8002ea0:	1881      	adds	r1, r0, r2
 8002ea2:	0049      	lsls	r1, r1, #1
 8002ea4:	5c59      	ldrb	r1, [r3, r1]
 8002ea6:	2900      	cmp	r1, #0
 8002ea8:	d139      	bne.n	8002f1e <RCM_ExecRegularConv+0x86>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8002eaa:	7819      	ldrb	r1, [r3, #0]
 8002eac:	2900      	cmp	r1, #0
 8002eae:	d113      	bne.n	8002ed8 <RCM_ExecRegularConv+0x40>
  uint8_t LastEnable = RCM_MAX_CONV;
 8002eb0:	2104      	movs	r1, #4
      if (true == RCM_NoInj_array [i].enable)
 8002eb2:	799c      	ldrb	r4, [r3, #6]
 8002eb4:	2c00      	cmp	r4, #0
 8002eb6:	d000      	beq.n	8002eba <RCM_ExecRegularConv+0x22>
 8002eb8:	e073      	b.n	8002fa2 <RCM_ExecRegularConv+0x10a>
 8002eba:	7b1c      	ldrb	r4, [r3, #12]
 8002ebc:	2c00      	cmp	r4, #0
 8002ebe:	d000      	beq.n	8002ec2 <RCM_ExecRegularConv+0x2a>
 8002ec0:	e075      	b.n	8002fae <RCM_ExecRegularConv+0x116>
 8002ec2:	7c9e      	ldrb	r6, [r3, #18]
 8002ec4:	2e00      	cmp	r6, #0
 8002ec6:	d100      	bne.n	8002eca <RCM_ExecRegularConv+0x32>
 8002ec8:	e090      	b.n	8002fec <RCM_ExecRegularConv+0x154>
      {
        if (RCM_NoInj_array[i].next > handle)
 8002eca:	7ddc      	ldrb	r4, [r3, #23]
 8002ecc:	4294      	cmp	r4, r2
 8002ece:	d800      	bhi.n	8002ed2 <RCM_ExecRegularConv+0x3a>
 8002ed0:	e095      	b.n	8002ffe <RCM_ExecRegularConv+0x166>
 8002ed2:	2603      	movs	r6, #3
      if (true == RCM_NoInj_array [i].enable)
 8002ed4:	2503      	movs	r5, #3
 8002ed6:	e005      	b.n	8002ee4 <RCM_ExecRegularConv+0x4c>
        if (RCM_NoInj_array[i].next > handle)
 8002ed8:	795c      	ldrb	r4, [r3, #5]
  uint8_t i=0;
 8002eda:	2100      	movs	r1, #0
        if (RCM_NoInj_array[i].next > handle)
 8002edc:	42a2      	cmp	r2, r4
 8002ede:	d2e8      	bcs.n	8002eb2 <RCM_ExecRegularConv+0x1a>
  uint8_t i=0;
 8002ee0:	2600      	movs	r6, #0
      if (true == RCM_NoInj_array [i].enable)
 8002ee2:	2500      	movs	r5, #0
        /* We found a previous reg conv to link with */
        {
          formerNext = RCM_NoInj_array [i].next;
          RCM_NoInj_array[handle].next = formerNext;
 8002ee4:	1881      	adds	r1, r0, r2
 8002ee6:	0049      	lsls	r1, r1, #1
 8002ee8:	1859      	adds	r1, r3, r1
 8002eea:	714c      	strb	r4, [r1, #5]
          RCM_NoInj_array[handle].prev = i;
 8002eec:	710e      	strb	r6, [r1, #4]
          RCM_NoInj_array[i].next = handle;
 8002eee:	0069      	lsls	r1, r5, #1
 8002ef0:	1949      	adds	r1, r1, r5
 8002ef2:	0049      	lsls	r1, r1, #1
 8002ef4:	1859      	adds	r1, r3, r1
 8002ef6:	714a      	strb	r2, [r1, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8002ef8:	0061      	lsls	r1, r4, #1
 8002efa:	1909      	adds	r1, r1, r4
       {
         formerNext = RCM_NoInj_array[LastEnable].next;
         RCM_NoInj_array[handle].next = formerNext;
         RCM_NoInj_array[handle].prev = LastEnable;
         RCM_NoInj_array[LastEnable].next = handle;
         RCM_NoInj_array[formerNext].prev = handle;
 8002efc:	0049      	lsls	r1, r1, #1
 8002efe:	1859      	adds	r1, r3, r1
 8002f00:	710a      	strb	r2, [r1, #4]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8002f02:	4941      	ldr	r1, [pc, #260]	@ (8003008 <RCM_ExecRegularConv+0x170>)
 8002f04:	780d      	ldrb	r5, [r1, #0]
    RCM_NoInj_array[handle].enable = true;
 8002f06:	2601      	movs	r6, #1
 8002f08:	1884      	adds	r4, r0, r2
 8002f0a:	0064      	lsls	r4, r4, #1
 8002f0c:	531e      	strh	r6, [r3, r4]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8002f0e:	006c      	lsls	r4, r5, #1
 8002f10:	1964      	adds	r4, r4, r5
 8002f12:	0064      	lsls	r4, r4, #1
 8002f14:	191c      	adds	r4, r3, r4
 8002f16:	7864      	ldrb	r4, [r4, #1]
 8002f18:	2c01      	cmp	r4, #1
 8002f1a:	d000      	beq.n	8002f1e <RCM_ExecRegularConv+0x86>
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 8002f1c:	700a      	strb	r2, [r1, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 8002f1e:	24a0      	movs	r4, #160	@ 0xa0
 8002f20:	493a      	ldr	r1, [pc, #232]	@ (800300c <RCM_ExecRegularConv+0x174>)
 8002f22:	5d09      	ldrb	r1, [r1, r4]
 8002f24:	2900      	cmp	r1, #0
 8002f26:	d137      	bne.n	8002f98 <RCM_ExecRegularConv+0x100>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002f28:	2703      	movs	r7, #3
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[handle]->regADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 8002f2a:	4e39      	ldr	r6, [pc, #228]	@ (8003010 <RCM_ExecRegularConv+0x178>)
 8002f2c:	0091      	lsls	r1, r2, #2
 8002f2e:	5875      	ldr	r5, [r6, r1]
 8002f30:	6829      	ldr	r1, [r5, #0]
 8002f32:	68cc      	ldr	r4, [r1, #12]
 8002f34:	43bc      	bics	r4, r7
 8002f36:	60cc      	str	r4, [r1, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002f38:	68cc      	ldr	r4, [r1, #12]
 8002f3a:	4f36      	ldr	r7, [pc, #216]	@ (8003014 <RCM_ExecRegularConv+0x17c>)
 8002f3c:	403c      	ands	r4, r7
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002f3e:	2707      	movs	r7, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002f40:	60cc      	str	r4, [r1, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002f42:	694c      	ldr	r4, [r1, #20]
 8002f44:	43bc      	bics	r4, r7
 8002f46:	68af      	ldr	r7, [r5, #8]
 8002f48:	433c      	orrs	r4, r7
 8002f4a:	614c      	str	r4, [r1, #20]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002f4c:	2480      	movs	r4, #128	@ 0x80
    LL_ADC_REG_SetTriggerSource(RCM_handle_array[handle]->regADC, LL_ADC_REG_TRIG_SOFTWARE);

    /* Set Sampling time and channel */
    LL_ADC_SetSamplingTimeCommonChannels(RCM_handle_array[handle]->regADC, RCM_handle_array[handle]->samplingTime);
    LL_ADC_REG_SetSequencerChannels(RCM_handle_array[handle]->regADC,
                                    __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8002f4e:	792d      	ldrb	r5, [r5, #4]
 8002f50:	01a4      	lsls	r4, r4, #6
 8002f52:	40ac      	lsls	r4, r5
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002f54:	2504      	movs	r5, #4
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002f56:	0b64      	lsrs	r4, r4, #13
 8002f58:	628c      	str	r4, [r1, #40]	@ 0x28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002f5a:	600d      	str	r5, [r1, #0]
  MODIFY_REG(ADCx->CR,
 8002f5c:	688c      	ldr	r4, [r1, #8]
 8002f5e:	4f2e      	ldr	r7, [pc, #184]	@ (8003018 <RCM_ExecRegularConv+0x180>)
 8002f60:	403c      	ands	r4, r7
 8002f62:	432c      	orrs	r4, r5
 8002f64:	608c      	str	r4, [r1, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002f66:	680c      	ldr	r4, [r1, #0]

    /* Start ADC conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[handle]->regADC);

    /* Wait EOC */
    while ( 0U == LL_ADC_IsActiveFlag_EOC(RCM_handle_array[handle]->regADC))
 8002f68:	4225      	tst	r5, r4
 8002f6a:	d0fc      	beq.n	8002f66 <RCM_ExecRegularConv+0xce>
* param  ADCx ADC instance
* retval Value between Min_Data=0x0000 and Max_Data=0xFFF0
*/
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12L(const ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_REG(ADCx->DR) & 0x0000FFF0UL);
 8002f6c:	250f      	movs	r5, #15
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002f6e:	2703      	movs	r7, #3
 8002f70:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8002f72:	1881      	adds	r1, r0, r2
 8002f74:	43ac      	bics	r4, r5
 8002f76:	0049      	lsls	r1, r1, #1
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 8002f78:	4d23      	ldr	r5, [pc, #140]	@ (8003008 <RCM_ExecRegularConv+0x170>)
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8002f7a:	1859      	adds	r1, r3, r1
 8002f7c:	804c      	strh	r4, [r1, #2]
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 8002f7e:	782c      	ldrb	r4, [r5, #0]
 8002f80:	00a4      	lsls	r4, r4, #2
 8002f82:	5934      	ldr	r4, [r6, r4]
 8002f84:	6826      	ldr	r6, [r4, #0]
 8002f86:	68f4      	ldr	r4, [r6, #12]
 8002f88:	43bc      	bics	r4, r7
 8002f8a:	3f02      	subs	r7, #2
 8002f8c:	433c      	orrs	r4, r7
 8002f8e:	60f4      	str	r4, [r6, #12]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8002f90:	794c      	ldrb	r4, [r1, #5]
 8002f92:	702c      	strb	r4, [r5, #0]
    RCM_NoInj_array[handle].status = valid;
 8002f94:	2402      	movs	r4, #2
 8002f96:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8002f98:	1880      	adds	r0, r0, r2
 8002f9a:	0040      	lsls	r0, r0, #1
 8002f9c:	181b      	adds	r3, r3, r0
  return (retVal);
 8002f9e:	8858      	ldrh	r0, [r3, #2]
}
 8002fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (RCM_NoInj_array[i].next > handle)
 8002fa2:	7adc      	ldrb	r4, [r3, #11]
 8002fa4:	42a2      	cmp	r2, r4
 8002fa6:	d319      	bcc.n	8002fdc <RCM_ExecRegularConv+0x144>
      if (true == RCM_NoInj_array [i].enable)
 8002fa8:	7b19      	ldrb	r1, [r3, #12]
 8002faa:	2900      	cmp	r1, #0
 8002fac:	d019      	beq.n	8002fe2 <RCM_ExecRegularConv+0x14a>
        if (RCM_NoInj_array[i].next > handle)
 8002fae:	7c5c      	ldrb	r4, [r3, #17]
 8002fb0:	42a2      	cmp	r2, r4
 8002fb2:	d321      	bcc.n	8002ff8 <RCM_ExecRegularConv+0x160>
      if (true == RCM_NoInj_array [i].enable)
 8002fb4:	7c99      	ldrb	r1, [r3, #18]
 8002fb6:	2602      	movs	r6, #2
 8002fb8:	2900      	cmp	r1, #0
 8002fba:	d000      	beq.n	8002fbe <RCM_ExecRegularConv+0x126>
 8002fbc:	e785      	b.n	8002eca <RCM_ExecRegularConv+0x32>
         formerNext = RCM_NoInj_array[LastEnable].next;
 8002fbe:	0034      	movs	r4, r6
 8002fc0:	0061      	lsls	r1, r4, #1
 8002fc2:	1909      	adds	r1, r1, r4
 8002fc4:	0049      	lsls	r1, r1, #1
 8002fc6:	1859      	adds	r1, r3, r1
         RCM_NoInj_array[handle].next = formerNext;
 8002fc8:	1884      	adds	r4, r0, r2
         formerNext = RCM_NoInj_array[LastEnable].next;
 8002fca:	794d      	ldrb	r5, [r1, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8002fcc:	0064      	lsls	r4, r4, #1
 8002fce:	191c      	adds	r4, r3, r4
 8002fd0:	7165      	strb	r5, [r4, #5]
         RCM_NoInj_array[LastEnable].next = handle;
 8002fd2:	714a      	strb	r2, [r1, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8002fd4:	0069      	lsls	r1, r5, #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8002fd6:	7126      	strb	r6, [r4, #4]
         RCM_NoInj_array[formerNext].prev = handle;
 8002fd8:	1949      	adds	r1, r1, r5
 8002fda:	e78f      	b.n	8002efc <RCM_ExecRegularConv+0x64>
        if (RCM_NoInj_array[i].next > handle)
 8002fdc:	2601      	movs	r6, #1
      if (true == RCM_NoInj_array [i].enable)
 8002fde:	2501      	movs	r5, #1
 8002fe0:	e780      	b.n	8002ee4 <RCM_ExecRegularConv+0x4c>
 8002fe2:	7c99      	ldrb	r1, [r3, #18]
 8002fe4:	2601      	movs	r6, #1
 8002fe6:	2900      	cmp	r1, #0
 8002fe8:	d0e9      	beq.n	8002fbe <RCM_ExecRegularConv+0x126>
 8002fea:	e76e      	b.n	8002eca <RCM_ExecRegularConv+0x32>
       if (LastEnable != RCM_MAX_CONV )
 8002fec:	2904      	cmp	r1, #4
 8002fee:	d1e6      	bne.n	8002fbe <RCM_ExecRegularConv+0x126>
         RCM_currentHandle = handle;
 8002ff0:	4905      	ldr	r1, [pc, #20]	@ (8003008 <RCM_ExecRegularConv+0x170>)
 8002ff2:	0015      	movs	r5, r2
 8002ff4:	700a      	strb	r2, [r1, #0]
    while (i < RCM_MAX_CONV)
 8002ff6:	e786      	b.n	8002f06 <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 8002ff8:	2602      	movs	r6, #2
      if (true == RCM_NoInj_array [i].enable)
 8002ffa:	2502      	movs	r5, #2
 8002ffc:	e772      	b.n	8002ee4 <RCM_ExecRegularConv+0x4c>
 8002ffe:	2403      	movs	r4, #3
 8003000:	2603      	movs	r6, #3
 8003002:	e7dd      	b.n	8002fc0 <RCM_ExecRegularConv+0x128>
 8003004:	20000808 	.word	0x20000808
 8003008:	20000804 	.word	0x20000804
 800300c:	20000190 	.word	0x20000190
 8003010:	20000840 	.word	0x20000840
 8003014:	fffff23f 	.word	0xfffff23f
 8003018:	7fffffe8 	.word	0x7fffffe8

0800301c <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 800301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 800301e:	4b13      	ldr	r3, [pc, #76]	@ (800306c <RCM_ExecUserConv+0x50>)
 8003020:	681c      	ldr	r4, [r3, #0]
 8003022:	2c00      	cmp	r4, #0
 8003024:	d004      	beq.n	8003030 <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003026:	4d12      	ldr	r5, [pc, #72]	@ (8003070 <RCM_ExecUserConv+0x54>)
    handle = RCM_UserConvHandle->convHandle;
 8003028:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 800302a:	782b      	ldrb	r3, [r5, #0]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d000      	beq.n	8003032 <RCM_ExecUserConv+0x16>
  }
  else
  {
     /* Nothing to do */
  }
}
 8003030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003032:	0020      	movs	r0, r4
 8003034:	f7ff ff30 	bl	8002e98 <RCM_ExecRegularConv>
 8003038:	4b0e      	ldr	r3, [pc, #56]	@ (8003074 <RCM_ExecUserConv+0x58>)
      if (RCM_NoInj_array [handle].status != notvalid)
 800303a:	0072      	lsls	r2, r6, #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 800303c:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 800303e:	1992      	adds	r2, r2, r6
 8003040:	4b0d      	ldr	r3, [pc, #52]	@ (8003078 <RCM_ExecUserConv+0x5c>)
 8003042:	0052      	lsls	r2, r2, #1
 8003044:	189b      	adds	r3, r3, r2
 8003046:	785b      	ldrb	r3, [r3, #1]
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003048:	0001      	movs	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <RCM_ExecUserConv+0x36>
        RCM_UserConvState = RCM_USERCONV_EOC;
 800304e:	2302      	movs	r3, #2
 8003050:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 8003052:	4b0a      	ldr	r3, [pc, #40]	@ (800307c <RCM_ExecUserConv+0x60>)
 8003054:	00f6      	lsls	r6, r6, #3
 8003056:	58f7      	ldr	r7, [r6, r3]
 8003058:	2f00      	cmp	r7, #0
 800305a:	d0e9      	beq.n	8003030 <RCM_ExecUserConv+0x14>
        RCM_UserConvState = RCM_USERCONV_IDLE;
 800305c:	2200      	movs	r2, #0
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800305e:	199b      	adds	r3, r3, r6
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8003060:	702a      	strb	r2, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003062:	0020      	movs	r0, r4
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	47b8      	blx	r7
}
 8003068:	e7e2      	b.n	8003030 <RCM_ExecUserConv+0x14>
 800306a:	46c0      	nop			@ (mov r8, r8)
 800306c:	200007fc 	.word	0x200007fc
 8003070:	20000800 	.word	0x20000800
 8003074:	20000802 	.word	0x20000802
 8003078:	20000808 	.word	0x20000808
 800307c:	20000820 	.word	0x20000820

08003080 <RCM_ExecNextConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
 8003080:	b570      	push	{r4, r5, r6, lr}
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8003082:	4b16      	ldr	r3, [pc, #88]	@ (80030dc <RCM_ExecNextConv+0x5c>)
 8003084:	4916      	ldr	r1, [pc, #88]	@ (80030e0 <RCM_ExecNextConv+0x60>)
 8003086:	781a      	ldrb	r2, [r3, #0]
 8003088:	0053      	lsls	r3, r2, #1
 800308a:	189b      	adds	r3, r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	5c58      	ldrb	r0, [r3, r1]
 8003090:	2800      	cmp	r0, #0
 8003092:	d021      	beq.n	80030d8 <RCM_ExecNextConv+0x58>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003094:	2504      	movs	r5, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8003096:	2603      	movs	r6, #3
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003098:	4812      	ldr	r0, [pc, #72]	@ (80030e4 <RCM_ExecNextConv+0x64>)
 800309a:	0092      	lsls	r2, r2, #2
 800309c:	5814      	ldr	r4, [r2, r0]
    (void)LL_ADC_REG_SetSequencerChannels(RCM_handle_array[RCM_currentHandle]->regADC,
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 800309e:	18c9      	adds	r1, r1, r3
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 80030a0:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80030a2:	6015      	str	r5, [r2, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80030a4:	68d0      	ldr	r0, [r2, #12]
 80030a6:	43b0      	bics	r0, r6
 80030a8:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80030aa:	68d0      	ldr	r0, [r2, #12]
 80030ac:	4e0e      	ldr	r6, [pc, #56]	@ (80030e8 <RCM_ExecNextConv+0x68>)
 80030ae:	4030      	ands	r0, r6
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80030b0:	2607      	movs	r6, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80030b2:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80030b4:	6950      	ldr	r0, [r2, #20]
 80030b6:	43b0      	bics	r0, r6
 80030b8:	68a6      	ldr	r6, [r4, #8]
 80030ba:	4330      	orrs	r0, r6
 80030bc:	6150      	str	r0, [r2, #20]
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 80030be:	7920      	ldrb	r0, [r4, #4]
 80030c0:	2401      	movs	r4, #1
 80030c2:	0026      	movs	r6, r4
 80030c4:	4086      	lsls	r6, r0
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80030c6:	0370      	lsls	r0, r6, #13
 80030c8:	0b40      	lsrs	r0, r0, #13
 80030ca:	6290      	str	r0, [r2, #40]	@ 0x28
  MODIFY_REG(ADCx->CR,
 80030cc:	6890      	ldr	r0, [r2, #8]
 80030ce:	4e07      	ldr	r6, [pc, #28]	@ (80030ec <RCM_ExecNextConv+0x6c>)
 80030d0:	4030      	ands	r0, r6
 80030d2:	4328      	orrs	r0, r5
 80030d4:	6090      	str	r0, [r2, #8]
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 80030d6:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 80030d8:	bd70      	pop	{r4, r5, r6, pc}
 80030da:	46c0      	nop			@ (mov r8, r8)
 80030dc:	20000804 	.word	0x20000804
 80030e0:	20000808 	.word	0x20000808
 80030e4:	20000840 	.word	0x20000840
 80030e8:	fffff23f 	.word	0xfffff23f
 80030ec:	7fffffe8 	.word	0x7fffffe8

080030f0 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 80030f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030f2:	46ce      	mov	lr, r9
 80030f4:	4647      	mov	r7, r8
 80030f6:	b580      	push	{r7, lr}
  uint32_t result;
  RCM_status_t status;

  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 80030f8:	4c17      	ldr	r4, [pc, #92]	@ (8003158 <RCM_ReadOngoingConv+0x68>)
 80030fa:	4918      	ldr	r1, [pc, #96]	@ (800315c <RCM_ReadOngoingConv+0x6c>)
 80030fc:	7820      	ldrb	r0, [r4, #0]
 80030fe:	0043      	lsls	r3, r0, #1
 8003100:	181a      	adds	r2, r3, r0
 8003102:	0052      	lsls	r2, r2, #1
 8003104:	5c8d      	ldrb	r5, [r1, r2]
 8003106:	2d00      	cmp	r5, #0
 8003108:	d021      	beq.n	800314e <RCM_ReadOngoingConv+0x5e>
  {
    status = RCM_NoInj_array[RCM_currentHandle].status;
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 800310a:	2702      	movs	r7, #2
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 800310c:	4d14      	ldr	r5, [pc, #80]	@ (8003160 <RCM_ReadOngoingConv+0x70>)
 800310e:	0086      	lsls	r6, r0, #2
 8003110:	5975      	ldr	r5, [r6, r5]
    status = RCM_NoInj_array[RCM_currentHandle].status;
 8003112:	188a      	adds	r2, r1, r2
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003114:	682e      	ldr	r6, [r5, #0]
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8003116:	46b9      	mov	r9, r7
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8003118:	6835      	ldr	r5, [r6, #0]
 800311a:	46ac      	mov	ip, r5
 800311c:	7855      	ldrb	r5, [r2, #1]
 800311e:	43bd      	bics	r5, r7
 8003120:	d010      	beq.n	8003144 <RCM_ReadOngoingConv+0x54>
 8003122:	4665      	mov	r5, ip
 8003124:	076d      	lsls	r5, r5, #29
 8003126:	d50d      	bpl.n	8003144 <RCM_ReadOngoingConv+0x54>
 8003128:	6c35      	ldr	r5, [r6, #64]	@ 0x40
 800312a:	46a8      	mov	r8, r5
 800312c:	250f      	movs	r5, #15
 800312e:	4647      	mov	r7, r8
 8003130:	43af      	bics	r7, r5
    else
    {
      /* Reading of ADC Converted Value */
      RCM_NoInj_array[RCM_currentHandle].value
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);
      RCM_NoInj_array[RCM_currentHandle].status = valid;
 8003132:	464d      	mov	r5, r9
 8003134:	7055      	strb	r5, [r2, #1]
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);
 8003136:	8057      	strh	r7, [r2, #2]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8003138:	68f2      	ldr	r2, [r6, #12]
 800313a:	3501      	adds	r5, #1
 800313c:	43aa      	bics	r2, r5
 800313e:	3d02      	subs	r5, #2
 8003140:	432a      	orrs	r2, r5
 8003142:	60f2      	str	r2, [r6, #12]
      /* Restore back DMA configuration */
      LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
    }

    /* Prepare next conversion */
    RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003144:	181b      	adds	r3, r3, r0
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	18c9      	adds	r1, r1, r3
 800314a:	794b      	ldrb	r3, [r1, #5]
 800314c:	7023      	strb	r3, [r4, #0]
    }
    else
    {
      /* Nothing to do */
    }
}
 800314e:	bcc0      	pop	{r6, r7}
 8003150:	46b9      	mov	r9, r7
 8003152:	46b0      	mov	r8, r6
 8003154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003156:	46c0      	nop			@ (mov r8, r8)
 8003158:	20000804 	.word	0x20000804
 800315c:	20000808 	.word	0x20000808
 8003160:	20000840 	.word	0x20000840

08003164 <USART1_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8003164:	2240      	movs	r2, #64	@ 0x40
 8003166:	4b27      	ldr	r3, [pc, #156]	@ (8003204 <USART1_IRQHandler+0xa0>)
/**
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
void USART1_IRQHandler(void)
{
 8003168:	b510      	push	{r4, lr}
 800316a:	69d9      	ldr	r1, [r3, #28]
 800316c:	420a      	tst	r2, r1
 800316e:	d008      	beq.n	8003182 <USART1_IRQHandler+0x1e>
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003170:	2401      	movs	r4, #1
 8003172:	4825      	ldr	r0, [pc, #148]	@ (8003208 <USART1_IRQHandler+0xa4>)
 8003174:	6801      	ldr	r1, [r0, #0]
 8003176:	43a1      	bics	r1, r4
 8003178:	6001      	str	r1, [r0, #0]
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel(DMA_TX_A, DMACH_TX_A);
    LL_USART_ClearFlag_TC(USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT(&aspepOverUartA);
 800317a:	4824      	ldr	r0, [pc, #144]	@ (800320c <USART1_IRQHandler+0xa8>)
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800317c:	621a      	str	r2, [r3, #32]
 800317e:	f7fd fca5 	bl	8000acc <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003182:	2208      	movs	r2, #8
 8003184:	4b1f      	ldr	r3, [pc, #124]	@ (8003204 <USART1_IRQHandler+0xa0>)
 8003186:	69d9      	ldr	r1, [r3, #28]
 8003188:	420a      	tst	r2, r1
 800318a:	d00b      	beq.n	80031a4 <USART1_IRQHandler+0x40>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800318c:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800318e:	f3ef 8110 	mrs	r1, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003192:	3a07      	subs	r2, #7
 8003194:	f382 8810 	msr	PRIMASK, r2
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003198:	2010      	movs	r0, #16
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4302      	orrs	r2, r0
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	f381 8810 	msr	PRIMASK, r1
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80031a4:	2210      	movs	r2, #16
 80031a6:	4b17      	ldr	r3, [pc, #92]	@ (8003204 <USART1_IRQHandler+0xa0>)
 80031a8:	69d9      	ldr	r1, [r3, #28]
 80031aa:	420a      	tst	r2, r1
 80031ac:	d028      	beq.n	8003200 <USART1_IRQHandler+0x9c>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 80031ae:	6819      	ldr	r1, [r3, #0]
 80031b0:	420a      	tst	r2, r1
 80031b2:	d024      	beq.n	80031fe <USART1_IRQHandler+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b8:	2101      	movs	r1, #1
 80031ba:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	4390      	bics	r0, r2
 80031c2:	6018      	str	r0, [r3, #0]
 80031c4:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031c8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031cc:	f381 8810 	msr	PRIMASK, r1
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 80031d0:	2040      	movs	r0, #64	@ 0x40
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	4382      	bics	r2, r0
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	f384 8810 	msr	PRIMASK, r4
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80031dc:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031de:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e2:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	4302      	orrs	r2, r0
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	f384 8810 	msr	PRIMASK, r4
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80031f0:	2280      	movs	r2, #128	@ 0x80
 80031f2:	4b07      	ldr	r3, [pc, #28]	@ (8003210 <USART1_IRQHandler+0xac>)
 80031f4:	0092      	lsls	r2, r2, #2
    LL_USART_DisableDMAReq_RX(USARTA);
    (void)LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX(USARTA);
    /* Clear pending DMA TC to process only new received packet */
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWReset(&aspepOverUartA);
 80031f6:	4805      	ldr	r0, [pc, #20]	@ (800320c <USART1_IRQHandler+0xa8>)
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	f7fd fe7d 	bl	8000ef8 <ASPEP_HWReset>
  }

  /* USER CODE BEGIN USART1_IRQHandler 1 */

  /* USER CODE END USART1_IRQHandler 1 */
}
 80031fe:	bd10      	pop	{r4, pc}
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	e7fc      	b.n	80031fe <USART1_IRQHandler+0x9a>
 8003204:	40013800 	.word	0x40013800
 8003208:	4002001c 	.word	0x4002001c
 800320c:	20000420 	.word	0x20000420
 8003210:	40020000 	.word	0x40020000

08003214 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8003214:	b510      	push	{r4, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */

  TSK_HardwareFaultTask();
 8003216:	f7fe fb2d 	bl	8001874 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 800321a:	e7fe      	b.n	800321a <HardFault_Handler+0x6>

0800321c <SysTick_Handler>:

 /* USER CODE END HardFault_IRQn 1 */
}

void SysTick_Handler(void)
{
 800321c:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 800321e:	4c0d      	ldr	r4, [pc, #52]	@ (8003254 <SysTick_Handler+0x38>)
 8003220:	7823      	ldrb	r3, [r4, #0]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d00f      	beq.n	8003246 <SysTick_Handler+0x2a>
  else
  {
    /* Nothing to do */
  }

  SystickDividerCounter ++;
 8003226:	3301      	adds	r3, #1
 8003228:	b2db      	uxtb	r3, r3
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 800322a:	2280      	movs	r2, #128	@ 0x80
 800322c:	7023      	strb	r3, [r4, #0]
 800322e:	4b0a      	ldr	r3, [pc, #40]	@ (8003258 <SysTick_Handler+0x3c>)
 8003230:	0092      	lsls	r2, r2, #2
 8003232:	6819      	ldr	r1, [r3, #0]
 8003234:	4211      	tst	r1, r2
 8003236:	d003      	beq.n	8003240 <SysTick_Handler+0x24>
  /* Buffer is ready by the HW layer to be processed */
  /* NO DMA interrupt */
  if (LL_DMA_IsActiveFlag_TC(DMA_RX_A, DMACH_RX_A))
  {
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT(&aspepOverUartA);
 8003238:	4808      	ldr	r0, [pc, #32]	@ (800325c <SysTick_Handler+0x40>)
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 800323a:	605a      	str	r2, [r3, #4]
 800323c:	f7fd fe0e 	bl	8000e5c <ASPEP_HWDataReceivedIT>
  }
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */

    MC_RunMotorControlTasks();
 8003240:	f7fe facc 	bl	80017dc <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */

  /* USER CODE END SysTick_IRQn 2 */
}
 8003244:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8003246:	f000 fa61 	bl	800370c <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 800324a:	f000 fc05 	bl	8003a58 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 800324e:	2301      	movs	r3, #1
 8003250:	e7eb      	b.n	800322a <SysTick_Handler+0xe>
 8003252:	46c0      	nop			@ (mov r8, r8)
 8003254:	20000490 	.word	0x20000490
 8003258:	40020000 	.word	0x40020000
 800325c:	20000420 	.word	0x20000420

08003260 <EXTI0_1_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 8003260:	2201      	movs	r2, #1
 8003262:	4b05      	ldr	r3, [pc, #20]	@ (8003278 <EXTI0_1_IRQHandler+0x18>)

/**
  * @brief  This function handles Button IRQ on PIN PF0.
  */
void EXTI0_1_IRQHandler(void)
{
 8003264:	b510      	push	{r4, lr}
 8003266:	6959      	ldr	r1, [r3, #20]
  /* USER CODE BEGIN START_STOP_BTN */
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_0))
 8003268:	420a      	tst	r2, r1
 800326a:	d100      	bne.n	800326e <EXTI0_1_IRQHandler+0xe>
  else
  {
    /* Nothing to do */
  }

}
 800326c:	bd10      	pop	{r4, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 800326e:	615a      	str	r2, [r3, #20]
    (void)UI_HandleStartStopButton_cb();
 8003270:	f7fe fb0c 	bl	800188c <UI_HandleStartStopButton_cb>
}
 8003274:	e7fa      	b.n	800326c <EXTI0_1_IRQHandler+0xc>
 8003276:	46c0      	nop			@ (mov r8, r8)
 8003278:	40010400 	.word	0x40010400

0800327c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327c:	2201      	movs	r2, #1
 800327e:	4b0a      	ldr	r3, [pc, #40]	@ (80032a8 <HAL_MspInit+0x2c>)
{
 8003280:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003282:	6999      	ldr	r1, [r3, #24]
 8003284:	4311      	orrs	r1, r2
 8003286:	6199      	str	r1, [r3, #24]
 8003288:	6999      	ldr	r1, [r3, #24]
 800328a:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 800328c:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800328e:	9200      	str	r2, [sp, #0]
 8003290:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003292:	69da      	ldr	r2, [r3, #28]
 8003294:	0549      	lsls	r1, r1, #21
 8003296:	430a      	orrs	r2, r1
 8003298:	61da      	str	r2, [r3, #28]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	400b      	ands	r3, r1
 800329e:	9301      	str	r3, [sp, #4]
 80032a0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032a2:	b002      	add	sp, #8
 80032a4:	4770      	bx	lr
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	40021000 	.word	0x40021000

080032ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032ac:	b570      	push	{r4, r5, r6, lr}
 80032ae:	0004      	movs	r4, r0
 80032b0:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b2:	2214      	movs	r2, #20
 80032b4:	2100      	movs	r1, #0
 80032b6:	a804      	add	r0, sp, #16
 80032b8:	f003 f99c 	bl	80065f4 <memset>
  if(hadc->Instance==ADC1)
 80032bc:	4b28      	ldr	r3, [pc, #160]	@ (8003360 <HAL_ADC_MspInit+0xb4>)
 80032be:	6822      	ldr	r2, [r4, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d001      	beq.n	80032c8 <HAL_ADC_MspInit+0x1c>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80032c4:	b00a      	add	sp, #40	@ 0x28
 80032c6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032c8:	2180      	movs	r1, #128	@ 0x80
 80032ca:	4b26      	ldr	r3, [pc, #152]	@ (8003364 <HAL_ADC_MspInit+0xb8>)
 80032cc:	0089      	lsls	r1, r1, #2
 80032ce:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d0:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032d2:	430a      	orrs	r2, r1
 80032d4:	619a      	str	r2, [r3, #24]
 80032d6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d8:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032da:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032dc:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032de:	9201      	str	r2, [sp, #4]
 80032e0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e2:	695a      	ldr	r2, [r3, #20]
 80032e4:	0289      	lsls	r1, r1, #10
 80032e6:	430a      	orrs	r2, r1
 80032e8:	615a      	str	r2, [r3, #20]
 80032ea:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ec:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ee:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f0:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f2:	9202      	str	r2, [sp, #8]
 80032f4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f6:	695a      	ldr	r2, [r3, #20]
 80032f8:	02c9      	lsls	r1, r1, #11
 80032fa:	430a      	orrs	r2, r1
 80032fc:	615a      	str	r2, [r3, #20]
 80032fe:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_U_Pin;
 8003300:	2238      	movs	r2, #56	@ 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003302:	400b      	ands	r3, r1
 8003304:	9303      	str	r3, [sp, #12]
 8003306:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_U_Pin;
 8003308:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_U_Pin;
 800330c:	9204      	str	r2, [sp, #16]
 800330e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003310:	f000 fbda 	bl	8003ac8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8003314:	2303      	movs	r3, #3
 8003316:	2202      	movs	r2, #2
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8003318:	4813      	ldr	r0, [pc, #76]	@ (8003368 <HAL_ADC_MspInit+0xbc>)
 800331a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 800331c:	9204      	str	r2, [sp, #16]
 800331e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003320:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8003322:	f000 fbd1 	bl	8003ac8 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8003326:	4d11      	ldr	r5, [pc, #68]	@ (800336c <HAL_ADC_MspInit+0xc0>)
 8003328:	4b11      	ldr	r3, [pc, #68]	@ (8003370 <HAL_ADC_MspInit+0xc4>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800332a:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 800332c:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800332e:	2380      	movs	r3, #128	@ 0x80
 8003330:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003332:	3380      	adds	r3, #128	@ 0x80
 8003334:	612b      	str	r3, [r5, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003336:	2380      	movs	r3, #128	@ 0x80
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800333c:	2320      	movs	r3, #32
 800333e:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8003340:	2380      	movs	r3, #128	@ 0x80
 8003342:	019b      	lsls	r3, r3, #6
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003344:	606e      	str	r6, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003346:	60ae      	str	r6, [r5, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8003348:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800334a:	f000 fb89 	bl	8003a60 <HAL_DMA_Init>
 800334e:	2800      	cmp	r0, #0
 8003350:	d102      	bne.n	8003358 <HAL_ADC_MspInit+0xac>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8003352:	6325      	str	r5, [r4, #48]	@ 0x30
 8003354:	626c      	str	r4, [r5, #36]	@ 0x24
}
 8003356:	e7b5      	b.n	80032c4 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8003358:	f7fd ff98 	bl	800128c <Error_Handler>
 800335c:	e7f9      	b.n	8003352 <HAL_ADC_MspInit+0xa6>
 800335e:	46c0      	nop			@ (mov r8, r8)
 8003360:	40012400 	.word	0x40012400
 8003364:	40021000 	.word	0x40021000
 8003368:	48000400 	.word	0x48000400
 800336c:	20000614 	.word	0x20000614
 8003370:	40020008 	.word	0x40020008

08003374 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003374:	b510      	push	{r4, lr}
 8003376:	0004      	movs	r4, r0
 8003378:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337a:	2214      	movs	r2, #20
 800337c:	2100      	movs	r1, #0
 800337e:	a802      	add	r0, sp, #8
 8003380:	f003 f938 	bl	80065f4 <memset>
  if(htim_pwm->Instance==TIM1)
 8003384:	4b12      	ldr	r3, [pc, #72]	@ (80033d0 <HAL_TIM_PWM_MspInit+0x5c>)
 8003386:	6822      	ldr	r2, [r4, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d001      	beq.n	8003390 <HAL_TIM_PWM_MspInit+0x1c>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800338c:	b008      	add	sp, #32
 800338e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003390:	2180      	movs	r1, #128	@ 0x80
 8003392:	4b10      	ldr	r3, [pc, #64]	@ (80033d4 <HAL_TIM_PWM_MspInit+0x60>)
 8003394:	0109      	lsls	r1, r1, #4
 8003396:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003398:	480f      	ldr	r0, [pc, #60]	@ (80033d8 <HAL_TIM_PWM_MspInit+0x64>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 800339a:	430a      	orrs	r2, r1
 800339c:	619a      	str	r2, [r3, #24]
 800339e:	699a      	ldr	r2, [r3, #24]
 80033a0:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a2:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033a4:	9200      	str	r2, [sp, #0]
 80033a6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a8:	695a      	ldr	r2, [r3, #20]
 80033aa:	02c9      	lsls	r1, r1, #11
 80033ac:	430a      	orrs	r2, r1
 80033ae:	615a      	str	r2, [r3, #20]
 80033b0:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80033b2:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033b4:	400b      	ands	r3, r1
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80033ba:	2302      	movs	r3, #2
 80033bc:	0152      	lsls	r2, r2, #5
 80033be:	9202      	str	r2, [sp, #8]
 80033c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033c2:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80033c4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033c6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80033c8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80033ca:	f000 fb7d 	bl	8003ac8 <HAL_GPIO_Init>
}
 80033ce:	e7dd      	b.n	800338c <HAL_TIM_PWM_MspInit+0x18>
 80033d0:	40012c00 	.word	0x40012c00
 80033d4:	40021000 	.word	0x40021000
 80033d8:	48000400 	.word	0x48000400

080033dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033dc:	b5d0      	push	{r4, r6, r7, lr}
 80033de:	0004      	movs	r4, r0
 80033e0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e2:	2214      	movs	r2, #20
 80033e4:	2100      	movs	r1, #0
 80033e6:	a802      	add	r0, sp, #8
 80033e8:	f003 f904 	bl	80065f4 <memset>
  if(htim->Instance==TIM1)
 80033ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003458 <HAL_TIM_MspPostInit+0x7c>)
 80033ee:	6822      	ldr	r2, [r4, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80033f4:	b008      	add	sp, #32
 80033f6:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f8:	2180      	movs	r1, #128	@ 0x80
 80033fa:	4b18      	ldr	r3, [pc, #96]	@ (800345c <HAL_TIM_MspPostInit+0x80>)
 80033fc:	02c9      	lsls	r1, r1, #11
 80033fe:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003400:	2602      	movs	r6, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003402:	430a      	orrs	r2, r1
 8003404:	615a      	str	r2, [r3, #20]
 8003406:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003408:	2703      	movs	r7, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800340a:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800340c:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800340e:	9200      	str	r2, [sp, #0]
 8003410:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003412:	695a      	ldr	r2, [r3, #20]
 8003414:	0289      	lsls	r1, r1, #10
 8003416:	430a      	orrs	r2, r1
 8003418:	615a      	str	r2, [r3, #20]
 800341a:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800341c:	22e0      	movs	r2, #224	@ 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800341e:	400b      	ands	r3, r1
 8003420:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003422:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003424:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003426:	2302      	movs	r3, #2
 8003428:	0212      	lsls	r2, r2, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800342a:	a902      	add	r1, sp, #8
 800342c:	480c      	ldr	r0, [pc, #48]	@ (8003460 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800342e:	9202      	str	r2, [sp, #8]
 8003430:	9303      	str	r3, [sp, #12]
 8003432:	9604      	str	r6, [sp, #16]
 8003434:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003436:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003438:	f000 fb46 	bl	8003ac8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800343c:	22e0      	movs	r2, #224	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343e:	2090      	movs	r0, #144	@ 0x90
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003440:	2302      	movs	r3, #2
 8003442:	00d2      	lsls	r2, r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003444:	a902      	add	r1, sp, #8
 8003446:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003448:	9202      	str	r2, [sp, #8]
 800344a:	9303      	str	r3, [sp, #12]
 800344c:	9604      	str	r6, [sp, #16]
 800344e:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003450:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003452:	f000 fb39 	bl	8003ac8 <HAL_GPIO_Init>
}
 8003456:	e7cd      	b.n	80033f4 <HAL_TIM_MspPostInit+0x18>
 8003458:	40012c00 	.word	0x40012c00
 800345c:	40021000 	.word	0x40021000
 8003460:	48000400 	.word	0x48000400

08003464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003464:	b530      	push	{r4, r5, lr}
 8003466:	0004      	movs	r4, r0
 8003468:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800346a:	2214      	movs	r2, #20
 800346c:	2100      	movs	r1, #0
 800346e:	a802      	add	r0, sp, #8
 8003470:	f003 f8c0 	bl	80065f4 <memset>
  if(huart->Instance==USART1)
 8003474:	4b27      	ldr	r3, [pc, #156]	@ (8003514 <HAL_UART_MspInit+0xb0>)
 8003476:	6822      	ldr	r2, [r4, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d001      	beq.n	8003480 <HAL_UART_MspInit+0x1c>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800347c:	b009      	add	sp, #36	@ 0x24
 800347e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8003480:	2180      	movs	r1, #128	@ 0x80
 8003482:	4b25      	ldr	r3, [pc, #148]	@ (8003518 <HAL_UART_MspInit+0xb4>)
 8003484:	01c9      	lsls	r1, r1, #7
 8003486:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003488:	4824      	ldr	r0, [pc, #144]	@ (800351c <HAL_UART_MspInit+0xb8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800348a:	430a      	orrs	r2, r1
 800348c:	619a      	str	r2, [r3, #24]
 800348e:	699a      	ldr	r2, [r3, #24]
 8003490:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003492:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8003494:	9200      	str	r2, [sp, #0]
 8003496:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003498:	695a      	ldr	r2, [r3, #20]
 800349a:	02c9      	lsls	r1, r1, #11
 800349c:	430a      	orrs	r2, r1
 800349e:	615a      	str	r2, [r3, #20]
 80034a0:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80034a2:	22c0      	movs	r2, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a4:	400b      	ands	r3, r1
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80034aa:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ac:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80034ae:	9202      	str	r2, [sp, #8]
 80034b0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b2:	f000 fb09 	bl	8003ac8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80034b6:	4d1a      	ldr	r5, [pc, #104]	@ (8003520 <HAL_UART_MspInit+0xbc>)
 80034b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003524 <HAL_UART_MspInit+0xc0>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034ba:	2280      	movs	r2, #128	@ 0x80
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80034bc:	602b      	str	r3, [r5, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034be:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80034c0:	0028      	movs	r0, r5
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034c2:	606b      	str	r3, [r5, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c4:	60ab      	str	r3, [r5, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034c6:	60ea      	str	r2, [r5, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034c8:	612b      	str	r3, [r5, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034ca:	616b      	str	r3, [r5, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80034cc:	61ab      	str	r3, [r5, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034ce:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80034d0:	f000 fac6 	bl	8003a60 <HAL_DMA_Init>
 80034d4:	2800      	cmp	r0, #0
 80034d6:	d116      	bne.n	8003506 <HAL_UART_MspInit+0xa2>
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80034d8:	4b13      	ldr	r3, [pc, #76]	@ (8003528 <HAL_UART_MspInit+0xc4>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80034da:	6765      	str	r5, [r4, #116]	@ 0x74
 80034dc:	626c      	str	r4, [r5, #36]	@ 0x24
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80034de:	4d13      	ldr	r5, [pc, #76]	@ (800352c <HAL_UART_MspInit+0xc8>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034e0:	2280      	movs	r2, #128	@ 0x80
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80034e2:	602b      	str	r3, [r5, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034e4:	2310      	movs	r3, #16
 80034e6:	606b      	str	r3, [r5, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034e8:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80034ea:	0028      	movs	r0, r5
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ec:	60ab      	str	r3, [r5, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034ee:	60ea      	str	r2, [r5, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034f0:	612b      	str	r3, [r5, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034f2:	616b      	str	r3, [r5, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80034f4:	61ab      	str	r3, [r5, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034f6:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80034f8:	f000 fab2 	bl	8003a60 <HAL_DMA_Init>
 80034fc:	2800      	cmp	r0, #0
 80034fe:	d105      	bne.n	800350c <HAL_UART_MspInit+0xa8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003500:	6725      	str	r5, [r4, #112]	@ 0x70
 8003502:	626c      	str	r4, [r5, #36]	@ 0x24
}
 8003504:	e7ba      	b.n	800347c <HAL_UART_MspInit+0x18>
      Error_Handler();
 8003506:	f7fd fec1 	bl	800128c <Error_Handler>
 800350a:	e7e5      	b.n	80034d8 <HAL_UART_MspInit+0x74>
      Error_Handler();
 800350c:	f7fd febe 	bl	800128c <Error_Handler>
 8003510:	e7f6      	b.n	8003500 <HAL_UART_MspInit+0x9c>
 8003512:	46c0      	nop			@ (mov r8, r8)
 8003514:	40013800 	.word	0x40013800
 8003518:	40021000 	.word	0x40021000
 800351c:	48000400 	.word	0x48000400
 8003520:	20000500 	.word	0x20000500
 8003524:	40020030 	.word	0x40020030
 8003528:	4002001c 	.word	0x4002001c
 800352c:	200004bc 	.word	0x200004bc

08003530 <DMA1_Channel1_IRQHandler>:
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 0 */

  /* USER CODE END CURRENT_REGULATION_IRQn 0 */

  /* Clear Flags */
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8003530:	2207      	movs	r2, #7
{
 8003532:	b510      	push	{r4, lr}
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8003534:	4b02      	ldr	r3, [pc, #8]	@ (8003540 <DMA1_Channel1_IRQHandler+0x10>)
 8003536:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 1 */

  /* USER CODE END CURRENT_REGULATION_IRQn 1 */
  TSK_HighFrequencyTask();
 8003538:	f7fe f900 	bl	800173c <TSK_HighFrequencyTask>

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 2 */

  /* USER CODE END CURRENT_REGULATION_IRQn 2 */
}
 800353c:	bd10      	pop	{r4, pc}
 800353e:	46c0      	nop			@ (mov r8, r8)
 8003540:	40020000 	.word	0x40020000

08003544 <TIM1_BRK_UP_TRG_COM_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003544:	2201      	movs	r2, #1
 8003546:	4b0e      	ldr	r3, [pc, #56]	@ (8003580 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x3c>)
/**
  * @brief  This function handles first motor TIMx Update, Break-in interrupt request.
  * @param  None
  */
void TIMx_UP_BRK_M1_IRQHandler(void)
{
 8003548:	b510      	push	{r4, lr}
 800354a:	6919      	ldr	r1, [r3, #16]
 800354c:	420a      	tst	r2, r1
 800354e:	d002      	beq.n	8003556 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x12>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8003550:	68d9      	ldr	r1, [r3, #12]
 8003552:	420a      	tst	r2, r1
 8003554:	d10e      	bne.n	8003574 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30>
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003556:	2280      	movs	r2, #128	@ 0x80
 8003558:	4b09      	ldr	r3, [pc, #36]	@ (8003580 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x3c>)
 800355a:	6919      	ldr	r1, [r3, #16]
 800355c:	420a      	tst	r2, r1
 800355e:	d008      	beq.n	8003572 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2e>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_BRK(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_BIE) == (TIM_DIER_BIE)) ? 1UL : 0UL);
 8003560:	68d9      	ldr	r1, [r3, #12]
 8003562:	420a      	tst	r2, r1
 8003564:	d005      	beq.n	8003572 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003566:	3a02      	subs	r2, #2
 8003568:	3aff      	subs	r2, #255	@ 0xff
  }

  if(LL_TIM_IsActiveFlag_BRK(TIM1) && LL_TIM_IsEnabledIT_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OCP_Handler(&PWM_Handle_M1._Super);
 800356a:	4806      	ldr	r0, [pc, #24]	@ (8003584 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x40>)
 800356c:	611a      	str	r2, [r3, #16]
 800356e:	f7fe ffdb 	bl	8002528 <PWMC_OCP_Handler>
  }

  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 1 */
}
 8003572:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003574:	3a03      	subs	r2, #3
 8003576:	611a      	str	r2, [r3, #16]
    R3_1_TIMx_UP_IRQHandler( &PWM_Handle_M1 );
 8003578:	4802      	ldr	r0, [pc, #8]	@ (8003584 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x40>)
 800357a:	f002 f85f 	bl	800563c <R3_1_TIMx_UP_IRQHandler>
 800357e:	e7ea      	b.n	8003556 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x12>
 8003580:	40012c00 	.word	0x40012c00
 8003584:	20000190 	.word	0x20000190

08003588 <DMA1_Channel4_5_IRQHandler>:
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
{
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 8003588:	2280      	movs	r2, #128	@ 0x80
 800358a:	4b03      	ldr	r3, [pc, #12]	@ (8003598 <DMA1_Channel4_5_IRQHandler+0x10>)
 800358c:	0292      	lsls	r2, r2, #10
 800358e:	6819      	ldr	r1, [r3, #0]
{
  /* USER CODE BEGIN DMAx_R1_M1_IRQn 0 */

  /* USER CODE END DMAx_R1_M1_IRQn 0 */

  if (LL_DMA_IsActiveFlag_TC5(DMA1))
 8003590:	4211      	tst	r1, r2
 8003592:	d000      	beq.n	8003596 <DMA1_Channel4_5_IRQHandler+0xe>
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8003594:	605a      	str	r2, [r3, #4]
  }

  /* USER CODE BEGIN DMAx_R1_M1_IRQn 1 */

  /* USER CODE END DMAx_R1_M1_IRQn 1 */
}
 8003596:	4770      	bx	lr
 8003598:	40020000 	.word	0x40020000

0800359c <UASPEP_INIT>:
  * @brief  Initialization of the Hardware used for data transmission and reception.
  *
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_INIT(void *pHWHandle)
{
 800359c:	b570      	push	{r4, r5, r6, lr}
#endif
    /* DMA interrupt not used for all families */
    /* Enable DMA end of transfer on UART RX channel completion */
    /* LL_DMA_EnableIT_TC(pHandle->rxDMA, pHandle->rxChannel) */
    /* Enable Error interrupt (EIE) to unmask Overrun interrupt */
    LL_USART_EnableIT_ERROR(pHandle->USARTx);
 800359e:	6802      	ldr	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a4:	2101      	movs	r1, #1
 80035a6:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80035aa:	6893      	ldr	r3, [r2, #8]
 80035ac:	430b      	orrs	r3, r1
 80035ae:	6093      	str	r3, [r2, #8]
 80035b0:	f384 8810 	msr	PRIMASK, r4

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 80035b4:	6804      	ldr	r4, [r0, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80035b6:	68c2      	ldr	r2, [r0, #12]
 80035b8:	0025      	movs	r5, r4
 80035ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003624 <UASPEP_INIT+0x88>)
 80035bc:	3524      	adds	r5, #36	@ 0x24
 80035be:	189a      	adds	r2, r3, r2
 80035c0:	3a01      	subs	r2, #1
 80035c2:	7816      	ldrb	r6, [r2, #0]
 80035c4:	6842      	ldr	r2, [r0, #4]
 80035c6:	1992      	adds	r2, r2, r6
 80035c8:	6095      	str	r5, [r2, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80035ca:	2240      	movs	r2, #64	@ 0x40
 80035cc:	6222      	str	r2, [r4, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ce:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d2:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80035d6:	68a5      	ldr	r5, [r4, #8]
 80035d8:	4315      	orrs	r5, r2
 80035da:	60a5      	str	r5, [r4, #8]
 80035dc:	f386 8810 	msr	PRIMASK, r6
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 80035e0:	6804      	ldr	r4, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80035e2:	6222      	str	r2, [r4, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e4:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e8:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80035ec:	6825      	ldr	r5, [r4, #0]
 80035ee:	4315      	orrs	r5, r2
 80035f0:	6025      	str	r5, [r4, #0]
 80035f2:	f386 8810 	msr	PRIMASK, r6
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);
 80035f6:	6804      	ldr	r4, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035f8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fc:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003600:	2680      	movs	r6, #128	@ 0x80
 8003602:	68a1      	ldr	r1, [r4, #8]
 8003604:	4331      	orrs	r1, r6
 8003606:	60a1      	str	r1, [r4, #8]
 8003608:	f385 8810 	msr	PRIMASK, r5
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 800360c:	6801      	ldr	r1, [r0, #0]
 800360e:	6905      	ldr	r5, [r0, #16]
 8003610:	000c      	movs	r4, r1
 8003612:	195b      	adds	r3, r3, r5
 8003614:	3b01      	subs	r3, #1
 8003616:	781d      	ldrb	r5, [r3, #0]
 8003618:	6883      	ldr	r3, [r0, #8]
 800361a:	3428      	adds	r4, #40	@ 0x28
 800361c:	195b      	adds	r3, r3, r5
 800361e:	609c      	str	r4, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003620:	620a      	str	r2, [r1, #32]
}
 8003622:	bd70      	pop	{r4, r5, r6, pc}
 8003624:	08006c50 	.word	0x08006c50

08003628 <UASPEP_CFG_TRANSMISSION>:
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8003628:	4b09      	ldr	r3, [pc, #36]	@ (8003650 <UASPEP_CFG_TRANSMISSION+0x28>)
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
void UASPEP_CFG_TRANSMISSION(void *pHWHandle, void *data, uint16_t length)
{
 800362a:	b510      	push	{r4, lr}
 800362c:	6904      	ldr	r4, [r0, #16]
 800362e:	5ce4      	ldrb	r4, [r4, r3]
 8003630:	6883      	ldr	r3, [r0, #8]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 8003632:	2001      	movs	r0, #1
 8003634:	191b      	adds	r3, r3, r4
 8003636:	681c      	ldr	r4, [r3, #0]
 8003638:	4220      	tst	r0, r4
 800363a:	d108      	bne.n	800364e <UASPEP_CFG_TRANSMISSION+0x26>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 800363c:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	0c09      	lsrs	r1, r1, #16
 8003642:	0409      	lsls	r1, r1, #16
 8003644:	430a      	orrs	r2, r1
 8003646:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4302      	orrs	r2, r0
 800364c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    /* Nothing to do */
  }
}
 800364e:	bd10      	pop	{r4, pc}
 8003650:	08006c4f 	.word	0x08006c4f

08003654 <UASPEP_CFG_RECEPTION>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_CFG_RECEPTION(void *pHWHandle, void* buffer, uint16_t length)
{
 8003654:	b510      	push	{r4, lr}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003656:	4b09      	ldr	r3, [pc, #36]	@ (800367c <UASPEP_CFG_RECEPTION+0x28>)
 8003658:	68c4      	ldr	r4, [r0, #12]
 800365a:	5ce4      	ldrb	r4, [r4, r3]
 800365c:	6843      	ldr	r3, [r0, #4]
 800365e:	191b      	adds	r3, r3, r4
 8003660:	2401      	movs	r4, #1
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	43a0      	bics	r0, r4
 8003666:	6018      	str	r0, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8003668:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800366a:	6859      	ldr	r1, [r3, #4]
 800366c:	0c09      	lsrs	r1, r1, #16
 800366e:	0409      	lsls	r1, r1, #16
 8003670:	4311      	orrs	r1, r2
 8003672:	6059      	str	r1, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	4322      	orrs	r2, r4
 8003678:	601a      	str	r2, [r3, #0]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 800367a:	bd10      	pop	{r4, pc}
 800367c:	08006c4f 	.word	0x08006c4f

08003680 <UASPEP_IDLE_ENABLE>:
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8003680:	2110      	movs	r1, #16
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8003682:	6803      	ldr	r3, [r0, #0]
 8003684:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003686:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368a:	2201      	movs	r2, #1
 800368c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	f380 8810 	msr	PRIMASK, r0
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 800369a:	4770      	bx	lr

0800369c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800369c:	4770      	bx	lr
 800369e:	46c0      	nop			@ (mov r8, r8)

080036a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036a0:	b570      	push	{r4, r5, r6, lr}
 80036a2:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036a4:	20fa      	movs	r0, #250	@ 0xfa
 80036a6:	4b0e      	ldr	r3, [pc, #56]	@ (80036e0 <HAL_InitTick+0x40>)
 80036a8:	0080      	lsls	r0, r0, #2
 80036aa:	7819      	ldrb	r1, [r3, #0]
 80036ac:	f7fc fd2c 	bl	8000108 <__udivsi3>
 80036b0:	4d0c      	ldr	r5, [pc, #48]	@ (80036e4 <HAL_InitTick+0x44>)
 80036b2:	0001      	movs	r1, r0
 80036b4:	6828      	ldr	r0, [r5, #0]
 80036b6:	f7fc fd27 	bl	8000108 <__udivsi3>
 80036ba:	f000 f9b1 	bl	8003a20 <HAL_SYSTICK_Config>
 80036be:	2800      	cmp	r0, #0
 80036c0:	d10c      	bne.n	80036dc <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 80036c2:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036c4:	2c03      	cmp	r4, #3
 80036c6:	d900      	bls.n	80036ca <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 80036c8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036ca:	3802      	subs	r0, #2
 80036cc:	2200      	movs	r2, #0
 80036ce:	0021      	movs	r1, r4
 80036d0:	f000 f962 	bl	8003998 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036d4:	4b04      	ldr	r3, [pc, #16]	@ (80036e8 <HAL_InitTick+0x48>)
 80036d6:	2000      	movs	r0, #0
 80036d8:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80036da:	e7f5      	b.n	80036c8 <HAL_InitTick+0x28>
    return HAL_ERROR;
 80036dc:	2001      	movs	r0, #1
 80036de:	e7f3      	b.n	80036c8 <HAL_InitTick+0x28>
 80036e0:	20000498 	.word	0x20000498
 80036e4:	20000494 	.word	0x20000494
 80036e8:	2000049c 	.word	0x2000049c

080036ec <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036ec:	2110      	movs	r1, #16
 80036ee:	4a06      	ldr	r2, [pc, #24]	@ (8003708 <HAL_Init+0x1c>)
{
 80036f0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036f2:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80036f4:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036f6:	430b      	orrs	r3, r1
 80036f8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80036fa:	f7ff ffd1 	bl	80036a0 <HAL_InitTick>
  HAL_MspInit();
 80036fe:	f7ff fdbd 	bl	800327c <HAL_MspInit>
}
 8003702:	2000      	movs	r0, #0
 8003704:	bd10      	pop	{r4, pc}
 8003706:	46c0      	nop			@ (mov r8, r8)
 8003708:	40022000 	.word	0x40022000

0800370c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800370c:	4a03      	ldr	r2, [pc, #12]	@ (800371c <HAL_IncTick+0x10>)
 800370e:	4b04      	ldr	r3, [pc, #16]	@ (8003720 <HAL_IncTick+0x14>)
 8003710:	6811      	ldr	r1, [r2, #0]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	185b      	adds	r3, r3, r1
 8003716:	6013      	str	r3, [r2, #0]
}
 8003718:	4770      	bx	lr
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	20000850 	.word	0x20000850
 8003720:	20000498 	.word	0x20000498

08003724 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003724:	4b01      	ldr	r3, [pc, #4]	@ (800372c <HAL_GetTick+0x8>)
 8003726:	6818      	ldr	r0, [r3, #0]
}
 8003728:	4770      	bx	lr
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	20000850 	.word	0x20000850

08003730 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	1e04      	subs	r4, r0, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
 8003734:	d064      	beq.n	8003800 <HAL_ADC_Init+0xd0>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003736:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003738:	2b00      	cmp	r3, #0
 800373a:	d068      	beq.n	800380e <HAL_ADC_Init+0xde>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800373c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800373e:	06db      	lsls	r3, r3, #27
 8003740:	d460      	bmi.n	8003804 <HAL_ADC_Init+0xd4>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003742:	6822      	ldr	r2, [r4, #0]
 8003744:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8003746:	075b      	lsls	r3, r3, #29
 8003748:	d45c      	bmi.n	8003804 <HAL_ADC_Init+0xd4>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800374a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800374c:	4947      	ldr	r1, [pc, #284]	@ (800386c <HAL_ADC_Init+0x13c>)
 800374e:	400b      	ands	r3, r1
 8003750:	3106      	adds	r1, #6
 8003752:	31ff      	adds	r1, #255	@ 0xff
 8003754:	430b      	orrs	r3, r1
 8003756:	63a3      	str	r3, [r4, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003758:	2303      	movs	r3, #3
 800375a:	6891      	ldr	r1, [r2, #8]
 800375c:	400b      	ands	r3, r1
 800375e:	2b01      	cmp	r3, #1
 8003760:	d05b      	beq.n	800381a <HAL_ADC_Init+0xea>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003762:	2118      	movs	r1, #24
 8003764:	68d3      	ldr	r3, [r2, #12]
 8003766:	438b      	bics	r3, r1
 8003768:	68a1      	ldr	r1, [r4, #8]
 800376a:	430b      	orrs	r3, r1
 800376c:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800376e:	6913      	ldr	r3, [r2, #16]
 8003770:	6861      	ldr	r1, [r4, #4]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	089b      	lsrs	r3, r3, #2
 8003776:	430b      	orrs	r3, r1
 8003778:	6113      	str	r3, [r2, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800377a:	68d3      	ldr	r3, [r2, #12]
 800377c:	493c      	ldr	r1, [pc, #240]	@ (8003870 <HAL_ADC_Init+0x140>)
 800377e:	400b      	ands	r3, r1
 8003780:	60d3      	str	r3, [r2, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003782:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003784:	7e61      	ldrb	r1, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003786:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003788:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800378a:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800378c:	7ea0      	ldrb	r0, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800378e:	68e1      	ldr	r1, [r4, #12]
 8003790:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003792:	0341      	lsls	r1, r0, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003794:	430b      	orrs	r3, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003796:	2124      	movs	r1, #36	@ 0x24
 8003798:	5c61      	ldrb	r1, [r4, r1]
 800379a:	0049      	lsls	r1, r1, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800379c:	430b      	orrs	r3, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800379e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80037a0:	3901      	subs	r1, #1
 80037a2:	1e4d      	subs	r5, r1, #1
 80037a4:	41a9      	sbcs	r1, r5
 80037a6:	0309      	lsls	r1, r1, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80037a8:	430b      	orrs	r3, r1
 80037aa:	6921      	ldr	r1, [r4, #16]
 80037ac:	3902      	subs	r1, #2
 80037ae:	424d      	negs	r5, r1
 80037b0:	4169      	adcs	r1, r5
 80037b2:	0089      	lsls	r1, r1, #2
 80037b4:	430b      	orrs	r3, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80037b6:	7ee1      	ldrb	r1, [r4, #27]
 80037b8:	2901      	cmp	r1, #1
 80037ba:	d03e      	beq.n	800383a <HAL_ADC_Init+0x10a>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037bc:	20c2      	movs	r0, #194	@ 0xc2
 80037be:	69e1      	ldr	r1, [r4, #28]
 80037c0:	30ff      	adds	r0, #255	@ 0xff
 80037c2:	4281      	cmp	r1, r0
 80037c4:	d002      	beq.n	80037cc <HAL_ADC_Init+0x9c>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80037c6:	6a20      	ldr	r0, [r4, #32]
 80037c8:	4301      	orrs	r1, r0
 80037ca:	430b      	orrs	r3, r1
                    hadc->Init.ExternalTrigConvEdge );
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80037cc:	68d1      	ldr	r1, [r2, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80037ce:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80037d0:	4319      	orrs	r1, r3
 80037d2:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80037d4:	2180      	movs	r1, #128	@ 0x80
 80037d6:	0549      	lsls	r1, r1, #21
 80037d8:	428d      	cmp	r5, r1
 80037da:	d025      	beq.n	8003828 <HAL_ADC_Init+0xf8>
 80037dc:	1e69      	subs	r1, r5, #1
 80037de:	2906      	cmp	r1, #6
 80037e0:	d922      	bls.n	8003828 <HAL_ADC_Init+0xf8>
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80037e2:	68d2      	ldr	r2, [r2, #12]
 80037e4:	4923      	ldr	r1, [pc, #140]	@ (8003874 <HAL_ADC_Init+0x144>)
 80037e6:	400a      	ands	r2, r1
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d02c      	beq.n	8003846 <HAL_ADC_Init+0x116>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80037ec:	2212      	movs	r2, #18
 80037ee:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80037f0:	4393      	bics	r3, r2
 80037f2:	3a02      	subs	r2, #2
 80037f4:	4313      	orrs	r3, r2
 80037f6:	63a3      	str	r3, [r4, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037f8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80037fa:	3a0f      	subs	r2, #15
 80037fc:	4313      	orrs	r3, r2
 80037fe:	63e3      	str	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8003800:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8003802:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003804:	2210      	movs	r2, #16
 8003806:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003808:	4313      	orrs	r3, r2
 800380a:	63a3      	str	r3, [r4, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 800380c:	e7f8      	b.n	8003800 <HAL_ADC_Init+0xd0>
    hadc->Lock = HAL_UNLOCKED;
 800380e:	2234      	movs	r2, #52	@ 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8003810:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hadc->Lock = HAL_UNLOCKED;
 8003812:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8003814:	f7ff fd4a 	bl	80032ac <HAL_ADC_MspInit>
 8003818:	e790      	b.n	800373c <HAL_ADC_Init+0xc>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800381a:	6811      	ldr	r1, [r2, #0]
 800381c:	420b      	tst	r3, r1
 800381e:	d1ac      	bne.n	800377a <HAL_ADC_Init+0x4a>
 8003820:	68d3      	ldr	r3, [r2, #12]
 8003822:	041b      	lsls	r3, r3, #16
 8003824:	d4a9      	bmi.n	800377a <HAL_ADC_Init+0x4a>
 8003826:	e79c      	b.n	8003762 <HAL_ADC_Init+0x32>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003828:	2107      	movs	r1, #7
 800382a:	6950      	ldr	r0, [r2, #20]
 800382c:	4388      	bics	r0, r1
 800382e:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003830:	6950      	ldr	r0, [r2, #20]
 8003832:	4029      	ands	r1, r5
 8003834:	4301      	orrs	r1, r0
 8003836:	6151      	str	r1, [r2, #20]
 8003838:	e7d3      	b.n	80037e2 <HAL_ADC_Init+0xb2>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800383a:	2800      	cmp	r0, #0
 800383c:	d10d      	bne.n	800385a <HAL_ADC_Init+0x12a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800383e:	2180      	movs	r1, #128	@ 0x80
 8003840:	0249      	lsls	r1, r1, #9
 8003842:	430b      	orrs	r3, r1
 8003844:	e7ba      	b.n	80037bc <HAL_ADC_Init+0x8c>
      ADC_CLEAR_ERRORCODE(hadc);
 8003846:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8003848:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800384a:	63e3      	str	r3, [r4, #60]	@ 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 800384c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800384e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8003850:	4393      	bics	r3, r2
 8003852:	3a02      	subs	r2, #2
 8003854:	4313      	orrs	r3, r2
 8003856:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003858:	e7d3      	b.n	8003802 <HAL_ADC_Init+0xd2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800385a:	2520      	movs	r5, #32
 800385c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800385e:	4328      	orrs	r0, r5
 8003860:	63a0      	str	r0, [r4, #56]	@ 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003862:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003864:	4301      	orrs	r1, r0
 8003866:	63e1      	str	r1, [r4, #60]	@ 0x3c
 8003868:	e7a8      	b.n	80037bc <HAL_ADC_Init+0x8c>
 800386a:	46c0      	nop			@ (mov r8, r8)
 800386c:	fffffefd 	.word	0xfffffefd
 8003870:	fffe0219 	.word	0xfffe0219
 8003874:	833fffe7 	.word	0x833fffe7

08003878 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8003878:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800387a:	2234      	movs	r2, #52	@ 0x34
{
 800387c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800387e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8003880:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8003882:	5c83      	ldrb	r3, [r0, r2]
{
 8003884:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003886:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
  __HAL_LOCK(hadc);
 8003888:	2b01      	cmp	r3, #1
 800388a:	d057      	beq.n	800393c <HAL_ADC_ConfigChannel+0xc4>
 800388c:	2301      	movs	r3, #1
 800388e:	5483      	strb	r3, [r0, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003890:	6802      	ldr	r2, [r0, #0]
 8003892:	6890      	ldr	r0, [r2, #8]
 8003894:	0740      	lsls	r0, r0, #29
 8003896:	d509      	bpl.n	80038ac <HAL_ADC_ConfigChannel+0x34>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003898:	2220      	movs	r2, #32
    
    tmp_hal_status = HAL_ERROR;
 800389a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800389c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800389e:	4313      	orrs	r3, r2
 80038a0:	63a3      	str	r3, [r4, #56]	@ 0x38
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038a2:	2334      	movs	r3, #52	@ 0x34
 80038a4:	2200      	movs	r2, #0
 80038a6:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 80038a8:	b003      	add	sp, #12
 80038aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038ac:	2610      	movs	r6, #16
 80038ae:	4276      	negs	r6, r6
 80038b0:	46b4      	mov	ip, r6
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80038b2:	6808      	ldr	r0, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 80038b4:	4e31      	ldr	r6, [pc, #196]	@ (800397c <HAL_ADC_ConfigChannel+0x104>)
 80038b6:	684f      	ldr	r7, [r1, #4]
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80038b8:	4083      	lsls	r3, r0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038ba:	4484      	add	ip, r0
    if (sConfig->Rank != ADC_RANK_NONE)
 80038bc:	42b7      	cmp	r7, r6
 80038be:	d025      	beq.n	800390c <HAL_ADC_ConfigChannel+0x94>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80038c0:	6a96      	ldr	r6, [r2, #40]	@ 0x28
 80038c2:	4333      	orrs	r3, r6
 80038c4:	6293      	str	r3, [r2, #40]	@ 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80038c6:	2380      	movs	r3, #128	@ 0x80
 80038c8:	055b      	lsls	r3, r3, #21
 80038ca:	429d      	cmp	r5, r3
 80038cc:	d00f      	beq.n	80038ee <HAL_ADC_ConfigChannel+0x76>
 80038ce:	3d01      	subs	r5, #1
 80038d0:	2d06      	cmp	r5, #6
 80038d2:	d90c      	bls.n	80038ee <HAL_ADC_ConfigChannel+0x76>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80038d4:	2307      	movs	r3, #7
 80038d6:	688d      	ldr	r5, [r1, #8]
 80038d8:	6951      	ldr	r1, [r2, #20]
 80038da:	4019      	ands	r1, r3
 80038dc:	428d      	cmp	r5, r1
 80038de:	d006      	beq.n	80038ee <HAL_ADC_ConfigChannel+0x76>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80038e0:	6951      	ldr	r1, [r2, #20]
 80038e2:	4399      	bics	r1, r3
 80038e4:	6151      	str	r1, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80038e6:	6951      	ldr	r1, [r2, #20]
 80038e8:	402b      	ands	r3, r5
 80038ea:	430b      	orrs	r3, r1
 80038ec:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038ee:	4663      	mov	r3, ip
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d809      	bhi.n	8003908 <HAL_ADC_ConfigChannel+0x90>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80038f4:	4b22      	ldr	r3, [pc, #136]	@ (8003980 <HAL_ADC_ConfigChannel+0x108>)
 80038f6:	2180      	movs	r1, #128	@ 0x80
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	2810      	cmp	r0, #16
 80038fc:	d022      	beq.n	8003944 <HAL_ADC_ConfigChannel+0xcc>
 80038fe:	2811      	cmp	r0, #17
 8003900:	d037      	beq.n	8003972 <HAL_ADC_ConfigChannel+0xfa>
 8003902:	0449      	lsls	r1, r1, #17
 8003904:	430a      	orrs	r2, r1
 8003906:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003908:	2000      	movs	r0, #0
 800390a:	e7ca      	b.n	80038a2 <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800390c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800390e:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003910:	4663      	mov	r3, ip
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003912:	6291      	str	r1, [r2, #40]	@ 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003914:	2b02      	cmp	r3, #2
 8003916:	d8f7      	bhi.n	8003908 <HAL_ADC_ConfigChannel+0x90>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003918:	4b19      	ldr	r3, [pc, #100]	@ (8003980 <HAL_ADC_ConfigChannel+0x108>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2810      	cmp	r0, #16
 800391e:	d00f      	beq.n	8003940 <HAL_ADC_ConfigChannel+0xc8>
 8003920:	3811      	subs	r0, #17
 8003922:	1e42      	subs	r2, r0, #1
 8003924:	4190      	sbcs	r0, r2
 8003926:	4a17      	ldr	r2, [pc, #92]	@ (8003984 <HAL_ADC_ConfigChannel+0x10c>)
 8003928:	4240      	negs	r0, r0
 800392a:	4010      	ands	r0, r2
 800392c:	4a16      	ldr	r2, [pc, #88]	@ (8003988 <HAL_ADC_ConfigChannel+0x110>)
 800392e:	4694      	mov	ip, r2
 8003930:	4460      	add	r0, ip
 8003932:	4018      	ands	r0, r3
 8003934:	4b12      	ldr	r3, [pc, #72]	@ (8003980 <HAL_ADC_ConfigChannel+0x108>)
 8003936:	6018      	str	r0, [r3, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003938:	2000      	movs	r0, #0
 800393a:	e7b2      	b.n	80038a2 <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 800393c:	2002      	movs	r0, #2
 800393e:	e7b3      	b.n	80038a8 <HAL_ADC_ConfigChannel+0x30>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003940:	4812      	ldr	r0, [pc, #72]	@ (800398c <HAL_ADC_ConfigChannel+0x114>)
 8003942:	e7f6      	b.n	8003932 <HAL_ADC_ConfigChannel+0xba>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003944:	0409      	lsls	r1, r1, #16
 8003946:	430a      	orrs	r2, r1
 8003948:	601a      	str	r2, [r3, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800394a:	4b11      	ldr	r3, [pc, #68]	@ (8003990 <HAL_ADC_ConfigChannel+0x118>)
 800394c:	4911      	ldr	r1, [pc, #68]	@ (8003994 <HAL_ADC_ConfigChannel+0x11c>)
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	f7fc fbda 	bl	8000108 <__udivsi3>
 8003954:	0083      	lsls	r3, r0, #2
 8003956:	181b      	adds	r3, r3, r0
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800395c:	9b01      	ldr	r3, [sp, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0d2      	beq.n	8003908 <HAL_ADC_ConfigChannel+0x90>
            wait_loop_index--;
 8003962:	9b01      	ldr	r3, [sp, #4]
 8003964:	3b01      	subs	r3, #1
 8003966:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003968:	9b01      	ldr	r3, [sp, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f9      	bne.n	8003962 <HAL_ADC_ConfigChannel+0xea>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800396e:	2000      	movs	r0, #0
 8003970:	e797      	b.n	80038a2 <HAL_ADC_ConfigChannel+0x2a>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003972:	03c9      	lsls	r1, r1, #15
 8003974:	430a      	orrs	r2, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003976:	2000      	movs	r0, #0
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003978:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800397a:	e792      	b.n	80038a2 <HAL_ADC_ConfigChannel+0x2a>
 800397c:	00001001 	.word	0x00001001
 8003980:	40012708 	.word	0x40012708
 8003984:	ff400000 	.word	0xff400000
 8003988:	ffbfffff 	.word	0xffbfffff
 800398c:	ff7fffff 	.word	0xff7fffff
 8003990:	20000494 	.word	0x20000494
 8003994:	000f4240 	.word	0x000f4240

08003998 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003998:	22ff      	movs	r2, #255	@ 0xff
 800399a:	2303      	movs	r3, #3
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800399c:	b510      	push	{r4, lr}
 800399e:	0014      	movs	r4, r2
 80039a0:	4003      	ands	r3, r0
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039a6:	0189      	lsls	r1, r1, #6
 80039a8:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039aa:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039ac:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 80039ae:	2800      	cmp	r0, #0
 80039b0:	db0b      	blt.n	80039ca <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039b2:	4b0c      	ldr	r3, [pc, #48]	@ (80039e4 <HAL_NVIC_SetPriority+0x4c>)
 80039b4:	21c0      	movs	r1, #192	@ 0xc0
 80039b6:	469c      	mov	ip, r3
 80039b8:	0880      	lsrs	r0, r0, #2
 80039ba:	0080      	lsls	r0, r0, #2
 80039bc:	4460      	add	r0, ip
 80039be:	0089      	lsls	r1, r1, #2
 80039c0:	5843      	ldr	r3, [r0, r1]
 80039c2:	4023      	ands	r3, r4
 80039c4:	4313      	orrs	r3, r2
 80039c6:	5043      	str	r3, [r0, r1]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80039c8:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039ca:	230f      	movs	r3, #15
 80039cc:	4906      	ldr	r1, [pc, #24]	@ (80039e8 <HAL_NVIC_SetPriority+0x50>)
 80039ce:	4003      	ands	r3, r0
 80039d0:	468c      	mov	ip, r1
 80039d2:	3b08      	subs	r3, #8
 80039d4:	089b      	lsrs	r3, r3, #2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4463      	add	r3, ip
 80039da:	69d9      	ldr	r1, [r3, #28]
 80039dc:	400c      	ands	r4, r1
 80039de:	4314      	orrs	r4, r2
 80039e0:	61dc      	str	r4, [r3, #28]
 80039e2:	e7f1      	b.n	80039c8 <HAL_NVIC_SetPriority+0x30>
 80039e4:	e000e100 	.word	0xe000e100
 80039e8:	e000ed00 	.word	0xe000ed00

080039ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80039ec:	2800      	cmp	r0, #0
 80039ee:	db05      	blt.n	80039fc <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039f0:	221f      	movs	r2, #31
 80039f2:	2301      	movs	r3, #1
 80039f4:	4002      	ands	r2, r0
 80039f6:	4093      	lsls	r3, r2
 80039f8:	4a01      	ldr	r2, [pc, #4]	@ (8003a00 <HAL_NVIC_EnableIRQ+0x14>)
 80039fa:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80039fc:	4770      	bx	lr
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	e000e100 	.word	0xe000e100

08003a04 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a04:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a08:	4b03      	ldr	r3, [pc, #12]	@ (8003a18 <HAL_NVIC_SystemReset+0x14>)
 8003a0a:	4a04      	ldr	r2, [pc, #16]	@ (8003a1c <HAL_NVIC_SystemReset+0x18>)
 8003a0c:	60da      	str	r2, [r3, #12]
 8003a0e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003a12:	46c0      	nop			@ (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8003a14:	e7fd      	b.n	8003a12 <HAL_NVIC_SystemReset+0xe>
 8003a16:	46c0      	nop			@ (mov r8, r8)
 8003a18:	e000ed00 	.word	0xe000ed00
 8003a1c:	05fa0004 	.word	0x05fa0004

08003a20 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a20:	2280      	movs	r2, #128	@ 0x80
 8003a22:	1e43      	subs	r3, r0, #1
 8003a24:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a26:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d20e      	bcs.n	8003a4a <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a2c:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a2e:	4a07      	ldr	r2, [pc, #28]	@ (8003a4c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a30:	4807      	ldr	r0, [pc, #28]	@ (8003a50 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a32:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a34:	6a03      	ldr	r3, [r0, #32]
 8003a36:	0609      	lsls	r1, r1, #24
 8003a38:	021b      	lsls	r3, r3, #8
 8003a3a:	0a1b      	lsrs	r3, r3, #8
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a40:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a42:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a44:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a46:	3307      	adds	r3, #7
 8003a48:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003a4a:	4770      	bx	lr
 8003a4c:	e000e010 	.word	0xe000e010
 8003a50:	e000ed00 	.word	0xe000ed00

08003a54 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003a54:	4770      	bx	lr
 8003a56:	46c0      	nop			@ (mov r8, r8)

08003a58 <HAL_SYSTICK_IRQHandler>:
{
 8003a58:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8003a5a:	f7ff fffb 	bl	8003a54 <HAL_SYSTICK_Callback>
}
 8003a5e:	bd10      	pop	{r4, pc}

08003a60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a60:	b570      	push	{r4, r5, r6, lr}
 8003a62:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003a64:	d027      	beq.n	8003ab6 <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a66:	2521      	movs	r5, #33	@ 0x21
 8003a68:	2302      	movs	r3, #2
 8003a6a:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a6c:	6800      	ldr	r0, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a6e:	4b13      	ldr	r3, [pc, #76]	@ (8003abc <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8003a70:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a72:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a74:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8003a76:	6863      	ldr	r3, [r4, #4]
 8003a78:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a7a:	68e1      	ldr	r1, [r4, #12]
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	6921      	ldr	r1, [r4, #16]
 8003a80:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a82:	6961      	ldr	r1, [r4, #20]
 8003a84:	430b      	orrs	r3, r1
 8003a86:	69a1      	ldr	r1, [r4, #24]
 8003a88:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a8a:	69e1      	ldr	r1, [r4, #28]
 8003a8c:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8003a8e:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a90:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a92:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac0 <HAL_DMA_Init+0x60>)
 8003a94:	2114      	movs	r1, #20
 8003a96:	469c      	mov	ip, r3
 8003a98:	4460      	add	r0, ip
 8003a9a:	f7fc fb35 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003a9e:	4b09      	ldr	r3, [pc, #36]	@ (8003ac4 <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 8003aa0:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8003aa2:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aa4:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003aa6:	0080      	lsls	r0, r0, #2
 8003aa8:	6420      	str	r0, [r4, #64]	@ 0x40
  return HAL_OK;
 8003aaa:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aac:	63a3      	str	r3, [r4, #56]	@ 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8003aae:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8003ab0:	321f      	adds	r2, #31
 8003ab2:	54a3      	strb	r3, [r4, r2]
}
 8003ab4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003ab6:	2001      	movs	r0, #1
 8003ab8:	e7fc      	b.n	8003ab4 <HAL_DMA_Init+0x54>
 8003aba:	46c0      	nop			@ (mov r8, r8)
 8003abc:	ffffc00f 	.word	0xffffc00f
 8003ac0:	bffdfff8 	.word	0xbffdfff8
 8003ac4:	40020000 	.word	0x40020000

08003ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aca:	46de      	mov	lr, fp
 8003acc:	4657      	mov	r7, sl
 8003ace:	464e      	mov	r6, r9
 8003ad0:	4645      	mov	r5, r8
 8003ad2:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ad4:	680c      	ldr	r4, [r1, #0]
  uint32_t position = 0x00u;
 8003ad6:	2300      	movs	r3, #0
{
 8003ad8:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ada:	2c00      	cmp	r4, #0
 8003adc:	d06e      	beq.n	8003bbc <HAL_GPIO_Init+0xf4>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ade:	4a70      	ldr	r2, [pc, #448]	@ (8003ca0 <HAL_GPIO_Init+0x1d8>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ae0:	4e70      	ldr	r6, [pc, #448]	@ (8003ca4 <HAL_GPIO_Init+0x1dc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ae2:	4693      	mov	fp, r2
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ae4:	9102      	str	r1, [sp, #8]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	4694      	mov	ip, r2
 8003aec:	4022      	ands	r2, r4
 8003aee:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8003af0:	4662      	mov	r2, ip
 8003af2:	4214      	tst	r4, r2
 8003af4:	d05e      	beq.n	8003bb4 <HAL_GPIO_Init+0xec>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003af6:	9902      	ldr	r1, [sp, #8]
 8003af8:	005d      	lsls	r5, r3, #1
 8003afa:	684a      	ldr	r2, [r1, #4]
 8003afc:	4692      	mov	sl, r2
 8003afe:	2203      	movs	r2, #3
 8003b00:	4651      	mov	r1, sl
 8003b02:	400a      	ands	r2, r1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003b04:	2103      	movs	r1, #3
 8003b06:	40a9      	lsls	r1, r5
 8003b08:	43c9      	mvns	r1, r1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b0a:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003b0c:	9101      	str	r1, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b0e:	2f01      	cmp	r7, #1
 8003b10:	d95b      	bls.n	8003bca <HAL_GPIO_Init+0x102>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b12:	2a03      	cmp	r2, #3
 8003b14:	d000      	beq.n	8003b18 <HAL_GPIO_Init+0x50>
 8003b16:	e0ae      	b.n	8003c76 <HAL_GPIO_Init+0x1ae>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b18:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 8003b1a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003b1c:	9901      	ldr	r1, [sp, #4]
 8003b1e:	4039      	ands	r1, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b20:	430a      	orrs	r2, r1
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b22:	21c0      	movs	r1, #192	@ 0xc0
      GPIOx->MODER = temp;
 8003b24:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b26:	4652      	mov	r2, sl
 8003b28:	0289      	lsls	r1, r1, #10
 8003b2a:	420a      	tst	r2, r1
 8003b2c:	d042      	beq.n	8003bb4 <HAL_GPIO_Init+0xec>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b2e:	465a      	mov	r2, fp
 8003b30:	2101      	movs	r1, #1
 8003b32:	465d      	mov	r5, fp
 8003b34:	6992      	ldr	r2, [r2, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b36:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	61aa      	str	r2, [r5, #24]
 8003b3c:	69aa      	ldr	r2, [r5, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b3e:	2503      	movs	r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b40:	400a      	ands	r2, r1
 8003b42:	4959      	ldr	r1, [pc, #356]	@ (8003ca8 <HAL_GPIO_Init+0x1e0>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b44:	401d      	ands	r5, r3
 8003b46:	468c      	mov	ip, r1
 8003b48:	00ad      	lsls	r5, r5, #2
 8003b4a:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b4c:	9205      	str	r2, [sp, #20]
 8003b4e:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003b50:	089a      	lsrs	r2, r3, #2
 8003b52:	0092      	lsls	r2, r2, #2
 8003b54:	4462      	add	r2, ip
 8003b56:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b58:	43b9      	bics	r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b5a:	2790      	movs	r7, #144	@ 0x90
 8003b5c:	05ff      	lsls	r7, r7, #23
 8003b5e:	42b8      	cmp	r0, r7
 8003b60:	d00a      	beq.n	8003b78 <HAL_GPIO_Init+0xb0>
 8003b62:	4f52      	ldr	r7, [pc, #328]	@ (8003cac <HAL_GPIO_Init+0x1e4>)
 8003b64:	42b8      	cmp	r0, r7
 8003b66:	d100      	bne.n	8003b6a <HAL_GPIO_Init+0xa2>
 8003b68:	e092      	b.n	8003c90 <HAL_GPIO_Init+0x1c8>
 8003b6a:	4f51      	ldr	r7, [pc, #324]	@ (8003cb0 <HAL_GPIO_Init+0x1e8>)
 8003b6c:	42b8      	cmp	r0, r7
 8003b6e:	d100      	bne.n	8003b72 <HAL_GPIO_Init+0xaa>
 8003b70:	e092      	b.n	8003c98 <HAL_GPIO_Init+0x1d0>
 8003b72:	2705      	movs	r7, #5
 8003b74:	40af      	lsls	r7, r5
 8003b76:	4339      	orrs	r1, r7
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b78:	2780      	movs	r7, #128	@ 0x80
 8003b7a:	4655      	mov	r5, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b7c:	6091      	str	r1, [r2, #8]
        temp &= ~(iocurrent);
 8003b7e:	9900      	ldr	r1, [sp, #0]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b80:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8003b82:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR;
 8003b84:	68b2      	ldr	r2, [r6, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b86:	423d      	tst	r5, r7
 8003b88:	d000      	beq.n	8003b8c <HAL_GPIO_Init+0xc4>
 8003b8a:	e071      	b.n	8003c70 <HAL_GPIO_Init+0x1a8>
        temp &= ~(iocurrent);
 8003b8c:	400a      	ands	r2, r1
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b8e:	4655      	mov	r5, sl
        EXTI->RTSR = temp;
 8003b90:	60b2      	str	r2, [r6, #8]
        temp = EXTI->FTSR;
 8003b92:	68f2      	ldr	r2, [r6, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b94:	02ad      	lsls	r5, r5, #10
 8003b96:	d468      	bmi.n	8003c6a <HAL_GPIO_Init+0x1a2>
        temp &= ~(iocurrent);
 8003b98:	400a      	ands	r2, r1
        EXTI->FTSR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b9a:	4655      	mov	r5, sl
        EXTI->FTSR = temp;
 8003b9c:	60f2      	str	r2, [r6, #12]
        temp = EXTI->EMR;
 8003b9e:	6872      	ldr	r2, [r6, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ba0:	03ad      	lsls	r5, r5, #14
 8003ba2:	d45f      	bmi.n	8003c64 <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 8003ba4:	400a      	ands	r2, r1
        }
        EXTI->EMR = temp;

        temp = EXTI->IMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ba6:	4655      	mov	r5, sl
        EXTI->EMR = temp;
 8003ba8:	6072      	str	r2, [r6, #4]
        temp = EXTI->IMR;
 8003baa:	6832      	ldr	r2, [r6, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bac:	03ed      	lsls	r5, r5, #15
 8003bae:	d455      	bmi.n	8003c5c <HAL_GPIO_Init+0x194>
        temp &= ~(iocurrent);
 8003bb0:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8003bb2:	6032      	str	r2, [r6, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bb4:	0022      	movs	r2, r4
      }
    }

    position++;
 8003bb6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bb8:	40da      	lsrs	r2, r3
 8003bba:	d194      	bne.n	8003ae6 <HAL_GPIO_Init+0x1e>
  } 
}
 8003bbc:	b007      	add	sp, #28
 8003bbe:	bcf0      	pop	{r4, r5, r6, r7}
 8003bc0:	46bb      	mov	fp, r7
 8003bc2:	46b2      	mov	sl, r6
 8003bc4:	46a9      	mov	r9, r5
 8003bc6:	46a0      	mov	r8, r4
 8003bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8003bca:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003bcc:	000f      	movs	r7, r1
 8003bce:	9901      	ldr	r1, [sp, #4]
 8003bd0:	400f      	ands	r7, r1
 8003bd2:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bd4:	9f02      	ldr	r7, [sp, #8]
 8003bd6:	68f9      	ldr	r1, [r7, #12]
 8003bd8:	000f      	movs	r7, r1
 8003bda:	40af      	lsls	r7, r5
 8003bdc:	46b8      	mov	r8, r7
 8003bde:	464f      	mov	r7, r9
 8003be0:	4641      	mov	r1, r8
 8003be2:	430f      	orrs	r7, r1
        GPIOx->OSPEEDR = temp;
 8003be4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003be6:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003be8:	000f      	movs	r7, r1
 8003bea:	4661      	mov	r1, ip
 8003bec:	438f      	bics	r7, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bee:	4651      	mov	r1, sl
 8003bf0:	0909      	lsrs	r1, r1, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bf2:	46b8      	mov	r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bf4:	000f      	movs	r7, r1
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	400f      	ands	r7, r1
 8003bfa:	409f      	lsls	r7, r3
 8003bfc:	46bc      	mov	ip, r7
 8003bfe:	4647      	mov	r7, r8
 8003c00:	4661      	mov	r1, ip
 8003c02:	430f      	orrs	r7, r1
        GPIOx->OTYPER = temp;
 8003c04:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003c06:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c08:	000f      	movs	r7, r1
 8003c0a:	9901      	ldr	r1, [sp, #4]
 8003c0c:	400f      	ands	r7, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c0e:	9902      	ldr	r1, [sp, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c10:	46b8      	mov	r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c12:	6889      	ldr	r1, [r1, #8]
 8003c14:	000f      	movs	r7, r1
 8003c16:	40af      	lsls	r7, r5
 8003c18:	46bc      	mov	ip, r7
 8003c1a:	4647      	mov	r7, r8
 8003c1c:	4661      	mov	r1, ip
 8003c1e:	430f      	orrs	r7, r1
        GPIOx->PUPDR = temp;
 8003c20:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c22:	2a02      	cmp	r2, #2
 8003c24:	d000      	beq.n	8003c28 <HAL_GPIO_Init+0x160>
 8003c26:	e777      	b.n	8003b18 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3u];
 8003c28:	08d9      	lsrs	r1, r3, #3
 8003c2a:	0089      	lsls	r1, r1, #2
 8003c2c:	468c      	mov	ip, r1
 8003c2e:	4484      	add	ip, r0
 8003c30:	4661      	mov	r1, ip
 8003c32:	6a0f      	ldr	r7, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c34:	2107      	movs	r1, #7
 8003c36:	4019      	ands	r1, r3
 8003c38:	0089      	lsls	r1, r1, #2
 8003c3a:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 8003c3c:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c3e:	210f      	movs	r1, #15
 8003c40:	4647      	mov	r7, r8
 8003c42:	40b9      	lsls	r1, r7
 8003c44:	9f03      	ldr	r7, [sp, #12]
 8003c46:	438f      	bics	r7, r1
 8003c48:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c4a:	4647      	mov	r7, r8
 8003c4c:	9902      	ldr	r1, [sp, #8]
 8003c4e:	6909      	ldr	r1, [r1, #16]
 8003c50:	40b9      	lsls	r1, r7
 8003c52:	9f03      	ldr	r7, [sp, #12]
 8003c54:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8003c56:	4661      	mov	r1, ip
 8003c58:	620f      	str	r7, [r1, #32]
 8003c5a:	e75d      	b.n	8003b18 <HAL_GPIO_Init+0x50>
          temp |= iocurrent;
 8003c5c:	9900      	ldr	r1, [sp, #0]
 8003c5e:	4311      	orrs	r1, r2
 8003c60:	000a      	movs	r2, r1
 8003c62:	e7a6      	b.n	8003bb2 <HAL_GPIO_Init+0xea>
          temp |= iocurrent;
 8003c64:	9d00      	ldr	r5, [sp, #0]
 8003c66:	432a      	orrs	r2, r5
 8003c68:	e79d      	b.n	8003ba6 <HAL_GPIO_Init+0xde>
          temp |= iocurrent;
 8003c6a:	9d00      	ldr	r5, [sp, #0]
 8003c6c:	432a      	orrs	r2, r5
 8003c6e:	e794      	b.n	8003b9a <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 8003c70:	9d00      	ldr	r5, [sp, #0]
 8003c72:	432a      	orrs	r2, r5
 8003c74:	e78b      	b.n	8003b8e <HAL_GPIO_Init+0xc6>
 8003c76:	000f      	movs	r7, r1
        temp = GPIOx->PUPDR;
 8003c78:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c7a:	4039      	ands	r1, r7
 8003c7c:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c7e:	9902      	ldr	r1, [sp, #8]
 8003c80:	6889      	ldr	r1, [r1, #8]
 8003c82:	40a9      	lsls	r1, r5
 8003c84:	468c      	mov	ip, r1
 8003c86:	4641      	mov	r1, r8
 8003c88:	4667      	mov	r7, ip
 8003c8a:	4339      	orrs	r1, r7
        GPIOx->PUPDR = temp;
 8003c8c:	60c1      	str	r1, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c8e:	e743      	b.n	8003b18 <HAL_GPIO_Init+0x50>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c90:	2701      	movs	r7, #1
 8003c92:	40af      	lsls	r7, r5
 8003c94:	4339      	orrs	r1, r7
 8003c96:	e76f      	b.n	8003b78 <HAL_GPIO_Init+0xb0>
 8003c98:	2702      	movs	r7, #2
 8003c9a:	40af      	lsls	r7, r5
 8003c9c:	4339      	orrs	r1, r7
 8003c9e:	e76b      	b.n	8003b78 <HAL_GPIO_Init+0xb0>
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40010400 	.word	0x40010400
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	48000400 	.word	0x48000400
 8003cb0:	48000800 	.word	0x48000800

08003cb4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cb4:	2a00      	cmp	r2, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cb8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cba:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cbc:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8003cbe:	e7fc      	b.n	8003cba <HAL_GPIO_WritePin+0x6>

08003cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cc2:	46ce      	mov	lr, r9
 8003cc4:	4647      	mov	r7, r8
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	0004      	movs	r4, r0
 8003cca:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	d100      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x12>
 8003cd0:	e0f2      	b.n	8003eb8 <HAL_RCC_OscConfig+0x1f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd2:	6803      	ldr	r3, [r0, #0]
 8003cd4:	07da      	lsls	r2, r3, #31
 8003cd6:	d535      	bpl.n	8003d44 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003cd8:	210c      	movs	r1, #12
 8003cda:	48c3      	ldr	r0, [pc, #780]	@ (8003fe8 <HAL_RCC_OscConfig+0x328>)
 8003cdc:	6842      	ldr	r2, [r0, #4]
 8003cde:	400a      	ands	r2, r1
 8003ce0:	2a04      	cmp	r2, #4
 8003ce2:	d100      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x26>
 8003ce4:	e101      	b.n	8003eea <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ce6:	6842      	ldr	r2, [r0, #4]
 8003ce8:	4011      	ands	r1, r2
 8003cea:	2908      	cmp	r1, #8
 8003cec:	d100      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x30>
 8003cee:	e0f8      	b.n	8003ee2 <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cf0:	6863      	ldr	r3, [r4, #4]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d00f      	beq.n	8003d16 <HAL_RCC_OscConfig+0x56>
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d100      	bne.n	8003cfc <HAL_RCC_OscConfig+0x3c>
 8003cfa:	e11e      	b.n	8003f3a <HAL_RCC_OscConfig+0x27a>
 8003cfc:	2b05      	cmp	r3, #5
 8003cfe:	d100      	bne.n	8003d02 <HAL_RCC_OscConfig+0x42>
 8003d00:	e1a7      	b.n	8004052 <HAL_RCC_OscConfig+0x392>
 8003d02:	4bb9      	ldr	r3, [pc, #740]	@ (8003fe8 <HAL_RCC_OscConfig+0x328>)
 8003d04:	49b9      	ldr	r1, [pc, #740]	@ (8003fec <HAL_RCC_OscConfig+0x32c>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	400a      	ands	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	49b8      	ldr	r1, [pc, #736]	@ (8003ff0 <HAL_RCC_OscConfig+0x330>)
 8003d10:	400a      	ands	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d14:	e005      	b.n	8003d22 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d16:	2380      	movs	r3, #128	@ 0x80
 8003d18:	4ab3      	ldr	r2, [pc, #716]	@ (8003fe8 <HAL_RCC_OscConfig+0x328>)
 8003d1a:	025b      	lsls	r3, r3, #9
 8003d1c:	6811      	ldr	r1, [r2, #0]
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d22:	f7ff fcff 	bl	8003724 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d26:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003d28:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2a:	4faf      	ldr	r7, [pc, #700]	@ (8003fe8 <HAL_RCC_OscConfig+0x328>)
 8003d2c:	02b6      	lsls	r6, r6, #10
 8003d2e:	e005      	b.n	8003d3c <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d30:	f7ff fcf8 	bl	8003724 <HAL_GetTick>
 8003d34:	1b40      	subs	r0, r0, r5
 8003d36:	2864      	cmp	r0, #100	@ 0x64
 8003d38:	d900      	bls.n	8003d3c <HAL_RCC_OscConfig+0x7c>
 8003d3a:	e0fc      	b.n	8003f36 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	4233      	tst	r3, r6
 8003d40:	d0f6      	beq.n	8003d30 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	079a      	lsls	r2, r3, #30
 8003d46:	d529      	bpl.n	8003d9c <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d48:	220c      	movs	r2, #12
 8003d4a:	49a7      	ldr	r1, [pc, #668]	@ (8003fe8 <HAL_RCC_OscConfig+0x328>)
 8003d4c:	6848      	ldr	r0, [r1, #4]
 8003d4e:	4202      	tst	r2, r0
 8003d50:	d100      	bne.n	8003d54 <HAL_RCC_OscConfig+0x94>
 8003d52:	e0aa      	b.n	8003eaa <HAL_RCC_OscConfig+0x1ea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d54:	6848      	ldr	r0, [r1, #4]
 8003d56:	4002      	ands	r2, r0
 8003d58:	2a08      	cmp	r2, #8
 8003d5a:	d100      	bne.n	8003d5e <HAL_RCC_OscConfig+0x9e>
 8003d5c:	e0a1      	b.n	8003ea2 <HAL_RCC_OscConfig+0x1e2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d5e:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d60:	4da1      	ldr	r5, [pc, #644]	@ (8003fe8 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d100      	bne.n	8003d68 <HAL_RCC_OscConfig+0xa8>
 8003d66:	e11f      	b.n	8003fa8 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8003d68:	2201      	movs	r2, #1
 8003d6a:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6c:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003d72:	f7ff fcd7 	bl	8003724 <HAL_GetTick>
 8003d76:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d78:	e005      	b.n	8003d86 <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d7a:	f7ff fcd3 	bl	8003724 <HAL_GetTick>
 8003d7e:	1b80      	subs	r0, r0, r6
 8003d80:	2802      	cmp	r0, #2
 8003d82:	d900      	bls.n	8003d86 <HAL_RCC_OscConfig+0xc6>
 8003d84:	e0d7      	b.n	8003f36 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d86:	682b      	ldr	r3, [r5, #0]
 8003d88:	421f      	tst	r7, r3
 8003d8a:	d0f6      	beq.n	8003d7a <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8c:	21f8      	movs	r1, #248	@ 0xf8
 8003d8e:	682a      	ldr	r2, [r5, #0]
 8003d90:	6923      	ldr	r3, [r4, #16]
 8003d92:	438a      	bics	r2, r1
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	4313      	orrs	r3, r2
 8003d98:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	071a      	lsls	r2, r3, #28
 8003d9e:	d42d      	bmi.n	8003dfc <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da0:	075a      	lsls	r2, r3, #29
 8003da2:	d544      	bpl.n	8003e2e <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da4:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003da6:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da8:	4b8f      	ldr	r3, [pc, #572]	@ (8003fe8 <HAL_RCC_OscConfig+0x328>)
 8003daa:	0552      	lsls	r2, r2, #21
 8003dac:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003dae:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003db0:	4211      	tst	r1, r2
 8003db2:	d108      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db4:	69d9      	ldr	r1, [r3, #28]
 8003db6:	4311      	orrs	r1, r2
 8003db8:	61d9      	str	r1, [r3, #28]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	9301      	str	r3, [sp, #4]
 8003dc0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc6:	2780      	movs	r7, #128	@ 0x80
 8003dc8:	4e8a      	ldr	r6, [pc, #552]	@ (8003ff4 <HAL_RCC_OscConfig+0x334>)
 8003dca:	007f      	lsls	r7, r7, #1
 8003dcc:	6833      	ldr	r3, [r6, #0]
 8003dce:	423b      	tst	r3, r7
 8003dd0:	d100      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x114>
 8003dd2:	e094      	b.n	8003efe <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd4:	68a3      	ldr	r3, [r4, #8]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d100      	bne.n	8003ddc <HAL_RCC_OscConfig+0x11c>
 8003dda:	e0f8      	b.n	8003fce <HAL_RCC_OscConfig+0x30e>
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d100      	bne.n	8003de2 <HAL_RCC_OscConfig+0x122>
 8003de0:	e0c4      	b.n	8003f6c <HAL_RCC_OscConfig+0x2ac>
 8003de2:	2b05      	cmp	r3, #5
 8003de4:	d100      	bne.n	8003de8 <HAL_RCC_OscConfig+0x128>
 8003de6:	e140      	b.n	800406a <HAL_RCC_OscConfig+0x3aa>
 8003de8:	2101      	movs	r1, #1
 8003dea:	4b7f      	ldr	r3, [pc, #508]	@ (8003fe8 <HAL_RCC_OscConfig+0x328>)
 8003dec:	6a1a      	ldr	r2, [r3, #32]
 8003dee:	438a      	bics	r2, r1
 8003df0:	621a      	str	r2, [r3, #32]
 8003df2:	6a1a      	ldr	r2, [r3, #32]
 8003df4:	3103      	adds	r1, #3
 8003df6:	438a      	bics	r2, r1
 8003df8:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dfa:	e0ec      	b.n	8003fd6 <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dfc:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8003dfe:	4d7a      	ldr	r5, [pc, #488]	@ (8003fe8 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d05b      	beq.n	8003ebc <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8003e04:	2201      	movs	r2, #1
 8003e06:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e08:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8003e0e:	f7ff fc89 	bl	8003724 <HAL_GetTick>
 8003e12:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e14:	e005      	b.n	8003e22 <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e16:	f7ff fc85 	bl	8003724 <HAL_GetTick>
 8003e1a:	1b80      	subs	r0, r0, r6
 8003e1c:	2802      	cmp	r0, #2
 8003e1e:	d900      	bls.n	8003e22 <HAL_RCC_OscConfig+0x162>
 8003e20:	e089      	b.n	8003f36 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e22:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003e24:	421f      	tst	r7, r3
 8003e26:	d0f6      	beq.n	8003e16 <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	075a      	lsls	r2, r3, #29
 8003e2c:	d4ba      	bmi.n	8003da4 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003e2e:	06db      	lsls	r3, r3, #27
 8003e30:	d512      	bpl.n	8003e58 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003e32:	6963      	ldr	r3, [r4, #20]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d100      	bne.n	8003e3a <HAL_RCC_OscConfig+0x17a>
 8003e38:	e13c      	b.n	80040b4 <HAL_RCC_OscConfig+0x3f4>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003e3a:	3305      	adds	r3, #5
 8003e3c:	d000      	beq.n	8003e40 <HAL_RCC_OscConfig+0x180>
 8003e3e:	e0e9      	b.n	8004014 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003e40:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003e42:	20f8      	movs	r0, #248	@ 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8003e44:	4a68      	ldr	r2, [pc, #416]	@ (8003fe8 <HAL_RCC_OscConfig+0x328>)
 8003e46:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8003e48:	438b      	bics	r3, r1
 8003e4a:	6353      	str	r3, [r2, #52]	@ 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003e4c:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8003e4e:	69a3      	ldr	r3, [r4, #24]
 8003e50:	4381      	bics	r1, r0
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	430b      	orrs	r3, r1
 8003e56:	6353      	str	r3, [r2, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e58:	6a23      	ldr	r3, [r4, #32]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d01b      	beq.n	8003e96 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e5e:	220c      	movs	r2, #12
 8003e60:	4d61      	ldr	r5, [pc, #388]	@ (8003fe8 <HAL_RCC_OscConfig+0x328>)
 8003e62:	6869      	ldr	r1, [r5, #4]
 8003e64:	400a      	ands	r2, r1
 8003e66:	2a08      	cmp	r2, #8
 8003e68:	d100      	bne.n	8003e6c <HAL_RCC_OscConfig+0x1ac>
 8003e6a:	e108      	b.n	800407e <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d100      	bne.n	8003e72 <HAL_RCC_OscConfig+0x1b2>
 8003e70:	e13e      	b.n	80040f0 <HAL_RCC_OscConfig+0x430>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e72:	682b      	ldr	r3, [r5, #0]
 8003e74:	4a60      	ldr	r2, [pc, #384]	@ (8003ff8 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e76:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8003e78:	4013      	ands	r3, r2
 8003e7a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003e7c:	f7ff fc52 	bl	8003724 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e80:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8003e82:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e84:	e004      	b.n	8003e90 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e86:	f7ff fc4d 	bl	8003724 <HAL_GetTick>
 8003e8a:	1b00      	subs	r0, r0, r4
 8003e8c:	2802      	cmp	r0, #2
 8003e8e:	d852      	bhi.n	8003f36 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e90:	682b      	ldr	r3, [r5, #0]
 8003e92:	4233      	tst	r3, r6
 8003e94:	d1f7      	bne.n	8003e86 <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 8003e96:	2000      	movs	r0, #0
}
 8003e98:	b003      	add	sp, #12
 8003e9a:	bcc0      	pop	{r6, r7}
 8003e9c:	46b9      	mov	r9, r7
 8003e9e:	46b0      	mov	r8, r6
 8003ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ea2:	684a      	ldr	r2, [r1, #4]
 8003ea4:	03d2      	lsls	r2, r2, #15
 8003ea6:	d500      	bpl.n	8003eaa <HAL_RCC_OscConfig+0x1ea>
 8003ea8:	e759      	b.n	8003d5e <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eaa:	4a4f      	ldr	r2, [pc, #316]	@ (8003fe8 <HAL_RCC_OscConfig+0x328>)
 8003eac:	6812      	ldr	r2, [r2, #0]
 8003eae:	0792      	lsls	r2, r2, #30
 8003eb0:	d535      	bpl.n	8003f1e <HAL_RCC_OscConfig+0x25e>
 8003eb2:	68e2      	ldr	r2, [r4, #12]
 8003eb4:	2a01      	cmp	r2, #1
 8003eb6:	d032      	beq.n	8003f1e <HAL_RCC_OscConfig+0x25e>
    return HAL_ERROR;
 8003eb8:	2001      	movs	r0, #1
 8003eba:	e7ed      	b.n	8003e98 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_LSI_DISABLE();
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec0:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8003ec2:	4393      	bics	r3, r2
 8003ec4:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8003ec6:	f7ff fc2d 	bl	8003724 <HAL_GetTick>
 8003eca:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ecc:	e004      	b.n	8003ed8 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ece:	f7ff fc29 	bl	8003724 <HAL_GetTick>
 8003ed2:	1b80      	subs	r0, r0, r6
 8003ed4:	2802      	cmp	r0, #2
 8003ed6:	d82e      	bhi.n	8003f36 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003eda:	421f      	tst	r7, r3
 8003edc:	d1f7      	bne.n	8003ece <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	e7a3      	b.n	8003e2a <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ee2:	6842      	ldr	r2, [r0, #4]
 8003ee4:	03d2      	lsls	r2, r2, #15
 8003ee6:	d400      	bmi.n	8003eea <HAL_RCC_OscConfig+0x22a>
 8003ee8:	e702      	b.n	8003cf0 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eea:	4a3f      	ldr	r2, [pc, #252]	@ (8003fe8 <HAL_RCC_OscConfig+0x328>)
 8003eec:	6812      	ldr	r2, [r2, #0]
 8003eee:	0392      	lsls	r2, r2, #14
 8003ef0:	d400      	bmi.n	8003ef4 <HAL_RCC_OscConfig+0x234>
 8003ef2:	e727      	b.n	8003d44 <HAL_RCC_OscConfig+0x84>
 8003ef4:	6862      	ldr	r2, [r4, #4]
 8003ef6:	2a00      	cmp	r2, #0
 8003ef8:	d000      	beq.n	8003efc <HAL_RCC_OscConfig+0x23c>
 8003efa:	e723      	b.n	8003d44 <HAL_RCC_OscConfig+0x84>
 8003efc:	e7dc      	b.n	8003eb8 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003efe:	6833      	ldr	r3, [r6, #0]
 8003f00:	433b      	orrs	r3, r7
 8003f02:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003f04:	f7ff fc0e 	bl	8003724 <HAL_GetTick>
 8003f08:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0a:	e004      	b.n	8003f16 <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0c:	f7ff fc0a 	bl	8003724 <HAL_GetTick>
 8003f10:	1b40      	subs	r0, r0, r5
 8003f12:	2864      	cmp	r0, #100	@ 0x64
 8003f14:	d80f      	bhi.n	8003f36 <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f16:	6833      	ldr	r3, [r6, #0]
 8003f18:	423b      	tst	r3, r7
 8003f1a:	d0f7      	beq.n	8003f0c <HAL_RCC_OscConfig+0x24c>
 8003f1c:	e75a      	b.n	8003dd4 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f1e:	25f8      	movs	r5, #248	@ 0xf8
 8003f20:	4831      	ldr	r0, [pc, #196]	@ (8003fe8 <HAL_RCC_OscConfig+0x328>)
 8003f22:	6922      	ldr	r2, [r4, #16]
 8003f24:	6801      	ldr	r1, [r0, #0]
 8003f26:	00d2      	lsls	r2, r2, #3
 8003f28:	43a9      	bics	r1, r5
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f2e:	071a      	lsls	r2, r3, #28
 8003f30:	d400      	bmi.n	8003f34 <HAL_RCC_OscConfig+0x274>
 8003f32:	e735      	b.n	8003da0 <HAL_RCC_OscConfig+0xe0>
 8003f34:	e762      	b.n	8003dfc <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 8003f36:	2003      	movs	r0, #3
 8003f38:	e7ae      	b.n	8003e98 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f3a:	4d2b      	ldr	r5, [pc, #172]	@ (8003fe8 <HAL_RCC_OscConfig+0x328>)
 8003f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8003fec <HAL_RCC_OscConfig+0x32c>)
 8003f3e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f40:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f42:	4013      	ands	r3, r2
 8003f44:	602b      	str	r3, [r5, #0]
 8003f46:	682b      	ldr	r3, [r5, #0]
 8003f48:	4a29      	ldr	r2, [pc, #164]	@ (8003ff0 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f4a:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003f50:	f7ff fbe8 	bl	8003724 <HAL_GetTick>
 8003f54:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f56:	e004      	b.n	8003f62 <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f58:	f7ff fbe4 	bl	8003724 <HAL_GetTick>
 8003f5c:	1b80      	subs	r0, r0, r6
 8003f5e:	2864      	cmp	r0, #100	@ 0x64
 8003f60:	d8e9      	bhi.n	8003f36 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f62:	682b      	ldr	r3, [r5, #0]
 8003f64:	423b      	tst	r3, r7
 8003f66:	d1f7      	bne.n	8003f58 <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	e6eb      	b.n	8003d44 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	4e1e      	ldr	r6, [pc, #120]	@ (8003fe8 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f70:	4d22      	ldr	r5, [pc, #136]	@ (8003ffc <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f72:	6a33      	ldr	r3, [r6, #32]
 8003f74:	4393      	bics	r3, r2
 8003f76:	6233      	str	r3, [r6, #32]
 8003f78:	6a33      	ldr	r3, [r6, #32]
 8003f7a:	3203      	adds	r2, #3
 8003f7c:	4393      	bics	r3, r2
 8003f7e:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8003f80:	f7ff fbd0 	bl	8003724 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f84:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8003f86:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f88:	4698      	mov	r8, r3
 8003f8a:	e004      	b.n	8003f96 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f8c:	f7ff fbca 	bl	8003724 <HAL_GetTick>
 8003f90:	1bc0      	subs	r0, r0, r7
 8003f92:	42a8      	cmp	r0, r5
 8003f94:	d8cf      	bhi.n	8003f36 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f96:	4642      	mov	r2, r8
 8003f98:	6a33      	ldr	r3, [r6, #32]
 8003f9a:	421a      	tst	r2, r3
 8003f9c:	d1f6      	bne.n	8003f8c <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8003f9e:	464b      	mov	r3, r9
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d04f      	beq.n	8004044 <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	e742      	b.n	8003e2e <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8003fa8:	2201      	movs	r2, #1
 8003faa:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fac:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8003fae:	4393      	bics	r3, r2
 8003fb0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003fb2:	f7ff fbb7 	bl	8003724 <HAL_GetTick>
 8003fb6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb8:	e004      	b.n	8003fc4 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fba:	f7ff fbb3 	bl	8003724 <HAL_GetTick>
 8003fbe:	1b80      	subs	r0, r0, r6
 8003fc0:	2802      	cmp	r0, #2
 8003fc2:	d8b8      	bhi.n	8003f36 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fc4:	682b      	ldr	r3, [r5, #0]
 8003fc6:	421f      	tst	r7, r3
 8003fc8:	d1f7      	bne.n	8003fba <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	e6e6      	b.n	8003d9c <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fce:	4906      	ldr	r1, [pc, #24]	@ (8003fe8 <HAL_RCC_OscConfig+0x328>)
 8003fd0:	6a0a      	ldr	r2, [r1, #32]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8003fd6:	f7ff fba5 	bl	8003724 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fda:	4b03      	ldr	r3, [pc, #12]	@ (8003fe8 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8003fdc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fde:	4698      	mov	r8, r3
 8003fe0:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe2:	4d06      	ldr	r5, [pc, #24]	@ (8003ffc <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe4:	e011      	b.n	800400a <HAL_RCC_OscConfig+0x34a>
 8003fe6:	46c0      	nop			@ (mov r8, r8)
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	fffeffff 	.word	0xfffeffff
 8003ff0:	fffbffff 	.word	0xfffbffff
 8003ff4:	40007000 	.word	0x40007000
 8003ff8:	feffffff 	.word	0xfeffffff
 8003ffc:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004000:	f7ff fb90 	bl	8003724 <HAL_GetTick>
 8004004:	1b80      	subs	r0, r0, r6
 8004006:	42a8      	cmp	r0, r5
 8004008:	d895      	bhi.n	8003f36 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400a:	4643      	mov	r3, r8
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	421f      	tst	r7, r3
 8004010:	d0f6      	beq.n	8004000 <HAL_RCC_OscConfig+0x340>
 8004012:	e7c4      	b.n	8003f9e <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8004014:	2204      	movs	r2, #4
 8004016:	4d52      	ldr	r5, [pc, #328]	@ (8004160 <HAL_RCC_OscConfig+0x4a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004018:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800401a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800401c:	4313      	orrs	r3, r2
 800401e:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8004020:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8004022:	3a03      	subs	r2, #3
 8004024:	4393      	bics	r3, r2
 8004026:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8004028:	f7ff fb7c 	bl	8003724 <HAL_GetTick>
 800402c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800402e:	e005      	b.n	800403c <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004030:	f7ff fb78 	bl	8003724 <HAL_GetTick>
 8004034:	1b80      	subs	r0, r0, r6
 8004036:	2802      	cmp	r0, #2
 8004038:	d900      	bls.n	800403c <HAL_RCC_OscConfig+0x37c>
 800403a:	e77c      	b.n	8003f36 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800403c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800403e:	421f      	tst	r7, r3
 8004040:	d1f6      	bne.n	8004030 <HAL_RCC_OscConfig+0x370>
 8004042:	e709      	b.n	8003e58 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004044:	4a46      	ldr	r2, [pc, #280]	@ (8004160 <HAL_RCC_OscConfig+0x4a0>)
 8004046:	4947      	ldr	r1, [pc, #284]	@ (8004164 <HAL_RCC_OscConfig+0x4a4>)
 8004048:	69d3      	ldr	r3, [r2, #28]
 800404a:	400b      	ands	r3, r1
 800404c:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	e6ed      	b.n	8003e2e <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004052:	2280      	movs	r2, #128	@ 0x80
 8004054:	4b42      	ldr	r3, [pc, #264]	@ (8004160 <HAL_RCC_OscConfig+0x4a0>)
 8004056:	02d2      	lsls	r2, r2, #11
 8004058:	6819      	ldr	r1, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	2280      	movs	r2, #128	@ 0x80
 8004060:	6819      	ldr	r1, [r3, #0]
 8004062:	0252      	lsls	r2, r2, #9
 8004064:	430a      	orrs	r2, r1
 8004066:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004068:	e65b      	b.n	8003d22 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800406a:	2104      	movs	r1, #4
 800406c:	4b3c      	ldr	r3, [pc, #240]	@ (8004160 <HAL_RCC_OscConfig+0x4a0>)
 800406e:	6a1a      	ldr	r2, [r3, #32]
 8004070:	430a      	orrs	r2, r1
 8004072:	621a      	str	r2, [r3, #32]
 8004074:	6a1a      	ldr	r2, [r3, #32]
 8004076:	3903      	subs	r1, #3
 8004078:	430a      	orrs	r2, r1
 800407a:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800407c:	e7ab      	b.n	8003fd6 <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800407e:	2b01      	cmp	r3, #1
 8004080:	d100      	bne.n	8004084 <HAL_RCC_OscConfig+0x3c4>
 8004082:	e719      	b.n	8003eb8 <HAL_RCC_OscConfig+0x1f8>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004084:	2280      	movs	r2, #128	@ 0x80
        pll_config  = RCC->CFGR;
 8004086:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004088:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800408a:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 800408c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800408e:	401a      	ands	r2, r3
 8004090:	428a      	cmp	r2, r1
 8004092:	d000      	beq.n	8004096 <HAL_RCC_OscConfig+0x3d6>
 8004094:	e710      	b.n	8003eb8 <HAL_RCC_OscConfig+0x1f8>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004096:	220f      	movs	r2, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004098:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800409a:	4002      	ands	r2, r0
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800409c:	428a      	cmp	r2, r1
 800409e:	d000      	beq.n	80040a2 <HAL_RCC_OscConfig+0x3e2>
 80040a0:	e70a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x1f8>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80040a2:	22f0      	movs	r2, #240	@ 0xf0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80040a4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80040a6:	0392      	lsls	r2, r2, #14
 80040a8:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80040aa:	1a18      	subs	r0, r3, r0
 80040ac:	1e43      	subs	r3, r0, #1
 80040ae:	4198      	sbcs	r0, r3
 80040b0:	b2c0      	uxtb	r0, r0
 80040b2:	e6f1      	b.n	8003e98 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_HSI14ADC_DISABLE();
 80040b4:	2104      	movs	r1, #4
 80040b6:	4d2a      	ldr	r5, [pc, #168]	@ (8004160 <HAL_RCC_OscConfig+0x4a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80040b8:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80040ba:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80040bc:	430a      	orrs	r2, r1
 80040be:	636a      	str	r2, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 80040c0:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80040c2:	4313      	orrs	r3, r2
 80040c4:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 80040c6:	f7ff fb2d 	bl	8003724 <HAL_GetTick>
 80040ca:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80040cc:	e005      	b.n	80040da <HAL_RCC_OscConfig+0x41a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80040ce:	f7ff fb29 	bl	8003724 <HAL_GetTick>
 80040d2:	1b80      	subs	r0, r0, r6
 80040d4:	2802      	cmp	r0, #2
 80040d6:	d900      	bls.n	80040da <HAL_RCC_OscConfig+0x41a>
 80040d8:	e72d      	b.n	8003f36 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80040da:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80040dc:	421f      	tst	r7, r3
 80040de:	d0f6      	beq.n	80040ce <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80040e0:	21f8      	movs	r1, #248	@ 0xf8
 80040e2:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80040e4:	69a3      	ldr	r3, [r4, #24]
 80040e6:	438a      	bics	r2, r1
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	4313      	orrs	r3, r2
 80040ec:	636b      	str	r3, [r5, #52]	@ 0x34
 80040ee:	e6b3      	b.n	8003e58 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 80040f0:	682b      	ldr	r3, [r5, #0]
 80040f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004168 <HAL_RCC_OscConfig+0x4a8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040f4:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80040f6:	4013      	ands	r3, r2
 80040f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80040fa:	f7ff fb13 	bl	8003724 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040fe:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8004100:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004102:	e005      	b.n	8004110 <HAL_RCC_OscConfig+0x450>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004104:	f7ff fb0e 	bl	8003724 <HAL_GetTick>
 8004108:	1b80      	subs	r0, r0, r6
 800410a:	2802      	cmp	r0, #2
 800410c:	d900      	bls.n	8004110 <HAL_RCC_OscConfig+0x450>
 800410e:	e712      	b.n	8003f36 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004110:	682b      	ldr	r3, [r5, #0]
 8004112:	423b      	tst	r3, r7
 8004114:	d1f6      	bne.n	8004104 <HAL_RCC_OscConfig+0x444>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004116:	220f      	movs	r2, #15
 8004118:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800411a:	4e11      	ldr	r6, [pc, #68]	@ (8004160 <HAL_RCC_OscConfig+0x4a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800411c:	4393      	bics	r3, r2
 800411e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004120:	4313      	orrs	r3, r2
 8004122:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8004124:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004126:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004128:	686a      	ldr	r2, [r5, #4]
 800412a:	430b      	orrs	r3, r1
 800412c:	490f      	ldr	r1, [pc, #60]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 800412e:	400a      	ands	r2, r1
 8004130:	4313      	orrs	r3, r2
 8004132:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004134:	2380      	movs	r3, #128	@ 0x80
 8004136:	682a      	ldr	r2, [r5, #0]
 8004138:	045b      	lsls	r3, r3, #17
 800413a:	4313      	orrs	r3, r2
 800413c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800413e:	f7ff faf1 	bl	8003724 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004142:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8004144:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004146:	04ad      	lsls	r5, r5, #18
 8004148:	e005      	b.n	8004156 <HAL_RCC_OscConfig+0x496>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800414a:	f7ff faeb 	bl	8003724 <HAL_GetTick>
 800414e:	1b00      	subs	r0, r0, r4
 8004150:	2802      	cmp	r0, #2
 8004152:	d900      	bls.n	8004156 <HAL_RCC_OscConfig+0x496>
 8004154:	e6ef      	b.n	8003f36 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004156:	6833      	ldr	r3, [r6, #0]
 8004158:	422b      	tst	r3, r5
 800415a:	d0f6      	beq.n	800414a <HAL_RCC_OscConfig+0x48a>
 800415c:	e69b      	b.n	8003e96 <HAL_RCC_OscConfig+0x1d6>
 800415e:	46c0      	nop			@ (mov r8, r8)
 8004160:	40021000 	.word	0x40021000
 8004164:	efffffff 	.word	0xefffffff
 8004168:	feffffff 	.word	0xfeffffff
 800416c:	ffc2ffff 	.word	0xffc2ffff

08004170 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004172:	46ce      	mov	lr, r9
 8004174:	4647      	mov	r7, r8
 8004176:	0004      	movs	r4, r0
 8004178:	000d      	movs	r5, r1
 800417a:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800417c:	2800      	cmp	r0, #0
 800417e:	d00d      	beq.n	800419c <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004180:	2301      	movs	r3, #1
 8004182:	494a      	ldr	r1, [pc, #296]	@ (80042ac <HAL_RCC_ClockConfig+0x13c>)
 8004184:	680a      	ldr	r2, [r1, #0]
 8004186:	401a      	ands	r2, r3
 8004188:	42aa      	cmp	r2, r5
 800418a:	d20c      	bcs.n	80041a6 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418c:	680a      	ldr	r2, [r1, #0]
 800418e:	439a      	bics	r2, r3
 8004190:	432a      	orrs	r2, r5
 8004192:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004194:	680a      	ldr	r2, [r1, #0]
 8004196:	4013      	ands	r3, r2
 8004198:	42ab      	cmp	r3, r5
 800419a:	d004      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 800419c:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 800419e:	bcc0      	pop	{r6, r7}
 80041a0:	46b9      	mov	r9, r7
 80041a2:	46b0      	mov	r8, r6
 80041a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	079a      	lsls	r2, r3, #30
 80041aa:	d50e      	bpl.n	80041ca <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	075a      	lsls	r2, r3, #29
 80041ae:	d505      	bpl.n	80041bc <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80041b0:	22e0      	movs	r2, #224	@ 0xe0
 80041b2:	493f      	ldr	r1, [pc, #252]	@ (80042b0 <HAL_RCC_ClockConfig+0x140>)
 80041b4:	00d2      	lsls	r2, r2, #3
 80041b6:	6848      	ldr	r0, [r1, #4]
 80041b8:	4302      	orrs	r2, r0
 80041ba:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041bc:	20f0      	movs	r0, #240	@ 0xf0
 80041be:	493c      	ldr	r1, [pc, #240]	@ (80042b0 <HAL_RCC_ClockConfig+0x140>)
 80041c0:	684a      	ldr	r2, [r1, #4]
 80041c2:	4382      	bics	r2, r0
 80041c4:	68a0      	ldr	r0, [r4, #8]
 80041c6:	4302      	orrs	r2, r0
 80041c8:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ca:	07db      	lsls	r3, r3, #31
 80041cc:	d522      	bpl.n	8004214 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ce:	4b38      	ldr	r3, [pc, #224]	@ (80042b0 <HAL_RCC_ClockConfig+0x140>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d0:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d4:	2a01      	cmp	r2, #1
 80041d6:	d05b      	beq.n	8004290 <HAL_RCC_ClockConfig+0x120>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d8:	2a02      	cmp	r2, #2
 80041da:	d056      	beq.n	800428a <HAL_RCC_ClockConfig+0x11a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041dc:	079b      	lsls	r3, r3, #30
 80041de:	d5dd      	bpl.n	800419c <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041e0:	2103      	movs	r1, #3
 80041e2:	4e33      	ldr	r6, [pc, #204]	@ (80042b0 <HAL_RCC_ClockConfig+0x140>)
 80041e4:	6873      	ldr	r3, [r6, #4]
 80041e6:	438b      	bics	r3, r1
 80041e8:	4313      	orrs	r3, r2
 80041ea:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80041ec:	f7ff fa9a 	bl	8003724 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f0:	230c      	movs	r3, #12
 80041f2:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f4:	4b2f      	ldr	r3, [pc, #188]	@ (80042b4 <HAL_RCC_ClockConfig+0x144>)
    tickstart = HAL_GetTick();
 80041f6:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f8:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fa:	e004      	b.n	8004206 <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041fc:	f7ff fa92 	bl	8003724 <HAL_GetTick>
 8004200:	1bc0      	subs	r0, r0, r7
 8004202:	4548      	cmp	r0, r9
 8004204:	d847      	bhi.n	8004296 <HAL_RCC_ClockConfig+0x126>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004206:	4643      	mov	r3, r8
 8004208:	6872      	ldr	r2, [r6, #4]
 800420a:	401a      	ands	r2, r3
 800420c:	6863      	ldr	r3, [r4, #4]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	429a      	cmp	r2, r3
 8004212:	d1f3      	bne.n	80041fc <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004214:	2101      	movs	r1, #1
 8004216:	4a25      	ldr	r2, [pc, #148]	@ (80042ac <HAL_RCC_ClockConfig+0x13c>)
 8004218:	6813      	ldr	r3, [r2, #0]
 800421a:	400b      	ands	r3, r1
 800421c:	42ab      	cmp	r3, r5
 800421e:	d905      	bls.n	800422c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004220:	6813      	ldr	r3, [r2, #0]
 8004222:	438b      	bics	r3, r1
 8004224:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004226:	6813      	ldr	r3, [r2, #0]
 8004228:	4219      	tst	r1, r3
 800422a:	d1b7      	bne.n	800419c <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	075b      	lsls	r3, r3, #29
 8004230:	d506      	bpl.n	8004240 <HAL_RCC_ClockConfig+0xd0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004232:	4a1f      	ldr	r2, [pc, #124]	@ (80042b0 <HAL_RCC_ClockConfig+0x140>)
 8004234:	4920      	ldr	r1, [pc, #128]	@ (80042b8 <HAL_RCC_ClockConfig+0x148>)
 8004236:	6853      	ldr	r3, [r2, #4]
 8004238:	400b      	ands	r3, r1
 800423a:	68e1      	ldr	r1, [r4, #12]
 800423c:	430b      	orrs	r3, r1
 800423e:	6053      	str	r3, [r2, #4]
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004240:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8004242:	491b      	ldr	r1, [pc, #108]	@ (80042b0 <HAL_RCC_ClockConfig+0x140>)
 8004244:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004246:	4013      	ands	r3, r2
 8004248:	2b08      	cmp	r3, #8
 800424a:	d00e      	beq.n	800426a <HAL_RCC_ClockConfig+0xfa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800424c:	481b      	ldr	r0, [pc, #108]	@ (80042bc <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800424e:	4b18      	ldr	r3, [pc, #96]	@ (80042b0 <HAL_RCC_ClockConfig+0x140>)
 8004250:	4a1b      	ldr	r2, [pc, #108]	@ (80042c0 <HAL_RCC_ClockConfig+0x150>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	491b      	ldr	r1, [pc, #108]	@ (80042c4 <HAL_RCC_ClockConfig+0x154>)
 8004256:	061b      	lsls	r3, r3, #24
 8004258:	0f1b      	lsrs	r3, r3, #28
 800425a:	5cd3      	ldrb	r3, [r2, r3]
 800425c:	40d8      	lsrs	r0, r3
 800425e:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004260:	2003      	movs	r0, #3
 8004262:	f7ff fa1d 	bl	80036a0 <HAL_InitTick>
  return HAL_OK;
 8004266:	2000      	movs	r0, #0
 8004268:	e799      	b.n	800419e <HAL_RCC_ClockConfig+0x2e>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800426a:	250f      	movs	r5, #15
 800426c:	4816      	ldr	r0, [pc, #88]	@ (80042c8 <HAL_RCC_ClockConfig+0x158>)
 800426e:	0c93      	lsrs	r3, r2, #18
 8004270:	402b      	ands	r3, r5
 8004272:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004274:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004276:	03d2      	lsls	r2, r2, #15
 8004278:	d50f      	bpl.n	800429a <HAL_RCC_ClockConfig+0x12a>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800427a:	4b14      	ldr	r3, [pc, #80]	@ (80042cc <HAL_RCC_ClockConfig+0x15c>)
 800427c:	400d      	ands	r5, r1
 800427e:	5d59      	ldrb	r1, [r3, r5]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004280:	480e      	ldr	r0, [pc, #56]	@ (80042bc <HAL_RCC_ClockConfig+0x14c>)
 8004282:	f7fb ff41 	bl	8000108 <__udivsi3>
 8004286:	4360      	muls	r0, r4
 8004288:	e7e1      	b.n	800424e <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428a:	019b      	lsls	r3, r3, #6
 800428c:	d4a8      	bmi.n	80041e0 <HAL_RCC_ClockConfig+0x70>
 800428e:	e785      	b.n	800419c <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004290:	039b      	lsls	r3, r3, #14
 8004292:	d4a5      	bmi.n	80041e0 <HAL_RCC_ClockConfig+0x70>
 8004294:	e782      	b.n	800419c <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8004296:	2003      	movs	r0, #3
 8004298:	e781      	b.n	800419e <HAL_RCC_ClockConfig+0x2e>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800429a:	0163      	lsls	r3, r4, #5
 800429c:	1b1b      	subs	r3, r3, r4
 800429e:	0198      	lsls	r0, r3, #6
 80042a0:	1ac0      	subs	r0, r0, r3
 80042a2:	00c0      	lsls	r0, r0, #3
 80042a4:	1900      	adds	r0, r0, r4
 80042a6:	0200      	lsls	r0, r0, #8
 80042a8:	e7d1      	b.n	800424e <HAL_RCC_ClockConfig+0xde>
 80042aa:	46c0      	nop			@ (mov r8, r8)
 80042ac:	40022000 	.word	0x40022000
 80042b0:	40021000 	.word	0x40021000
 80042b4:	00001388 	.word	0x00001388
 80042b8:	fffff8ff 	.word	0xfffff8ff
 80042bc:	007a1200 	.word	0x007a1200
 80042c0:	08006c60 	.word	0x08006c60
 80042c4:	20000494 	.word	0x20000494
 80042c8:	08006c80 	.word	0x08006c80
 80042cc:	08006c70 	.word	0x08006c70

080042d0 <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 80042d0:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80042d2:	4910      	ldr	r1, [pc, #64]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x44>)
{
 80042d4:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80042d6:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80042d8:	4013      	ands	r3, r2
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d001      	beq.n	80042e2 <HAL_RCC_GetSysClockFreq+0x12>
      sysclockfreq = HSE_VALUE;
 80042de:	480e      	ldr	r0, [pc, #56]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80042e0:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80042e2:	250f      	movs	r5, #15
 80042e4:	480d      	ldr	r0, [pc, #52]	@ (800431c <HAL_RCC_GetSysClockFreq+0x4c>)
 80042e6:	0c93      	lsrs	r3, r2, #18
 80042e8:	402b      	ands	r3, r5
 80042ea:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80042ec:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80042ee:	03d2      	lsls	r2, r2, #15
 80042f0:	d507      	bpl.n	8004302 <HAL_RCC_GetSysClockFreq+0x32>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80042f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004320 <HAL_RCC_GetSysClockFreq+0x50>)
 80042f4:	400d      	ands	r5, r1
 80042f6:	5d59      	ldrb	r1, [r3, r5]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80042f8:	4807      	ldr	r0, [pc, #28]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x48>)
 80042fa:	f7fb ff05 	bl	8000108 <__udivsi3>
 80042fe:	4360      	muls	r0, r4
 8004300:	e7ee      	b.n	80042e0 <HAL_RCC_GetSysClockFreq+0x10>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004302:	0162      	lsls	r2, r4, #5
 8004304:	1b12      	subs	r2, r2, r4
 8004306:	0193      	lsls	r3, r2, #6
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	191b      	adds	r3, r3, r4
 800430e:	0218      	lsls	r0, r3, #8
 8004310:	e7e6      	b.n	80042e0 <HAL_RCC_GetSysClockFreq+0x10>
 8004312:	46c0      	nop			@ (mov r8, r8)
 8004314:	40021000 	.word	0x40021000
 8004318:	007a1200 	.word	0x007a1200
 800431c:	08006c80 	.word	0x08006c80
 8004320:	08006c70 	.word	0x08006c70

08004324 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004324:	4b01      	ldr	r3, [pc, #4]	@ (800432c <HAL_RCC_GetHCLKFreq+0x8>)
 8004326:	6818      	ldr	r0, [r3, #0]
}
 8004328:	4770      	bx	lr
 800432a:	46c0      	nop			@ (mov r8, r8)
 800432c:	20000494 	.word	0x20000494

08004330 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004330:	4b04      	ldr	r3, [pc, #16]	@ (8004344 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004332:	4a05      	ldr	r2, [pc, #20]	@ (8004348 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	4905      	ldr	r1, [pc, #20]	@ (800434c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004338:	055b      	lsls	r3, r3, #21
 800433a:	0f5b      	lsrs	r3, r3, #29
 800433c:	5ccb      	ldrb	r3, [r1, r3]
 800433e:	6810      	ldr	r0, [r2, #0]
 8004340:	40d8      	lsrs	r0, r3
}    
 8004342:	4770      	bx	lr
 8004344:	40021000 	.word	0x40021000
 8004348:	20000494 	.word	0x20000494
 800434c:	08006c58 	.word	0x08006c58

08004350 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004352:	46ce      	mov	lr, r9
 8004354:	4647      	mov	r7, r8
 8004356:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004358:	6803      	ldr	r3, [r0, #0]
{
 800435a:	0004      	movs	r4, r0
 800435c:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800435e:	03da      	lsls	r2, r3, #15
 8004360:	d530      	bpl.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004362:	2280      	movs	r2, #128	@ 0x80
 8004364:	4b40      	ldr	r3, [pc, #256]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8004366:	0552      	lsls	r2, r2, #21
 8004368:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800436a:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800436c:	4211      	tst	r1, r2
 800436e:	d042      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004370:	2680      	movs	r6, #128	@ 0x80
 8004372:	4d3e      	ldr	r5, [pc, #248]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8004374:	0076      	lsls	r6, r6, #1
 8004376:	682b      	ldr	r3, [r5, #0]
 8004378:	4233      	tst	r3, r6
 800437a:	d04a      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800437c:	4d3a      	ldr	r5, [pc, #232]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800437e:	23c0      	movs	r3, #192	@ 0xc0
 8004380:	6a2a      	ldr	r2, [r5, #32]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	0010      	movs	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004386:	6861      	ldr	r1, [r4, #4]
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004388:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800438a:	421a      	tst	r2, r3
 800438c:	d011      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800438e:	400b      	ands	r3, r1
 8004390:	4283      	cmp	r3, r0
 8004392:	d00e      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004394:	2080      	movs	r0, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004396:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004398:	6a2e      	ldr	r6, [r5, #32]
 800439a:	0240      	lsls	r0, r0, #9
 800439c:	4330      	orrs	r0, r6
 800439e:	6228      	str	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043a0:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043a2:	4a33      	ldr	r2, [pc, #204]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x120>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043a4:	4e33      	ldr	r6, [pc, #204]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x124>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043a6:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043a8:	4030      	ands	r0, r6
 80043aa:	6228      	str	r0, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043ac:	622a      	str	r2, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043ae:	07db      	lsls	r3, r3, #31
 80043b0:	d446      	bmi.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xf0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043b2:	4a2d      	ldr	r2, [pc, #180]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80043b4:	482e      	ldr	r0, [pc, #184]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80043b6:	6a13      	ldr	r3, [r2, #32]
 80043b8:	4003      	ands	r3, r0
 80043ba:	430b      	orrs	r3, r1
 80043bc:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80043be:	2f01      	cmp	r7, #1
 80043c0:	d038      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	07da      	lsls	r2, r3, #31
 80043c6:	d506      	bpl.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043c8:	2003      	movs	r0, #3
 80043ca:	4927      	ldr	r1, [pc, #156]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80043cc:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80043ce:	4382      	bics	r2, r0
 80043d0:	68a0      	ldr	r0, [r4, #8]
 80043d2:	4302      	orrs	r2, r0
 80043d4:	630a      	str	r2, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043d6:	069b      	lsls	r3, r3, #26
 80043d8:	d405      	bmi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x96>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80043da:	2000      	movs	r0, #0
}
 80043dc:	b003      	add	sp, #12
 80043de:	bcc0      	pop	{r6, r7}
 80043e0:	46b9      	mov	r9, r7
 80043e2:	46b0      	mov	r8, r6
 80043e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043e6:	2110      	movs	r1, #16
 80043e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80043ea:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80043ec:	438b      	bics	r3, r1
 80043ee:	68e1      	ldr	r1, [r4, #12]
 80043f0:	430b      	orrs	r3, r1
 80043f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80043f4:	e7f1      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f6:	2680      	movs	r6, #128	@ 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 80043f8:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fa:	4d1c      	ldr	r5, [pc, #112]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80043fc:	4311      	orrs	r1, r2
 80043fe:	61d9      	str	r1, [r3, #28]
 8004400:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004402:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8004404:	4013      	ands	r3, r2
 8004406:	9301      	str	r3, [sp, #4]
 8004408:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440a:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 800440c:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440e:	4233      	tst	r3, r6
 8004410:	d1b4      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004412:	682b      	ldr	r3, [r5, #0]
 8004414:	4333      	orrs	r3, r6
 8004416:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004418:	f7ff f984 	bl	8003724 <HAL_GetTick>
 800441c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441e:	682b      	ldr	r3, [r5, #0]
 8004420:	4233      	tst	r3, r6
 8004422:	d1ab      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004424:	f7ff f97e 	bl	8003724 <HAL_GetTick>
 8004428:	4643      	mov	r3, r8
 800442a:	1ac0      	subs	r0, r0, r3
 800442c:	2864      	cmp	r0, #100	@ 0x64
 800442e:	d9f6      	bls.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xce>
          return HAL_TIMEOUT;
 8004430:	2003      	movs	r0, #3
 8004432:	e7d3      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004434:	69d3      	ldr	r3, [r2, #28]
 8004436:	4910      	ldr	r1, [pc, #64]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004438:	400b      	ands	r3, r1
 800443a:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	e7c1      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
        tickstart = HAL_GetTick();
 8004440:	f7ff f970 	bl	8003724 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004444:	2302      	movs	r3, #2
 8004446:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004448:	4b0c      	ldr	r3, [pc, #48]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
        tickstart = HAL_GetTick();
 800444a:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444c:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444e:	e004      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004450:	f7ff f968 	bl	8003724 <HAL_GetTick>
 8004454:	1b80      	subs	r0, r0, r6
 8004456:	4548      	cmp	r0, r9
 8004458:	d8ea      	bhi.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800445a:	4642      	mov	r2, r8
 800445c:	6a2b      	ldr	r3, [r5, #32]
 800445e:	421a      	tst	r2, r3
 8004460:	d0f6      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x100>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004462:	6861      	ldr	r1, [r4, #4]
 8004464:	e7a5      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004466:	46c0      	nop			@ (mov r8, r8)
 8004468:	40021000 	.word	0x40021000
 800446c:	40007000 	.word	0x40007000
 8004470:	fffffcff 	.word	0xfffffcff
 8004474:	fffeffff 	.word	0xfffeffff
 8004478:	efffffff 	.word	0xefffffff
 800447c:	00001388 	.word	0x00001388

08004480 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004480:	b570      	push	{r4, r5, r6, lr}
 8004482:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004484:	d063      	beq.n	800454e <HAL_TIM_PWM_Init+0xce>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004486:	233d      	movs	r3, #61	@ 0x3d
 8004488:	5cc3      	ldrb	r3, [r0, r3]
 800448a:	b2da      	uxtb	r2, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	d048      	beq.n	8004522 <HAL_TIM_PWM_Init+0xa2>
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004490:	233d      	movs	r3, #61	@ 0x3d
 8004492:	2202      	movs	r2, #2
 8004494:	54e2      	strb	r2, [r4, r3]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004496:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004498:	4e2e      	ldr	r6, [pc, #184]	@ (8004554 <HAL_TIM_PWM_Init+0xd4>)
  tmpcr1 = TIMx->CR1;
 800449a:	681a      	ldr	r2, [r3, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800449c:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800449e:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044a0:	68e0      	ldr	r0, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a2:	42b3      	cmp	r3, r6
 80044a4:	d042      	beq.n	800452c <HAL_TIM_PWM_Init+0xac>
 80044a6:	2680      	movs	r6, #128	@ 0x80
 80044a8:	05f6      	lsls	r6, r6, #23
 80044aa:	42b3      	cmp	r3, r6
 80044ac:	d030      	beq.n	8004510 <HAL_TIM_PWM_Init+0x90>
 80044ae:	4e2a      	ldr	r6, [pc, #168]	@ (8004558 <HAL_TIM_PWM_Init+0xd8>)
 80044b0:	42b3      	cmp	r3, r6
 80044b2:	d02d      	beq.n	8004510 <HAL_TIM_PWM_Init+0x90>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044b4:	4e29      	ldr	r6, [pc, #164]	@ (800455c <HAL_TIM_PWM_Init+0xdc>)
 80044b6:	42b3      	cmp	r3, r6
 80044b8:	d02e      	beq.n	8004518 <HAL_TIM_PWM_Init+0x98>
 80044ba:	4e29      	ldr	r6, [pc, #164]	@ (8004560 <HAL_TIM_PWM_Init+0xe0>)
 80044bc:	42b3      	cmp	r3, r6
 80044be:	d039      	beq.n	8004534 <HAL_TIM_PWM_Init+0xb4>
 80044c0:	4e28      	ldr	r6, [pc, #160]	@ (8004564 <HAL_TIM_PWM_Init+0xe4>)
 80044c2:	42b3      	cmp	r3, r6
 80044c4:	d036      	beq.n	8004534 <HAL_TIM_PWM_Init+0xb4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044c6:	2680      	movs	r6, #128	@ 0x80
 80044c8:	43b2      	bics	r2, r6
 80044ca:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80044cc:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ce:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80044d0:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044d2:	2201      	movs	r2, #1
 80044d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044d6:	6919      	ldr	r1, [r3, #16]
 80044d8:	420a      	tst	r2, r1
 80044da:	d002      	beq.n	80044e2 <HAL_TIM_PWM_Init+0x62>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044dc:	6919      	ldr	r1, [r3, #16]
 80044de:	4391      	bics	r1, r2
 80044e0:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e2:	2301      	movs	r3, #1
 80044e4:	2246      	movs	r2, #70	@ 0x46
  return HAL_OK;
 80044e6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ea:	3a08      	subs	r2, #8
 80044ec:	54a3      	strb	r3, [r4, r2]
 80044ee:	3201      	adds	r2, #1
 80044f0:	54a3      	strb	r3, [r4, r2]
 80044f2:	3201      	adds	r2, #1
 80044f4:	54a3      	strb	r3, [r4, r2]
 80044f6:	3201      	adds	r2, #1
 80044f8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044fa:	3201      	adds	r2, #1
 80044fc:	54a3      	strb	r3, [r4, r2]
 80044fe:	3201      	adds	r2, #1
 8004500:	54a3      	strb	r3, [r4, r2]
 8004502:	3201      	adds	r2, #1
 8004504:	54a3      	strb	r3, [r4, r2]
 8004506:	3201      	adds	r2, #1
 8004508:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800450a:	3a08      	subs	r2, #8
 800450c:	54a3      	strb	r3, [r4, r2]
}
 800450e:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004510:	2670      	movs	r6, #112	@ 0x70
 8004512:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8004514:	68a6      	ldr	r6, [r4, #8]
 8004516:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004518:	4e13      	ldr	r6, [pc, #76]	@ (8004568 <HAL_TIM_PWM_Init+0xe8>)
 800451a:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800451c:	6926      	ldr	r6, [r4, #16]
 800451e:	4332      	orrs	r2, r6
 8004520:	e7d1      	b.n	80044c6 <HAL_TIM_PWM_Init+0x46>
    htim->Lock = HAL_UNLOCKED;
 8004522:	333c      	adds	r3, #60	@ 0x3c
 8004524:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8004526:	f7fe ff25 	bl	8003374 <HAL_TIM_PWM_MspInit>
 800452a:	e7b1      	b.n	8004490 <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800452c:	2670      	movs	r6, #112	@ 0x70
 800452e:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8004530:	68a6      	ldr	r6, [r4, #8]
 8004532:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004534:	4e0c      	ldr	r6, [pc, #48]	@ (8004568 <HAL_TIM_PWM_Init+0xe8>)
 8004536:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004538:	6926      	ldr	r6, [r4, #16]
 800453a:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800453c:	2680      	movs	r6, #128	@ 0x80
 800453e:	43b2      	bics	r2, r6
 8004540:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004542:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004544:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004546:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004548:	6962      	ldr	r2, [r4, #20]
 800454a:	631a      	str	r2, [r3, #48]	@ 0x30
 800454c:	e7c1      	b.n	80044d2 <HAL_TIM_PWM_Init+0x52>
    return HAL_ERROR;
 800454e:	2001      	movs	r0, #1
 8004550:	e7dd      	b.n	800450e <HAL_TIM_PWM_Init+0x8e>
 8004552:	46c0      	nop			@ (mov r8, r8)
 8004554:	40012c00 	.word	0x40012c00
 8004558:	40000400 	.word	0x40000400
 800455c:	40002000 	.word	0x40002000
 8004560:	40014400 	.word	0x40014400
 8004564:	40014800 	.word	0x40014800
 8004568:	fffffcff 	.word	0xfffffcff

0800456c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800456c:	233c      	movs	r3, #60	@ 0x3c
{
 800456e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004570:	5cc4      	ldrb	r4, [r0, r3]
{
 8004572:	0005      	movs	r5, r0
  __HAL_LOCK(htim);
 8004574:	2c01      	cmp	r4, #1
 8004576:	d100      	bne.n	800457a <HAL_TIM_PWM_ConfigChannel+0xe>
 8004578:	e0ea      	b.n	8004750 <HAL_TIM_PWM_ConfigChannel+0x1e4>
 800457a:	2001      	movs	r0, #1
 800457c:	54e8      	strb	r0, [r5, r3]
  switch (Channel)
 800457e:	2a08      	cmp	r2, #8
 8004580:	d100      	bne.n	8004584 <HAL_TIM_PWM_ConfigChannel+0x18>
 8004582:	e0ab      	b.n	80046dc <HAL_TIM_PWM_ConfigChannel+0x170>
 8004584:	d837      	bhi.n	80045f6 <HAL_TIM_PWM_ConfigChannel+0x8a>
 8004586:	2a00      	cmp	r2, #0
 8004588:	d100      	bne.n	800458c <HAL_TIM_PWM_ConfigChannel+0x20>
 800458a:	e07c      	b.n	8004686 <HAL_TIM_PWM_ConfigChannel+0x11a>
 800458c:	2a04      	cmp	r2, #4
 800458e:	d12e      	bne.n	80045ee <HAL_TIM_PWM_ConfigChannel+0x82>

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004590:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004592:	682b      	ldr	r3, [r5, #0]
  tmpccer = TIMx->CCER;
 8004594:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004596:	6a18      	ldr	r0, [r3, #32]
 8004598:	43a0      	bics	r0, r4
 800459a:	6218      	str	r0, [r3, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800459c:	4c75      	ldr	r4, [pc, #468]	@ (8004774 <HAL_TIM_PWM_ConfigChannel+0x208>)
  tmpcr2 =  TIMx->CR2;
 800459e:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80045a0:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045a2:	4020      	ands	r0, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045a4:	680c      	ldr	r4, [r1, #0]
 80045a6:	0224      	lsls	r4, r4, #8
 80045a8:	4304      	orrs	r4, r0

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045aa:	2020      	movs	r0, #32
 80045ac:	4382      	bics	r2, r0
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045ae:	6888      	ldr	r0, [r1, #8]
 80045b0:	0100      	lsls	r0, r0, #4
 80045b2:	4310      	orrs	r0, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045b4:	4a70      	ldr	r2, [pc, #448]	@ (8004778 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d056      	beq.n	8004668 <HAL_TIM_PWM_ConfigChannel+0xfc>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ba:	4a70      	ldr	r2, [pc, #448]	@ (800477c <HAL_TIM_PWM_ConfigChannel+0x210>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d05a      	beq.n	8004676 <HAL_TIM_PWM_ConfigChannel+0x10a>
 80045c0:	4a6f      	ldr	r2, [pc, #444]	@ (8004780 <HAL_TIM_PWM_ConfigChannel+0x214>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d057      	beq.n	8004676 <HAL_TIM_PWM_ConfigChannel+0x10a>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045c6:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80045c8:	605e      	str	r6, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80045ca:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80045cc:	639a      	str	r2, [r3, #56]	@ 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045ce:	2280      	movs	r2, #128	@ 0x80

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d0:	6218      	str	r0, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045d2:	6998      	ldr	r0, [r3, #24]
 80045d4:	0112      	lsls	r2, r2, #4
 80045d6:	4302      	orrs	r2, r0
 80045d8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045da:	699a      	ldr	r2, [r3, #24]
 80045dc:	4869      	ldr	r0, [pc, #420]	@ (8004784 <HAL_TIM_PWM_ConfigChannel+0x218>)
 80045de:	4002      	ands	r2, r0
 80045e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045e2:	690a      	ldr	r2, [r1, #16]
 80045e4:	6998      	ldr	r0, [r3, #24]
 80045e6:	0212      	lsls	r2, r2, #8
 80045e8:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 80045ea:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045ec:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80045ee:	233c      	movs	r3, #60	@ 0x3c
 80045f0:	2200      	movs	r2, #0
 80045f2:	54ea      	strb	r2, [r5, r3]
}
 80045f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (Channel)
 80045f6:	2001      	movs	r0, #1
 80045f8:	2a0c      	cmp	r2, #12
 80045fa:	d1f8      	bne.n	80045ee <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045fc:	682b      	ldr	r3, [r5, #0]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045fe:	4c62      	ldr	r4, [pc, #392]	@ (8004788 <HAL_TIM_PWM_ConfigChannel+0x21c>)
  tmpccer = TIMx->CCER;
 8004600:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004602:	6a1a      	ldr	r2, [r3, #32]
 8004604:	4022      	ands	r2, r4
 8004606:	621a      	str	r2, [r3, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004608:	4c5a      	ldr	r4, [pc, #360]	@ (8004774 <HAL_TIM_PWM_ConfigChannel+0x208>)
  tmpcr2 =  TIMx->CR2;
 800460a:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800460c:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800460e:	4022      	ands	r2, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004610:	680c      	ldr	r4, [r1, #0]
 8004612:	0224      	lsls	r4, r4, #8
 8004614:	4314      	orrs	r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004616:	4a5d      	ldr	r2, [pc, #372]	@ (800478c <HAL_TIM_PWM_ConfigChannel+0x220>)
 8004618:	4010      	ands	r0, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800461a:	688a      	ldr	r2, [r1, #8]
 800461c:	0312      	lsls	r2, r2, #12
 800461e:	4302      	orrs	r2, r0

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004620:	4855      	ldr	r0, [pc, #340]	@ (8004778 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8004622:	4283      	cmp	r3, r0
 8004624:	d01a      	beq.n	800465c <HAL_TIM_PWM_ConfigChannel+0xf0>
 8004626:	4855      	ldr	r0, [pc, #340]	@ (800477c <HAL_TIM_PWM_ConfigChannel+0x210>)
 8004628:	4283      	cmp	r3, r0
 800462a:	d017      	beq.n	800465c <HAL_TIM_PWM_ConfigChannel+0xf0>
 800462c:	4854      	ldr	r0, [pc, #336]	@ (8004780 <HAL_TIM_PWM_ConfigChannel+0x214>)
 800462e:	4283      	cmp	r3, r0
 8004630:	d014      	beq.n	800465c <HAL_TIM_PWM_ConfigChannel+0xf0>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004632:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004634:	605e      	str	r6, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004636:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004638:	6418      	str	r0, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800463a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800463c:	2280      	movs	r2, #128	@ 0x80
 800463e:	69d8      	ldr	r0, [r3, #28]
 8004640:	0112      	lsls	r2, r2, #4
 8004642:	4302      	orrs	r2, r0
 8004644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	484e      	ldr	r0, [pc, #312]	@ (8004784 <HAL_TIM_PWM_ConfigChannel+0x218>)
 800464a:	4002      	ands	r2, r0
 800464c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800464e:	690a      	ldr	r2, [r1, #16]
 8004650:	69d8      	ldr	r0, [r3, #28]
 8004652:	0212      	lsls	r2, r2, #8
 8004654:	4302      	orrs	r2, r0
 8004656:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004658:	2000      	movs	r0, #0
 800465a:	e7c8      	b.n	80045ee <HAL_TIM_PWM_ConfigChannel+0x82>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800465c:	484c      	ldr	r0, [pc, #304]	@ (8004790 <HAL_TIM_PWM_ConfigChannel+0x224>)
 800465e:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004660:	694e      	ldr	r6, [r1, #20]
 8004662:	01b6      	lsls	r6, r6, #6
 8004664:	4306      	orrs	r6, r0
 8004666:	e7e4      	b.n	8004632 <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpccer &= ~TIM_CCER_CC2NP;
 8004668:	2280      	movs	r2, #128	@ 0x80
 800466a:	4390      	bics	r0, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800466c:	68ca      	ldr	r2, [r1, #12]
 800466e:	0112      	lsls	r2, r2, #4
 8004670:	4310      	orrs	r0, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 8004672:	2240      	movs	r2, #64	@ 0x40
 8004674:	4390      	bics	r0, r2
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004676:	4a47      	ldr	r2, [pc, #284]	@ (8004794 <HAL_TIM_PWM_ConfigChannel+0x228>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004678:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800467a:	4032      	ands	r2, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800467c:	698e      	ldr	r6, [r1, #24]
 800467e:	433e      	orrs	r6, r7
 8004680:	00b6      	lsls	r6, r6, #2
 8004682:	4316      	orrs	r6, r2
 8004684:	e79f      	b.n	80045c6 <HAL_TIM_PWM_ConfigChannel+0x5a>
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004686:	2673      	movs	r6, #115	@ 0x73
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004688:	682b      	ldr	r3, [r5, #0]
  tmpccer = TIMx->CCER;
 800468a:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800468c:	6a1c      	ldr	r4, [r3, #32]
 800468e:	4384      	bics	r4, r0
 8004690:	621c      	str	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004692:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004694:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004696:	43b0      	bics	r0, r6
  tmpccmrx |= OC_Config->OCMode;
 8004698:	680e      	ldr	r6, [r1, #0]
 800469a:	4330      	orrs	r0, r6
  tmpccer &= ~TIM_CCER_CC1P;
 800469c:	2602      	movs	r6, #2
 800469e:	43b2      	bics	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 80046a0:	688e      	ldr	r6, [r1, #8]
 80046a2:	4332      	orrs	r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046a4:	4e34      	ldr	r6, [pc, #208]	@ (8004778 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 80046a6:	42b3      	cmp	r3, r6
 80046a8:	d045      	beq.n	8004736 <HAL_TIM_PWM_ConfigChannel+0x1ca>
 80046aa:	4e34      	ldr	r6, [pc, #208]	@ (800477c <HAL_TIM_PWM_ConfigChannel+0x210>)
 80046ac:	42b3      	cmp	r3, r6
 80046ae:	d042      	beq.n	8004736 <HAL_TIM_PWM_ConfigChannel+0x1ca>
 80046b0:	4e33      	ldr	r6, [pc, #204]	@ (8004780 <HAL_TIM_PWM_ConfigChannel+0x214>)
 80046b2:	42b3      	cmp	r3, r6
 80046b4:	d03f      	beq.n	8004736 <HAL_TIM_PWM_ConfigChannel+0x1ca>
  TIMx->CR2 = tmpcr2;
 80046b6:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80046b8:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80046ba:	6848      	ldr	r0, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046bc:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 80046be:	6358      	str	r0, [r3, #52]	@ 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046c0:	2008      	movs	r0, #8
  TIMx->CCER = tmpccer;
 80046c2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	4302      	orrs	r2, r0
 80046c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046ca:	699a      	ldr	r2, [r3, #24]
 80046cc:	3804      	subs	r0, #4
 80046ce:	4382      	bics	r2, r0
 80046d0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046d2:	699a      	ldr	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80046d4:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046d6:	430a      	orrs	r2, r1
 80046d8:	619a      	str	r2, [r3, #24]
      break;
 80046da:	e788      	b.n	80045ee <HAL_TIM_PWM_ConfigChannel+0x82>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046dc:	2673      	movs	r6, #115	@ 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046de:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046e0:	4c2d      	ldr	r4, [pc, #180]	@ (8004798 <HAL_TIM_PWM_ConfigChannel+0x22c>)
  tmpccer = TIMx->CCER;
 80046e2:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046e4:	6a18      	ldr	r0, [r3, #32]
 80046e6:	4020      	ands	r0, r4
 80046e8:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80046ea:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80046ec:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046ee:	43b0      	bics	r0, r6
  tmpccmrx |= OC_Config->OCMode;
 80046f0:	680e      	ldr	r6, [r1, #0]
 80046f2:	4306      	orrs	r6, r0
  tmpccer &= ~TIM_CCER_CC3P;
 80046f4:	4829      	ldr	r0, [pc, #164]	@ (800479c <HAL_TIM_PWM_ConfigChannel+0x230>)
 80046f6:	4002      	ands	r2, r0
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046f8:	6888      	ldr	r0, [r1, #8]
 80046fa:	0200      	lsls	r0, r0, #8
 80046fc:	4302      	orrs	r2, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046fe:	481e      	ldr	r0, [pc, #120]	@ (8004778 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8004700:	4283      	cmp	r3, r0
 8004702:	d027      	beq.n	8004754 <HAL_TIM_PWM_ConfigChannel+0x1e8>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004704:	481d      	ldr	r0, [pc, #116]	@ (800477c <HAL_TIM_PWM_ConfigChannel+0x210>)
 8004706:	4283      	cmp	r3, r0
 8004708:	d02b      	beq.n	8004762 <HAL_TIM_PWM_ConfigChannel+0x1f6>
 800470a:	481d      	ldr	r0, [pc, #116]	@ (8004780 <HAL_TIM_PWM_ConfigChannel+0x214>)
 800470c:	4283      	cmp	r3, r0
 800470e:	d028      	beq.n	8004762 <HAL_TIM_PWM_ConfigChannel+0x1f6>
  TIMx->CCR3 = OC_Config->Pulse;
 8004710:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004712:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004714:	61de      	str	r6, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004716:	63d8      	str	r0, [r3, #60]	@ 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004718:	2008      	movs	r0, #8
  TIMx->CCER = tmpccer;
 800471a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800471c:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800471e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004720:	4302      	orrs	r2, r0
 8004722:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004724:	69da      	ldr	r2, [r3, #28]
 8004726:	3804      	subs	r0, #4
 8004728:	4382      	bics	r2, r0
 800472a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800472c:	69da      	ldr	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800472e:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004730:	430a      	orrs	r2, r1
 8004732:	61da      	str	r2, [r3, #28]
      break;
 8004734:	e75b      	b.n	80045ee <HAL_TIM_PWM_ConfigChannel+0x82>
    tmpccer &= ~TIM_CCER_CC1NP;
 8004736:	2608      	movs	r6, #8
 8004738:	43b2      	bics	r2, r6
    tmpccer |= OC_Config->OCNPolarity;
 800473a:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 800473c:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 800473e:	4332      	orrs	r2, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004740:	2604      	movs	r6, #4
 8004742:	43b2      	bics	r2, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004744:	4e16      	ldr	r6, [pc, #88]	@ (80047a0 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8004746:	4026      	ands	r6, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004748:	694c      	ldr	r4, [r1, #20]
 800474a:	433c      	orrs	r4, r7
 800474c:	4334      	orrs	r4, r6
 800474e:	e7b2      	b.n	80046b6 <HAL_TIM_PWM_ConfigChannel+0x14a>
  __HAL_LOCK(htim);
 8004750:	2002      	movs	r0, #2
 8004752:	e74f      	b.n	80045f4 <HAL_TIM_PWM_ConfigChannel+0x88>
    tmpccer &= ~TIM_CCER_CC3NP;
 8004754:	4813      	ldr	r0, [pc, #76]	@ (80047a4 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8004756:	4002      	ands	r2, r0
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004758:	68c8      	ldr	r0, [r1, #12]
 800475a:	0200      	lsls	r0, r0, #8
 800475c:	4310      	orrs	r0, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 800475e:	4a09      	ldr	r2, [pc, #36]	@ (8004784 <HAL_TIM_PWM_ConfigChannel+0x218>)
 8004760:	4002      	ands	r2, r0
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004762:	4811      	ldr	r0, [pc, #68]	@ (80047a8 <HAL_TIM_PWM_ConfigChannel+0x23c>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004764:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004766:	4020      	ands	r0, r4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004768:	698c      	ldr	r4, [r1, #24]
 800476a:	433c      	orrs	r4, r7
 800476c:	0124      	lsls	r4, r4, #4
 800476e:	4304      	orrs	r4, r0
 8004770:	e7ce      	b.n	8004710 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 8004772:	46c0      	nop			@ (mov r8, r8)
 8004774:	ffff8cff 	.word	0xffff8cff
 8004778:	40012c00 	.word	0x40012c00
 800477c:	40014400 	.word	0x40014400
 8004780:	40014800 	.word	0x40014800
 8004784:	fffffbff 	.word	0xfffffbff
 8004788:	ffffefff 	.word	0xffffefff
 800478c:	ffffdfff 	.word	0xffffdfff
 8004790:	ffffbfff 	.word	0xffffbfff
 8004794:	fffff3ff 	.word	0xfffff3ff
 8004798:	fffffeff 	.word	0xfffffeff
 800479c:	fffffdff 	.word	0xfffffdff
 80047a0:	fffffcff 	.word	0xfffffcff
 80047a4:	fffff7ff 	.word	0xfffff7ff
 80047a8:	ffffcfff 	.word	0xffffcfff

080047ac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ac:	233c      	movs	r3, #60	@ 0x3c
{
 80047ae:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80047b0:	5cc3      	ldrb	r3, [r0, r3]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d021      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b6:	233d      	movs	r3, #61	@ 0x3d
 80047b8:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047ba:	2570      	movs	r5, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 80047be:	6803      	ldr	r3, [r0, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80047c2:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80047c4:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047c6:	680d      	ldr	r5, [r1, #0]
 80047c8:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004800 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d006      	beq.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80047d2:	2280      	movs	r2, #128	@ 0x80
 80047d4:	05d2      	lsls	r2, r2, #23
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d002      	beq.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80047da:	4a0a      	ldr	r2, [pc, #40]	@ (8004804 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d104      	bne.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047e0:	2280      	movs	r2, #128	@ 0x80
 80047e2:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047e4:	684a      	ldr	r2, [r1, #4]
 80047e6:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047e8:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047ea:	233d      	movs	r3, #61	@ 0x3d
 80047ec:	2201      	movs	r2, #1
 80047ee:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80047f0:	2200      	movs	r2, #0
 80047f2:	3b01      	subs	r3, #1
 80047f4:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80047f6:	2000      	movs	r0, #0
}
 80047f8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80047fa:	2002      	movs	r0, #2
 80047fc:	e7fc      	b.n	80047f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047fe:	46c0      	nop			@ (mov r8, r8)
 8004800:	40012c00 	.word	0x40012c00
 8004804:	40000400 	.word	0x40000400

08004808 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004808:	223c      	movs	r2, #60	@ 0x3c
{
 800480a:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800480c:	5c83      	ldrb	r3, [r0, r2]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d01e      	beq.n	8004850 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004812:	68cb      	ldr	r3, [r1, #12]
 8004814:	4c0f      	ldr	r4, [pc, #60]	@ (8004854 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 8004816:	4023      	ands	r3, r4
 8004818:	688c      	ldr	r4, [r1, #8]
 800481a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800481c:	4c0e      	ldr	r4, [pc, #56]	@ (8004858 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 800481e:	4023      	ands	r3, r4
 8004820:	684c      	ldr	r4, [r1, #4]
 8004822:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004824:	4c0d      	ldr	r4, [pc, #52]	@ (800485c <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 8004826:	4023      	ands	r3, r4
 8004828:	680c      	ldr	r4, [r1, #0]
 800482a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800482c:	4c0c      	ldr	r4, [pc, #48]	@ (8004860 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 800482e:	4023      	ands	r3, r4
 8004830:	690c      	ldr	r4, [r1, #16]
 8004832:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004834:	4c0b      	ldr	r4, [pc, #44]	@ (8004864 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8004836:	4023      	ands	r3, r4
 8004838:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800483a:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800483c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800483e:	4c0a      	ldr	r4, [pc, #40]	@ (8004868 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8004840:	4023      	ands	r3, r4
 8004842:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004844:	6801      	ldr	r1, [r0, #0]
 8004846:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004848:	2300      	movs	r3, #0
 800484a:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 800484c:	2000      	movs	r0, #0
}
 800484e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8004850:	2002      	movs	r0, #2
 8004852:	e7fc      	b.n	800484e <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 8004854:	fffffcff 	.word	0xfffffcff
 8004858:	fffffbff 	.word	0xfffffbff
 800485c:	fffff7ff 	.word	0xfffff7ff
 8004860:	ffffefff 	.word	0xffffefff
 8004864:	ffffdfff 	.word	0xffffdfff
 8004868:	ffffbfff 	.word	0xffffbfff

0800486c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800486c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 800486e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004870:	071a      	lsls	r2, r3, #28
 8004872:	d506      	bpl.n	8004882 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004874:	6801      	ldr	r1, [r0, #0]
 8004876:	4c28      	ldr	r4, [pc, #160]	@ (8004918 <UART_AdvFeatureConfig+0xac>)
 8004878:	684a      	ldr	r2, [r1, #4]
 800487a:	4022      	ands	r2, r4
 800487c:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800487e:	4322      	orrs	r2, r4
 8004880:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004882:	07da      	lsls	r2, r3, #31
 8004884:	d506      	bpl.n	8004894 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004886:	6801      	ldr	r1, [r0, #0]
 8004888:	4c24      	ldr	r4, [pc, #144]	@ (800491c <UART_AdvFeatureConfig+0xb0>)
 800488a:	684a      	ldr	r2, [r1, #4]
 800488c:	4022      	ands	r2, r4
 800488e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8004890:	4322      	orrs	r2, r4
 8004892:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004894:	079a      	lsls	r2, r3, #30
 8004896:	d506      	bpl.n	80048a6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004898:	6801      	ldr	r1, [r0, #0]
 800489a:	4c21      	ldr	r4, [pc, #132]	@ (8004920 <UART_AdvFeatureConfig+0xb4>)
 800489c:	684a      	ldr	r2, [r1, #4]
 800489e:	4022      	ands	r2, r4
 80048a0:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80048a2:	4322      	orrs	r2, r4
 80048a4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048a6:	075a      	lsls	r2, r3, #29
 80048a8:	d506      	bpl.n	80048b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048aa:	6801      	ldr	r1, [r0, #0]
 80048ac:	4c1d      	ldr	r4, [pc, #116]	@ (8004924 <UART_AdvFeatureConfig+0xb8>)
 80048ae:	684a      	ldr	r2, [r1, #4]
 80048b0:	4022      	ands	r2, r4
 80048b2:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80048b4:	4322      	orrs	r2, r4
 80048b6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048b8:	06da      	lsls	r2, r3, #27
 80048ba:	d506      	bpl.n	80048ca <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048bc:	6801      	ldr	r1, [r0, #0]
 80048be:	4c1a      	ldr	r4, [pc, #104]	@ (8004928 <UART_AdvFeatureConfig+0xbc>)
 80048c0:	688a      	ldr	r2, [r1, #8]
 80048c2:	4022      	ands	r2, r4
 80048c4:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80048c6:	4322      	orrs	r2, r4
 80048c8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048ca:	069a      	lsls	r2, r3, #26
 80048cc:	d506      	bpl.n	80048dc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048ce:	6801      	ldr	r1, [r0, #0]
 80048d0:	4c16      	ldr	r4, [pc, #88]	@ (800492c <UART_AdvFeatureConfig+0xc0>)
 80048d2:	688a      	ldr	r2, [r1, #8]
 80048d4:	4022      	ands	r2, r4
 80048d6:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80048d8:	4322      	orrs	r2, r4
 80048da:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048dc:	065a      	lsls	r2, r3, #25
 80048de:	d50a      	bpl.n	80048f6 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048e0:	6801      	ldr	r1, [r0, #0]
 80048e2:	4d13      	ldr	r5, [pc, #76]	@ (8004930 <UART_AdvFeatureConfig+0xc4>)
 80048e4:	684a      	ldr	r2, [r1, #4]
 80048e6:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80048e8:	402a      	ands	r2, r5
 80048ea:	4322      	orrs	r2, r4
 80048ec:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048ee:	2280      	movs	r2, #128	@ 0x80
 80048f0:	0352      	lsls	r2, r2, #13
 80048f2:	4294      	cmp	r4, r2
 80048f4:	d009      	beq.n	800490a <UART_AdvFeatureConfig+0x9e>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048f6:	061b      	lsls	r3, r3, #24
 80048f8:	d506      	bpl.n	8004908 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048fa:	6802      	ldr	r2, [r0, #0]
 80048fc:	490d      	ldr	r1, [pc, #52]	@ (8004934 <UART_AdvFeatureConfig+0xc8>)
 80048fe:	6853      	ldr	r3, [r2, #4]
 8004900:	400b      	ands	r3, r1
 8004902:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8004904:	430b      	orrs	r3, r1
 8004906:	6053      	str	r3, [r2, #4]
  }
}
 8004908:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800490a:	684a      	ldr	r2, [r1, #4]
 800490c:	4c0a      	ldr	r4, [pc, #40]	@ (8004938 <UART_AdvFeatureConfig+0xcc>)
 800490e:	4022      	ands	r2, r4
 8004910:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004912:	4322      	orrs	r2, r4
 8004914:	604a      	str	r2, [r1, #4]
 8004916:	e7ee      	b.n	80048f6 <UART_AdvFeatureConfig+0x8a>
 8004918:	ffff7fff 	.word	0xffff7fff
 800491c:	fffdffff 	.word	0xfffdffff
 8004920:	fffeffff 	.word	0xfffeffff
 8004924:	fffbffff 	.word	0xfffbffff
 8004928:	ffffefff 	.word	0xffffefff
 800492c:	ffffdfff 	.word	0xffffdfff
 8004930:	ffefffff 	.word	0xffefffff
 8004934:	fff7ffff 	.word	0xfff7ffff
 8004938:	ff9fffff 	.word	0xff9fffff

0800493c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800493c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493e:	2384      	movs	r3, #132	@ 0x84
 8004940:	2200      	movs	r2, #0
{
 8004942:	46c6      	mov	lr, r8
 8004944:	0004      	movs	r4, r0
 8004946:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004948:	50c2      	str	r2, [r0, r3]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800494a:	f7fe feeb 	bl	8003724 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800494e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004950:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	0712      	lsls	r2, r2, #28
 8004956:	d410      	bmi.n	800497a <UART_CheckIdleState+0x3e>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	0752      	lsls	r2, r2, #29
 800495c:	d43c      	bmi.n	80049d8 <UART_CheckIdleState+0x9c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800495e:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 8004960:	2280      	movs	r2, #128	@ 0x80
  huart->gState = HAL_UART_STATE_READY;
 8004962:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004964:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004966:	2300      	movs	r3, #0
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 8004968:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496a:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800496c:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 800496e:	2378      	movs	r3, #120	@ 0x78
 8004970:	2200      	movs	r2, #0
 8004972:	54e2      	strb	r2, [r4, r3]
}
 8004974:	bc80      	pop	{r7}
 8004976:	46b8      	mov	r8, r7
 8004978:	bdf0      	pop	{r4, r5, r6, r7, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800497a:	69da      	ldr	r2, [r3, #28]
 800497c:	0292      	lsls	r2, r2, #10
 800497e:	d4eb      	bmi.n	8004958 <UART_CheckIdleState+0x1c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004980:	2680      	movs	r6, #128	@ 0x80
        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004982:	2308      	movs	r3, #8
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004984:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004986:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004988:	04b6      	lsls	r6, r6, #18
 800498a:	e010      	b.n	80049ae <UART_CheckIdleState+0x72>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	4217      	tst	r7, r2
 8004992:	d009      	beq.n	80049a8 <UART_CheckIdleState+0x6c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004994:	4641      	mov	r1, r8
 8004996:	69da      	ldr	r2, [r3, #28]
 8004998:	4211      	tst	r1, r2
 800499a:	d158      	bne.n	8004a4e <UART_CheckIdleState+0x112>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800499c:	2280      	movs	r2, #128	@ 0x80
 800499e:	69d9      	ldr	r1, [r3, #28]
 80049a0:	0112      	lsls	r2, r2, #4
 80049a2:	4211      	tst	r1, r2
 80049a4:	d000      	beq.n	80049a8 <UART_CheckIdleState+0x6c>
 80049a6:	e083      	b.n	8004ab0 <UART_CheckIdleState+0x174>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049a8:	69da      	ldr	r2, [r3, #28]
 80049aa:	0292      	lsls	r2, r2, #10
 80049ac:	d4d4      	bmi.n	8004958 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ae:	f7fe feb9 	bl	8003724 <HAL_GetTick>
 80049b2:	1b40      	subs	r0, r0, r5
 80049b4:	42b0      	cmp	r0, r6
 80049b6:	d3e9      	bcc.n	800498c <UART_CheckIdleState+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049b8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049bc:	2301      	movs	r3, #1
 80049be:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80049c2:	2080      	movs	r0, #128	@ 0x80
 80049c4:	6822      	ldr	r2, [r4, #0]
 80049c6:	6813      	ldr	r3, [r2, #0]
 80049c8:	4383      	bics	r3, r0
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80049d0:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 80049d2:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 80049d4:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80049d6:	e7ca      	b.n	800496e <UART_CheckIdleState+0x32>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	025b      	lsls	r3, r3, #9
 80049dc:	d4bf      	bmi.n	800495e <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049de:	2680      	movs	r6, #128	@ 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049e0:	2308      	movs	r3, #8
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049e2:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049e4:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e6:	04b6      	lsls	r6, r6, #18
 80049e8:	e011      	b.n	8004a0e <UART_CheckIdleState+0xd2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4217      	tst	r7, r2
 80049f0:	d00a      	beq.n	8004a08 <UART_CheckIdleState+0xcc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049f2:	4641      	mov	r1, r8
 80049f4:	69da      	ldr	r2, [r3, #28]
 80049f6:	4211      	tst	r1, r2
 80049f8:	d000      	beq.n	80049fc <UART_CheckIdleState+0xc0>
 80049fa:	e089      	b.n	8004b10 <UART_CheckIdleState+0x1d4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049fc:	2280      	movs	r2, #128	@ 0x80
 80049fe:	69d9      	ldr	r1, [r3, #28]
 8004a00:	0112      	lsls	r2, r2, #4
 8004a02:	4211      	tst	r1, r2
 8004a04:	d000      	beq.n	8004a08 <UART_CheckIdleState+0xcc>
 8004a06:	e0b4      	b.n	8004b72 <UART_CheckIdleState+0x236>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	025b      	lsls	r3, r3, #9
 8004a0c:	d4a7      	bmi.n	800495e <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a0e:	f7fe fe89 	bl	8003724 <HAL_GetTick>
 8004a12:	1b40      	subs	r0, r0, r5
 8004a14:	42b0      	cmp	r0, r6
 8004a16:	d3e8      	bcc.n	80049ea <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a18:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a22:	6821      	ldr	r1, [r4, #0]
 8004a24:	4d6b      	ldr	r5, [pc, #428]	@ (8004bd4 <UART_CheckIdleState+0x298>)
 8004a26:	680b      	ldr	r3, [r1, #0]
 8004a28:	402b      	ands	r3, r5
 8004a2a:	600b      	str	r3, [r1, #0]
 8004a2c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a30:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a34:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a38:	6821      	ldr	r1, [r4, #0]
 8004a3a:	688b      	ldr	r3, [r1, #8]
 8004a3c:	4393      	bics	r3, r2
 8004a3e:	608b      	str	r3, [r1, #8]
 8004a40:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8004a44:	2380      	movs	r3, #128	@ 0x80
 8004a46:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 8004a48:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 8004a4a:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8004a4c:	e78f      	b.n	800496e <UART_CheckIdleState+0x32>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a4e:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a50:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a54:	2201      	movs	r2, #1
 8004a56:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a5a:	6821      	ldr	r1, [r4, #0]
 8004a5c:	4d5d      	ldr	r5, [pc, #372]	@ (8004bd4 <UART_CheckIdleState+0x298>)
 8004a5e:	680b      	ldr	r3, [r1, #0]
 8004a60:	402b      	ands	r3, r5
 8004a62:	600b      	str	r3, [r1, #0]
 8004a64:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a68:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a6c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a70:	6821      	ldr	r1, [r4, #0]
 8004a72:	688b      	ldr	r3, [r1, #8]
 8004a74:	4393      	bics	r3, r2
 8004a76:	608b      	str	r3, [r1, #8]
 8004a78:	f380 8810 	msr	PRIMASK, r0

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a7c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d10a      	bne.n	8004a98 <UART_CheckIdleState+0x15c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a82:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a86:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a8a:	2010      	movs	r0, #16
 8004a8c:	6822      	ldr	r2, [r4, #0]
 8004a8e:	6813      	ldr	r3, [r2, #0]
 8004a90:	4383      	bics	r3, r0
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a98:	2380      	movs	r3, #128	@ 0x80
 8004a9a:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a9c:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004a9e:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa0:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004aa2:	3264      	adds	r2, #100	@ 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa4:	6623      	str	r3, [r4, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004aa6:	66a3      	str	r3, [r4, #104]	@ 0x68
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004aa8:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 8004aaa:	3a0c      	subs	r2, #12
 8004aac:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8004aae:	e783      	b.n	80049b8 <UART_CheckIdleState+0x7c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ab0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ab2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004abc:	6821      	ldr	r1, [r4, #0]
 8004abe:	4d45      	ldr	r5, [pc, #276]	@ (8004bd4 <UART_CheckIdleState+0x298>)
 8004ac0:	680b      	ldr	r3, [r1, #0]
 8004ac2:	402b      	ands	r3, r5
 8004ac4:	600b      	str	r3, [r1, #0]
 8004ac6:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aca:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ace:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad2:	6821      	ldr	r1, [r4, #0]
 8004ad4:	688b      	ldr	r3, [r1, #8]
 8004ad6:	4393      	bics	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
 8004ada:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ade:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d10a      	bne.n	8004afa <UART_CheckIdleState+0x1be>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae8:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aec:	2010      	movs	r0, #16
 8004aee:	6822      	ldr	r2, [r4, #0]
 8004af0:	6813      	ldr	r3, [r2, #0]
 8004af2:	4383      	bics	r3, r0
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004afa:	2220      	movs	r2, #32
 8004afc:	2380      	movs	r3, #128	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004afe:	2184      	movs	r1, #132	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004b00:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b02:	2300      	movs	r3, #0
 8004b04:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxISR = NULL;
 8004b06:	66a3      	str	r3, [r4, #104]	@ 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b08:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8004b0a:	3258      	adds	r2, #88	@ 0x58
 8004b0c:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8004b0e:	e753      	b.n	80049b8 <UART_CheckIdleState+0x7c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b10:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b12:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b16:	2201      	movs	r2, #1
 8004b18:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b1c:	6821      	ldr	r1, [r4, #0]
 8004b1e:	4d2d      	ldr	r5, [pc, #180]	@ (8004bd4 <UART_CheckIdleState+0x298>)
 8004b20:	680b      	ldr	r3, [r1, #0]
 8004b22:	402b      	ands	r3, r5
 8004b24:	600b      	str	r3, [r1, #0]
 8004b26:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b2a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b2e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b32:	6821      	ldr	r1, [r4, #0]
 8004b34:	688b      	ldr	r3, [r1, #8]
 8004b36:	4393      	bics	r3, r2
 8004b38:	608b      	str	r3, [r1, #8]
 8004b3a:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b3e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d10a      	bne.n	8004b5a <UART_CheckIdleState+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b44:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b48:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b4c:	2010      	movs	r0, #16
 8004b4e:	6822      	ldr	r2, [r4, #0]
 8004b50:	6813      	ldr	r3, [r2, #0]
 8004b52:	4383      	bics	r3, r0
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004b5a:	2380      	movs	r3, #128	@ 0x80
 8004b5c:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b5e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004b60:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b62:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b64:	3264      	adds	r2, #100	@ 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b66:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxISR = NULL;
 8004b68:	66a3      	str	r3, [r4, #104]	@ 0x68
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b6a:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 8004b6c:	3a0c      	subs	r2, #12
 8004b6e:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8004b70:	e752      	b.n	8004a18 <UART_CheckIdleState+0xdc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b72:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b74:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b7e:	6821      	ldr	r1, [r4, #0]
 8004b80:	4d14      	ldr	r5, [pc, #80]	@ (8004bd4 <UART_CheckIdleState+0x298>)
 8004b82:	680b      	ldr	r3, [r1, #0]
 8004b84:	402b      	ands	r3, r5
 8004b86:	600b      	str	r3, [r1, #0]
 8004b88:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b8c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b90:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b94:	6821      	ldr	r1, [r4, #0]
 8004b96:	688b      	ldr	r3, [r1, #8]
 8004b98:	4393      	bics	r3, r2
 8004b9a:	608b      	str	r3, [r1, #8]
 8004b9c:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d10a      	bne.n	8004bbc <UART_CheckIdleState+0x280>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004baa:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bae:	2010      	movs	r0, #16
 8004bb0:	6822      	ldr	r2, [r4, #0]
 8004bb2:	6813      	ldr	r3, [r2, #0]
 8004bb4:	4383      	bics	r3, r0
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	2380      	movs	r3, #128	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bc0:	2184      	movs	r1, #132	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004bc2:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxISR = NULL;
 8004bc8:	66a3      	str	r3, [r4, #104]	@ 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bca:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8004bcc:	3258      	adds	r2, #88	@ 0x58
 8004bce:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8004bd0:	e722      	b.n	8004a18 <UART_CheckIdleState+0xdc>
 8004bd2:	46c0      	nop			@ (mov r8, r8)
 8004bd4:	fffffedf 	.word	0xfffffedf

08004bd8 <HAL_UART_Init>:
{
 8004bd8:	b570      	push	{r4, r5, r6, lr}
 8004bda:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004bdc:	d06d      	beq.n	8004cba <HAL_UART_Init+0xe2>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004bde:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d100      	bne.n	8004be6 <HAL_UART_Init+0xe>
 8004be4:	e06f      	b.n	8004cc6 <HAL_UART_Init+0xee>
  huart->gState = HAL_UART_STATE_BUSY;
 8004be6:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8004be8:	2201      	movs	r2, #1
 8004bea:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004bec:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8004bee:	682b      	ldr	r3, [r5, #0]
 8004bf0:	4393      	bics	r3, r2
 8004bf2:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bf4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d161      	bne.n	8004cbe <HAL_UART_Init+0xe6>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bfa:	6920      	ldr	r0, [r4, #16]
 8004bfc:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bfe:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c00:	4303      	orrs	r3, r0
 8004c02:	6960      	ldr	r0, [r4, #20]
 8004c04:	69e2      	ldr	r2, [r4, #28]
 8004c06:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c08:	4848      	ldr	r0, [pc, #288]	@ (8004d2c <HAL_UART_Init+0x154>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c0a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c0c:	4001      	ands	r1, r0
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c12:	686b      	ldr	r3, [r5, #4]
 8004c14:	4946      	ldr	r1, [pc, #280]	@ (8004d30 <HAL_UART_Init+0x158>)
  tmpreg |= huart->Init.OneBitSampling;
 8004c16:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c18:	400b      	ands	r3, r1
 8004c1a:	68e1      	ldr	r1, [r4, #12]
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c20:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c22:	68a9      	ldr	r1, [r5, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8004c24:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c26:	4843      	ldr	r0, [pc, #268]	@ (8004d34 <HAL_UART_Init+0x15c>)
 8004c28:	4001      	ands	r1, r0
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c2e:	4b42      	ldr	r3, [pc, #264]	@ (8004d38 <HAL_UART_Init+0x160>)
 8004c30:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004c32:	2303      	movs	r3, #3
 8004c34:	400b      	ands	r3, r1
 8004c36:	3b01      	subs	r3, #1
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d90c      	bls.n	8004c56 <HAL_UART_Init+0x7e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c3c:	2380      	movs	r3, #128	@ 0x80
 8004c3e:	021b      	lsls	r3, r3, #8
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d100      	bne.n	8004c46 <HAL_UART_Init+0x6e>
 8004c44:	e06f      	b.n	8004d26 <HAL_UART_Init+0x14e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c46:	f7ff fb73 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	d111      	bne.n	8004c72 <HAL_UART_Init+0x9a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c4e:	6823      	ldr	r3, [r4, #0]
  huart->RxISR = NULL;
 8004c50:	66a0      	str	r0, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c52:	66e0      	str	r0, [r4, #108]	@ 0x6c
  return ret;
 8004c54:	e01c      	b.n	8004c90 <HAL_UART_Init+0xb8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c56:	2080      	movs	r0, #128	@ 0x80
 8004c58:	4938      	ldr	r1, [pc, #224]	@ (8004d3c <HAL_UART_Init+0x164>)
 8004c5a:	0200      	lsls	r0, r0, #8
 8004c5c:	5ccb      	ldrb	r3, [r1, r3]
 8004c5e:	4282      	cmp	r2, r0
 8004c60:	d036      	beq.n	8004cd0 <HAL_UART_Init+0xf8>
    switch (clocksource)
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d056      	beq.n	8004d14 <HAL_UART_Init+0x13c>
 8004c66:	d823      	bhi.n	8004cb0 <HAL_UART_Init+0xd8>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0ec      	beq.n	8004c46 <HAL_UART_Init+0x6e>
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d121      	bne.n	8004cb4 <HAL_UART_Init+0xdc>
        pclk = (uint32_t) HSI_VALUE;
 8004c70:	4833      	ldr	r0, [pc, #204]	@ (8004d40 <HAL_UART_Init+0x168>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c72:	6861      	ldr	r1, [r4, #4]
 8004c74:	084b      	lsrs	r3, r1, #1
 8004c76:	1818      	adds	r0, r3, r0
 8004c78:	f7fb fa46 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c7c:	0002      	movs	r2, r0
 8004c7e:	4b31      	ldr	r3, [pc, #196]	@ (8004d44 <HAL_UART_Init+0x16c>)
 8004c80:	3a10      	subs	r2, #16
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d816      	bhi.n	8004cb4 <HAL_UART_Init+0xdc>
  huart->RxISR = NULL;
 8004c86:	2200      	movs	r2, #0
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8004c8c:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c8e:	66e2      	str	r2, [r4, #108]	@ 0x6c
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	492d      	ldr	r1, [pc, #180]	@ (8004d48 <HAL_UART_Init+0x170>)
  return (UART_CheckIdleState(huart));
 8004c94:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c96:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c98:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	438a      	bics	r2, r1
 8004ca0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	3929      	subs	r1, #41	@ 0x29
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004caa:	f7ff fe47 	bl	800493c <UART_CheckIdleState>
 8004cae:	e005      	b.n	8004cbc <HAL_UART_Init+0xe4>
    switch (clocksource)
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d0de      	beq.n	8004c72 <HAL_UART_Init+0x9a>
  huart->RxISR = NULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8004cb8:	66e3      	str	r3, [r4, #108]	@ 0x6c
    return HAL_ERROR;
 8004cba:	2001      	movs	r0, #1
}
 8004cbc:	bd70      	pop	{r4, r5, r6, pc}
    UART_AdvFeatureConfig(huart);
 8004cbe:	0020      	movs	r0, r4
 8004cc0:	f7ff fdd4 	bl	800486c <UART_AdvFeatureConfig>
 8004cc4:	e799      	b.n	8004bfa <HAL_UART_Init+0x22>
    huart->Lock = HAL_UNLOCKED;
 8004cc6:	2278      	movs	r2, #120	@ 0x78
 8004cc8:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8004cca:	f7fe fbcb 	bl	8003464 <HAL_UART_MspInit>
 8004cce:	e78a      	b.n	8004be6 <HAL_UART_Init+0xe>
    switch (clocksource)
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d022      	beq.n	8004d1a <HAL_UART_Init+0x142>
 8004cd4:	d819      	bhi.n	8004d0a <HAL_UART_Init+0x132>
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d025      	beq.n	8004d26 <HAL_UART_Init+0x14e>
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d1ea      	bne.n	8004cb4 <HAL_UART_Init+0xdc>
 8004cde:	4b1b      	ldr	r3, [pc, #108]	@ (8004d4c <HAL_UART_Init+0x174>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ce0:	6861      	ldr	r1, [r4, #4]
 8004ce2:	0848      	lsrs	r0, r1, #1
 8004ce4:	18c0      	adds	r0, r0, r3
 8004ce6:	f7fb fa0f 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cea:	0002      	movs	r2, r0
 8004cec:	4b15      	ldr	r3, [pc, #84]	@ (8004d44 <HAL_UART_Init+0x16c>)
 8004cee:	3a10      	subs	r2, #16
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d8df      	bhi.n	8004cb4 <HAL_UART_Init+0xdc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cf4:	4a16      	ldr	r2, [pc, #88]	@ (8004d50 <HAL_UART_Init+0x178>)
        huart->Instance->BRR = brrtemp;
 8004cf6:	6823      	ldr	r3, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cf8:	4002      	ands	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cfa:	0700      	lsls	r0, r0, #28
 8004cfc:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8004cfe:	4302      	orrs	r2, r0
 8004d00:	60da      	str	r2, [r3, #12]
  huart->RxISR = NULL;
 8004d02:	2200      	movs	r2, #0
 8004d04:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d06:	66e2      	str	r2, [r4, #108]	@ 0x6c
  return ret;
 8004d08:	e7c2      	b.n	8004c90 <HAL_UART_Init+0xb8>
    switch (clocksource)
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	d1d2      	bne.n	8004cb4 <HAL_UART_Init+0xdc>
 8004d0e:	2380      	movs	r3, #128	@ 0x80
 8004d10:	025b      	lsls	r3, r3, #9
 8004d12:	e7e5      	b.n	8004ce0 <HAL_UART_Init+0x108>
        pclk = HAL_RCC_GetSysClockFreq();
 8004d14:	f7ff fadc 	bl	80042d0 <HAL_RCC_GetSysClockFreq>
        break;
 8004d18:	e797      	b.n	8004c4a <HAL_UART_Init+0x72>
        pclk = HAL_RCC_GetSysClockFreq();
 8004d1a:	f7ff fad9 	bl	80042d0 <HAL_RCC_GetSysClockFreq>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d1e:	0043      	lsls	r3, r0, #1
    if (pclk != 0U)
 8004d20:	2800      	cmp	r0, #0
 8004d22:	d1dd      	bne.n	8004ce0 <HAL_UART_Init+0x108>
 8004d24:	e793      	b.n	8004c4e <HAL_UART_Init+0x76>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d26:	f7ff fb03 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
        break;
 8004d2a:	e7f8      	b.n	8004d1e <HAL_UART_Init+0x146>
 8004d2c:	ffff69f3 	.word	0xffff69f3
 8004d30:	ffffcfff 	.word	0xffffcfff
 8004d34:	fffff4ff 	.word	0xfffff4ff
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	08006c90 	.word	0x08006c90
 8004d40:	007a1200 	.word	0x007a1200
 8004d44:	0000ffef 	.word	0x0000ffef
 8004d48:	ffffb7ff 	.word	0xffffb7ff
 8004d4c:	00f42400 	.word	0x00f42400
 8004d50:	0000fff0 	.word	0x0000fff0

08004d54 <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volt format
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volt format
  */
__weak uint16_t VBS_GetAvBusVoltage_V(const BusVoltageSensor_Handle_t *pHandle)
{
 8004d54:	0003      	movs	r3, r0
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8004d56:	88c0      	ldrh	r0, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8004d58:	885b      	ldrh	r3, [r3, #2]
 8004d5a:	4358      	muls	r0, r3
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
 8004d5c:	0c00      	lsrs	r0, r0, #16
}
 8004d5e:	4770      	bx	lr

08004d60 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8004d60:	b530      	push	{r4, r5, lr}
 8004d62:	b20b      	sxth	r3, r1
 8004d64:	1409      	asrs	r1, r1, #16
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8004d66:	8802      	ldrh	r2, [r0, #0]

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8004d68:	000c      	movs	r4, r1
    square_limit = maxModule * maxModule;
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8004d6a:	8845      	ldrh	r5, [r0, #2]
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 8004d6c:	0018      	movs	r0, r3
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8004d6e:	434c      	muls	r4, r1
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 8004d70:	4358      	muls	r0, r3
    square_limit = maxModule * maxModule;
 8004d72:	4352      	muls	r2, r2
    square_sum = square_q + square_d;
 8004d74:	1900      	adds	r0, r0, r4
{
 8004d76:	b085      	sub	sp, #20

    if (square_sum > square_limit)
 8004d78:	4282      	cmp	r2, r0
 8004d7a:	da0f      	bge.n	8004d9c <Circle_Limitation+0x3c>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8004d7c:	0028      	movs	r0, r5
 8004d7e:	436d      	muls	r5, r5
    {
      if (square_d <= vd_square_limit)
 8004d80:	42ac      	cmp	r4, r5
 8004d82:	dc11      	bgt.n	8004da8 <Circle_Limitation+0x48>
      {
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - square_d) / 1048576;
 8004d84:	1b12      	subs	r2, r2, r4
 8004d86:	17d4      	asrs	r4, r2, #31
 8004d88:	0324      	lsls	r4, r4, #12
 8004d8a:	0b24      	lsrs	r4, r4, #12
 8004d8c:	18a2      	adds	r2, r4, r2
        new_q = SqrtTable[square_temp];
 8004d8e:	4810      	ldr	r0, [pc, #64]	@ (8004dd0 <Circle_Limitation+0x70>)
        square_temp = (square_limit - square_d) / 1048576;
 8004d90:	1512      	asrs	r2, r2, #20
        new_q = SqrtTable[square_temp];
 8004d92:	0052      	lsls	r2, r2, #1
 8004d94:	5a12      	ldrh	r2, [r2, r0]
#else
        square_temp = square_limit - square_d;
        new_q = MCM_Sqrt(square_temp);
#endif
        if (Vqd.q < 0)
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	db14      	blt.n	8004dc4 <Circle_Limitation+0x64>
        else
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
 8004d9a:	b213      	sxth	r3, r2
      local_vqd.d = (int16_t)new_d;
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 8004d9c:	0418      	lsls	r0, r3, #16
 8004d9e:	0409      	lsls	r1, r1, #16
 8004da0:	0c00      	lsrs	r0, r0, #16
 8004da2:	4308      	orrs	r0, r1
}
 8004da4:	b005      	add	sp, #20
 8004da6:	bd30      	pop	{r4, r5, pc}
        if (Vqd.d < 0)
 8004da8:	2900      	cmp	r1, #0
 8004daa:	db0e      	blt.n	8004dca <Circle_Limitation+0x6a>
        square_temp = (square_limit - vd_square_limit) / 1048576;
 8004dac:	1b52      	subs	r2, r2, r5
 8004dae:	17d4      	asrs	r4, r2, #31
 8004db0:	0324      	lsls	r4, r4, #12
 8004db2:	0b24      	lsrs	r4, r4, #12
 8004db4:	18a2      	adds	r2, r4, r2
        new_q = SqrtTable[square_temp];
 8004db6:	4906      	ldr	r1, [pc, #24]	@ (8004dd0 <Circle_Limitation+0x70>)
        square_temp = (square_limit - vd_square_limit) / 1048576;
 8004db8:	1512      	asrs	r2, r2, #20
        new_q = SqrtTable[square_temp];
 8004dba:	0052      	lsls	r2, r2, #1
 8004dbc:	5a52      	ldrh	r2, [r2, r1]
      local_vqd.d = (int16_t)new_d;
 8004dbe:	b201      	sxth	r1, r0
        if (Vqd.q < 0)
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	daea      	bge.n	8004d9a <Circle_Limitation+0x3a>
          new_q = - new_q;
 8004dc4:	4252      	negs	r2, r2
      local_vqd.q = (int16_t)new_q;
 8004dc6:	b213      	sxth	r3, r2
      local_vqd.d = (int16_t)new_d;
 8004dc8:	e7e8      	b.n	8004d9c <Circle_Limitation+0x3c>
          new_d = -new_d;
 8004dca:	4240      	negs	r0, r0
 8004dcc:	e7ee      	b.n	8004dac <Circle_Limitation+0x4c>
 8004dce:	46c0      	nop			@ (mov r8, r8)
 8004dd0:	08006c94 	.word	0x08006c94

08004dd4 <NTC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8004dd4:	7803      	ldrb	r3, [r0, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d107      	bne.n	8004dea <NTC_Init+0x16>
    /* nothing to do */
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 ) 
 8004dda:	2210      	movs	r2, #16
 8004ddc:	5e83      	ldrsh	r3, [r0, r2]
 8004dde:	1e5a      	subs	r2, r3, #1
 8004de0:	4313      	orrs	r3, r2
 8004de2:	17db      	asrs	r3, r3, #31
 8004de4:	b29b      	uxth	r3, r3
    {
      pHandle->hAvTemp_d = 0U;
    }
    else
    {
      pHandle->hAvTemp_d = 0xFFFFU;
 8004de6:	8043      	strh	r3, [r0, #2]
}
 8004de8:	4770      	bx	lr
      pHandle->hFaultState = MC_NO_ERROR;
 8004dea:	2300      	movs	r3, #0
 8004dec:	8103      	strh	r3, [r0, #8]
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8004dee:	8883      	ldrh	r3, [r0, #4]
 8004df0:	e7f9      	b.n	8004de6 <NTC_Init+0x12>
 8004df2:	46c0      	nop			@ (mov r8, r8)

08004df4 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8004df4:	7803      	ldrb	r3, [r0, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10a      	bne.n	8004e10 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
      wTemp -= ((int32_t)pHandle->wV0);
 8004dfa:	6942      	ldr	r2, [r0, #20]
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8004dfc:	8843      	ldrh	r3, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 8004dfe:	1a9b      	subs	r3, r3, r2
      wTemp *= pHandle->hSensitivity;
 8004e00:	2110      	movs	r1, #16
 8004e02:	5e42      	ldrsh	r2, [r0, r1]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8004e04:	8b00      	ldrh	r0, [r0, #24]
      wTemp *= pHandle->hSensitivity;
 8004e06:	4353      	muls	r3, r2
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8004e08:	141b      	asrs	r3, r3, #16
 8004e0a:	18c0      	adds	r0, r0, r3
    }
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
 8004e0c:	b200      	sxth	r0, r0
}
 8004e0e:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8004e10:	88c0      	ldrh	r0, [r0, #6]
 8004e12:	e7fb      	b.n	8004e0c <NTC_GetAvTemp_C+0x18>

08004e14 <PID_HandleInit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8004e14:	6803      	ldr	r3, [r0, #0]
 8004e16:	6043      	str	r3, [r0, #4]
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8004e18:	8c03      	ldrh	r3, [r0, #32]
 8004e1a:	8443      	strh	r3, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8004e20:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8004e22:	4770      	bx	lr

08004e24 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8004e24:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8004e26:	4770      	bx	lr

08004e28 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8004e28:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8004e2a:	4770      	bx	lr

08004e2c <PID_GetKP>:
__weak int16_t PID_GetKP(PID_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
 8004e2c:	2304      	movs	r3, #4
 8004e2e:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8004e30:	4770      	bx	lr
 8004e32:	46c0      	nop			@ (mov r8, r8)

08004e34 <PID_GetKI>:
__weak int16_t PID_GetKI(PID_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
 8004e34:	2306      	movs	r3, #6
 8004e36:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8004e38:	4770      	bx	lr
 8004e3a:	46c0      	nop			@ (mov r8, r8)

08004e3c <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8004e3c:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8004e3e:	4770      	bx	lr

08004e40 <PID_GetKIDivisor>:
__weak uint16_t PID_GetKIDivisor(PID_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
 8004e40:	8b40      	ldrh	r0, [r0, #26]
#endif
}
 8004e42:	4770      	bx	lr

08004e44 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8004e44:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8004e46:	4770      	bx	lr

08004e48 <PID_GetKD>:
__weak int16_t PID_GetKD(PID_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
 8004e48:	2322      	movs	r3, #34	@ 0x22
 8004e4a:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8004e4c:	4770      	bx	lr
 8004e4e:	46c0      	nop			@ (mov r8, r8)

08004e50 <PI_Controller>:
  * 
  * The resulting value is then saturated by the upper and lower output limit values before 
  * being returned.
  */
__weak int16_t PI_Controller(PID_Handle_t *pHandle, int32_t wProcessVarError)
{
 8004e50:	0003      	movs	r3, r0
 8004e52:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t wIntegral_Term;
    int32_t wOutput_32;
    int32_t wIntegral_sum_temp;
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8004e54:	2216      	movs	r2, #22
 8004e56:	5e9e      	ldrsh	r6, [r3, r2]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8004e58:	2214      	movs	r2, #20
 8004e5a:	5e80      	ldrsh	r0, [r0, r2]

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8004e5c:	2406      	movs	r4, #6
 8004e5e:	5f1d      	ldrsh	r5, [r3, r4]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004e60:	2404      	movs	r4, #4
 8004e62:	5f1a      	ldrsh	r2, [r3, r4]
 8004e64:	2400      	movs	r4, #0
 8004e66:	434a      	muls	r2, r1
    if (0 == pHandle->hKiGain)
 8004e68:	2d00      	cmp	r5, #0
 8004e6a:	d00b      	beq.n	8004e84 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8004e6c:	4369      	muls	r1, r5
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8004e6e:	689d      	ldr	r5, [r3, #8]
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8004e70:	68dc      	ldr	r4, [r3, #12]
      if (wIntegral_sum_temp < 0)
 8004e72:	186f      	adds	r7, r5, r1
 8004e74:	d41a      	bmi.n	8004eac <PI_Controller+0x5c>
        if (pHandle->wIntegralTerm < 0)
 8004e76:	4029      	ands	r1, r5
 8004e78:	d422      	bmi.n	8004ec0 <PI_Controller+0x70>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8004e7a:	42a7      	cmp	r7, r4
 8004e7c:	dc02      	bgt.n	8004e84 <PI_Controller+0x34>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8004e7e:	691c      	ldr	r4, [r3, #16]
 8004e80:	42bc      	cmp	r4, r7
 8004e82:	dd1b      	ble.n	8004ebc <PI_Controller+0x6c>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8004e84:	0025      	movs	r5, r4
 8004e86:	8b99      	ldrh	r1, [r3, #28]
 8004e88:	410a      	asrs	r2, r1
 8004e8a:	8bd9      	ldrh	r1, [r3, #30]
 8004e8c:	410d      	asrs	r5, r1
 8004e8e:	1952      	adds	r2, r2, r5
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8004e90:	4290      	cmp	r0, r2
 8004e92:	da03      	bge.n	8004e9c <PI_Controller+0x4c>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8004e94:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8004e96:	18a4      	adds	r4, r4, r2
 8004e98:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8004e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8004e9c:	4296      	cmp	r6, r2
 8004e9e:	dd03      	ble.n	8004ea8 <PI_Controller+0x58>
      wDischarge = hLowerOutputLimit - wOutput_32;
 8004ea0:	1ab2      	subs	r2, r6, r2
 8004ea2:	0030      	movs	r0, r6
    pHandle->wIntegralTerm += wDischarge;
 8004ea4:	18a4      	adds	r4, r4, r2
 8004ea6:	e7f7      	b.n	8004e98 <PI_Controller+0x48>
    returnValue = (int16_t)wOutput_32;
 8004ea8:	b210      	sxth	r0, r2
 8004eaa:	e7f5      	b.n	8004e98 <PI_Controller+0x48>
        if (pHandle->wIntegralTerm > 0)
 8004eac:	2d00      	cmp	r5, #0
 8004eae:	dde4      	ble.n	8004e7a <PI_Controller+0x2a>
          if (wIntegral_Term > 0)
 8004eb0:	2900      	cmp	r1, #0
 8004eb2:	dde2      	ble.n	8004e7a <PI_Controller+0x2a>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8004eb4:	4903      	ldr	r1, [pc, #12]	@ (8004ec4 <PI_Controller+0x74>)
 8004eb6:	0027      	movs	r7, r4
 8004eb8:	428c      	cmp	r4, r1
 8004eba:	d1e3      	bne.n	8004e84 <PI_Controller+0x34>
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 8004ebc:	003c      	movs	r4, r7
 8004ebe:	e7e1      	b.n	8004e84 <PI_Controller+0x34>
            wIntegral_sum_temp = -INT32_MAX;
 8004ec0:	4f01      	ldr	r7, [pc, #4]	@ (8004ec8 <PI_Controller+0x78>)
 8004ec2:	e7da      	b.n	8004e7a <PI_Controller+0x2a>
 8004ec4:	7fffffff 	.word	0x7fffffff
 8004ec8:	80000001 	.word	0x80000001

08004ecc <PQD_CalcElMotorPower>:
  * computed as an int16_t value.
  * 
  * @param pHandle Handle on the related PQD Motor Power Measurement component instance.
  */
__weak void PQD_CalcElMotorPower(PQD_MotorPowMeas_Handle_t *pHandle)
{
 8004ecc:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8004ece:	6883      	ldr	r3, [r0, #8]
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8004ed0:	220c      	movs	r2, #12
 8004ed2:	5e99      	ldrsh	r1, [r3, r2]
 8004ed4:	2416      	movs	r4, #22
 8004ed6:	5f1a      	ldrsh	r2, [r3, r4]
 8004ed8:	434a      	muls	r2, r1
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8004eda:	240e      	movs	r4, #14
 8004edc:	5f19      	ldrsh	r1, [r3, r4]
 8004ede:	2418      	movs	r4, #24
 8004ee0:	5f1b      	ldrsh	r3, [r3, r4]
 8004ee2:	434b      	muls	r3, r1
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8004ee4:	18d2      	adds	r2, r2, r3
    wAux /= 65536;

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	5ec1      	ldrsh	r1, [r0, r3]
    wAux /= 65536;
 8004eea:	17d3      	asrs	r3, r2, #31
 8004eec:	041b      	lsls	r3, r3, #16
 8004eee:	0c1b      	lsrs	r3, r3, #16
 8004ef0:	189b      	adds	r3, r3, r2
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8004ef2:	220f      	movs	r2, #15
    wAux /= 65536;
 8004ef4:	141b      	asrs	r3, r3, #16
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8004ef6:	1a5b      	subs	r3, r3, r1
 8004ef8:	17dc      	asrs	r4, r3, #31
 8004efa:	4022      	ands	r2, r4
 8004efc:	18d3      	adds	r3, r2, r3
 8004efe:	111b      	asrs	r3, r3, #4
 8004f00:	185b      	adds	r3, r3, r1
 8004f02:	8003      	strh	r3, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 8004f04:	bd10      	pop	{r4, pc}
 8004f06:	46c0      	nop			@ (mov r8, r8)

08004f08 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8004f08:	b570      	push	{r4, r5, r6, lr}
 8004f0a:	0004      	movs	r4, r0
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	5ec0      	ldrsh	r0, [r0, r3]
 8004f10:	f7fb fbdc 	bl	80006cc <__aeabi_i2f>
 8004f14:	1c06      	adds	r6, r0, #0
 8004f16:	68e0      	ldr	r0, [r4, #12]
 8004f18:	f7ff ff1c 	bl	8004d54 <VBS_GetAvBusVoltage_V>
 8004f1c:	6861      	ldr	r1, [r4, #4]
 8004f1e:	0005      	movs	r5, r0
 8004f20:	1c30      	adds	r0, r6, #0
 8004f22:	f7fb fa95 	bl	8000450 <__aeabi_fmul>
 8004f26:	1c04      	adds	r4, r0, #0
 8004f28:	0028      	movs	r0, r5
 8004f2a:	f7fb fc1b 	bl	8000764 <__aeabi_ui2f>
 8004f2e:	1c01      	adds	r1, r0, #0
 8004f30:	1c20      	adds	r0, r4, #0
 8004f32:	f7fb fa8d 	bl	8000450 <__aeabi_fmul>

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 8004f36:	bd70      	pop	{r4, r5, r6, pc}

08004f38 <R3_1_HFCurrentsCalibrationAB>:
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;
  uint8_t bSector = pHandle->CalibSector;
 8004f38:	239f      	movs	r3, #159	@ 0x9f
{
 8004f3a:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004f3c:	2570      	movs	r5, #112	@ 0x70
 8004f3e:	4a10      	ldr	r2, [pc, #64]	@ (8004f80 <R3_1_HFCurrentsCalibrationAB+0x48>)
  uint8_t bSector = pHandle->CalibSector;
 8004f40:	5cc4      	ldrb	r4, [r0, r3]
 8004f42:	6853      	ldr	r3, [r2, #4]
 8004f44:	43ab      	bics	r3, r5
 8004f46:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8004f48:	239e      	movs	r3, #158	@ 0x9e
 8004f4a:	5cc2      	ldrb	r2, [r0, r3]
 8004f4c:	2a0f      	cmp	r2, #15
 8004f4e:	d813      	bhi.n	8004f78 <R3_1_HFCurrentsCalibrationAB+0x40>
  {
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[bSector];
 8004f50:	22a4      	movs	r2, #164	@ 0xa4
 8004f52:	5882      	ldr	r2, [r0, r2]
 8004f54:	00a4      	lsls	r4, r4, #2
 8004f56:	1912      	adds	r2, r2, r4
 8004f58:	69d4      	ldr	r4, [r2, #28]
 8004f5a:	3518      	adds	r5, #24
 8004f5c:	8826      	ldrh	r6, [r4, #0]
 8004f5e:	5944      	ldr	r4, [r0, r5]
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 8004f60:	6b52      	ldr	r2, [r2, #52]	@ 0x34
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[bSector];
 8004f62:	19a4      	adds	r4, r4, r6
 8004f64:	5144      	str	r4, [r0, r5]
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 8004f66:	248c      	movs	r4, #140	@ 0x8c
 8004f68:	8815      	ldrh	r5, [r2, #0]
 8004f6a:	5902      	ldr	r2, [r0, r4]
 8004f6c:	1952      	adds	r2, r2, r5
 8004f6e:	5102      	str	r2, [r0, r4]
    pHandle->PolarizationCounter++;
 8004f70:	5cc2      	ldrb	r2, [r0, r3]
 8004f72:	3201      	adds	r2, #1
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	54c2      	strb	r2, [r0, r3]
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 8004f7c:	804b      	strh	r3, [r1, #2]
}
 8004f7e:	bd70      	pop	{r4, r5, r6, pc}
 8004f80:	40012c00 	.word	0x40012c00

08004f84 <R3_1_HFCurrentsCalibrationC>:
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;
  uint8_t bSector = pHandle->CalibSector;
 8004f84:	239f      	movs	r3, #159	@ 0x9f
{
 8004f86:	b530      	push	{r4, r5, lr}
 8004f88:	2570      	movs	r5, #112	@ 0x70
 8004f8a:	4c0f      	ldr	r4, [pc, #60]	@ (8004fc8 <R3_1_HFCurrentsCalibrationC+0x44>)
  uint8_t bSector = pHandle->CalibSector;
 8004f8c:	5cc2      	ldrb	r2, [r0, r3]
 8004f8e:	6863      	ldr	r3, [r4, #4]
 8004f90:	43ab      	bics	r3, r5
 8004f92:	6063      	str	r3, [r4, #4]

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  pHandle->_Super.Sector = SECTOR_1;
 8004f94:	237a      	movs	r3, #122	@ 0x7a
 8004f96:	2400      	movs	r4, #0
 8004f98:	54c4      	strb	r4, [r0, r3]
  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8004f9a:	3324      	adds	r3, #36	@ 0x24
 8004f9c:	5cc4      	ldrb	r4, [r0, r3]
 8004f9e:	2c0f      	cmp	r4, #15
 8004fa0:	d80e      	bhi.n	8004fc0 <R3_1_HFCurrentsCalibrationC+0x3c>
  {
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 8004fa2:	24a4      	movs	r4, #164	@ 0xa4
 8004fa4:	320c      	adds	r2, #12
 8004fa6:	5904      	ldr	r4, [r0, r4]
 8004fa8:	0092      	lsls	r2, r2, #2
 8004faa:	18a2      	adds	r2, r4, r2
 8004fac:	2490      	movs	r4, #144	@ 0x90
 8004fae:	6852      	ldr	r2, [r2, #4]
 8004fb0:	8815      	ldrh	r5, [r2, #0]
 8004fb2:	5902      	ldr	r2, [r0, r4]
 8004fb4:	1952      	adds	r2, r2, r5
 8004fb6:	5102      	str	r2, [r0, r4]
    pHandle->PolarizationCounter++;
 8004fb8:	5cc2      	ldrb	r2, [r0, r3]
 8004fba:	3201      	adds	r2, #1
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	54c2      	strb	r2, [r0, r3]
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 8004fc4:	804b      	strh	r3, [r1, #2]
}
 8004fc6:	bd30      	pop	{r4, r5, pc}
 8004fc8:	40012c00 	.word	0x40012c00

08004fcc <R3_1_Init>:
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8004fcc:	2104      	movs	r1, #4
 8004fce:	4a39      	ldr	r2, [pc, #228]	@ (80050b4 <R3_1_Init+0xe8>)
{
 8004fd0:	b530      	push	{r4, r5, lr}
 8004fd2:	6853      	ldr	r3, [r2, #4]
 8004fd4:	0004      	movs	r4, r0
 8004fd6:	438b      	bics	r3, r1
 8004fd8:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004fda:	6011      	str	r1, [r2, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8004fdc:	6853      	ldr	r3, [r2, #4]
 8004fde:	3104      	adds	r1, #4
 8004fe0:	438b      	bics	r3, r1
 8004fe2:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 8004fe4:	6011      	str	r1, [r2, #0]
  * @rmtoll CR           CSSON         LL_RCC_HSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8004fe6:	2180      	movs	r1, #128	@ 0x80
 8004fe8:	4b33      	ldr	r3, [pc, #204]	@ (80050b8 <R3_1_Init+0xec>)
 8004fea:	0309      	lsls	r1, r1, #12
 8004fec:	6818      	ldr	r0, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8004fee:	2580      	movs	r5, #128	@ 0x80
 8004ff0:	4301      	orrs	r1, r0
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8004ff2:	2081      	movs	r0, #129	@ 0x81
 8004ff4:	6019      	str	r1, [r3, #0]
 8004ff6:	4931      	ldr	r1, [pc, #196]	@ (80050bc <R3_1_Init+0xf0>)
 8004ff8:	4240      	negs	r0, r0
 8004ffa:	6108      	str	r0, [r1, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8004ffc:	68c8      	ldr	r0, [r1, #12]
 8004ffe:	b083      	sub	sp, #12
 8005000:	4328      	orrs	r0, r5
 8005002:	60c8      	str	r0, [r1, #12]
    LL_TIM_SetCounter( TIM1, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8005004:	2098      	movs	r0, #152	@ 0x98
 8005006:	5a20      	ldrh	r0, [r4, r0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8005008:	3d7e      	subs	r5, #126	@ 0x7e
 800500a:	3801      	subs	r0, #1
  WRITE_REG(TIMx->CNT, Counter);
 800500c:	6248      	str	r0, [r1, #36]	@ 0x24
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800500e:	2080      	movs	r0, #128	@ 0x80
 8005010:	6999      	ldr	r1, [r3, #24]
 8005012:	03c0      	lsls	r0, r0, #15
 8005014:	4301      	orrs	r1, r0
 8005016:	6199      	str	r1, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005018:	699b      	ldr	r3, [r3, #24]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB1_GRP2_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800501a:	4929      	ldr	r1, [pc, #164]	@ (80050c0 <R3_1_Init+0xf4>)
 800501c:	4003      	ands	r3, r0
 800501e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005020:	9b01      	ldr	r3, [sp, #4]
 8005022:	2380      	movs	r3, #128	@ 0x80
 8005024:	68c8      	ldr	r0, [r1, #12]
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	4303      	orrs	r3, r0
 800502a:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(ADCx->CR,
 800502c:	6891      	ldr	r1, [r2, #8]
 800502e:	4b25      	ldr	r3, [pc, #148]	@ (80050c4 <R3_1_Init+0xf8>)
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8005030:	2010      	movs	r0, #16
  MODIFY_REG(ADCx->CR,
 8005032:	4019      	ands	r1, r3
 8005034:	3318      	adds	r3, #24
 8005036:	430b      	orrs	r3, r1
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8005038:	2104      	movs	r1, #4
  MODIFY_REG(ADCx->CR,
 800503a:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800503c:	6893      	ldr	r3, [r2, #8]
           (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 800503e:	2b00      	cmp	r3, #0
 8005040:	dbfc      	blt.n	800503c <R3_1_Init+0x70>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8005042:	6893      	ldr	r3, [r2, #8]
    while ((LL_ADC_IsCalibrationOnGoing(ADC1) == SET) ||
 8005044:	4219      	tst	r1, r3
 8005046:	d1f9      	bne.n	800503c <R3_1_Init+0x70>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8005048:	6893      	ldr	r3, [r2, #8]
           (LL_ADC_REG_IsConversionOngoing(ADC1) == SET) ||
 800504a:	4218      	tst	r0, r3
 800504c:	d1f6      	bne.n	800503c <R3_1_Init+0x70>
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 800504e:	6893      	ldr	r3, [r2, #8]
           (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8005050:	421d      	tst	r5, r3
 8005052:	d1f3      	bne.n	800503c <R3_1_Init+0x70>
  MODIFY_REG(ADCx->CR,
 8005054:	6893      	ldr	r3, [r2, #8]
 8005056:	491b      	ldr	r1, [pc, #108]	@ (80050c4 <R3_1_Init+0xf8>)
 8005058:	400b      	ands	r3, r1
 800505a:	2101      	movs	r1, #1
 800505c:	430b      	orrs	r3, r1
 800505e:	6093      	str	r3, [r2, #8]
    while ( LL_ADC_IsActiveFlag_ADRDY( ADC1 ) == RESET )
 8005060:	2201      	movs	r2, #1
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8005062:	4914      	ldr	r1, [pc, #80]	@ (80050b4 <R3_1_Init+0xe8>)
 8005064:	680b      	ldr	r3, [r1, #0]
 8005066:	421a      	tst	r2, r3
 8005068:	d0fc      	beq.n	8005064 <R3_1_Init+0x98>
    LL_DMA_SetMemoryAddress( DMA1, LL_DMA_CHANNEL_1, ( uint32_t )pHandle->ADC1_DMA_converted );
 800506a:	0023      	movs	r3, r4
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800506c:	2003      	movs	r0, #3
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 800506e:	4916      	ldr	r1, [pc, #88]	@ (80050c8 <R3_1_Init+0xfc>)
 8005070:	339a      	adds	r3, #154	@ 0x9a
 8005072:	60cb      	str	r3, [r1, #12]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8005074:	4b15      	ldr	r3, [pc, #84]	@ (80050cc <R3_1_Init+0x100>)
 8005076:	608b      	str	r3, [r1, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8005078:	684b      	ldr	r3, [r1, #4]
 800507a:	0c1b      	lsrs	r3, r3, #16
 800507c:	041b      	lsls	r3, r3, #16
 800507e:	4303      	orrs	r3, r0
 8005080:	604b      	str	r3, [r1, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8005082:	680b      	ldr	r3, [r1, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005084:	306d      	adds	r0, #109	@ 0x6d
 8005086:	4313      	orrs	r3, r2
 8005088:	600b      	str	r3, [r1, #0]
 800508a:	4b0c      	ldr	r3, [pc, #48]	@ (80050bc <R3_1_Init+0xf0>)
 800508c:	6859      	ldr	r1, [r3, #4]
 800508e:	4381      	bics	r1, r0
 8005090:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->CCER, Channels);
 8005092:	6a18      	ldr	r0, [r3, #32]
 8005094:	490e      	ldr	r1, [pc, #56]	@ (80050d0 <R3_1_Init+0x104>)
 8005096:	4301      	orrs	r1, r0
    pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8005098:	2080      	movs	r0, #128	@ 0x80
 800509a:	6219      	str	r1, [r3, #32]
 800509c:	2194      	movs	r1, #148	@ 0x94
 800509e:	00c0      	lsls	r0, r0, #3
 80050a0:	5060      	str	r0, [r4, r1]
    pHandle->ADCRegularLocked=false; 
 80050a2:	2000      	movs	r0, #0
 80050a4:	310c      	adds	r1, #12
 80050a6:	5460      	strb	r0, [r4, r1]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80050a8:	6819      	ldr	r1, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	601a      	str	r2, [r3, #0]
}
 80050ae:	b003      	add	sp, #12
 80050b0:	bd30      	pop	{r4, r5, pc}
 80050b2:	46c0      	nop			@ (mov r8, r8)
 80050b4:	40012400 	.word	0x40012400
 80050b8:	40021000 	.word	0x40021000
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	40015800 	.word	0x40015800
 80050c4:	7fffffe8 	.word	0x7fffffe8
 80050c8:	40020008 	.word	0x40020008
 80050cc:	40012440 	.word	0x40012440
 80050d0:	00000555 	.word	0x00000555

080050d4 <R3_1_SetOffsetCalib>:
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 80050d4:	2388      	movs	r3, #136	@ 0x88
 80050d6:	688a      	ldr	r2, [r1, #8]
{
 80050d8:	b510      	push	{r4, lr}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 80050da:	684c      	ldr	r4, [r1, #4]
 80050dc:	6809      	ldr	r1, [r1, #0]
 80050de:	50c1      	str	r1, [r0, r3]
 80050e0:	3304      	adds	r3, #4
 80050e2:	50c4      	str	r4, [r0, r3]
 80050e4:	3304      	adds	r3, #4
 80050e6:	50c2      	str	r2, [r0, r3]
  pHdl->offsetCalibStatus = true;
 80050e8:	2201      	movs	r2, #1
 80050ea:	3b11      	subs	r3, #17
 80050ec:	54c2      	strb	r2, [r0, r3]
}
 80050ee:	bd10      	pop	{r4, pc}

080050f0 <R3_1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 80050f0:	238c      	movs	r3, #140	@ 0x8c
{
 80050f2:	b510      	push	{r4, lr}
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 80050f4:	2488      	movs	r4, #136	@ 0x88
 80050f6:	58c2      	ldr	r2, [r0, r3]
 80050f8:	3304      	adds	r3, #4
 80050fa:	58c3      	ldr	r3, [r0, r3]
 80050fc:	5900      	ldr	r0, [r0, r4]
 80050fe:	c10d      	stmia	r1!, {r0, r2, r3}
}
 8005100:	bd10      	pop	{r4, pc}
 8005102:	46c0      	nop			@ (mov r8, r8)

08005104 <R3_1_GetPhaseCurrents>:
{
 8005104:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005106:	2470      	movs	r4, #112	@ 0x70
 8005108:	4a54      	ldr	r2, [pc, #336]	@ (800525c <R3_1_GetPhaseCurrents+0x158>)
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 800510a:	2504      	movs	r5, #4
 800510c:	6853      	ldr	r3, [r2, #4]
 800510e:	43a3      	bics	r3, r4
 8005110:	6053      	str	r3, [r2, #4]
  bSector = ( uint8_t ) pHandle->_Super.Sector;
 8005112:	237a      	movs	r3, #122	@ 0x7a
 8005114:	4c52      	ldr	r4, [pc, #328]	@ (8005260 <R3_1_GetPhaseCurrents+0x15c>)
 8005116:	5cc3      	ldrb	r3, [r0, r3]
 8005118:	68e2      	ldr	r2, [r4, #12]
 800511a:	43aa      	bics	r2, r5
 800511c:	60e2      	str	r2, [r4, #12]
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector];
 800511e:	22a4      	movs	r2, #164	@ 0xa4
 8005120:	5882      	ldr	r2, [r0, r2]
 8005122:	009c      	lsls	r4, r3, #2
 8005124:	1912      	adds	r2, r2, r4
 8005126:	69d4      	ldr	r4, [r2, #28]
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector];
 8005128:	6b52      	ldr	r2, [r2, #52]	@ 0x34
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector];
 800512a:	8824      	ldrh	r4, [r4, #0]
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector];
 800512c:	8816      	ldrh	r6, [r2, #0]
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector];
 800512e:	b2a4      	uxth	r4, r4
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector];
 8005130:	b2b6      	uxth	r6, r6
  switch ( bSector )
 8005132:	2b04      	cmp	r3, #4
 8005134:	d824      	bhi.n	8005180 <R3_1_GetPhaseCurrents+0x7c>
 8005136:	2b02      	cmp	r3, #2
 8005138:	d844      	bhi.n	80051c4 <R3_1_GetPhaseCurrents+0xc0>
 800513a:	2b00      	cmp	r3, #0
 800513c:	d029      	beq.n	8005192 <R3_1_GetPhaseCurrents+0x8e>
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 800513e:	2388      	movs	r3, #136	@ 0x88
 8005140:	58c2      	ldr	r2, [r0, r3]
 8005142:	1b12      	subs	r2, r2, r4
      if ( wAux < -INT16_MAX )
 8005144:	4c47      	ldr	r4, [pc, #284]	@ (8005264 <R3_1_GetPhaseCurrents+0x160>)
 8005146:	42a2      	cmp	r2, r4
 8005148:	da58      	bge.n	80051fc <R3_1_GetPhaseCurrents+0xf8>
 800514a:	0022      	movs	r2, r4
 800514c:	0025      	movs	r5, r4
 800514e:	4b46      	ldr	r3, [pc, #280]	@ (8005268 <R3_1_GetPhaseCurrents+0x164>)
      wAux = ( int32_t )( pHandle->PhaseCOffset ) - ( int32_t )( hReg2 );
 8005150:	2490      	movs	r4, #144	@ 0x90
      wAux = -wAux -  ( int32_t )pStator_Currents->a;         /* Ib  */
 8005152:	5904      	ldr	r4, [r0, r4]
        pStator_Currents->a = -INT16_MAX;
 8005154:	800d      	strh	r5, [r1, #0]
      wAux = -wAux -  ( int32_t )pStator_Currents->a;         /* Ib  */
 8005156:	1b34      	subs	r4, r6, r4
 8005158:	1aa2      	subs	r2, r4, r2
      if ( wAux > INT16_MAX )
 800515a:	2480      	movs	r4, #128	@ 0x80
 800515c:	0224      	lsls	r4, r4, #8
 800515e:	42a2      	cmp	r2, r4
 8005160:	da53      	bge.n	800520a <R3_1_GetPhaseCurrents+0x106>
      else  if ( wAux < -INT16_MAX )
 8005162:	4c40      	ldr	r4, [pc, #256]	@ (8005264 <R3_1_GetPhaseCurrents+0x160>)
 8005164:	42a2      	cmp	r2, r4
 8005166:	db00      	blt.n	800516a <R3_1_GetPhaseCurrents+0x66>
 8005168:	e06e      	b.n	8005248 <R3_1_GetPhaseCurrents+0x144>
        pStator_Currents->b = -INT16_MAX;
 800516a:	4a3f      	ldr	r2, [pc, #252]	@ (8005268 <R3_1_GetPhaseCurrents+0x164>)
 800516c:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ia = pStator_Currents->a;
 800516e:	2162      	movs	r1, #98	@ 0x62
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005170:	189b      	adds	r3, r3, r2
 8005172:	2266      	movs	r2, #102	@ 0x66
  pHandle->_Super.Ia = pStator_Currents->a;
 8005174:	5245      	strh	r5, [r0, r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005176:	425b      	negs	r3, r3
  pHandle->_Super.Ib = pStator_Currents->b;
 8005178:	3102      	adds	r1, #2
 800517a:	5244      	strh	r4, [r0, r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800517c:	5283      	strh	r3, [r0, r2]
}
 800517e:	bd70      	pop	{r4, r5, r6, pc}
  switch ( bSector )
 8005180:	2b05      	cmp	r3, #5
 8005182:	d006      	beq.n	8005192 <R3_1_GetPhaseCurrents+0x8e>
  pHandle->_Super.Ia = pStator_Currents->a;
 8005184:	2300      	movs	r3, #0
 8005186:	5ecd      	ldrsh	r5, [r1, r3]
  pHandle->_Super.Ib = pStator_Currents->b;
 8005188:	2302      	movs	r3, #2
 800518a:	5ecc      	ldrsh	r4, [r1, r3]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800518c:	884a      	ldrh	r2, [r1, #2]
 800518e:	880b      	ldrh	r3, [r1, #0]
 8005190:	e7ed      	b.n	800516e <R3_1_GetPhaseCurrents+0x6a>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8005192:	238c      	movs	r3, #140	@ 0x8c
 8005194:	58c5      	ldr	r5, [r0, r3]
      if ( wAux < -INT16_MAX )
 8005196:	4b33      	ldr	r3, [pc, #204]	@ (8005264 <R3_1_GetPhaseCurrents+0x160>)
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8005198:	1b2d      	subs	r5, r5, r4
      if ( wAux < -INT16_MAX )
 800519a:	429d      	cmp	r5, r3
 800519c:	db3d      	blt.n	800521a <R3_1_GetPhaseCurrents+0x116>
      else  if ( wAux > INT16_MAX )
 800519e:	2380      	movs	r3, #128	@ 0x80
 80051a0:	021b      	lsls	r3, r3, #8
 80051a2:	429d      	cmp	r5, r3
 80051a4:	da54      	bge.n	8005250 <R3_1_GetPhaseCurrents+0x14c>
        pStator_Currents->b = ( int16_t )wAux;
 80051a6:	b22c      	sxth	r4, r5
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80051a8:	b2aa      	uxth	r2, r5
      wAux = ( int32_t )( pHandle->PhaseCOffset ) - ( int32_t )( hReg2 );
 80051aa:	2390      	movs	r3, #144	@ 0x90
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 80051ac:	58c3      	ldr	r3, [r0, r3]
        pStator_Currents->b = -INT16_MAX;
 80051ae:	804c      	strh	r4, [r1, #2]
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 80051b0:	1af3      	subs	r3, r6, r3
 80051b2:	1b5b      	subs	r3, r3, r5
      if ( wAux > INT16_MAX )
 80051b4:	2580      	movs	r5, #128	@ 0x80
 80051b6:	022d      	lsls	r5, r5, #8
 80051b8:	42ab      	cmp	r3, r5
 80051ba:	db32      	blt.n	8005222 <R3_1_GetPhaseCurrents+0x11e>
        pStator_Currents->a = INT16_MAX;
 80051bc:	4b2b      	ldr	r3, [pc, #172]	@ (800526c <R3_1_GetPhaseCurrents+0x168>)
 80051be:	001d      	movs	r5, r3
 80051c0:	800b      	strh	r3, [r1, #0]
 80051c2:	e7d4      	b.n	800516e <R3_1_GetPhaseCurrents+0x6a>
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80051c4:	2388      	movs	r3, #136	@ 0x88
      if ( wAux < -INT16_MAX )
 80051c6:	4a27      	ldr	r2, [pc, #156]	@ (8005264 <R3_1_GetPhaseCurrents+0x160>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80051c8:	58c3      	ldr	r3, [r0, r3]
 80051ca:	0015      	movs	r5, r2
 80051cc:	1b1b      	subs	r3, r3, r4
      if ( wAux < -INT16_MAX )
 80051ce:	4293      	cmp	r3, r2
 80051d0:	db04      	blt.n	80051dc <R3_1_GetPhaseCurrents+0xd8>
      else  if ( wAux > INT16_MAX )
 80051d2:	2280      	movs	r2, #128	@ 0x80
 80051d4:	0212      	lsls	r2, r2, #8
 80051d6:	4293      	cmp	r3, r2
 80051d8:	da3e      	bge.n	8005258 <R3_1_GetPhaseCurrents+0x154>
        pStator_Currents->a = ( int16_t )wAux;
 80051da:	b21d      	sxth	r5, r3
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80051dc:	238c      	movs	r3, #140	@ 0x8c
      if ( wAux < -INT16_MAX )
 80051de:	4c21      	ldr	r4, [pc, #132]	@ (8005264 <R3_1_GetPhaseCurrents+0x160>)
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80051e0:	58c2      	ldr	r2, [r0, r3]
        pStator_Currents->a = -INT16_MAX;
 80051e2:	800d      	strh	r5, [r1, #0]
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80051e4:	1b92      	subs	r2, r2, r6
      if ( wAux < -INT16_MAX )
 80051e6:	42a2      	cmp	r2, r4
 80051e8:	db13      	blt.n	8005212 <R3_1_GetPhaseCurrents+0x10e>
      else  if ( wAux > INT16_MAX )
 80051ea:	2380      	movs	r3, #128	@ 0x80
 80051ec:	021b      	lsls	r3, r3, #8
 80051ee:	429a      	cmp	r2, r3
 80051f0:	db1d      	blt.n	800522e <R3_1_GetPhaseCurrents+0x12a>
        pStator_Currents->b = INT16_MAX;
 80051f2:	4a1e      	ldr	r2, [pc, #120]	@ (800526c <R3_1_GetPhaseCurrents+0x168>)
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80051f4:	b2ab      	uxth	r3, r5
 80051f6:	0014      	movs	r4, r2
        pStator_Currents->b = INT16_MAX;
 80051f8:	804a      	strh	r2, [r1, #2]
 80051fa:	e7b8      	b.n	800516e <R3_1_GetPhaseCurrents+0x6a>
      else  if ( wAux > INT16_MAX )
 80051fc:	2380      	movs	r3, #128	@ 0x80
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	429a      	cmp	r2, r3
 8005202:	da1d      	bge.n	8005240 <R3_1_GetPhaseCurrents+0x13c>
        pStator_Currents->a = ( int16_t )wAux;
 8005204:	b215      	sxth	r5, r2
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005206:	b293      	uxth	r3, r2
 8005208:	e7a2      	b.n	8005150 <R3_1_GetPhaseCurrents+0x4c>
        pStator_Currents->b = INT16_MAX;
 800520a:	4a18      	ldr	r2, [pc, #96]	@ (800526c <R3_1_GetPhaseCurrents+0x168>)
 800520c:	0014      	movs	r4, r2
 800520e:	804a      	strh	r2, [r1, #2]
 8005210:	e7ad      	b.n	800516e <R3_1_GetPhaseCurrents+0x6a>
        pStator_Currents->b = -INT16_MAX;
 8005212:	4a15      	ldr	r2, [pc, #84]	@ (8005268 <R3_1_GetPhaseCurrents+0x164>)
 8005214:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005216:	b2ab      	uxth	r3, r5
 8005218:	e7a9      	b.n	800516e <R3_1_GetPhaseCurrents+0x6a>
 800521a:	001d      	movs	r5, r3
 800521c:	001c      	movs	r4, r3
 800521e:	4a12      	ldr	r2, [pc, #72]	@ (8005268 <R3_1_GetPhaseCurrents+0x164>)
 8005220:	e7c3      	b.n	80051aa <R3_1_GetPhaseCurrents+0xa6>
      else  if ( wAux < -INT16_MAX )
 8005222:	4d10      	ldr	r5, [pc, #64]	@ (8005264 <R3_1_GetPhaseCurrents+0x160>)
 8005224:	42ab      	cmp	r3, r5
 8005226:	da07      	bge.n	8005238 <R3_1_GetPhaseCurrents+0x134>
        pStator_Currents->a = -INT16_MAX;
 8005228:	4b0f      	ldr	r3, [pc, #60]	@ (8005268 <R3_1_GetPhaseCurrents+0x164>)
 800522a:	800d      	strh	r5, [r1, #0]
 800522c:	e79f      	b.n	800516e <R3_1_GetPhaseCurrents+0x6a>
        pStator_Currents->b = ( int16_t )wAux;
 800522e:	b214      	sxth	r4, r2
 8005230:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005232:	b2ab      	uxth	r3, r5
 8005234:	b292      	uxth	r2, r2
 8005236:	e79a      	b.n	800516e <R3_1_GetPhaseCurrents+0x6a>
        pStator_Currents->a = ( int16_t )wAux;
 8005238:	b21d      	sxth	r5, r3
 800523a:	800d      	strh	r5, [r1, #0]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800523c:	b29b      	uxth	r3, r3
 800523e:	e796      	b.n	800516e <R3_1_GetPhaseCurrents+0x6a>
 8005240:	4b0a      	ldr	r3, [pc, #40]	@ (800526c <R3_1_GetPhaseCurrents+0x168>)
 8005242:	001a      	movs	r2, r3
 8005244:	001d      	movs	r5, r3
 8005246:	e783      	b.n	8005150 <R3_1_GetPhaseCurrents+0x4c>
        pStator_Currents->b = ( int16_t )wAux;
 8005248:	b214      	sxth	r4, r2
 800524a:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800524c:	b292      	uxth	r2, r2
 800524e:	e78e      	b.n	800516e <R3_1_GetPhaseCurrents+0x6a>
 8005250:	4a06      	ldr	r2, [pc, #24]	@ (800526c <R3_1_GetPhaseCurrents+0x168>)
 8005252:	0015      	movs	r5, r2
 8005254:	0014      	movs	r4, r2
 8005256:	e7a8      	b.n	80051aa <R3_1_GetPhaseCurrents+0xa6>
 8005258:	4d04      	ldr	r5, [pc, #16]	@ (800526c <R3_1_GetPhaseCurrents+0x168>)
 800525a:	e7bf      	b.n	80051dc <R3_1_GetPhaseCurrents+0xd8>
 800525c:	40012c00 	.word	0x40012c00
 8005260:	40012400 	.word	0x40012400
 8005264:	ffff8001 	.word	0xffff8001
 8005268:	00008001 	.word	0x00008001
 800526c:	00007fff 	.word	0x00007fff

08005270 <R3_1_WriteTIMRegisters>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005270:	22a4      	movs	r2, #164	@ 0xa4
{
 8005272:	0003      	movs	r3, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005274:	5882      	ldr	r2, [r0, r2]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPhA );
 8005276:	2050      	movs	r0, #80	@ 0x50
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005278:	6812      	ldr	r2, [r2, #0]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPhA );
 800527a:	5a18      	ldrh	r0, [r3, r0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800527c:	6350      	str	r0, [r2, #52]	@ 0x34
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPhB );
 800527e:	2052      	movs	r0, #82	@ 0x52
 8005280:	5a18      	ldrh	r0, [r3, r0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005282:	6390      	str	r0, [r2, #56]	@ 0x38
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t)pHandle->_Super.CntPhC );
 8005284:	2054      	movs	r0, #84	@ 0x54
 8005286:	5a18      	ldrh	r0, [r3, r0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005288:	63d0      	str	r0, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800528a:	6411      	str	r1, [r2, #64]	@ 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800528c:	6851      	ldr	r1, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 800528e:	2256      	movs	r2, #86	@ 0x56
 8005290:	5a98      	ldrh	r0, [r3, r2]
 8005292:	2801      	cmp	r0, #1
 8005294:	d005      	beq.n	80052a2 <R3_1_WriteTIMRegisters+0x32>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8005296:	2070      	movs	r0, #112	@ 0x70
 8005298:	4008      	ands	r0, r1
 800529a:	1e43      	subs	r3, r0, #1
 800529c:	4198      	sbcs	r0, r3
 800529e:	b280      	uxth	r0, r0
}
 80052a0:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 80052a2:	2100      	movs	r1, #0
 80052a4:	5299      	strh	r1, [r3, r2]
 80052a6:	e7fb      	b.n	80052a0 <R3_1_WriteTIMRegisters+0x30>

080052a8 <R3_1_SetADCSampPointCalibration>:
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 80052a8:	2280      	movs	r2, #128	@ 0x80
 80052aa:	2394      	movs	r3, #148	@ 0x94
{
 80052ac:	b510      	push	{r4, lr}
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 80052ae:	00d2      	lsls	r2, r2, #3
 80052b0:	50c2      	str	r2, [r0, r3]
  pHandle->_Super.Sector = pHandle->CalibSector;
 80052b2:	330b      	adds	r3, #11
 80052b4:	5cc2      	ldrb	r2, [r0, r3]
 80052b6:	3b25      	subs	r3, #37	@ 0x25
 80052b8:	54c2      	strb	r2, [r0, r3]
  return R3_1_WriteTIMRegisters( pHdl,  ( uint16_t )( pHandle->Half_PWMPeriod ) - 1u);
 80052ba:	331e      	adds	r3, #30
 80052bc:	5ac1      	ldrh	r1, [r0, r3]
 80052be:	3901      	subs	r1, #1
 80052c0:	b289      	uxth	r1, r1
 80052c2:	f7ff ffd5 	bl	8005270 <R3_1_WriteTIMRegisters>
}
 80052c6:	bd10      	pop	{r4, pc}

080052c8 <R3_1_SetADCSampPointSectX>:
  register uint16_t lowDuty = pHdl->lowDuty;
 80052c8:	2358      	movs	r3, #88	@ 0x58
{
 80052ca:	b570      	push	{r4, r5, r6, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 80052cc:	5ac5      	ldrh	r5, [r0, r3]
  register uint16_t midDuty = pHdl->midDuty;
 80052ce:	3302      	adds	r3, #2
 80052d0:	5ac1      	ldrh	r1, [r0, r3]
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 80052d2:	333e      	adds	r3, #62	@ 0x3e
 80052d4:	5ac4      	ldrh	r4, [r0, r3]
 80052d6:	330c      	adds	r3, #12
 80052d8:	58c6      	ldr	r6, [r0, r3]
 80052da:	3b56      	subs	r3, #86	@ 0x56
 80052dc:	1b62      	subs	r2, r4, r5
 80052de:	5af3      	ldrh	r3, [r6, r3]
 80052e0:	b292      	uxth	r2, r2
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d907      	bls.n	80052f6 <R3_1_SetADCSampPointSectX+0x2e>
    pHandle->_Super.Sector = SECTOR_5;
 80052e6:	237a      	movs	r3, #122	@ 0x7a
 80052e8:	2204      	movs	r2, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 80052ea:	3c01      	subs	r4, #1
    pHandle->_Super.Sector = SECTOR_5;
 80052ec:	54c2      	strb	r2, [r0, r3]
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 80052ee:	b2a1      	uxth	r1, r4
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp );
 80052f0:	f7ff ffbe 	bl	8005270 <R3_1_WriteTIMRegisters>
}
 80052f4:	bd70      	pop	{r4, r5, r6, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 80052f6:	1a69      	subs	r1, r5, r1
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 80052f8:	b289      	uxth	r1, r1
 80052fa:	0052      	lsls	r2, r2, #1
 80052fc:	4291      	cmp	r1, r2
 80052fe:	d904      	bls.n	800530a <R3_1_SetADCSampPointSectX+0x42>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 8005300:	2350      	movs	r3, #80	@ 0x50
 8005302:	5af1      	ldrh	r1, [r6, r3]
 8005304:	1a69      	subs	r1, r5, r1
 8005306:	b289      	uxth	r1, r1
 8005308:	e7f2      	b.n	80052f0 <R3_1_SetADCSampPointSectX+0x28>
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 800530a:	1959      	adds	r1, r3, r5
 800530c:	b289      	uxth	r1, r1
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 800530e:	428c      	cmp	r4, r1
 8005310:	d8ee      	bhi.n	80052f0 <R3_1_SetADCSampPointSectX+0x28>
        pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_FALLING;
 8005312:	2280      	movs	r2, #128	@ 0x80
 8005314:	2394      	movs	r3, #148	@ 0x94
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8005316:	0064      	lsls	r4, r4, #1
 8005318:	3c01      	subs	r4, #1
        pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_FALLING;
 800531a:	0112      	lsls	r2, r2, #4
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 800531c:	1a61      	subs	r1, r4, r1
        pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_FALLING;
 800531e:	50c2      	str	r2, [r0, r3]
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8005320:	b289      	uxth	r1, r1
 8005322:	e7e5      	b.n	80052f0 <R3_1_SetADCSampPointSectX+0x28>

08005324 <R3_1_TurnOnLowSides>:
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;

  pHandle->_Super.TurnOnLowSidesAction = true;
 8005324:	237c      	movs	r3, #124	@ 0x7c
 8005326:	2201      	movs	r2, #1
 8005328:	54c2      	strb	r2, [r0, r3]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800532a:	4a10      	ldr	r2, [pc, #64]	@ (800536c <R3_1_TurnOnLowSides+0x48>)
 800532c:	3b7e      	subs	r3, #126	@ 0x7e
 800532e:	6113      	str	r3, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005330:	6351      	str	r1, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005332:	6391      	str	r1, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005334:	63d1      	str	r1, [r2, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005336:	2101      	movs	r1, #1
 8005338:	6913      	ldr	r3, [r2, #16]
 800533a:	4219      	tst	r1, r3
 800533c:	d0fc      	beq.n	8005338 <R3_1_TurnOnLowSides+0x14>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800533e:	2380      	movs	r3, #128	@ 0x80
 8005340:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	430b      	orrs	r3, r1
 8005346:	6453      	str	r3, [r2, #68]	@ 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8005348:	237b      	movs	r3, #123	@ 0x7b
 800534a:	5cc3      	ldrb	r3, [r0, r3]
 800534c:	2b02      	cmp	r3, #2
 800534e:	d10b      	bne.n	8005368 <R3_1_TurnOnLowSides+0x44>
  {
    /* Enable signals activation */
    LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
 8005350:	2248      	movs	r2, #72	@ 0x48
 8005352:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8005354:	5a82      	ldrh	r2, [r0, r2]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005356:	619a      	str	r2, [r3, #24]
    LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 8005358:	224a      	movs	r2, #74	@ 0x4a
 800535a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800535c:	5a82      	ldrh	r2, [r0, r2]
 800535e:	619a      	str	r2, [r3, #24]
    LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 8005360:	224c      	movs	r2, #76	@ 0x4c
 8005362:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8005364:	5a82      	ldrh	r2, [r0, r2]
 8005366:	619a      	str	r2, [r3, #24]

  }
  return;
}
 8005368:	4770      	bx	lr
 800536a:	46c0      	nop			@ (mov r8, r8)
 800536c:	40012c00 	.word	0x40012c00

08005370 <R3_1_SwitchOnPWM>:
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;

  pHandle->_Super.TurnOnLowSidesAction = false;
 8005370:	237c      	movs	r3, #124	@ 0x7c
 8005372:	2200      	movs	r2, #0
{
 8005374:	b5f0      	push	{r4, r5, r6, r7, lr}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005376:	54c2      	strb	r2, [r0, r3]

  /* We forbid ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=true; 
 8005378:	3324      	adds	r3, #36	@ 0x24
 800537a:	3201      	adds	r2, #1
 800537c:	54c2      	strb	r2, [r0, r3]
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod >> 1));
 800537e:	3b08      	subs	r3, #8
 8005380:	5ac2      	ldrh	r2, [r0, r3]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005382:	4b32      	ldr	r3, [pc, #200]	@ (800544c <R3_1_SwitchOnPWM+0xdc>)
 8005384:	0851      	lsrs	r1, r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 8005386:	3a05      	subs	r2, #5
 8005388:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800538a:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800538c:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800538e:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005390:	2202      	movs	r2, #2
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005392:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005394:	4252      	negs	r2, r2
 8005396:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	4211      	tst	r1, r2
 800539c:	d0fc      	beq.n	8005398 <R3_1_SwitchOnPWM+0x28>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800539e:	2202      	movs	r2, #2
 80053a0:	4252      	negs	r2, r2
 80053a2:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80053a4:	2280      	movs	r2, #128	@ 0x80
 80053a6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80053a8:	00d2      	lsls	r2, r2, #3
 80053aa:	430a      	orrs	r2, r1
 80053ac:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80053ae:	2280      	movs	r2, #128	@ 0x80
 80053b0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80053b2:	0212      	lsls	r2, r2, #8
 80053b4:	430a      	orrs	r2, r1
 80053b6:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 80053b8:	227b      	movs	r2, #123	@ 0x7b
 80053ba:	5c82      	ldrb	r2, [r0, r2]
 80053bc:	2a02      	cmp	r2, #2
 80053be:	d02b      	beq.n	8005418 <R3_1_SwitchOnPWM+0xa8>

	  
    /* Configuration of DMA and ADC to next conversions */
    /* It's possible write the CHSELR resgister because the ADC conversion
       is stopped by the R3_1_SwitchOffPWM function */
    LL_ADC_SetSamplingTimeCommonChannels ( ADC1, pHandle->pParams_str->b_ISamplingTime );
 80053c0:	23a4      	movs	r3, #164	@ 0xa4
 80053c2:	58c0      	ldr	r0, [r0, r3]
 80053c4:	3b4c      	subs	r3, #76	@ 0x4c
 80053c6:	5cc3      	ldrb	r3, [r0, r3]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80053c8:	2007      	movs	r0, #7
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80053ca:	2402      	movs	r4, #2
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80053cc:	2504      	movs	r5, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80053ce:	2603      	movs	r6, #3
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80053d0:	491f      	ldr	r1, [pc, #124]	@ (8005450 <R3_1_SwitchOnPWM+0xe0>)
 80053d2:	694a      	ldr	r2, [r1, #20]
 80053d4:	4382      	bics	r2, r0
 80053d6:	4313      	orrs	r3, r2
 80053d8:	614b      	str	r3, [r1, #20]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80053da:	4b1e      	ldr	r3, [pc, #120]	@ (8005454 <R3_1_SwitchOnPWM+0xe4>)
 80053dc:	3806      	subs	r0, #6
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	4382      	bics	r2, r0
 80053e2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	0c12      	lsrs	r2, r2, #16
 80053e8:	0412      	lsls	r2, r2, #16
 80053ea:	4322      	orrs	r2, r4
 80053ec:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	4302      	orrs	r2, r0
 80053f2:	601a      	str	r2, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80053f4:	600d      	str	r5, [r1, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80053f6:	68ca      	ldr	r2, [r1, #12]
 80053f8:	43b2      	bics	r2, r6
 80053fa:	4302      	orrs	r2, r0
 80053fc:	60ca      	str	r2, [r1, #12]
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 80053fe:	4a16      	ldr	r2, [pc, #88]	@ (8005458 <R3_1_SwitchOnPWM+0xe8>)
 8005400:	6055      	str	r5, [r2, #4]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	4322      	orrs	r2, r4
 8005406:	601a      	str	r2, [r3, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005408:	2202      	movs	r2, #2
 800540a:	4b10      	ldr	r3, [pc, #64]	@ (800544c <R3_1_SwitchOnPWM+0xdc>)
 800540c:	4252      	negs	r2, r2
 800540e:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	4302      	orrs	r2, r0
 8005414:	60da      	str	r2, [r3, #12]
    LL_TIM_ClearFlag_UPDATE( TIMx );
    /* Enable Update IRQ */
    LL_TIM_EnableIT_UPDATE( TIMx );
  
  return;
}
 8005416:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
 8005418:	3246      	adds	r2, #70	@ 0x46
 800541a:	5a82      	ldrh	r2, [r0, r2]
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	4694      	mov	ip, r2
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 8005420:	224a      	movs	r2, #74	@ 0x4a
 8005422:	5a86      	ldrh	r6, [r0, r2]
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 8005424:	3202      	adds	r2, #2
 8005426:	5a84      	ldrh	r4, [r0, r2]
 8005428:	4a0c      	ldr	r2, [pc, #48]	@ (800545c <R3_1_SwitchOnPWM+0xec>)
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
 800542a:	6bc7      	ldr	r7, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 800542c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 800542e:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8005430:	4013      	ands	r3, r2
 8005432:	4293      	cmp	r3, r2
 8005434:	d004      	beq.n	8005440 <R3_1_SwitchOnPWM+0xd0>
  WRITE_REG(GPIOx->BRR, PinMask);
 8005436:	4663      	mov	r3, ip
 8005438:	62bb      	str	r3, [r7, #40]	@ 0x28
 800543a:	62ae      	str	r6, [r5, #40]	@ 0x28
 800543c:	628c      	str	r4, [r1, #40]	@ 0x28
}
 800543e:	e7bf      	b.n	80053c0 <R3_1_SwitchOnPWM+0x50>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005440:	4663      	mov	r3, ip
 8005442:	61bb      	str	r3, [r7, #24]
 8005444:	61ae      	str	r6, [r5, #24]
 8005446:	618c      	str	r4, [r1, #24]
}
 8005448:	e7ba      	b.n	80053c0 <R3_1_SwitchOnPWM+0x50>
 800544a:	46c0      	nop			@ (mov r8, r8)
 800544c:	40012c00 	.word	0x40012c00
 8005450:	40012400 	.word	0x40012400
 8005454:	40020008 	.word	0x40020008
 8005458:	40020000 	.word	0x40020000
 800545c:	00000555 	.word	0x00000555

08005460 <R3_1_SwitchOffPWM>:
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005460:	2101      	movs	r1, #1
 8005462:	4b23      	ldr	r3, [pc, #140]	@ (80054f0 <R3_1_SwitchOffPWM+0x90>)
  * @brief  Contains the TIMx Update event interrupt.
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
 8005464:	b510      	push	{r4, lr}
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	438a      	bics	r2, r1
 800546a:	60da      	str	r2, [r3, #12]
  TIM_TypeDef * TIMx = TIM1;

  /* Enable Update IRQ */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 800546c:	2100      	movs	r1, #0
 800546e:	227c      	movs	r2, #124	@ 0x7c
 8005470:	5481      	strb	r1, [r0, r2]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005472:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005474:	491f      	ldr	r1, [pc, #124]	@ (80054f4 <R3_1_SwitchOffPWM+0x94>)
 8005476:	400a      	ands	r2, r1
 8005478:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if ( pHandle->_Super.BrakeActionLock == true )
 800547a:	2383      	movs	r3, #131	@ 0x83
 800547c:	5cc3      	ldrb	r3, [r0, r3]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d103      	bne.n	800548a <R3_1_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8005482:	337b      	adds	r3, #123	@ 0x7b
 8005484:	5cc3      	ldrb	r3, [r0, r3]
 8005486:	2b02      	cmp	r3, #2
 8005488:	d025      	beq.n	80054d6 <R3_1_SwitchOffPWM+0x76>
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800548a:	2102      	movs	r1, #2
 800548c:	4a1a      	ldr	r2, [pc, #104]	@ (80054f8 <R3_1_SwitchOffPWM+0x98>)
  MODIFY_REG(ADCx->CR,
 800548e:	4c1b      	ldr	r4, [pc, #108]	@ (80054fc <R3_1_SwitchOffPWM+0x9c>)
 8005490:	6813      	ldr	r3, [r2, #0]
 8005492:	438b      	bics	r3, r1
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	4b1a      	ldr	r3, [pc, #104]	@ (8005500 <R3_1_SwitchOffPWM+0xa0>)
 8005498:	689a      	ldr	r2, [r3, #8]
 800549a:	4022      	ands	r2, r4
 800549c:	2410      	movs	r4, #16
 800549e:	4322      	orrs	r2, r4
 80054a0:	609a      	str	r2, [r3, #8]
  LL_DMA_DisableIT_TC( DMA1, LL_DMA_CHANNEL_1 );

  LL_ADC_REG_StopConversion( ADC1 );

  /* Disable ADC DMA request*/
  ADC1->CFGR1 &= ~ADC_CFGR1_DMAEN;
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	3c0f      	subs	r4, #15
 80054a6:	43a2      	bics	r2, r4
 80054a8:	60da      	str	r2, [r3, #12]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80054aa:	4a16      	ldr	r2, [pc, #88]	@ (8005504 <R3_1_SwitchOffPWM+0xa4>)
 80054ac:	6051      	str	r1, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80054ae:	2204      	movs	r2, #4
 80054b0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	4914      	ldr	r1, [pc, #80]	@ (8005508 <R3_1_SwitchOffPWM+0xa8>)
 80054b6:	400a      	ands	r2, r1
 80054b8:	60da      	str	r2, [r3, #12]

  /* The ADC is not triggered anymore by the PWM timer */
  LL_ADC_REG_SetTriggerSource (ADC1, LL_ADC_REG_TRIG_SOFTWARE);
  
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 80054ba:	23a0      	movs	r3, #160	@ 0xa0
 80054bc:	2200      	movs	r2, #0
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80054be:	2101      	movs	r1, #1
 80054c0:	54c2      	strb	r2, [r0, r3]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80054c2:	4a0b      	ldr	r2, [pc, #44]	@ (80054f0 <R3_1_SwitchOffPWM+0x90>)
 80054c4:	3ba2      	subs	r3, #162	@ 0xa2
 80054c6:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80054c8:	6913      	ldr	r3, [r2, #16]
 80054ca:	4219      	tst	r1, r3
 80054cc:	d0fc      	beq.n	80054c8 <R3_1_SwitchOffPWM+0x68>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80054ce:	2302      	movs	r3, #2
 80054d0:	425b      	negs	r3, r3
 80054d2:	6113      	str	r3, [r2, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  return;
}
 80054d4:	bd10      	pop	{r4, pc}
      LL_GPIO_ResetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
 80054d6:	2248      	movs	r2, #72	@ 0x48
 80054d8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80054da:	5a82      	ldrh	r2, [r0, r2]
  WRITE_REG(GPIOx->BRR, PinMask);
 80054dc:	629a      	str	r2, [r3, #40]	@ 0x28
      LL_GPIO_ResetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 80054de:	224a      	movs	r2, #74	@ 0x4a
 80054e0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80054e2:	5a82      	ldrh	r2, [r0, r2]
 80054e4:	629a      	str	r2, [r3, #40]	@ 0x28
      LL_GPIO_ResetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 80054e6:	224c      	movs	r2, #76	@ 0x4c
 80054e8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80054ea:	5a82      	ldrh	r2, [r0, r2]
 80054ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80054ee:	e7cc      	b.n	800548a <R3_1_SwitchOffPWM+0x2a>
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	ffff7fff 	.word	0xffff7fff
 80054f8:	40020008 	.word	0x40020008
 80054fc:	7fffffe8 	.word	0x7fffffe8
 8005500:	40012400 	.word	0x40012400
 8005504:	40020000 	.word	0x40020000
 8005508:	fffff23f 	.word	0xfffff23f

0800550c <R3_1_CurrentReadingCalibration>:
{
 800550c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800550e:	464e      	mov	r6, r9
 8005510:	4645      	mov	r5, r8
 8005512:	46de      	mov	lr, fp
 8005514:	4657      	mov	r7, sl
 8005516:	b5e0      	push	{r5, r6, r7, lr}
  if (false == pHandle->_Super.offsetCalibStatus)
 8005518:	267f      	movs	r6, #127	@ 0x7f
 800551a:	5d85      	ldrb	r5, [r0, r6]
{
 800551c:	0004      	movs	r4, r0
 800551e:	b085      	sub	sp, #20
  if (false == pHandle->_Super.offsetCalibStatus)
 8005520:	2d00      	cmp	r5, #0
 8005522:	d01b      	beq.n	800555c <R3_1_CurrentReadingCalibration+0x50>
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 8005524:	2398      	movs	r3, #152	@ 0x98
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8005526:	2120      	movs	r1, #32
 8005528:	5ae2      	ldrh	r2, [r4, r3]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800552a:	4b3e      	ldr	r3, [pc, #248]	@ (8005624 <R3_1_CurrentReadingCalibration+0x118>)
 800552c:	0852      	lsrs	r2, r2, #1
 800552e:	635a      	str	r2, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005530:	639a      	str	r2, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005532:	63da      	str	r2, [r3, #60]	@ 0x3c
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8005534:	695a      	ldr	r2, [r3, #20]
 8005536:	430a      	orrs	r2, r1
 8005538:	615a      	str	r2, [r3, #20]
  SET_BIT(TIMx->CCER, Channels);
 800553a:	6a19      	ldr	r1, [r3, #32]
 800553c:	4a3a      	ldr	r2, [pc, #232]	@ (8005628 <R3_1_CurrentReadingCalibration+0x11c>)
 800553e:	430a      	orrs	r2, r1
 8005540:	621a      	str	r2, [r3, #32]
  pHandle->_Super.Sector = SECTOR_5;
 8005542:	237a      	movs	r3, #122	@ 0x7a
 8005544:	2204      	movs	r2, #4
 8005546:	54e2      	strb	r2, [r4, r3]
  pHandle->_Super.BrakeActionLock = false;
 8005548:	2200      	movs	r2, #0
 800554a:	3309      	adds	r3, #9
 800554c:	54e2      	strb	r2, [r4, r3]
}
 800554e:	b005      	add	sp, #20
 8005550:	bcf0      	pop	{r4, r5, r6, r7}
 8005552:	46bb      	mov	fp, r7
 8005554:	46b2      	mov	sl, r6
 8005556:	46a9      	mov	r9, r5
 8005558:	46a0      	mov	r8, r4
 800555a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800555c:	6803      	ldr	r3, [r0, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800555e:	4f31      	ldr	r7, [pc, #196]	@ (8005624 <R3_1_CurrentReadingCalibration+0x118>)
 8005560:	9302      	str	r3, [sp, #8]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8005562:	6943      	ldr	r3, [r0, #20]
 8005564:	4a31      	ldr	r2, [pc, #196]	@ (800562c <R3_1_CurrentReadingCalibration+0x120>)
 8005566:	9303      	str	r3, [sp, #12]
    pHandle->PhaseAOffset = 0u;
 8005568:	2388      	movs	r3, #136	@ 0x88
 800556a:	50c5      	str	r5, [r0, r3]
 800556c:	469b      	mov	fp, r3
    pHandle->PhaseBOffset = 0u;
 800556e:	3304      	adds	r3, #4
 8005570:	50c5      	str	r5, [r0, r3]
 8005572:	469a      	mov	sl, r3
    pHandle->PhaseCOffset = 0u;
 8005574:	3304      	adds	r3, #4
 8005576:	50c5      	str	r5, [r0, r3]
 8005578:	4699      	mov	r9, r3
    pHandle->PolarizationCounter = 0u;
 800557a:	330e      	adds	r3, #14
 800557c:	54c5      	strb	r5, [r0, r3]
 800557e:	6a3b      	ldr	r3, [r7, #32]
    pHandle->CalibSector = SECTOR_5;
 8005580:	219f      	movs	r1, #159	@ 0x9f
 8005582:	4013      	ands	r3, r2
 8005584:	623b      	str	r3, [r7, #32]
    pHandle->_Super.pFctGetPhaseCurrents     = &R3_1_HFCurrentsCalibrationAB;
 8005586:	4b2a      	ldr	r3, [pc, #168]	@ (8005630 <R3_1_CurrentReadingCalibration+0x124>)
 8005588:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 800558a:	4b2a      	ldr	r3, [pc, #168]	@ (8005634 <R3_1_CurrentReadingCalibration+0x128>)
 800558c:	6143      	str	r3, [r0, #20]
    pHandle->CalibSector = SECTOR_5;
 800558e:	2304      	movs	r3, #4
 8005590:	5443      	strb	r3, [r0, r1]
    pHandle->_Super.Sector = SECTOR_5;
 8005592:	207a      	movs	r0, #122	@ 0x7a
 8005594:	5423      	strb	r3, [r4, r0]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8005596:	0020      	movs	r0, r4
 8005598:	f7ff feea 	bl	8005370 <R3_1_SwitchOnPWM>
                            pHandle->pParams_str->RepetitionCounter,
 800559c:	23a4      	movs	r3, #164	@ 0xa4
    waitForPolarizationEnd( TIMx,
 800559e:	2259      	movs	r2, #89	@ 0x59
                            pHandle->pParams_str->RepetitionCounter,
 80055a0:	58e3      	ldr	r3, [r4, r3]
    waitForPolarizationEnd( TIMx,
 80055a2:	2156      	movs	r1, #86	@ 0x56
 80055a4:	5c9a      	ldrb	r2, [r3, r2]
 80055a6:	239e      	movs	r3, #158	@ 0x9e
 80055a8:	469c      	mov	ip, r3
 80055aa:	4688      	mov	r8, r1
 80055ac:	44a4      	add	ip, r4
 80055ae:	4663      	mov	r3, ip
 80055b0:	44a0      	add	r8, r4
 80055b2:	4641      	mov	r1, r8
 80055b4:	0038      	movs	r0, r7
 80055b6:	9301      	str	r3, [sp, #4]
 80055b8:	f7fc fe74 	bl	80022a4 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 80055bc:	0020      	movs	r0, r4
 80055be:	f7ff ff4f 	bl	8005460 <R3_1_SwitchOffPWM>
    pHandle->CalibSector = SECTOR_1;
 80055c2:	219f      	movs	r1, #159	@ 0x9f
    pHandle->PolarizationCounter = 0;
 80055c4:	229e      	movs	r2, #158	@ 0x9e
    pHandle->_Super.Sector = SECTOR_1;
 80055c6:	207a      	movs	r0, #122	@ 0x7a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 80055c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005638 <R3_1_CurrentReadingCalibration+0x12c>)
 80055ca:	6023      	str	r3, [r4, #0]
    pHandle->CalibSector = SECTOR_1;
 80055cc:	5465      	strb	r5, [r4, r1]
    pHandle->_Super.Sector = SECTOR_1;
 80055ce:	5425      	strb	r5, [r4, r0]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 80055d0:	0020      	movs	r0, r4
    pHandle->PolarizationCounter = 0;
 80055d2:	54a5      	strb	r5, [r4, r2]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 80055d4:	f7ff fecc 	bl	8005370 <R3_1_SwitchOnPWM>
                            pHandle->pParams_str->RepetitionCounter,
 80055d8:	22a4      	movs	r2, #164	@ 0xa4
 80055da:	58a3      	ldr	r3, [r4, r2]
    waitForPolarizationEnd( TIMx,
 80055dc:	3a4b      	subs	r2, #75	@ 0x4b
 80055de:	5c9a      	ldrb	r2, [r3, r2]
 80055e0:	4641      	mov	r1, r8
 80055e2:	9b01      	ldr	r3, [sp, #4]
 80055e4:	0038      	movs	r0, r7
 80055e6:	f7fc fe5d 	bl	80022a4 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 80055ea:	0020      	movs	r0, r4
 80055ec:	f7ff ff38 	bl	8005460 <R3_1_SwitchOffPWM>
    pHandle->PhaseAOffset = pHandle->PhaseAOffset / NB_CONVERSIONS;
 80055f0:	465b      	mov	r3, fp
 80055f2:	465a      	mov	r2, fp
 80055f4:	58e3      	ldr	r3, [r4, r3]
 80055f6:	091b      	lsrs	r3, r3, #4
 80055f8:	50a3      	str	r3, [r4, r2]
    pHandle->PhaseBOffset = pHandle->PhaseBOffset / NB_CONVERSIONS;
 80055fa:	4653      	mov	r3, sl
 80055fc:	4652      	mov	r2, sl
 80055fe:	58e3      	ldr	r3, [r4, r3]
 8005600:	091b      	lsrs	r3, r3, #4
 8005602:	50a3      	str	r3, [r4, r2]
    pHandle->PhaseCOffset = pHandle->PhaseCOffset / NB_CONVERSIONS;
 8005604:	464b      	mov	r3, r9
 8005606:	464a      	mov	r2, r9
 8005608:	58e3      	ldr	r3, [r4, r3]
 800560a:	091b      	lsrs	r3, r3, #4
 800560c:	50a3      	str	r3, [r4, r2]
    if (0U == pHandle->_Super.SWerror)
 800560e:	2356      	movs	r3, #86	@ 0x56
 8005610:	5ae3      	ldrh	r3, [r4, r3]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <R3_1_CurrentReadingCalibration+0x10e>
      pHandle->_Super.offsetCalibStatus = true;
 8005616:	3301      	adds	r3, #1
 8005618:	55a3      	strb	r3, [r4, r6]
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800561a:	9b02      	ldr	r3, [sp, #8]
 800561c:	6023      	str	r3, [r4, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800561e:	9b03      	ldr	r3, [sp, #12]
 8005620:	6163      	str	r3, [r4, #20]
 8005622:	e77f      	b.n	8005524 <R3_1_CurrentReadingCalibration+0x18>
 8005624:	40012c00 	.word	0x40012c00
 8005628:	00000555 	.word	0x00000555
 800562c:	fffffaaa 	.word	0xfffffaaa
 8005630:	08004f39 	.word	0x08004f39
 8005634:	080052a9 	.word	0x080052a9
 8005638:	08004f85 	.word	0x08004f85

0800563c <R3_1_TIMx_UP_IRQHandler>:
  */
void * R3_1_TIMx_UP_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
  
  /* Set the trigger polarity as computed inside SetADCSampPointSectX*/
  LL_ADC_REG_SetTriggerEdge (ADC1, pHandle->ADCTriggerEdge);
 800563c:	2394      	movs	r3, #148	@ 0x94
{
 800563e:	b5f0      	push	{r4, r5, r6, r7, lr}
  LL_ADC_REG_SetTriggerEdge (ADC1, pHandle->ADCTriggerEdge);
 8005640:	58c1      	ldr	r1, [r0, r3]
{
 8005642:	46ce      	mov	lr, r9
  LL_ADC_REG_SetTriggerEdge (ADC1, pHandle->ADCTriggerEdge);
 8005644:	4699      	mov	r9, r3
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 8005646:	4b1e      	ldr	r3, [pc, #120]	@ (80056c0 <R3_1_TIMx_UP_IRQHandler+0x84>)
{
 8005648:	4647      	mov	r7, r8
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	4d1d      	ldr	r5, [pc, #116]	@ (80056c4 <R3_1_TIMx_UP_IRQHandler+0x88>)
 800564e:	b580      	push	{r7, lr}
 8005650:	402a      	ands	r2, r5
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8005652:	2580      	movs	r5, #128	@ 0x80
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 8005654:	430a      	orrs	r2, r1
 8005656:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	491b      	ldr	r1, [pc, #108]	@ (80056c8 <R3_1_TIMx_UP_IRQHandler+0x8c>)
 800565c:	00ed      	lsls	r5, r5, #3
 800565e:	400a      	ands	r2, r1
 8005660:	432a      	orrs	r2, r5
 8005662:	60da      	str	r2, [r3, #12]
  /* set ADC trigger source */
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_TRGO);
  /* Set scan direction according to the sector */  
  LL_ADC_REG_SetSequencerScanDirection(ADC1, pHandle->pParams_str->ADCScandir[pHandle->_Super.Sector]<<ADC_CFGR1_SCANDIR_Pos);
 8005664:	22a4      	movs	r2, #164	@ 0xa4
 8005666:	5887      	ldr	r7, [r0, r2]
 8005668:	3a2a      	subs	r2, #42	@ 0x2a
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 800566a:	68d9      	ldr	r1, [r3, #12]
 800566c:	5c82      	ldrb	r2, [r0, r2]
 800566e:	468c      	mov	ip, r1
 8005670:	18b9      	adds	r1, r7, r2
 8005672:	315a      	adds	r1, #90	@ 0x5a
 8005674:	7809      	ldrb	r1, [r1, #0]
 8005676:	2604      	movs	r6, #4
 8005678:	0089      	lsls	r1, r1, #2
 800567a:	4688      	mov	r8, r1
 800567c:	4661      	mov	r1, ip
 800567e:	4644      	mov	r4, r8
 8005680:	43b1      	bics	r1, r6
 8005682:	430c      	orrs	r4, r1
  /* Configure the ADC scheduler as selected inside SetADCSampPointSectX*/
  ADC1->CHSELR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 8005684:	0092      	lsls	r2, r2, #2
 8005686:	60dc      	str	r4, [r3, #12]
 8005688:	18ba      	adds	r2, r7, r2
 800568a:	6852      	ldr	r2, [r2, #4]
 800568c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* ReConfigure sampling time, as deconfigured by reg_conv_manager */
  LL_ADC_SetSamplingTimeCommonChannels ( ADC1, pHandle->pParams_str->b_ISamplingTime );
 800568e:	2258      	movs	r2, #88	@ 0x58
 8005690:	5cba      	ldrb	r2, [r7, r2]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8005692:	2707      	movs	r7, #7
 8005694:	6959      	ldr	r1, [r3, #20]
 8005696:	43b9      	bics	r1, r7
 8005698:	430a      	orrs	r2, r1
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800569a:	490c      	ldr	r1, [pc, #48]	@ (80056cc <R3_1_TIMx_UP_IRQHandler+0x90>)
 800569c:	615a      	str	r2, [r3, #20]
 800569e:	684a      	ldr	r2, [r1, #4]
 80056a0:	3769      	adds	r7, #105	@ 0x69
 80056a2:	433a      	orrs	r2, r7
 80056a4:	604a      	str	r2, [r1, #4]
  MODIFY_REG(ADCx->CR,
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	4909      	ldr	r1, [pc, #36]	@ (80056d0 <R3_1_TIMx_UP_IRQHandler+0x94>)
 80056aa:	400a      	ands	r2, r1
 80056ac:	4332      	orrs	r2, r6
 80056ae:	609a      	str	r2, [r3, #8]
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_OC4REF);
  /* ADC needs to be restarted because DMA is configured as limited */
  LL_ADC_REG_StartConversion( ADC1 );

  /* Reset the ADC trigger edge for next conversion */
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 80056b0:	464b      	mov	r3, r9
 80056b2:	50c5      	str	r5, [r0, r3]

  return &pHandle->_Super.Motor;
 80056b4:	3078      	adds	r0, #120	@ 0x78
}
 80056b6:	bcc0      	pop	{r6, r7}
 80056b8:	46b9      	mov	r9, r7
 80056ba:	46b0      	mov	r8, r6
 80056bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056be:	46c0      	nop			@ (mov r8, r8)
 80056c0:	40012400 	.word	0x40012400
 80056c4:	fffff3ff 	.word	0xfffff3ff
 80056c8:	fffff23f 	.word	0xfffff23f
 80056cc:	40012c00 	.word	0x40012c00
 80056d0:	7fffffe8 	.word	0x7fffffe8

080056d4 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 80056d4:	8a43      	ldrh	r3, [r0, #18]
 80056d6:	8981      	ldrh	r1, [r0, #12]
{
 80056d8:	b530      	push	{r4, r5, lr}
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 80056da:	18c9      	adds	r1, r1, r3
 80056dc:	0849      	lsrs	r1, r1, #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80056de:	8943      	ldrh	r3, [r0, #10]
 80056e0:	040d      	lsls	r5, r1, #16
 80056e2:	430d      	orrs	r5, r1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d008      	beq.n	80056fa <RVBS_Clear+0x26>
 80056e8:	2300      	movs	r3, #0
    {
      pHandle->aBuffer[index] = aux;
 80056ea:	6944      	ldr	r4, [r0, #20]
 80056ec:	005a      	lsls	r2, r3, #1
 80056ee:	5311      	strh	r1, [r2, r4]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80056f0:	3301      	adds	r3, #1
 80056f2:	8942      	ldrh	r2, [r0, #10]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d8f8      	bhi.n	80056ec <RVBS_Clear+0x18>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 80056fa:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 80056fc:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 80056fe:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 8005700:	bd30      	pop	{r4, r5, pc}
 8005702:	46c0      	nop			@ (mov r8, r8)

08005704 <RVBS_Init>:
{
 8005704:	b510      	push	{r4, lr}
    RVBS_Clear(pHandle);
 8005706:	f7ff ffe5 	bl	80056d4 <RVBS_Clear>
}
 800570a:	bd10      	pop	{r4, pc}

0800570c <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState(RDivider_Handle_t *pHandle)
{
 800570c:	b510      	push	{r4, lr}
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800570e:	8982      	ldrh	r2, [r0, #12]
 8005710:	89c1      	ldrh	r1, [r0, #14]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8005712:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8005714:	428a      	cmp	r2, r1
 8005716:	d00d      	beq.n	8005734 <RVBS_CheckFaultState+0x28>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8005718:	8a44      	ldrh	r4, [r0, #18]
 800571a:	429c      	cmp	r4, r3
 800571c:	d808      	bhi.n	8005730 <RVBS_CheckFaultState+0x24>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 800571e:	7c04      	ldrb	r4, [r0, #16]
 8005720:	2c00      	cmp	r4, #0
 8005722:	d10f      	bne.n	8005744 <RVBS_CheckFaultState+0x38>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8005724:	4299      	cmp	r1, r3
 8005726:	d911      	bls.n	800574c <RVBS_CheckFaultState+0x40>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8005728:	2301      	movs	r3, #1
 800572a:	7403      	strb	r3, [r0, #16]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 800572c:	2000      	movs	r0, #0
 800572e:	e000      	b.n	8005732 <RVBS_CheckFaultState+0x26>
        fault = MC_UNDER_VOLT;
 8005730:	2004      	movs	r0, #4
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8005732:	bd10      	pop	{r4, pc}
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8005734:	429a      	cmp	r2, r3
 8005736:	d309      	bcc.n	800574c <RVBS_CheckFaultState+0x40>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8005738:	8a40      	ldrh	r0, [r0, #18]
 800573a:	4283      	cmp	r3, r0
 800573c:	4180      	sbcs	r0, r0
 800573e:	4240      	negs	r0, r0
 8005740:	0080      	lsls	r0, r0, #2
 8005742:	e7f6      	b.n	8005732 <RVBS_CheckFaultState+0x26>
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8005744:	429a      	cmp	r2, r3
 8005746:	d2f1      	bcs.n	800572c <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 8005748:	2300      	movs	r3, #0
 800574a:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 800574c:	2002      	movs	r0, #2
 800574e:	e7f0      	b.n	8005732 <RVBS_CheckFaultState+0x26>

08005750 <RVBS_CalcAvVbus>:
{
 8005750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005752:	46c6      	mov	lr, r8
    if (0xFFFFU == hAux)
 8005754:	4b17      	ldr	r3, [pc, #92]	@ (80057b4 <RVBS_CalcAvVbus+0x64>)
{
 8005756:	0004      	movs	r4, r0
 8005758:	000d      	movs	r5, r1
 800575a:	b500      	push	{lr}
    if (0xFFFFU == hAux)
 800575c:	4299      	cmp	r1, r3
 800575e:	d01d      	beq.n	800579c <RVBS_CalcAvVbus+0x4c>
      pHandle->aBuffer[pHandle->index] = hAux;
 8005760:	7e47      	ldrb	r7, [r0, #25]
 8005762:	6942      	ldr	r2, [r0, #20]
 8005764:	007b      	lsls	r3, r7, #1
 8005766:	5299      	strh	r1, [r3, r2]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8005768:	8943      	ldrh	r3, [r0, #10]
 800576a:	7a86      	ldrb	r6, [r0, #10]
 800576c:	4698      	mov	r8, r3
 800576e:	2e00      	cmp	r6, #0
 8005770:	d01e      	beq.n	80057b0 <RVBS_CalcAvVbus+0x60>
 8005772:	2300      	movs	r3, #0
      wtemp = 0u;
 8005774:	2000      	movs	r0, #0
        wtemp += pHandle->aBuffer[i];
 8005776:	8811      	ldrh	r1, [r2, #0]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8005778:	3301      	adds	r3, #1
 800577a:	b2db      	uxtb	r3, r3
        wtemp += pHandle->aBuffer[i];
 800577c:	1840      	adds	r0, r0, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800577e:	3202      	adds	r2, #2
 8005780:	42b3      	cmp	r3, r6
 8005782:	d1f8      	bne.n	8005776 <RVBS_CalcAvVbus+0x26>
      wtemp /= pHandle->LowPassFilterBW;
 8005784:	4641      	mov	r1, r8
 8005786:	f7fa fcbf 	bl	8000108 <__udivsi3>
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800578a:	b280      	uxth	r0, r0
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 800578c:	4646      	mov	r6, r8
 800578e:	3e01      	subs	r6, #1
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8005790:	80e0      	strh	r0, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8005792:	80a5      	strh	r5, [r4, #4]
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8005794:	42b7      	cmp	r7, r6
 8005796:	d208      	bcs.n	80057aa <RVBS_CalcAvVbus+0x5a>
        pHandle->index++;
 8005798:	3701      	adds	r7, #1
 800579a:	7667      	strb	r7, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 800579c:	0020      	movs	r0, r4
 800579e:	f7ff ffb5 	bl	800570c <RVBS_CheckFaultState>
 80057a2:	8120      	strh	r0, [r4, #8]
}
 80057a4:	bc80      	pop	{r7}
 80057a6:	46b8      	mov	r8, r7
 80057a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pHandle->index = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	7663      	strb	r3, [r4, #25]
 80057ae:	e7f5      	b.n	800579c <RVBS_CalcAvVbus+0x4c>
      wtemp /= pHandle->LowPassFilterBW;
 80057b0:	2000      	movs	r0, #0
 80057b2:	e7eb      	b.n	800578c <RVBS_CalcAvVbus+0x3c>
 80057b4:	0000ffff 	.word	0x0000ffff

080057b8 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 80057b8:	2300      	movs	r3, #0
 80057ba:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 80057bc:	6043      	str	r3, [r0, #4]
    pHandle->RampRemainingStep = 0U;
 80057be:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 80057c0:	6103      	str	r3, [r0, #16]
    pHandle->ScalingFactor = 1U;
 80057c2:	3301      	adds	r3, #1
 80057c4:	6143      	str	r3, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 80057c6:	4770      	bx	lr

080057c8 <REMNG_Calc>:
    int32_t current_ref;

    current_ref = pHandle->Ext;

    /* Update the variable and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 80057c8:	68c3      	ldr	r3, [r0, #12]
{
 80057ca:	b570      	push	{r4, r5, r6, lr}
      pHandle->RampRemainingStep --;
    }
    else if (1U == pHandle->RampRemainingStep)
    {
      /* Set the backup value of TargetFinal */
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 80057cc:	6941      	ldr	r1, [r0, #20]
{
 80057ce:	0004      	movs	r4, r0
    current_ref = pHandle->Ext;
 80057d0:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d908      	bls.n	80057e8 <REMNG_Calc+0x20>
      current_ref += pHandle->IncDecAmount;
 80057d6:	6902      	ldr	r2, [r0, #16]
      pHandle->RampRemainingStep --;
 80057d8:	3b01      	subs	r3, #1
      current_ref += pHandle->IncDecAmount;
 80057da:	18ad      	adds	r5, r5, r2
      pHandle->RampRemainingStep --;
 80057dc:	60c3      	str	r3, [r0, #12]
    {
      /* Do nothing */
    }

    pHandle->Ext = current_ref;
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 80057de:	0028      	movs	r0, r5
 80057e0:	f7fa fd1c 	bl	800021c <__divsi3>
    pHandle->Ext = current_ref;
 80057e4:	60a5      	str	r5, [r4, #8]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 80057e6:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->RampRemainingStep)
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d003      	beq.n	80057f4 <REMNG_Calc+0x2c>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 80057ec:	0028      	movs	r0, r5
 80057ee:	f7fa fd15 	bl	800021c <__divsi3>
 80057f2:	e7f7      	b.n	80057e4 <REMNG_Calc+0x1c>
      pHandle->RampRemainingStep = 0U;
 80057f4:	2300      	movs	r3, #0
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 80057f6:	6840      	ldr	r0, [r0, #4]
      pHandle->RampRemainingStep = 0U;
 80057f8:	60e3      	str	r3, [r4, #12]
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 80057fa:	4341      	muls	r1, r0
 80057fc:	000d      	movs	r5, r1
      pHandle->RampRemainingStep = 0U;
 80057fe:	e7f1      	b.n	80057e4 <REMNG_Calc+0x1c>

08005800 <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 8005800:	68c0      	ldr	r0, [r0, #12]
 8005802:	4243      	negs	r3, r0
 8005804:	4158      	adcs	r0, r3
      /* nothing to do */
    }
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (retVal);
 8005806:	b2c0      	uxtb	r0, r0

}
 8005808:	4770      	bx	lr
 800580a:	46c0      	nop			@ (mov r8, r8)

0800580c <getScalingFactor>:
  int32_t aux;
  uint8_t i;

  if (Target < 0)
  {
    aux = -Target;
 800580c:	17c3      	asrs	r3, r0, #31
 800580e:	18c0      	adds	r0, r0, r3
 8005810:	4058      	eors	r0, r3
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
    if (TargetAbs >= limit)
 8005812:	2380      	movs	r3, #128	@ 0x80
{
 8005814:	b510      	push	{r4, lr}
    if (TargetAbs >= limit)
 8005816:	05db      	lsls	r3, r3, #23
 8005818:	4298      	cmp	r0, r3
 800581a:	d212      	bcs.n	8005842 <getScalingFactor+0x36>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 800581c:	2480      	movs	r4, #128	@ 0x80
    if (TargetAbs >= limit)
 800581e:	2302      	movs	r3, #2
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8005820:	0624      	lsls	r4, r4, #24
 8005822:	e001      	b.n	8005828 <getScalingFactor+0x1c>
  for (i = 1U; i < 32U; i++)
 8005824:	2b20      	cmp	r3, #32
 8005826:	d009      	beq.n	800583c <getScalingFactor+0x30>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8005828:	0022      	movs	r2, r4
 800582a:	0019      	movs	r1, r3
 800582c:	40da      	lsrs	r2, r3
    if (TargetAbs >= limit)
 800582e:	3301      	adds	r3, #1
 8005830:	4290      	cmp	r0, r2
 8005832:	d3f7      	bcc.n	8005824 <getScalingFactor+0x18>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 8005834:	2001      	movs	r0, #1
 8005836:	3901      	subs	r1, #1
 8005838:	4088      	lsls	r0, r1
}
 800583a:	bd10      	pop	{r4, pc}
 800583c:	2080      	movs	r0, #128	@ 0x80
 800583e:	0600      	lsls	r0, r0, #24
 8005840:	e7fb      	b.n	800583a <getScalingFactor+0x2e>
    if (TargetAbs >= limit)
 8005842:	2001      	movs	r0, #1
  return (((uint32_t)1) << (i - 1U));
 8005844:	e7f9      	b.n	800583a <getScalingFactor+0x2e>
 8005846:	46c0      	nop			@ (mov r8, r8)

08005848 <REMNG_ExecRamp>:
{
 8005848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800584a:	464f      	mov	r7, r9
 800584c:	0004      	movs	r4, r0
 800584e:	46d6      	mov	lr, sl
 8005850:	4646      	mov	r6, r8
 8005852:	0015      	movs	r5, r2
 8005854:	b5c0      	push	{r6, r7, lr}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8005856:	6880      	ldr	r0, [r0, #8]
{
 8005858:	000f      	movs	r7, r1
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800585a:	6961      	ldr	r1, [r4, #20]
    if (0U == Durationms)
 800585c:	2a00      	cmp	r2, #0
 800585e:	d10e      	bne.n	800587e <REMNG_ExecRamp+0x36>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8005860:	0038      	movs	r0, r7
 8005862:	f7ff ffd3 	bl	800580c <getScalingFactor>
 8005866:	6160      	str	r0, [r4, #20]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8005868:	4378      	muls	r0, r7
 800586a:	60a0      	str	r0, [r4, #8]
      pHandle->IncDecAmount = 0;
 800586c:	2000      	movs	r0, #0
      pHandle->RampRemainingStep = 0U;
 800586e:	60e5      	str	r5, [r4, #12]
      pHandle->IncDecAmount = 0;
 8005870:	6120      	str	r0, [r4, #16]
}
 8005872:	2001      	movs	r0, #1
 8005874:	bce0      	pop	{r5, r6, r7}
 8005876:	46ba      	mov	sl, r7
 8005878:	46b1      	mov	r9, r6
 800587a:	46a8      	mov	r8, r5
 800587c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800587e:	f7fa fccd 	bl	800021c <__divsi3>
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 8005882:	1a3b      	subs	r3, r7, r0
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8005884:	4680      	mov	r8, r0
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 8005886:	0018      	movs	r0, r3
 8005888:	4699      	mov	r9, r3
 800588a:	f7ff ffbf 	bl	800580c <getScalingFactor>
 800588e:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 8005890:	4640      	mov	r0, r8
 8005892:	f7ff ffbb 	bl	800580c <getScalingFactor>
 8005896:	0006      	movs	r6, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 8005898:	0038      	movs	r0, r7
 800589a:	f7ff ffb7 	bl	800580c <getScalingFactor>
      if (wScalingFactor <  wScalingFactor2)
 800589e:	45b2      	cmp	sl, r6
 80058a0:	d214      	bcs.n	80058cc <REMNG_ExecRamp+0x84>
        if (wScalingFactor < wScalingFactor3)
 80058a2:	4656      	mov	r6, sl
 80058a4:	4286      	cmp	r6, r0
 80058a6:	d813      	bhi.n	80058d0 <REMNG_ExecRamp+0x88>
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 80058a8:	4643      	mov	r3, r8
      aux /= 1000U;
 80058aa:	21fa      	movs	r1, #250	@ 0xfa
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 80058ac:	4373      	muls	r3, r6
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 80058ae:	6820      	ldr	r0, [r4, #0]
      pHandle->ScalingFactor = wScalingFactorMin;
 80058b0:	6166      	str	r6, [r4, #20]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 80058b2:	4368      	muls	r0, r5
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 80058b4:	60a3      	str	r3, [r4, #8]
      pHandle->TargetFinal = TargetFinal;
 80058b6:	6067      	str	r7, [r4, #4]
      aux /= 1000U;
 80058b8:	0089      	lsls	r1, r1, #2
 80058ba:	f7fa fc25 	bl	8000108 <__udivsi3>
      pHandle->RampRemainingStep++;
 80058be:	1c45      	adds	r5, r0, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 80058c0:	4648      	mov	r0, r9
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 80058c2:	0029      	movs	r1, r5
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 80058c4:	4370      	muls	r0, r6
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 80058c6:	f7fa fca9 	bl	800021c <__divsi3>
      pHandle->IncDecAmount = aux1;
 80058ca:	e7d0      	b.n	800586e <REMNG_ExecRamp+0x26>
        if (wScalingFactor2 < wScalingFactor3)
 80058cc:	4286      	cmp	r6, r0
 80058ce:	d9eb      	bls.n	80058a8 <REMNG_ExecRamp+0x60>
 80058d0:	0006      	movs	r6, r0
 80058d2:	e7e9      	b.n	80058a8 <REMNG_ExecRamp+0x60>

080058d4 <RUC_Init>:
__weak void RUC_Init(RevUpCtrl_Handle_t *pHandle,
                     SpeednTorqCtrl_Handle_t *pSTC,
                     VirtualSpeedSensor_Handle_t *pVSS,
                     STO_Handle_t *pSNSL,
                     PWMC_Handle_t *pPWM)
{
 80058d4:	b510      	push	{r4, lr}
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
    pHandle->pVSS = pVSS;
    pHandle->pSNSL = pSNSL;
 80058d6:	6703      	str	r3, [r0, #112]	@ 0x70
    pHandle->pPWM = pPWM;
 80058d8:	9b02      	ldr	r3, [sp, #8]
    pHandle->pVSS = pVSS;
 80058da:	66c2      	str	r2, [r0, #108]	@ 0x6c
    pHandle->pPWM = pPWM;
 80058dc:	6743      	str	r3, [r0, #116]	@ 0x74
    pHandle->OTFSCLowside = false;
 80058de:	2200      	movs	r2, #0
 80058e0:	2354      	movs	r3, #84	@ 0x54
    pHandle->pSTC = pSTC;
 80058e2:	6681      	str	r1, [r0, #104]	@ 0x68
    pHandle->OTFSCLowside = false;
 80058e4:	52c2      	strh	r2, [r0, r3]
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits */
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 80058e6:	6943      	ldr	r3, [r0, #20]
{
 80058e8:	0004      	movs	r4, r0
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d01f      	beq.n	800592e <RUC_Init+0x5a>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 80058ee:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d01f      	beq.n	8005934 <RUC_Init+0x60>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 80058f4:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d01f      	beq.n	800593a <RUC_Init+0x66>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 80058fa:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01f      	beq.n	8005940 <RUC_Init+0x6c>
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	2105      	movs	r1, #5
 8005904:	3204      	adds	r2, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	d012      	beq.n	8005930 <RUC_Init+0x5c>
    {
      /* nothing to do error */
    }
    else
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800590a:	0053      	lsls	r3, r2, #1
 800590c:	189b      	adds	r3, r3, r2
 800590e:	2200      	movs	r2, #0
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	18e3      	adds	r3, r4, r3
 8005914:	615a      	str	r2, [r3, #20]

      pHandle->bPhaseNbr = bPhase;
 8005916:	2348      	movs	r3, #72	@ 0x48

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8005918:	2064      	movs	r0, #100	@ 0x64
      pHandle->bPhaseNbr = bPhase;
 800591a:	54e1      	strb	r1, [r4, r3]
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800591c:	21fa      	movs	r1, #250	@ 0xfa
 800591e:	8823      	ldrh	r3, [r4, #0]
 8005920:	0089      	lsls	r1, r1, #2
 8005922:	4358      	muls	r0, r3
 8005924:	f7fa fbf0 	bl	8000108 <__udivsi3>
 8005928:	2356      	movs	r3, #86	@ 0x56
 800592a:	54e0      	strb	r0, [r4, r3]
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800592c:	bd10      	pop	{r4, pc}
      bPhase++;
 800592e:	2101      	movs	r1, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005930:	1e4a      	subs	r2, r1, #1
 8005932:	e7ea      	b.n	800590a <RUC_Init+0x36>
      bPhase++;
 8005934:	2102      	movs	r1, #2
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005936:	1e4a      	subs	r2, r1, #1
 8005938:	e7e7      	b.n	800590a <RUC_Init+0x36>
      bPhase++;
 800593a:	2103      	movs	r1, #3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800593c:	1e4a      	subs	r2, r1, #1
 800593e:	e7e4      	b.n	800590a <RUC_Init+0x36>
      bPhase++;
 8005940:	2104      	movs	r1, #4
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005942:	1e4a      	subs	r2, r1, #1
 8005944:	e7e1      	b.n	800590a <RUC_Init+0x36>
 8005946:	46c0      	nop			@ (mov r8, r8)

08005948 <RUC_Clear>:
  }
  else
  {
#endif
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 8005948:	6e83      	ldr	r3, [r0, #104]	@ 0x68
{
 800594a:	b5f0      	push	{r4, r5, r6, r7, lr}

    pHandle->hDirection = hMotorDirection;
    pHandle->EnteredZone1 = false;

    /* Initializes the rev up stages counter */
    pHandle->bStageCnt = 0U;
 800594c:	2258      	movs	r2, #88	@ 0x58
{
 800594e:	46c6      	mov	lr, r8
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 8005950:	4698      	mov	r8, r3
    pHandle->bStageCnt = 0U;
 8005952:	2300      	movs	r3, #0
{
 8005954:	0004      	movs	r4, r0
 8005956:	000d      	movs	r5, r1
 8005958:	b500      	push	{lr}
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 800595a:	6ec7      	ldr	r7, [r0, #108]	@ 0x6c
    pHandle->hDirection = hMotorDirection;
 800595c:	80c1      	strh	r1, [r0, #6]
    pHandle->bStageCnt = 0U;
 800595e:	5483      	strb	r3, [r0, r2]
    pHandle->bOTFRelCounter = 0U;
 8005960:	3a05      	subs	r2, #5
 8005962:	5483      	strb	r3, [r0, r2]
    pHandle->OTFSCLowside = false;
 8005964:	3201      	adds	r2, #1
 8005966:	5283      	strh	r3, [r0, r2]

    /* Calls the clear method of VSS */
    VSS_Clear(pVSS);
 8005968:	0038      	movs	r0, r7
 800596a:	f000 fd39 	bl	80063e0 <VSS_Clear>

    /* Sets the STC in torque mode */
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 800596e:	4640      	mov	r0, r8
 8005970:	2104      	movs	r1, #4
 8005972:	f000 f9af 	bl	8005cd4 <STC_SetControlMode>

    /* Sets the mechanical starting angle of VSS */
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8005976:	8866      	ldrh	r6, [r4, #2]
 8005978:	b2ad      	uxth	r5, r5
 800597a:	436e      	muls	r6, r5
 800597c:	b236      	sxth	r6, r6
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800597e:	7879      	ldrb	r1, [r7, #1]
    pHandle->hElAngleAccu = hMecAngle;
 8005980:	863e      	strh	r6, [r7, #48]	@ 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8005982:	0030      	movs	r0, r6
 8005984:	f7fa fc4a 	bl	800021c <__divsi3>
    pHandle->_Super.hElAngle = hMecAngle;
 8005988:	80be      	strh	r6, [r7, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800598a:	80f8      	strh	r0, [r7, #6]

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 800598c:	2200      	movs	r2, #0
 800598e:	4640      	mov	r0, r8
 8005990:	2100      	movs	r1, #0
 8005992:	f000 f9a3 	bl	8005cdc <STC_ExecRamp>

    /* Gives the first command to STC and VSS */
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 8005996:	8a21      	ldrh	r1, [r4, #16]
 8005998:	4640      	mov	r0, r8
 800599a:	4369      	muls	r1, r5
 800599c:	89a2      	ldrh	r2, [r4, #12]
 800599e:	b209      	sxth	r1, r1
 80059a0:	f000 f99c 	bl	8005cdc <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 80059a4:	89e1      	ldrh	r1, [r4, #14]
 80059a6:	0038      	movs	r0, r7
 80059a8:	4369      	muls	r1, r5
 80059aa:	89a2      	ldrh	r2, [r4, #12]
 80059ac:	b209      	sxth	r1, r1
 80059ae:	f000 fdc5 	bl	800653c <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks */
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
                                              / 1000U );
 80059b2:	21fa      	movs	r1, #250	@ 0xfa
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 80059b4:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 80059b6:	8820      	ldrh	r0, [r4, #0]
                                              / 1000U );
 80059b8:	0089      	lsls	r1, r1, #2
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 80059ba:	4358      	muls	r0, r3
                                              / 1000U );
 80059bc:	f7fa fba4 	bl	8000108 <__udivsi3>

    pHandle->hPhaseRemainingTicks++;

    /* Set the next phases parameter pointer */
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 80059c0:	6963      	ldr	r3, [r4, #20]

    /* Timeout counter for PLL reset during OTF */
    pHandle->bResetPLLCnt = 0U;
 80059c2:	2200      	movs	r2, #0
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 80059c4:	60a3      	str	r3, [r4, #8]
    pHandle->bResetPLLCnt = 0U;
 80059c6:	2357      	movs	r3, #87	@ 0x57
    pHandle->hPhaseRemainingTicks++;
 80059c8:	3001      	adds	r0, #1
 80059ca:	80a0      	strh	r0, [r4, #4]
    pHandle->bResetPLLCnt = 0U;
 80059cc:	54e2      	strb	r2, [r4, r3]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 80059ce:	bc80      	pop	{r7}
 80059d0:	46b8      	mov	r8, r7
 80059d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059d4 <RUC_OTF_Exec>:
  *         on-the-fly startup handling.
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  *  @retval Boolean set to false when entire Rev-Up phases have been completed.
  */
__weak bool RUC_OTF_Exec(RevUpCtrl_Handle_t *pHandle)
{
 80059d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059d6:	46c6      	mov	lr, r8
    {
      /* Decrease the hPhaseRemainingTicks */
      pHandle->hPhaseRemainingTicks--;

      /* OTF start-up */
      if (0U == pHandle->bStageCnt)
 80059d8:	2258      	movs	r2, #88	@ 0x58
{
 80059da:	b500      	push	{lr}
    if (pHandle->hPhaseRemainingTicks > 0u)
 80059dc:	8883      	ldrh	r3, [r0, #4]
{
 80059de:	0004      	movs	r4, r0
      if (0U == pHandle->bStageCnt)
 80059e0:	5c85      	ldrb	r5, [r0, r2]
    if (pHandle->hPhaseRemainingTicks > 0u)
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d050      	beq.n	8005a88 <RUC_OTF_Exec+0xb4>
      pHandle->hPhaseRemainingTicks--;
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	8083      	strh	r3, [r0, #4]
      if (0U == pHandle->bStageCnt)
 80059ec:	2d00      	cmp	r5, #0
 80059ee:	d144      	bne.n	8005a7a <RUC_OTF_Exec+0xa6>
      {
        if (false ==  pHandle->EnteredZone1)
 80059f0:	2355      	movs	r3, #85	@ 0x55
 80059f2:	5ce3      	ldrb	r3, [r4, r3]
        {
          if (pHandle->pSNSL->pFctStoOtfResetPLL != MC_NULL)
 80059f4:	6f00      	ldr	r0, [r0, #112]	@ 0x70
        if (false ==  pHandle->EnteredZone1)
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d000      	beq.n	80059fc <RUC_OTF_Exec+0x28>
 80059fa:	e07d      	b.n	8005af8 <RUC_OTF_Exec+0x124>
          if (pHandle->pSNSL->pFctStoOtfResetPLL != MC_NULL)
 80059fc:	68c2      	ldr	r2, [r0, #12]
 80059fe:	2a00      	cmp	r2, #0
 8005a00:	d009      	beq.n	8005a16 <RUC_OTF_Exec+0x42>
          {
            pHandle->bResetPLLCnt++;
 8005a02:	2657      	movs	r6, #87	@ 0x57
            if (pHandle->bResetPLLCnt > pHandle->bResetPLLTh)
 8005a04:	2156      	movs	r1, #86	@ 0x56
            pHandle->bResetPLLCnt++;
 8005a06:	5da3      	ldrb	r3, [r4, r6]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	55a3      	strb	r3, [r4, r6]
            if (pHandle->bResetPLLCnt > pHandle->bResetPLLTh)
 8005a0e:	5c61      	ldrb	r1, [r4, r1]
 8005a10:	4299      	cmp	r1, r3
 8005a12:	d200      	bcs.n	8005a16 <RUC_OTF_Exec+0x42>
 8005a14:	e095      	b.n	8005b42 <RUC_OTF_Exec+0x16e>
          else
          {
            /* Nothing to do */
          }

          IsSpeedReliable = pHandle->pSNSL->pFctSTO_SpeedReliabilityCheck(pHandle->pSNSL);
 8005a16:	6903      	ldr	r3, [r0, #16]
 8005a18:	4798      	blx	r3

          if (IsSpeedReliable)
          {
            if (pHandle->bOTFRelCounter < 127U)
 8005a1a:	2353      	movs	r3, #83	@ 0x53
          if (IsSpeedReliable)
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	d100      	bne.n	8005a22 <RUC_OTF_Exec+0x4e>
 8005a20:	e07e      	b.n	8005b20 <RUC_OTF_Exec+0x14c>
            if (pHandle->bOTFRelCounter < 127U)
 8005a22:	5ce5      	ldrb	r5, [r4, r3]
 8005a24:	2d7e      	cmp	r5, #126	@ 0x7e
 8005a26:	d802      	bhi.n	8005a2e <RUC_OTF_Exec+0x5a>
            {
              pHandle->bOTFRelCounter++;
 8005a28:	3501      	adds	r5, #1
 8005a2a:	b2ed      	uxtb	r5, r5
 8005a2c:	54e5      	strb	r5, [r4, r3]
          else
          {
            pHandle->bOTFRelCounter = 0U;
          }

          if (pHandle->pSNSL->pFctStoOtfResetPLL != MC_NULL)
 8005a2e:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8005a30:	68d3      	ldr	r3, [r2, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d100      	bne.n	8005a38 <RUC_OTF_Exec+0x64>
 8005a36:	e08a      	b.n	8005b4e <RUC_OTF_Exec+0x17a>
          {
            if (pHandle->bOTFRelCounter == (pHandle->bResetPLLTh >> 1))
 8005a38:	2356      	movs	r3, #86	@ 0x56
 8005a3a:	5ce3      	ldrb	r3, [r4, r3]
 8005a3c:	085b      	lsrs	r3, r3, #1
 8005a3e:	42ab      	cmp	r3, r5
 8005a40:	d15c      	bne.n	8005afc <RUC_OTF_Exec+0x128>
          }

          if (true == condition)
          {
            bool bCollinearSpeed = false;
            int16_t hObsSpeedUnit = SPD_GetAvrgMecSpeedUnit(pHandle->pSNSL->_Super);
 8005a42:	6810      	ldr	r0, [r2, #0]
 8005a44:	f000 f8e8 	bl	8005c18 <SPD_GetAvrgMecSpeedUnit>
            int16_t hObsSpeedUnitAbsValue =
                    ((hObsSpeedUnit < 0) ? (-hObsSpeedUnit) : (hObsSpeedUnit)); /* hObsSpeedUnit absolute value */

            if (pHandle->hDirection > 0)
 8005a48:	2206      	movs	r2, #6
 8005a4a:	5ea3      	ldrsh	r3, [r4, r2]
            int16_t hObsSpeedUnit = SPD_GetAvrgMecSpeedUnit(pHandle->pSNSL->_Super);
 8005a4c:	0006      	movs	r6, r0
            if (pHandle->hDirection > 0)
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	dc00      	bgt.n	8005a54 <RUC_OTF_Exec+0x80>
 8005a52:	e080      	b.n	8005b56 <RUC_OTF_Exec+0x182>
            {
              if (hObsSpeedUnit > 0)
 8005a54:	2800      	cmp	r0, #0
 8005a56:	dc00      	bgt.n	8005a5a <RUC_OTF_Exec+0x86>
 8005a58:	e080      	b.n	8005b5c <RUC_OTF_Exec+0x188>
                    ((hObsSpeedUnit < 0) ? (-hObsSpeedUnit) : (hObsSpeedUnit)); /* hObsSpeedUnit absolute value */
 8005a5a:	17f3      	asrs	r3, r6, #31
 8005a5c:	18f5      	adds	r5, r6, r3
 8005a5e:	405d      	eors	r5, r3
              /*reverse speed management*/
              pHandle->bOTFRelCounter = 0U;
            }
            else /* Speeds are collinear */
            {
              if ((uint16_t)(hObsSpeedUnitAbsValue) > pHandle->hMinStartUpValidSpeed)
 8005a60:	234a      	movs	r3, #74	@ 0x4a
 8005a62:	5ae3      	ldrh	r3, [r4, r3]
                    ((hObsSpeedUnit < 0) ? (-hObsSpeedUnit) : (hObsSpeedUnit)); /* hObsSpeedUnit absolute value */
 8005a64:	b2ad      	uxth	r5, r5
              if ((uint16_t)(hObsSpeedUnitAbsValue) > pHandle->hMinStartUpValidSpeed)
 8005a66:	42ab      	cmp	r3, r5
 8005a68:	d300      	bcc.n	8005a6c <RUC_OTF_Exec+0x98>
 8005a6a:	e07c      	b.n	8005b66 <RUC_OTF_Exec+0x192>
              {
                /* Startup end, go to run */
                pHandle->pSNSL->pFctForceConvergency1(pHandle->pSNSL);
 8005a6c:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8005a6e:	6843      	ldr	r3, [r0, #4]
 8005a70:	4798      	blx	r3
                pHandle->EnteredZone1 = true;
 8005a72:	2355      	movs	r3, #85	@ 0x55
 8005a74:	2201      	movs	r2, #1
 8005a76:	54e2      	strb	r2, [r4, r3]
          pHandle->pSNSL->pFctForceConvergency1(pHandle->pSNSL);
        }
      } /* Stage 0 */
    } /* hPhaseRemainingTicks > 0 */

    if (0U == pHandle->hPhaseRemainingTicks)
 8005a78:	88a3      	ldrh	r3, [r4, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d100      	bne.n	8005a80 <RUC_OTF_Exec+0xac>
 8005a7e:	e0bd      	b.n	8005bfc <RUC_OTF_Exec+0x228>
  bool retVal = true;
 8005a80:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8005a82:	bc80      	pop	{r7}
 8005a84:	46b8      	mov	r8, r7
 8005a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8005a88:	6883      	ldr	r3, [r0, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d028      	beq.n	8005ae0 <RUC_OTF_Exec+0x10c>
        if (0U == pHandle->bStageCnt)
 8005a8e:	2d00      	cmp	r5, #0
 8005a90:	d038      	beq.n	8005b04 <RUC_OTF_Exec+0x130>
        else if (1U == pHandle->bStageCnt)
 8005a92:	2d01      	cmp	r5, #1
 8005a94:	d04d      	beq.n	8005b32 <RUC_OTF_Exec+0x15e>
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8005a96:	881a      	ldrh	r2, [r3, #0]
 8005a98:	8899      	ldrh	r1, [r3, #4]
 8005a9a:	88e3      	ldrh	r3, [r4, #6]
 8005a9c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8005a9e:	4359      	muls	r1, r3
 8005aa0:	b209      	sxth	r1, r1
 8005aa2:	f000 f91b 	bl	8005cdc <STC_ExecRamp>
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8005aa6:	68a3      	ldr	r3, [r4, #8]
        VSS_SetMecAcceleration(pHandle->pVSS,
 8005aa8:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8005aaa:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8005aac:	8859      	ldrh	r1, [r3, #2]
 8005aae:	88e3      	ldrh	r3, [r4, #6]
 8005ab0:	4359      	muls	r1, r3
        VSS_SetMecAcceleration(pHandle->pVSS,
 8005ab2:	b209      	sxth	r1, r1
 8005ab4:	f000 fd42 	bl	800653c <VSS_SetMecAcceleration>
                                                 * (uint32_t)pHandle->hRUCFrequencyHz) / 1000U);
 8005ab8:	21fa      	movs	r1, #250	@ 0xfa
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8005aba:	68a5      	ldr	r5, [r4, #8]
                                                 * (uint32_t)pHandle->hRUCFrequencyHz) / 1000U);
 8005abc:	8820      	ldrh	r0, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8005abe:	882b      	ldrh	r3, [r5, #0]
                                                 * (uint32_t)pHandle->hRUCFrequencyHz) / 1000U);
 8005ac0:	0089      	lsls	r1, r1, #2
 8005ac2:	4358      	muls	r0, r3
 8005ac4:	f7fa fb20 	bl	8000108 <__udivsi3>
        pHandle->bStageCnt++;
 8005ac8:	2258      	movs	r2, #88	@ 0x58
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8005aca:	68ab      	ldr	r3, [r5, #8]
        pHandle->hPhaseRemainingTicks++;
 8005acc:	3001      	adds	r0, #1
 8005ace:	80a0      	strh	r0, [r4, #4]
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8005ad0:	60a3      	str	r3, [r4, #8]
        pHandle->bStageCnt++;
 8005ad2:	5ca3      	ldrb	r3, [r4, r2]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	54a3      	strb	r3, [r4, r2]
 8005ad8:	e7d2      	b.n	8005a80 <RUC_OTF_Exec+0xac>
        if (0U == pHandle->bStageCnt)
 8005ada:	2358      	movs	r3, #88	@ 0x58
                  pHandle->hPhaseRemainingTicks = 0U;
 8005adc:	80a2      	strh	r2, [r4, #4]
        if (0U == pHandle->bStageCnt)
 8005ade:	5ce5      	ldrb	r5, [r4, r3]
        if (pHandle->bStageCnt == (pHandle->bPhaseNbr - (uint8_t)1)) /* End of user programmed revup */
 8005ae0:	2348      	movs	r3, #72	@ 0x48
 8005ae2:	5ce3      	ldrb	r3, [r4, r3]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	429d      	cmp	r5, r3
 8005ae8:	d021      	beq.n	8005b2e <RUC_OTF_Exec+0x15a>
        else if (7U == pHandle->bStageCnt) /* End of first OTF runs */
 8005aea:	2d07      	cmp	r5, #7
 8005aec:	d1c8      	bne.n	8005a80 <RUC_OTF_Exec+0xac>
          pHandle->bStageCnt = 0U; /* Breaking state */
 8005aee:	2300      	movs	r3, #0
 8005af0:	2258      	movs	r2, #88	@ 0x58
 8005af2:	54a3      	strb	r3, [r4, r2]
          pHandle->hPhaseRemainingTicks = 0U;
 8005af4:	80a3      	strh	r3, [r4, #4]
 8005af6:	e7c3      	b.n	8005a80 <RUC_OTF_Exec+0xac>
          pHandle->pSNSL->pFctForceConvergency1(pHandle->pSNSL);
 8005af8:	6843      	ldr	r3, [r0, #4]
 8005afa:	4798      	blx	r3
    if (0U == pHandle->hPhaseRemainingTicks)
 8005afc:	88a3      	ldrh	r3, [r4, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1be      	bne.n	8005a80 <RUC_OTF_Exec+0xac>
 8005b02:	e07b      	b.n	8005bfc <RUC_OTF_Exec+0x228>
          PWMC_SwitchOffPWM(pHandle->pPWM);
 8005b04:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8005b06:	f7fc fce7 	bl	80024d8 <PWMC_SwitchOffPWM>
          pHandle->OTFSCLowside = true;
 8005b0a:	2354      	movs	r3, #84	@ 0x54
 8005b0c:	2201      	movs	r2, #1
          PWMC_TurnOnLowSides(pHandle->pPWM, 0u);
 8005b0e:	2100      	movs	r1, #0
          pHandle->OTFSCLowside = true;
 8005b10:	54e2      	strb	r2, [r4, r3]
          PWMC_TurnOnLowSides(pHandle->pPWM, 0u);
 8005b12:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8005b14:	f7fc fd04 	bl	8002520 <PWMC_TurnOnLowSides>
          pHandle->bOTFRelCounter = 0U;
 8005b18:	2353      	movs	r3, #83	@ 0x53
 8005b1a:	54e5      	strb	r5, [r4, r3]
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8005b1c:	68a3      	ldr	r3, [r4, #8]
 8005b1e:	e7ba      	b.n	8005a96 <RUC_OTF_Exec+0xc2>
            pHandle->bOTFRelCounter = 0U;
 8005b20:	54e0      	strb	r0, [r4, r3]
          if (pHandle->pSNSL->pFctStoOtfResetPLL != MC_NULL)
 8005b22:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8005b24:	68d3      	ldr	r3, [r2, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d000      	beq.n	8005b2c <RUC_OTF_Exec+0x158>
 8005b2a:	e785      	b.n	8005a38 <RUC_OTF_Exec+0x64>
 8005b2c:	e7e6      	b.n	8005afc <RUC_OTF_Exec+0x128>
          retVal = false;
 8005b2e:	2000      	movs	r0, #0
  return (retVal);
 8005b30:	e7a7      	b.n	8005a82 <RUC_OTF_Exec+0xae>
          PWMC_SwitchOnPWM(pHandle->pPWM);
 8005b32:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8005b34:	f7fc fcd4 	bl	80024e0 <PWMC_SwitchOnPWM>
          pHandle->OTFSCLowside = false;
 8005b38:	2354      	movs	r3, #84	@ 0x54
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	54e2      	strb	r2, [r4, r3]
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8005b3e:	68a3      	ldr	r3, [r4, #8]
 8005b40:	e7a9      	b.n	8005a96 <RUC_OTF_Exec+0xc2>
              pHandle->pSNSL->pFctStoOtfResetPLL(pHandle->pSNSL);
 8005b42:	4790      	blx	r2
              pHandle->bOTFRelCounter = 0U;
 8005b44:	2353      	movs	r3, #83	@ 0x53
 8005b46:	54e5      	strb	r5, [r4, r3]
              pHandle->bResetPLLCnt = 0U;
 8005b48:	55a5      	strb	r5, [r4, r6]
          IsSpeedReliable = pHandle->pSNSL->pFctSTO_SpeedReliabilityCheck(pHandle->pSNSL);
 8005b4a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8005b4c:	e763      	b.n	8005a16 <RUC_OTF_Exec+0x42>
            if (127U == pHandle->bOTFRelCounter)
 8005b4e:	2d7f      	cmp	r5, #127	@ 0x7f
 8005b50:	d100      	bne.n	8005b54 <RUC_OTF_Exec+0x180>
 8005b52:	e776      	b.n	8005a42 <RUC_OTF_Exec+0x6e>
 8005b54:	e7d2      	b.n	8005afc <RUC_OTF_Exec+0x128>
              if (hObsSpeedUnit < 0)
 8005b56:	2800      	cmp	r0, #0
 8005b58:	da00      	bge.n	8005b5c <RUC_OTF_Exec+0x188>
 8005b5a:	e77e      	b.n	8005a5a <RUC_OTF_Exec+0x86>
              pHandle->bOTFRelCounter = 0U;
 8005b5c:	2353      	movs	r3, #83	@ 0x53
 8005b5e:	2200      	movs	r2, #0
 8005b60:	54e2      	strb	r2, [r4, r3]
    if (0U == pHandle->hPhaseRemainingTicks)
 8005b62:	88a3      	ldrh	r3, [r4, #4]
 8005b64:	e789      	b.n	8005a7a <RUC_OTF_Exec+0xa6>
              else if ((uint16_t)(hObsSpeedUnitAbsValue) > pHandle->hMinStartUpFlySpeed)
 8005b66:	234c      	movs	r3, #76	@ 0x4c
 8005b68:	5ae3      	ldrh	r3, [r4, r3]
 8005b6a:	42ab      	cmp	r3, r5
 8005b6c:	d2c6      	bcs.n	8005afc <RUC_OTF_Exec+0x128>
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->bCopyObserver = true;
 8005b6e:	2333      	movs	r3, #51	@ 0x33
 8005b70:	2101      	movs	r1, #1
 8005b72:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
                pHandle->pSNSL->pFctForceConvergency2(pHandle->pSNSL);
 8005b74:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8005b76:	54d1      	strb	r1, [r2, r3]
 8005b78:	6883      	ldr	r3, [r0, #8]
 8005b7a:	4798      	blx	r3
                if (MC_NULL == pHandle->pCurrentPhaseParams)
 8005b7c:	68a2      	ldr	r2, [r4, #8]
 8005b7e:	2a00      	cmp	r2, #0
 8005b80:	d0ab      	beq.n	8005ada <RUC_OTF_Exec+0x106>
                  while (pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit < hObsSpeedUnitAbsValue)
 8005b82:	2302      	movs	r3, #2
 8005b84:	5ed0      	ldrsh	r0, [r2, r3]
            int16_t hObsSpeedUnitAbsValue =
 8005b86:	b229      	sxth	r1, r5
                  while (pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit < hObsSpeedUnitAbsValue)
 8005b88:	4281      	cmp	r1, r0
 8005b8a:	dd16      	ble.n	8005bba <RUC_OTF_Exec+0x1e6>
        if (0U == pHandle->bStageCnt)
 8005b8c:	2358      	movs	r3, #88	@ 0x58
                      pHandle->bStageCnt++;
 8005b8e:	469c      	mov	ip, r3
        if (0U == pHandle->bStageCnt)
 8005b90:	5ce5      	ldrb	r5, [r4, r3]
 8005b92:	e00c      	b.n	8005bae <RUC_OTF_Exec+0x1da>
                      hOldFinalTorque = pHandle->pCurrentPhaseParams->hFinalTorque;
 8005b94:	2704      	movs	r7, #4
 8005b96:	5fdf      	ldrsh	r7, [r3, r7]
                      pHandle->bStageCnt++;
 8005b98:	4663      	mov	r3, ip
 8005b9a:	3501      	adds	r5, #1
 8005b9c:	b2ed      	uxtb	r5, r5
                      pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pHandle->pCurrentPhaseParams->pNext;
 8005b9e:	60a2      	str	r2, [r4, #8]
                      pHandle->bStageCnt++;
 8005ba0:	54e5      	strb	r5, [r4, r3]
                      hOldFinalTorque = pHandle->pCurrentPhaseParams->hFinalTorque;
 8005ba2:	46b8      	mov	r8, r7
                  while (pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit < hObsSpeedUnitAbsValue)
 8005ba4:	2702      	movs	r7, #2
 8005ba6:	5fd3      	ldrsh	r3, [r2, r7]
 8005ba8:	428b      	cmp	r3, r1
 8005baa:	da09      	bge.n	8005bc0 <RUC_OTF_Exec+0x1ec>
 8005bac:	0018      	movs	r0, r3
                    if (pHandle->pCurrentPhaseParams->pNext == MC_NULL)
 8005bae:	0013      	movs	r3, r2
 8005bb0:	6892      	ldr	r2, [r2, #8]
 8005bb2:	2a00      	cmp	r2, #0
 8005bb4:	d1ee      	bne.n	8005b94 <RUC_OTF_Exec+0x1c0>
                      pHandle->hPhaseRemainingTicks = 0U;
 8005bb6:	80a2      	strh	r2, [r4, #4]
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8005bb8:	e769      	b.n	8005a8e <RUC_OTF_Exec+0xba>
                  while (pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit < hObsSpeedUnitAbsValue)
 8005bba:	0003      	movs	r3, r0
                int16_t hOldFinalTorque = 0;
 8005bbc:	2000      	movs	r0, #0
                int16_t hOldFinalMecSpeedUnit = 0;
 8005bbe:	4680      	mov	r8, r0
                  wDeltaSpeedRevUp = ((int32_t)(pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit))
 8005bc0:	1a19      	subs	r1, r3, r0
                  if ((int32_t)0 == wDeltaSpeedRevUp)
 8005bc2:	4283      	cmp	r3, r0
 8005bc4:	d108      	bne.n	8005bd8 <RUC_OTF_Exec+0x204>
                  pHandle->hPhaseRemainingTicks = 1U;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	80a3      	strh	r3, [r4, #4]
                  pHandle->pCurrentPhaseParams = &pHandle->OTFPhaseParams;
 8005bca:	0023      	movs	r3, r4
 8005bcc:	335c      	adds	r3, #92	@ 0x5c
 8005bce:	60a3      	str	r3, [r4, #8]
                  pHandle->bStageCnt = 6U;
 8005bd0:	2206      	movs	r2, #6
 8005bd2:	2358      	movs	r3, #88	@ 0x58
 8005bd4:	54e2      	strb	r2, [r4, r3]
    if (0U == pHandle->hPhaseRemainingTicks)
 8005bd6:	e753      	b.n	8005a80 <RUC_OTF_Exec+0xac>
                  wDeltaTorqueRevUp = ((int32_t)(pHandle->pCurrentPhaseParams->hFinalTorque))
 8005bd8:	2304      	movs	r3, #4
 8005bda:	5ed3      	ldrsh	r3, [r2, r3]
 8005bdc:	4642      	mov	r2, r8
                    hTorqueReference = (int16_t)((((int32_t)hObsSpeedUnit) * wDeltaTorqueRevUp) / wDeltaSpeedRevUp)
 8005bde:	0030      	movs	r0, r6
                  wDeltaTorqueRevUp = ((int32_t)(pHandle->pCurrentPhaseParams->hFinalTorque))
 8005be0:	1a9b      	subs	r3, r3, r2
                    hTorqueReference = (int16_t)((((int32_t)hObsSpeedUnit) * wDeltaTorqueRevUp) / wDeltaSpeedRevUp)
 8005be2:	4358      	muls	r0, r3
 8005be4:	f7fa fb1a 	bl	800021c <__divsi3>
                                     + hOldFinalTorque;
 8005be8:	0001      	movs	r1, r0
                    (void)STC_ExecRamp(pHandle->pSTC, pHandle->hDirection * hTorqueReference, 0U);
 8005bea:	88e3      	ldrh	r3, [r4, #6]
                                     + hOldFinalTorque;
 8005bec:	4441      	add	r1, r8
                    (void)STC_ExecRamp(pHandle->pSTC, pHandle->hDirection * hTorqueReference, 0U);
 8005bee:	4359      	muls	r1, r3
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8005bf4:	b209      	sxth	r1, r1
 8005bf6:	f000 f871 	bl	8005cdc <STC_ExecRamp>
 8005bfa:	e7e4      	b.n	8005bc6 <RUC_OTF_Exec+0x1f2>
        if (0U == pHandle->bStageCnt)
 8005bfc:	2258      	movs	r2, #88	@ 0x58
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8005bfe:	68a3      	ldr	r3, [r4, #8]
        if (0U == pHandle->bStageCnt)
 8005c00:	5ca5      	ldrb	r5, [r4, r2]
 8005c02:	e742      	b.n	8005a8a <RUC_OTF_Exec+0xb6>

08005c04 <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 8005c04:	2358      	movs	r3, #88	@ 0x58
 8005c06:	5cc2      	ldrb	r2, [r0, r3]
 8005c08:	3b0f      	subs	r3, #15
 8005c0a:	5cc3      	ldrb	r3, [r0, r3]
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	4140      	adcs	r0, r0
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
 8005c12:	b2c0      	uxtb	r0, r0
}
 8005c14:	4770      	bx	lr
 8005c16:	46c0      	nop			@ (mov r8, r8)

08005c18 <SPD_GetAvrgMecSpeedUnit>:
__weak int16_t SPD_GetAvrgMecSpeedUnit(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
 8005c18:	230c      	movs	r3, #12
 8005c1a:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005c1c:	4770      	bx	lr
 8005c1e:	46c0      	nop			@ (mov r8, r8)

08005c20 <SPD_IsMecSpeedReliable>:
  * - Called at least with the same periodicity on which speed control is executed.
  *         -

  */
__weak bool SPD_IsMecSpeedReliable(SpeednPosFdbk_Handle_t *pHandle, const int16_t *pMecSpeedUnit)
{
 8005c20:	0003      	movs	r3, r0
 8005c22:	b570      	push	{r4, r5, r6, lr}
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8005c24:	2500      	movs	r5, #0
 8005c26:	5f4c      	ldrsh	r4, [r1, r5]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8005c28:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8005c2a:	781a      	ldrb	r2, [r3, #0]
    {
      hAux = -(*pMecSpeedUnit);
 8005c2c:	8809      	ldrh	r1, [r1, #0]
    if (*pMecSpeedUnit < 0)
 8005c2e:	2c00      	cmp	r4, #0
 8005c30:	da01      	bge.n	8005c36 <SPD_IsMecSpeedReliable+0x16>
      hAux = -(*pMecSpeedUnit);
 8005c32:	4249      	negs	r1, r1
 8005c34:	b289      	uxth	r1, r1
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8005c36:	2512      	movs	r5, #18
 8005c38:	5f5c      	ldrsh	r4, [r3, r5]
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8005c3a:	8add      	ldrh	r5, [r3, #22]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8005c3c:	8a9e      	ldrh	r6, [r3, #20]
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8005c3e:	428d      	cmp	r5, r1
 8005c40:	d80f      	bhi.n	8005c62 <SPD_IsMecSpeedReliable+0x42>
    {
      hAux = -(pHandle->hMecAccelUnitP);
 8005c42:	b2a5      	uxth	r5, r4
    if (pHandle->hMecAccelUnitP < 0)
 8005c44:	2c00      	cmp	r4, #0
 8005c46:	db11      	blt.n	8005c6c <SPD_IsMecSpeedReliable+0x4c>
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8005c48:	8b1c      	ldrh	r4, [r3, #24]
 8005c4a:	42ac      	cmp	r4, r5
 8005c4c:	d309      	bcc.n	8005c62 <SPD_IsMecSpeedReliable+0x42>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 8005c4e:	428e      	cmp	r6, r1
 8005c50:	d307      	bcc.n	8005c62 <SPD_IsMecSpeedReliable+0x42>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8005c52:	4290      	cmp	r0, r2
 8005c54:	d80d      	bhi.n	8005c72 <SPD_IsMecSpeedReliable+0x52>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8005c56:	1a10      	subs	r0, r2, r0
 8005c58:	1e41      	subs	r1, r0, #1
 8005c5a:	4188      	sbcs	r0, r1
 8005c5c:	b2c0      	uxtb	r0, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8005c5e:	701a      	strb	r2, [r3, #0]
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8005c60:	bd70      	pop	{r4, r5, r6, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8005c62:	4290      	cmp	r0, r2
 8005c64:	d9f7      	bls.n	8005c56 <SPD_IsMecSpeedReliable+0x36>
        bSpeedErrorNumber++;
 8005c66:	3201      	adds	r2, #1
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	e7f4      	b.n	8005c56 <SPD_IsMecSpeedReliable+0x36>
      hAux = -(pHandle->hMecAccelUnitP);
 8005c6c:	426d      	negs	r5, r5
 8005c6e:	b2ad      	uxth	r5, r5
      hAbsMecAccelUnitP = (uint16_t)hAux;
 8005c70:	e7ea      	b.n	8005c48 <SPD_IsMecSpeedReliable+0x28>
        bSpeedErrorNumber = 0u;
 8005c72:	2200      	movs	r2, #0
  bool SpeedSensorReliability = true;
 8005c74:	2001      	movs	r0, #1
 8005c76:	e7f2      	b.n	8005c5e <SPD_IsMecSpeedReliable+0x3e>

08005c78 <SPD_GetS16Speed>:
  * -- INT16_MAX when the average mechanical speed is equal to
  * @ref SpeednPosFdbk_Handle_t::hMaxReliableMecSpeedUnit "hMaxReliableMecSpeedUnit" ,\n
  * - Called for speed monitoring through MotorPilote.
  */
__weak int16_t SPD_GetS16Speed(const SpeednPosFdbk_Handle_t *pHandle)
{
 8005c78:	0003      	movs	r3, r0
 8005c7a:	b510      	push	{r4, lr}
    tempValue = 0;
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
 8005c7c:	210c      	movs	r1, #12
 8005c7e:	5e42      	ldrsh	r2, [r0, r1]
    wAux *= INT16_MAX;
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8005c80:	2114      	movs	r1, #20
 8005c82:	5e59      	ldrsh	r1, [r3, r1]
    wAux *= INT16_MAX;
 8005c84:	03d0      	lsls	r0, r2, #15
 8005c86:	1a80      	subs	r0, r0, r2
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8005c88:	f7fa fac8 	bl	800021c <__divsi3>
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (tempValue);
 8005c8c:	b200      	sxth	r0, r0
}
 8005c8e:	bd10      	pop	{r4, pc}

08005c90 <STC_Init>:
  else
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
 8005c90:	232a      	movs	r3, #42	@ 0x2a
    pHandle->SPD = SPD_Handle;
 8005c92:	6142      	str	r2, [r0, #20]
    pHandle->PISpeed = pPI;
 8005c94:	6101      	str	r1, [r0, #16]
    pHandle->Mode = pHandle->ModeDefault;
 8005c96:	5cc3      	ldrb	r3, [r0, r3]
 8005c98:	7003      	strb	r3, [r0, #0]
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8005c9a:	222c      	movs	r2, #44	@ 0x2c
 8005c9c:	5e83      	ldrsh	r3, [r0, r2]
 8005c9e:	041b      	lsls	r3, r3, #16
 8005ca0:	6043      	str	r3, [r0, #4]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8005ca2:	222e      	movs	r2, #46	@ 0x2e
 8005ca4:	5e83      	ldrsh	r3, [r0, r2]
 8005ca6:	041b      	lsls	r3, r3, #16
 8005ca8:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 8005caa:	2300      	movs	r3, #0
 8005cac:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 8005cae:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8005cb0:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8005cb2:	4770      	bx	lr

08005cb4 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8005cb4:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8005cb6:	4770      	bx	lr

08005cb8 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8005cb8:	7803      	ldrb	r3, [r0, #0]
{
 8005cba:	b510      	push	{r4, lr}
    if (MCM_SPEED_MODE == pHandle->Mode)
 8005cbc:	2b03      	cmp	r3, #3
 8005cbe:	d000      	beq.n	8005cc2 <STC_Clear+0xa>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8005cc0:	bd10      	pop	{r4, pc}
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	6900      	ldr	r0, [r0, #16]
 8005cc6:	f7ff f8b9 	bl	8004e3c <PID_SetIntegralTerm>
}
 8005cca:	e7f9      	b.n	8005cc0 <STC_Clear+0x8>

08005ccc <STC_GetMecSpeedRefUnit>:
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt >> 16));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt >> 16));
 8005ccc:	2306      	movs	r3, #6
 8005cce:	5ec0      	ldrsh	r0, [r0, r3]
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 8005cd0:	4770      	bx	lr
 8005cd2:	46c0      	nop			@ (mov r8, r8)

08005cd4 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8005cd4:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8005cd6:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8005cd8:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8005cda:	4770      	bx	lr

08005cdc <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8005cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8005cde:	7803      	ldrb	r3, [r0, #0]
{
 8005ce0:	0004      	movs	r4, r0
 8005ce2:	000d      	movs	r5, r1
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8005ce4:	2b04      	cmp	r3, #4
 8005ce6:	d017      	beq.n	8005d18 <STC_ExecRamp+0x3c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8005ce8:	8bc1      	ldrh	r1, [r0, #30]
 8005cea:	2000      	movs	r0, #0
 8005cec:	42a9      	cmp	r1, r5
 8005cee:	da00      	bge.n	8005cf2 <STC_ExecRamp+0x16>
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8005cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8005cf2:	2624      	movs	r6, #36	@ 0x24
 8005cf4:	5fa1      	ldrsh	r1, [r4, r6]
 8005cf6:	42a9      	cmp	r1, r5
 8005cf8:	dcfa      	bgt.n	8005cf0 <STC_ExecRamp+0x14>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8005cfa:	8c21      	ldrh	r1, [r4, #32]
 8005cfc:	42a9      	cmp	r1, r5
 8005cfe:	dd03      	ble.n	8005d08 <STC_ExecRamp+0x2c>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8005d00:	2622      	movs	r6, #34	@ 0x22
 8005d02:	5fa1      	ldrsh	r1, [r4, r6]
 8005d04:	42a9      	cmp	r1, r5
 8005d06:	dbf3      	blt.n	8005cf0 <STC_ExecRamp+0x14>
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8005d08:	6866      	ldr	r6, [r4, #4]
      if (0U == hDurationms)
 8005d0a:	2a00      	cmp	r2, #0
 8005d0c:	d116      	bne.n	8005d3c <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d10c      	bne.n	8005d2c <STC_ExecRamp+0x50>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8005d12:	042d      	lsls	r5, r5, #16
 8005d14:	6065      	str	r5, [r4, #4]
 8005d16:	e00b      	b.n	8005d30 <STC_ExecRamp+0x54>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8005d18:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	428b      	cmp	r3, r1
 8005d1e:	dbe7      	blt.n	8005cf0 <STC_ExecRamp+0x14>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8005d20:	2128      	movs	r1, #40	@ 0x28
 8005d22:	5e63      	ldrsh	r3, [r4, r1]
 8005d24:	42ab      	cmp	r3, r5
 8005d26:	dce3      	bgt.n	8005cf0 <STC_ExecRamp+0x14>
      if (0U == hDurationms)
 8005d28:	2a00      	cmp	r2, #0
 8005d2a:	d116      	bne.n	8005d5a <STC_ExecRamp+0x7e>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8005d2c:	042d      	lsls	r5, r5, #16
 8005d2e:	60a5      	str	r5, [r4, #8]
        pHandle->IncDecAmount = 0;
 8005d30:	2700      	movs	r7, #0
 8005d32:	2000      	movs	r0, #0
 8005d34:	61a0      	str	r0, [r4, #24]
        pHandle->RampRemainingStep = 0U;
 8005d36:	60e7      	str	r7, [r4, #12]
        pHandle->IncDecAmount = 0;
 8005d38:	2001      	movs	r0, #1
 8005d3a:	e7d9      	b.n	8005cf0 <STC_ExecRamp+0x14>
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8005d3c:	1436      	asrs	r6, r6, #16
        wAux /= 1000U;
 8005d3e:	21fa      	movs	r1, #250	@ 0xfa
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8005d40:	8ba0      	ldrh	r0, [r4, #28]
        pHandle->TargetFinal = hTargetFinal;
 8005d42:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8005d44:	4350      	muls	r0, r2
        wAux /= 1000U;
 8005d46:	0089      	lsls	r1, r1, #2
 8005d48:	f7fa f9de 	bl	8000108 <__udivsi3>
        pHandle->RampRemainingStep++;
 8005d4c:	1c47      	adds	r7, r0, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8005d4e:	1ba8      	subs	r0, r5, r6
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8005d50:	0039      	movs	r1, r7
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8005d52:	0400      	lsls	r0, r0, #16
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8005d54:	f7fa fa62 	bl	800021c <__divsi3>
        pHandle->IncDecAmount = wAux1;
 8005d58:	e7ec      	b.n	8005d34 <STC_ExecRamp+0x58>
  return ((int16_t)(pHandle->TorqueRef >> 16));
 8005d5a:	230a      	movs	r3, #10
 8005d5c:	5ee6      	ldrsh	r6, [r4, r3]
 8005d5e:	e7ee      	b.n	8005d3e <STC_ExecRamp+0x62>

08005d60 <STC_CalcTorqueReference>:
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 8005d60:	7802      	ldrb	r2, [r0, #0]
{
 8005d62:	b570      	push	{r4, r5, r6, lr}
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 8005d64:	68c3      	ldr	r3, [r0, #12]
{
 8005d66:	0004      	movs	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8005d68:	2a04      	cmp	r2, #4
 8005d6a:	d01f      	beq.n	8005dac <STC_CalcTorqueReference+0x4c>
      wCurrentReference = pHandle->SpeedRefUnitExt;
 8005d6c:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d908      	bls.n	8005d84 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 8005d72:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8005d74:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8005d76:	186d      	adds	r5, r5, r1
      pHandle->RampRemainingStep--;
 8005d78:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 8005d7a:	2a03      	cmp	r2, #3
 8005d7c:	d00a      	beq.n	8005d94 <STC_CalcTorqueReference+0x34>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8005d7e:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8005d80:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8005d82:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->RampRemainingStep)
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d1f8      	bne.n	8005d7a <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8005d88:	2302      	movs	r3, #2
 8005d8a:	5ec5      	ldrsh	r5, [r0, r3]
      pHandle->RampRemainingStep = 0U;
 8005d8c:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8005d8e:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8005d90:	60c3      	str	r3, [r0, #12]
 8005d92:	e7f2      	b.n	8005d7a <STC_CalcTorqueReference+0x1a>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8005d94:	6960      	ldr	r0, [r4, #20]
 8005d96:	f7ff ff3f 	bl	8005c18 <SPD_GetAvrgMecSpeedUnit>
      hTargetSpeed = (int16_t)(wCurrentReference >> 16);
 8005d9a:	1429      	asrs	r1, r5, #16
      hError = hTargetSpeed - hMeasuredSpeed;
 8005d9c:	1a09      	subs	r1, r1, r0
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8005d9e:	b209      	sxth	r1, r1
 8005da0:	6920      	ldr	r0, [r4, #16]
 8005da2:	f7ff f855 	bl	8004e50 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 8005da6:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8005da8:	0405      	lsls	r5, r0, #16
 8005daa:	e7e9      	b.n	8005d80 <STC_CalcTorqueReference+0x20>
      wCurrentReference = pHandle->TorqueRef;
 8005dac:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d904      	bls.n	8005dbc <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 8005db2:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 8005db4:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8005db6:	18ad      	adds	r5, r5, r2
      pHandle->RampRemainingStep--;
 8005db8:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8005dba:	e7e0      	b.n	8005d7e <STC_CalcTorqueReference+0x1e>
    else if (1U == pHandle->RampRemainingStep)
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d1de      	bne.n	8005d7e <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	5ec5      	ldrsh	r5, [r0, r3]
      pHandle->RampRemainingStep = 0U;
 8005dc4:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8005dc6:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8005dc8:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8005dca:	e7d8      	b.n	8005d7e <STC_CalcTorqueReference+0x1e>

08005dcc <STC_GetMecSpeedRefUnitDefault>:
__weak int16_t STC_GetMecSpeedRefUnitDefault(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
 8005dcc:	232c      	movs	r3, #44	@ 0x2c
 8005dce:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005dd0:	4770      	bx	lr
 8005dd2:	46c0      	nop			@ (mov r8, r8)

08005dd4 <STC_GetDefaultIqdref>:
    IqdRefDefault.q = pHandle->TorqueRefDefault;
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8005dd4:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8005dd6:	8dc0      	ldrh	r0, [r0, #46]	@ 0x2e
 8005dd8:	041b      	lsls	r3, r3, #16
{
 8005dda:	b082      	sub	sp, #8
  return (IqdRefDefault);
 8005ddc:	4318      	orrs	r0, r3
}
 8005dde:	b002      	add	sp, #8
 8005de0:	4770      	bx	lr
 8005de2:	46c0      	nop			@ (mov r8, r8)

08005de4 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8005de4:	b510      	push	{r4, lr}
 8005de6:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8005de8:	6940      	ldr	r0, [r0, #20]
 8005dea:	f7ff ff15 	bl	8005c18 <SPD_GetAvrgMecSpeedUnit>
 8005dee:	0400      	lsls	r0, r0, #16
 8005df0:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8005df2:	bd10      	pop	{r4, pc}

08005df4 <STO_PLL_CalcElAngle>:
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
//cstat !MISRAC2012-Rule-8.13
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 8005df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005df6:	46de      	mov	lr, fp
 8005df8:	4657      	mov	r7, sl
 8005dfa:	464e      	mov	r6, r9
 8005dfc:	4645      	mov	r5, r8
 8005dfe:	b5e0      	push	{r5, r6, r7, lr}
 8005e00:	0004      	movs	r4, r0
 8005e02:	b08f      	sub	sp, #60	@ 0x3c
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d100      	bne.n	8005e0a <STO_PLL_CalcElAngle+0x16>
 8005e08:	e0e4      	b.n	8005fd4 <STO_PLL_CalcElAngle+0x1e0>
 8005e0a:	2900      	cmp	r1, #0
 8005e0c:	d100      	bne.n	8005e10 <STO_PLL_CalcElAngle+0x1c>
 8005e0e:	e0e1      	b.n	8005fd4 <STO_PLL_CalcElAngle+0x1e0>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 8005e10:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8005e12:	4698      	mov	r8, r3
 8005e14:	232e      	movs	r3, #46	@ 0x2e
 8005e16:	5ec2      	ldrsh	r2, [r0, r3]
 8005e18:	03d3      	lsls	r3, r2, #15
 8005e1a:	1a9b      	subs	r3, r3, r2
 8005e1c:	4598      	cmp	r8, r3
 8005e1e:	dc00      	bgt.n	8005e22 <STO_PLL_CalcElAngle+0x2e>
 8005e20:	e0e6      	b.n	8005ff0 <STO_PLL_CalcElAngle+0x1fc>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 8005e22:	4698      	mov	r8, r3
 8005e24:	6683      	str	r3, [r0, #104]	@ 0x68
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8005e26:	228f      	movs	r2, #143	@ 0x8f
 8005e28:	4640      	mov	r0, r8
 8005e2a:	0052      	lsls	r2, r2, #1
 8005e2c:	5aa2      	ldrh	r2, [r4, r2]
 8005e2e:	4110      	asrs	r0, r2
 8005e30:	9003      	str	r0, [sp, #12]
 8005e32:	b200      	sxth	r0, r0
 8005e34:	4683      	mov	fp, r0
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8005e36:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8005e38:	9001      	str	r0, [sp, #4]
 8005e3a:	4283      	cmp	r3, r0
 8005e3c:	da00      	bge.n	8005e40 <STO_PLL_CalcElAngle+0x4c>
 8005e3e:	e0d4      	b.n	8005fea <STO_PLL_CalcElAngle+0x1f6>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 8005e40:	425b      	negs	r3, r3
 8005e42:	4298      	cmp	r0, r3
 8005e44:	dc00      	bgt.n	8005e48 <STO_PLL_CalcElAngle+0x54>
 8005e46:	e0d0      	b.n	8005fea <STO_PLL_CalcElAngle+0x1f6>
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8005e48:	9b01      	ldr	r3, [sp, #4]
 8005e4a:	4113      	asrs	r3, r2
 8005e4c:	9304      	str	r3, [sp, #16]
 8005e4e:	b21b      	sxth	r3, r3
 8005e50:	469a      	mov	sl, r3
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8005e52:	232c      	movs	r3, #44	@ 0x2c
 8005e54:	5ee0      	ldrsh	r0, [r4, r3]
 8005e56:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005e58:	03c3      	lsls	r3, r0, #15
 8005e5a:	1a1b      	subs	r3, r3, r0
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	dc00      	bgt.n	8005e62 <STO_PLL_CalcElAngle+0x6e>
 8005e60:	e0cd      	b.n	8005ffe <STO_PLL_CalcElAngle+0x20a>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 8005e62:	001a      	movs	r2, r3
 8005e64:	6623      	str	r3, [r4, #96]	@ 0x60
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8005e66:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8005e68:	9002      	str	r0, [sp, #8]
 8005e6a:	4283      	cmp	r3, r0
 8005e6c:	da00      	bge.n	8005e70 <STO_PLL_CalcElAngle+0x7c>
 8005e6e:	e0b9      	b.n	8005fe4 <STO_PLL_CalcElAngle+0x1f0>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 8005e70:	425b      	negs	r3, r3
 8005e72:	4298      	cmp	r0, r3
 8005e74:	dc00      	bgt.n	8005e78 <STO_PLL_CalcElAngle+0x84>
 8005e76:	e0b5      	b.n	8005fe4 <STO_PLL_CalcElAngle+0x1f0>
      /* Nothing to do */
    }

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8005e78:	238e      	movs	r3, #142	@ 0x8e
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	5ae0      	ldrh	r0, [r4, r3]
 8005e7e:	0013      	movs	r3, r2

    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8005e80:	9f02      	ldr	r7, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8005e82:	4103      	asrs	r3, r0
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8005e84:	4107      	asrs	r7, r0
 8005e86:	9705      	str	r7, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8005e88:	2602      	movs	r6, #2
 8005e8a:	5f8f      	ldrsh	r7, [r1, r6]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8005e8c:	8908      	ldrh	r0, [r1, #8]
 8005e8e:	2600      	movs	r6, #0
 8005e90:	5f8d      	ldrsh	r5, [r1, r6]
 8005e92:	4345      	muls	r5, r0
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8005e94:	4378      	muls	r0, r7

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005e96:	1400      	asrs	r0, r0, #16
 8005e98:	9006      	str	r0, [sp, #24]
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 8005e9a:	2620      	movs	r6, #32
 8005e9c:	5fa0      	ldrsh	r0, [r4, r6]
 8005e9e:	b21f      	sxth	r7, r3
 8005ea0:	4347      	muls	r7, r0
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 8005ea2:	1bd2      	subs	r2, r2, r7

    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 8005ea4:	2622      	movs	r6, #34	@ 0x22
 8005ea6:	5fa7      	ldrsh	r7, [r4, r6]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005ea8:	142d      	asrs	r5, r5, #16
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 8005eaa:	003e      	movs	r6, r7
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8005eac:	888f      	ldrh	r7, [r1, #4]
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 8005eae:	9607      	str	r6, [sp, #28]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8005eb0:	1bdb      	subs	r3, r3, r7
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 8005eb2:	0037      	movs	r7, r6
 8005eb4:	b21b      	sxth	r3, r3
 8005eb6:	435f      	muls	r7, r3
 8005eb8:	46bc      	mov	ip, r7
    wIalfa_est_Next += wAux;
 8005eba:	4494      	add	ip, r2

    wAux = ((int32_t)pHandle->hC5) * hValfa;
 8005ebc:	2628      	movs	r6, #40	@ 0x28
 8005ebe:	5fa2      	ldrsh	r2, [r4, r6]
    wIalfa_est_Next += wAux;

    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 8005ec0:	2624      	movs	r6, #36	@ 0x24
 8005ec2:	5fa7      	ldrsh	r7, [r4, r6]
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 8005ec4:	4355      	muls	r5, r2
    wIalfa_est_Next += wAux;
 8005ec6:	4465      	add	r5, ip
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 8005ec8:	46bc      	mov	ip, r7
 8005eca:	465f      	mov	r7, fp
 8005ecc:	4666      	mov	r6, ip
 8005ece:	4377      	muls	r7, r6
    wIalfa_est_Next -= wAux;
 8005ed0:	1bed      	subs	r5, r5, r7
 8005ed2:	950a      	str	r5, [sp, #40]	@ 0x28

    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 8005ed4:	2626      	movs	r6, #38	@ 0x26
 8005ed6:	5fa5      	ldrsh	r5, [r4, r6]
 8005ed8:	9508      	str	r5, [sp, #32]
 8005eda:	436b      	muls	r3, r5
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005edc:	8e65      	ldrh	r5, [r4, #50]	@ 0x32
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 8005ede:	4443      	add	r3, r8
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005ee0:	002f      	movs	r7, r5
 8005ee2:	4655      	mov	r5, sl
 8005ee4:	413d      	asrs	r5, r7
 8005ee6:	9709      	str	r7, [sp, #36]	@ 0x24
#else
    wAux = ((int32_t)hAux_Beta) / pHandle->hF3;
#endif

    wAux = wAux * pHandle->hC6;
 8005ee8:	272a      	movs	r7, #42	@ 0x2a
 8005eea:	5fe6      	ldrsh	r6, [r4, r7]
 8005eec:	4375      	muls	r5, r6
 8005eee:	46b1      	mov	r9, r6
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 8005ef0:	270e      	movs	r7, #14
 8005ef2:	5fe6      	ldrsh	r6, [r4, r7]
 8005ef4:	4375      	muls	r5, r6
    wBemf_alfa_est_Next += wAux;
 8005ef6:	18ed      	adds	r5, r5, r3
 8005ef8:	950b      	str	r5, [sp, #44]	@ 0x2c
    hAux = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 8005efa:	9d05      	ldr	r5, [sp, #20]
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 8005efc:	46b0      	mov	r8, r6
    wAux = ((int32_t)pHandle->hC1) * hAux;
 8005efe:	b22b      	sxth	r3, r5
 8005f00:	4358      	muls	r0, r3
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 8005f02:	9b02      	ldr	r3, [sp, #8]
 8005f04:	1a18      	subs	r0, r3, r0
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8005f06:	88cb      	ldrh	r3, [r1, #6]

    wAux = ((int32_t)pHandle->hC2) * hIbeta_err;
 8005f08:	9907      	ldr	r1, [sp, #28]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8005f0a:	1aeb      	subs	r3, r5, r3
    wAux = ((int32_t)pHandle->hC2) * hIbeta_err;
 8005f0c:	b21b      	sxth	r3, r3
 8005f0e:	4359      	muls	r1, r3
    wIbeta_est_Next += wAux;
 8005f10:	1809      	adds	r1, r1, r0

    wAux = ((int32_t)pHandle->hC5) * hVbeta;
 8005f12:	9806      	ldr	r0, [sp, #24]
 8005f14:	4342      	muls	r2, r0
    wIbeta_est_Next += wAux;

    wAux = ((int32_t)pHandle->hC3) * hAux_Beta;
 8005f16:	4650      	mov	r0, sl
    wIbeta_est_Next += wAux;
 8005f18:	1852      	adds	r2, r2, r1
    wAux = ((int32_t)pHandle->hC3) * hAux_Beta;
 8005f1a:	4661      	mov	r1, ip
 8005f1c:	4341      	muls	r1, r0
    wIbeta_est_Next -= wAux;
 8005f1e:	1a57      	subs	r7, r2, r1

    wAux = ((int32_t)pHandle->hC4) * hIbeta_err;
 8005f20:	9a08      	ldr	r2, [sp, #32]
 8005f22:	4353      	muls	r3, r2
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 8005f24:	9a01      	ldr	r2, [sp, #4]
 8005f26:	189e      	adds	r6, r3, r2

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005f28:	465b      	mov	r3, fp
 8005f2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f2c:	4113      	asrs	r3, r2
#else
    wAux = ((int32_t)hAux_Alfa) / pHandle->hF3;
#endif

    wAux = wAux * pHandle->hC6;
 8005f2e:	464a      	mov	r2, r9
 8005f30:	4353      	muls	r3, r2
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 8005f32:	4642      	mov	r2, r8
 8005f34:	4353      	muls	r3, r2
    wBemf_beta_est_Next -= wAux;

    /* Calls the PLL blockset */
    pHandle->hBemf_alfa_est = hAux_Alfa;
 8005f36:	465a      	mov	r2, fp
    wBemf_beta_est_Next -= wAux;
 8005f38:	1af6      	subs	r6, r6, r3
    pHandle->hBemf_alfa_est = hAux_Alfa;
 8005f3a:	2370      	movs	r3, #112	@ 0x70
 8005f3c:	52e2      	strh	r2, [r4, r3]
    pHandle->hBemf_beta_est = hAux_Beta;
 8005f3e:	3302      	adds	r3, #2
 8005f40:	52e0      	strh	r0, [r4, r3]

    if (0 == pHandle->hForcedDirection)
 8005f42:	33b2      	adds	r3, #178	@ 0xb2
 8005f44:	56e3      	ldrsb	r3, [r4, r3]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d160      	bne.n	800600c <STO_PLL_CalcElAngle+0x218>
    {
      /* We are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 8005f4a:	4643      	mov	r3, r8
 8005f4c:	17db      	asrs	r3, r3, #31
 8005f4e:	4698      	mov	r8, r3
 8005f50:	4642      	mov	r2, r8
 8005f52:	4b31      	ldr	r3, [pc, #196]	@ (8006018 <STO_PLL_CalcElAngle+0x224>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	3301      	adds	r3, #1
 8005f58:	4698      	mov	r8, r3
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;
  Trig_Components Local_Components;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 8005f5a:	2304      	movs	r3, #4
 8005f5c:	5ee0      	ldrsh	r0, [r4, r3]
 8005f5e:	f7fb faf9 	bl	8001554 <MCM_Trig_Functions>
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 8005f62:	4642      	mov	r2, r8
 8005f64:	9b04      	ldr	r3, [sp, #16]

  /* Alfa & Beta BEMF multiplied by Cos & Sin */
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 8005f66:	b201      	sxth	r1, r0
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 8005f68:	4353      	muls	r3, r2
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 8005f6a:	425b      	negs	r3, r3
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 8005f6c:	b21b      	sxth	r3, r3
 8005f6e:	4359      	muls	r1, r3
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8005f70:	9b03      	ldr	r3, [sp, #12]
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 8005f72:	1400      	asrs	r0, r0, #16
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8005f74:	4353      	muls	r3, r2
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 8005f76:	b21b      	sxth	r3, r3
 8005f78:	4358      	muls	r0, r3

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  hAux1 = (int16_t)(wBeta_Cos_tmp >> 15); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005f7a:	13c9      	asrs	r1, r1, #15
#else
  hAux1 = (int16_t)(wBeta_Cos_tmp / 32768);
#endif

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  hAux2 = (int16_t)(wAlfa_Sin_tmp >> 15); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005f7c:	13c0      	asrs	r0, r0, #15
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 8005f7e:	b200      	sxth	r0, r0
 8005f80:	b209      	sxth	r1, r1
 8005f82:	1a09      	subs	r1, r1, r0
 8005f84:	0020      	movs	r0, r4
 8005f86:	3034      	adds	r0, #52	@ 0x34
 8005f88:	f7fe ff62 	bl	8004e50 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 8005f8c:	23f4      	movs	r3, #244	@ 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8005f8e:	2287      	movs	r2, #135	@ 0x87
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 8005f90:	8220      	strh	r0, [r4, #16]
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 8005f92:	5ce3      	ldrb	r3, [r4, r3]
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8005f94:	0052      	lsls	r2, r2, #1
  bBuffer_index++;
 8005f96:	3301      	adds	r3, #1
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8005f98:	5ca2      	ldrb	r2, [r4, r2]
  bBuffer_index++;
 8005f9a:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d038      	beq.n	8006012 <STO_PLL_CalcElAngle+0x21e>
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8005fa0:	001a      	movs	r2, r3
 8005fa2:	2174      	movs	r1, #116	@ 0x74
 8005fa4:	0052      	lsls	r2, r2, #1
 8005fa6:	18a2      	adds	r2, r4, r2
 8005fa8:	4689      	mov	r9, r1
 8005faa:	5e55      	ldrsh	r5, [r2, r1]
 8005fac:	46a8      	mov	r8, r5
 8005fae:	2586      	movs	r5, #134	@ 0x86
 8005fb0:	4641      	mov	r1, r8
 8005fb2:	006d      	lsls	r5, r5, #1
 8005fb4:	5361      	strh	r1, [r4, r5]
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	5250      	strh	r0, [r2, r1]
  pHandle->Speed_Buffer_Index = bBuffer_index;
 8005fba:	22f4      	movs	r2, #244	@ 0xf4
 8005fbc:	54a3      	strb	r3, [r4, r2]
    pHandle->_Super.hElAngle += hRotor_Speed;
 8005fbe:	88a3      	ldrh	r3, [r4, #4]
    pHandle->Ibeta_est = wIbeta_est_Next;
 8005fc0:	6667      	str	r7, [r4, #100]	@ 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 8005fc2:	18c0      	adds	r0, r0, r3
    pHandle->Ialfa_est = wIalfa_est_Next;
 8005fc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    pHandle->_Super.hElAngle += hRotor_Speed;
 8005fc6:	b200      	sxth	r0, r0
    pHandle->Ialfa_est = wIalfa_est_Next;
 8005fc8:	6623      	str	r3, [r4, #96]	@ 0x60
    pHandle->wBemf_alfa_est = wBemf_alfa_est_Next;
 8005fca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    pHandle->_Super.hElAngle += hRotor_Speed;
 8005fcc:	80a0      	strh	r0, [r4, #4]
    pHandle->wBemf_alfa_est = wBemf_alfa_est_Next;
 8005fce:	66a3      	str	r3, [r4, #104]	@ 0x68
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 8005fd0:	66e6      	str	r6, [r4, #108]	@ 0x6c
    retValue = pHandle->_Super.hElAngle;
 8005fd2:	e000      	b.n	8005fd6 <STO_PLL_CalcElAngle+0x1e2>
    retValue = 0;
 8005fd4:	2000      	movs	r0, #0
}
 8005fd6:	b00f      	add	sp, #60	@ 0x3c
 8005fd8:	bcf0      	pop	{r4, r5, r6, r7}
 8005fda:	46bb      	mov	fp, r7
 8005fdc:	46b2      	mov	sl, r6
 8005fde:	46a9      	mov	r9, r5
 8005fe0:	46a0      	mov	r8, r4
 8005fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 8005fe4:	6663      	str	r3, [r4, #100]	@ 0x64
 8005fe6:	9302      	str	r3, [sp, #8]
 8005fe8:	e746      	b.n	8005e78 <STO_PLL_CalcElAngle+0x84>
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 8005fea:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8005fec:	9301      	str	r3, [sp, #4]
 8005fee:	e72b      	b.n	8005e48 <STO_PLL_CalcElAngle+0x54>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 8005ff0:	425a      	negs	r2, r3
 8005ff2:	4590      	cmp	r8, r2
 8005ff4:	dd00      	ble.n	8005ff8 <STO_PLL_CalcElAngle+0x204>
 8005ff6:	e716      	b.n	8005e26 <STO_PLL_CalcElAngle+0x32>
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 8005ff8:	4690      	mov	r8, r2
 8005ffa:	6682      	str	r2, [r0, #104]	@ 0x68
 8005ffc:	e713      	b.n	8005e26 <STO_PLL_CalcElAngle+0x32>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 8005ffe:	4258      	negs	r0, r3
 8006000:	4282      	cmp	r2, r0
 8006002:	dd00      	ble.n	8006006 <STO_PLL_CalcElAngle+0x212>
 8006004:	e72f      	b.n	8005e66 <STO_PLL_CalcElAngle+0x72>
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 8006006:	0002      	movs	r2, r0
 8006008:	6620      	str	r0, [r4, #96]	@ 0x60
 800600a:	e72c      	b.n	8005e66 <STO_PLL_CalcElAngle+0x72>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800600c:	b29b      	uxth	r3, r3
 800600e:	4698      	mov	r8, r3
 8006010:	e7a3      	b.n	8005f5a <STO_PLL_CalcElAngle+0x166>
 8006012:	2200      	movs	r2, #0
    bBuffer_index = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	e7c4      	b.n	8005fa2 <STO_PLL_CalcElAngle+0x1ae>
 8006018:	0000fffe 	.word	0x0000fffe

0800601c <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 800601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601e:	4647      	mov	r7, r8
 8006020:	46ce      	mov	lr, r9
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 8006022:	2387      	movs	r3, #135	@ 0x87
{
 8006024:	b580      	push	{r7, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	5cc6      	ldrb	r6, [r0, r3]
{
 800602a:	0005      	movs	r5, r0
 800602c:	4688      	mov	r8, r1
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800602e:	2e00      	cmp	r6, #0
 8006030:	d100      	bne.n	8006034 <STO_PLL_CalcAvrgMecSpeedUnit+0x18>
 8006032:	e0a8      	b.n	8006186 <STO_PLL_CalcAvrgMecSpeedUnit+0x16a>
 8006034:	0004      	movs	r4, r0
 8006036:	3474      	adds	r4, #116	@ 0x74
 8006038:	0022      	movs	r2, r4
 800603a:	2300      	movs	r3, #0
    int32_t wAvrSpeed_dpp = (int32_t)0;
 800603c:	2000      	movs	r0, #0
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800603e:	2700      	movs	r7, #0
 8006040:	5fd1      	ldrsh	r1, [r2, r7]
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006042:	3301      	adds	r3, #1
 8006044:	b2db      	uxtb	r3, r3
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8006046:	1840      	adds	r0, r0, r1
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006048:	3202      	adds	r2, #2
 800604a:	429e      	cmp	r6, r3
 800604c:	d1f7      	bne.n	800603e <STO_PLL_CalcAvrgMecSpeedUnit+0x22>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 800604e:	0031      	movs	r1, r6
 8006050:	f7fa f8e4 	bl	800021c <__divsi3>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006054:	2200      	movs	r2, #0
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 8006056:	0007      	movs	r7, r0
    int32_t wAvrQuadraticError = 0;
 8006058:	2000      	movs	r0, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 800605a:	2100      	movs	r1, #0
 800605c:	5e63      	ldrsh	r3, [r4, r1]
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800605e:	3201      	adds	r2, #1
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 8006060:	1bdb      	subs	r3, r3, r7
      wError = (wError * wError);
 8006062:	435b      	muls	r3, r3
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006064:	b2d2      	uxtb	r2, r2
      wAvrQuadraticError += wError;
 8006066:	18c0      	adds	r0, r0, r3
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006068:	3402      	adds	r4, #2
 800606a:	4296      	cmp	r6, r2
 800606c:	d1f5      	bne.n	800605a <STO_PLL_CalcAvrgMecSpeedUnit+0x3e>
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 800606e:	003c      	movs	r4, r7
 8006070:	437c      	muls	r4, r7
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 8006072:	0031      	movs	r1, r6
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 8006074:	17e3      	asrs	r3, r4, #31
 8006076:	4699      	mov	r9, r3
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 8006078:	f7fa f8d0 	bl	800021c <__divsi3>
 800607c:	0006      	movs	r6, r0
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 800607e:	2388      	movs	r3, #136	@ 0x88
 8006080:	005b      	lsls	r3, r3, #1
 8006082:	0022      	movs	r2, r4
 8006084:	5ae8      	ldrh	r0, [r5, r3]
 8006086:	2100      	movs	r1, #0
 8006088:	464b      	mov	r3, r9
 800608a:	f7fa f9b3 	bl	80003f4 <__aeabi_lmul>
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 800608e:	8b6b      	ldrh	r3, [r5, #26]
    wAvrSquareSpeed = (int32_t)(lAvrSquareSpeed / (int64_t)128);
 8006090:	064c      	lsls	r4, r1, #25
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8006092:	435f      	muls	r7, r3
    wAvrSquareSpeed = (int32_t)(lAvrSquareSpeed / (int64_t)128);
 8006094:	09c0      	lsrs	r0, r0, #7
 8006096:	4304      	orrs	r4, r0
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8006098:	78a8      	ldrb	r0, [r5, #2]
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 800609a:	69e9      	ldr	r1, [r5, #28]
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800609c:	4378      	muls	r0, r7
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 800609e:	f7fa f8bd 	bl	800021c <__divsi3>
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 80060a2:	7869      	ldrb	r1, [r5, #1]
 80060a4:	f7fa f8ba 	bl	800021c <__divsi3>
    *pMecSpeedUnit = (int16_t)wAux;
 80060a8:	4642      	mov	r2, r8
 80060aa:	b203      	sxth	r3, r0
 80060ac:	8013      	strh	r3, [r2, #0]
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 80060ae:	81ab      	strh	r3, [r5, #12]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 80060b0:	2301      	movs	r3, #1
 80060b2:	42b4      	cmp	r4, r6
 80060b4:	dc00      	bgt.n	80060b8 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
 80060b6:	2300      	movs	r3, #0
    pHandle->IsSpeedReliable = bIs_Speed_Reliable;
 80060b8:	22f5      	movs	r2, #245	@ 0xf5
 80060ba:	54ab      	strb	r3, [r5, r2]
    if (false == pHandle->IsAlgorithmConverged)
 80060bc:	23f8      	movs	r3, #248	@ 0xf8
 80060be:	5cef      	ldrb	r7, [r5, r3]
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 80060c0:	330c      	adds	r3, #12
 80060c2:	5ceb      	ldrb	r3, [r5, r3]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d110      	bne.n	80060ea <STO_PLL_CalcAvrgMecSpeedUnit+0xce>
    if (false == pHandle->IsAlgorithmConverged)
 80060c8:	2f00      	cmp	r7, #0
 80060ca:	d02a      	beq.n	8006122 <STO_PLL_CalcAvrgMecSpeedUnit+0x106>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 80060cc:	42b4      	cmp	r4, r6
 80060ce:	dc25      	bgt.n	800611c <STO_PLL_CalcAvrgMecSpeedUnit+0x100>
        pHandle->ReliabilityCounter++;
 80060d0:	22f7      	movs	r2, #247	@ 0xf7
 80060d2:	5cab      	ldrb	r3, [r5, r2]
 80060d4:	3301      	adds	r3, #1
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	54ab      	strb	r3, [r5, r2]
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 80060da:	78e9      	ldrb	r1, [r5, #3]
 80060dc:	428b      	cmp	r3, r1
 80060de:	d320      	bcc.n	8006122 <STO_PLL_CalcAvrgMecSpeedUnit+0x106>
          pHandle->ReliabilityCounter = 0U;
 80060e0:	2300      	movs	r3, #0
          bAux = false;
 80060e2:	2000      	movs	r0, #0
          pHandle->ReliabilityCounter = 0U;
 80060e4:	54ab      	strb	r3, [r5, r2]
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80060e6:	7029      	strb	r1, [r5, #0]
          bAux = false;
 80060e8:	e01f      	b.n	800612a <STO_PLL_CalcAvrgMecSpeedUnit+0x10e>
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 80060ea:	17c3      	asrs	r3, r0, #31
 80060ec:	18c0      	adds	r0, r0, r3
 80060ee:	4058      	eors	r0, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 80060f0:	238d      	movs	r3, #141	@ 0x8d
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	5aeb      	ldrh	r3, [r5, r3]
 80060f6:	4283      	cmp	r3, r0
 80060f8:	dc1b      	bgt.n	8006132 <STO_PLL_CalcAvrgMecSpeedUnit+0x116>
    int32_t wObsBemfSq = 0;
 80060fa:	2200      	movs	r2, #0
    bool bIs_Bemf_Consistent = false;
 80060fc:	2300      	movs	r3, #0
    int32_t wEstBemfSq = 0;
 80060fe:	2000      	movs	r0, #0
    int32_t wObsBemfSq = 0;
 8006100:	4691      	mov	r9, r2
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 8006102:	22f9      	movs	r2, #249	@ 0xf9
      pHandle->Obs_Bemf_Level = wObsBemfSq;
 8006104:	4649      	mov	r1, r9
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 8006106:	54ab      	strb	r3, [r5, r2]
      pHandle->Obs_Bemf_Level = wObsBemfSq;
 8006108:	3203      	adds	r2, #3
 800610a:	50a9      	str	r1, [r5, r2]
      pHandle->Est_Bemf_Level = wEstBemfSq;
 800610c:	3204      	adds	r2, #4
 800610e:	50a8      	str	r0, [r5, r2]
    if (false == pHandle->IsAlgorithmConverged)
 8006110:	2f00      	cmp	r7, #0
 8006112:	d006      	beq.n	8006122 <STO_PLL_CalcAvrgMecSpeedUnit+0x106>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8006114:	42b4      	cmp	r4, r6
 8006116:	dddb      	ble.n	80060d0 <STO_PLL_CalcAvrgMecSpeedUnit+0xb4>
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0d9      	beq.n	80060d0 <STO_PLL_CalcAvrgMecSpeedUnit+0xb4>
        pHandle->ReliabilityCounter = 0U;
 800611c:	23f7      	movs	r3, #247	@ 0xf7
 800611e:	2200      	movs	r2, #0
 8006120:	54ea      	strb	r2, [r5, r3]
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 8006122:	4641      	mov	r1, r8
 8006124:	0028      	movs	r0, r5
 8006126:	f7ff fd7b 	bl	8005c20 <SPD_IsMecSpeedReliable>
}
 800612a:	bcc0      	pop	{r6, r7}
 800612c:	46b9      	mov	r9, r7
 800612e:	46b0      	mov	r8, r6
 8006130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 8006132:	2370      	movs	r3, #112	@ 0x70
 8006134:	5eeb      	ldrsh	r3, [r5, r3]
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 8006136:	2272      	movs	r2, #114	@ 0x72
 8006138:	5eaa      	ldrsh	r2, [r5, r2]
        wObsBemfSq = wObsBemf * wObsBemf;
 800613a:	435b      	muls	r3, r3
        wObsBemfSq += wObsBemf * wObsBemf;
 800613c:	4352      	muls	r2, r2
 800613e:	4691      	mov	r9, r2
 8006140:	4499      	add	r9, r3
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 8006142:	03c3      	lsls	r3, r0, #15
 8006144:	1a18      	subs	r0, r3, r0
 8006146:	2314      	movs	r3, #20
 8006148:	5ee9      	ldrsh	r1, [r5, r3]
 800614a:	f7fa f867 	bl	800021c <__divsi3>
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800614e:	238c      	movs	r3, #140	@ 0x8c
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 8006150:	0001      	movs	r1, r0
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	5ce8      	ldrb	r0, [r5, r3]
 8006156:	3bd9      	subs	r3, #217	@ 0xd9
 8006158:	4348      	muls	r0, r1
 800615a:	17c2      	asrs	r2, r0, #31
 800615c:	401a      	ands	r2, r3
 800615e:	1810      	adds	r0, r2, r0
 8006160:	1180      	asrs	r0, r0, #6
        wEstBemfSq *= wEstBemf;
 8006162:	4348      	muls	r0, r1
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 8006164:	17c2      	asrs	r2, r0, #31
 8006166:	4013      	ands	r3, r2
 8006168:	2218      	movs	r2, #24
 800616a:	32ff      	adds	r2, #255	@ 0xff
 800616c:	5caa      	ldrb	r2, [r5, r2]
 800616e:	181b      	adds	r3, r3, r0
 8006170:	119b      	asrs	r3, r3, #6
 8006172:	435a      	muls	r2, r3
        if (wObsBemfSq > wEstBemfSqLo)
 8006174:	2301      	movs	r3, #1
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 8006176:	1a82      	subs	r2, r0, r2
        if (wObsBemfSq > wEstBemfSqLo)
 8006178:	4591      	cmp	r9, r2
 800617a:	dd01      	ble.n	8006180 <STO_PLL_CalcAvrgMecSpeedUnit+0x164>
 800617c:	b2db      	uxtb	r3, r3
 800617e:	e7c0      	b.n	8006102 <STO_PLL_CalcAvrgMecSpeedUnit+0xe6>
 8006180:	2300      	movs	r3, #0
 8006182:	b2db      	uxtb	r3, r3
 8006184:	e7bd      	b.n	8006102 <STO_PLL_CalcAvrgMecSpeedUnit+0xe6>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006186:	2300      	movs	r3, #0
 8006188:	2600      	movs	r6, #0
 800618a:	2400      	movs	r4, #0
 800618c:	4699      	mov	r9, r3
    int32_t wAvrSpeed_dpp = (int32_t)0;
 800618e:	2700      	movs	r7, #0
 8006190:	e775      	b.n	800607e <STO_PLL_CalcAvrgMecSpeedUnit+0x62>
 8006192:	46c0      	nop			@ (mov r8, r8)

08006194 <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 8006194:	2387      	movs	r3, #135	@ 0x87
 8006196:	005b      	lsls	r3, r3, #1
{
 8006198:	b530      	push	{r4, r5, lr}
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 800619a:	5cc4      	ldrb	r4, [r0, r3]
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 800619c:	3b1a      	subs	r3, #26
 800619e:	5cc3      	ldrb	r3, [r0, r3]
    int16_t hSpeedBufferSizedpp = (int16_t)pHandle->SpeedBufferSizeDpp;
 80061a0:	2210      	movs	r2, #16
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 80061a2:	0019      	movs	r1, r3
 80061a4:	3138      	adds	r1, #56	@ 0x38
 80061a6:	0049      	lsls	r1, r1, #1
 80061a8:	1841      	adds	r1, r0, r1
 80061aa:	2504      	movs	r5, #4
 80061ac:	5f49      	ldrsh	r1, [r1, r5]
 80061ae:	2584      	movs	r5, #132	@ 0x84
    int16_t hSpeedBufferSizedpp = (int16_t)pHandle->SpeedBufferSizeDpp;
 80061b0:	32ff      	adds	r2, #255	@ 0xff
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 80061b2:	5c82      	ldrb	r2, [r0, r2]
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 80061b4:	006d      	lsls	r5, r5, #1
 80061b6:	5945      	ldr	r5, [r0, r5]
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 80061b8:	1aa2      	subs	r2, r4, r2
 80061ba:	b292      	uxth	r2, r2
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 80061bc:	1949      	adds	r1, r1, r5
    if (0 == hBufferSizeDiff)
 80061be:	2a00      	cmp	r2, #0
 80061c0:	d10d      	bne.n	80061de <STO_PLL_CalcAvrgElSpeedDpp+0x4a>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 80061c2:	2386      	movs	r3, #134	@ 0x86
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	5ec3      	ldrsh	r3, [r0, r3]
 80061c8:	1acb      	subs	r3, r1, r3
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 80061ca:	2290      	movs	r2, #144	@ 0x90
 80061cc:	0019      	movs	r1, r3
 80061ce:	0052      	lsls	r2, r2, #1
 80061d0:	5a82      	ldrh	r2, [r0, r2]
 80061d2:	4111      	asrs	r1, r2
    pHandle->DppBufferSum = wSum;
 80061d4:	2284      	movs	r2, #132	@ 0x84
 80061d6:	0052      	lsls	r2, r2, #1
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 80061d8:	81c1      	strh	r1, [r0, #14]
    pHandle->DppBufferSum = wSum;
 80061da:	5083      	str	r3, [r0, r2]
}
 80061dc:	bd30      	pop	{r4, r5, pc}
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 80061de:	189b      	adds	r3, r3, r2
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	b21b      	sxth	r3, r3
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 80061e4:	429c      	cmp	r4, r3
 80061e6:	dc01      	bgt.n	80061ec <STO_PLL_CalcAvrgElSpeedDpp+0x58>
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 80061e8:	1b12      	subs	r2, r2, r4
 80061ea:	b213      	sxth	r3, r2
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 80061ec:	3338      	adds	r3, #56	@ 0x38
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	18c3      	adds	r3, r0, r3
 80061f2:	2204      	movs	r2, #4
 80061f4:	5e9b      	ldrsh	r3, [r3, r2]
 80061f6:	1acb      	subs	r3, r1, r3
 80061f8:	e7e7      	b.n	80061ca <STO_PLL_CalcAvrgElSpeedDpp+0x36>
 80061fa:	46c0      	nop			@ (mov r8, r8)

080061fc <STO_PLL_Clear>:
    pHandle->Ialfa_est = (int32_t)0;
 80061fc:	2300      	movs	r3, #0
    pHandle->ConsistencyCounter = 0u;
 80061fe:	22f6      	movs	r2, #246	@ 0xf6
{
 8006200:	b510      	push	{r4, lr}
    pHandle->Ialfa_est = (int32_t)0;
 8006202:	6603      	str	r3, [r0, #96]	@ 0x60
    pHandle->Ibeta_est = (int32_t)0;
 8006204:	6643      	str	r3, [r0, #100]	@ 0x64
    pHandle->wBemf_alfa_est = (int32_t)0;
 8006206:	6683      	str	r3, [r0, #104]	@ 0x68
    pHandle->wBemf_beta_est = (int32_t)0;
 8006208:	66c3      	str	r3, [r0, #108]	@ 0x6c
    pHandle->_Super.hElAngle = (int16_t)0;
 800620a:	8083      	strh	r3, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 800620c:	81c3      	strh	r3, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 800620e:	5283      	strh	r3, [r0, r2]
    pHandle->IsAlgorithmConverged = false;
 8006210:	3202      	adds	r2, #2
 8006212:	5283      	strh	r3, [r0, r2]
    pHandle->Obs_Bemf_Level = (int32_t)0;
 8006214:	3204      	adds	r2, #4
 8006216:	5083      	str	r3, [r0, r2]
    pHandle->Est_Bemf_Level = (int32_t)0;
 8006218:	3204      	adds	r2, #4
 800621a:	5083      	str	r3, [r0, r2]
    pHandle->DppBufferSum = (int32_t)0;
 800621c:	3208      	adds	r2, #8
 800621e:	5083      	str	r3, [r0, r2]
    pHandle->ForceConvergency = false;
 8006220:	321a      	adds	r2, #26
 8006222:	5283      	strh	r3, [r0, r2]
  *
  */
static inline void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 8006224:	330f      	adds	r3, #15
 8006226:	33ff      	adds	r3, #255	@ 0xff
 8006228:	5cc2      	ldrb	r2, [r0, r3]
{
 800622a:	0004      	movs	r4, r0

  /* Init speed buffer */
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 800622c:	2a00      	cmp	r2, #0
 800622e:	d004      	beq.n	800623a <STO_PLL_Clear+0x3e>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 8006230:	2100      	movs	r1, #0
 8006232:	0052      	lsls	r2, r2, #1
 8006234:	3074      	adds	r0, #116	@ 0x74
 8006236:	f000 f9dd 	bl	80065f4 <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 800623a:	2300      	movs	r3, #0
 800623c:	22f4      	movs	r2, #244	@ 0xf4
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800623e:	0020      	movs	r0, r4
  pHandle->Speed_Buffer_Index = 0U;
 8006240:	54a3      	strb	r3, [r4, r2]
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 8006242:	3218      	adds	r2, #24
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 8006244:	2100      	movs	r1, #0
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 8006246:	52a3      	strh	r3, [r4, r2]
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 8006248:	3034      	adds	r0, #52	@ 0x34
 800624a:	f7fe fdf7 	bl	8004e3c <PID_SetIntegralTerm>
}
 800624e:	bd10      	pop	{r4, pc}

08006250 <STO_PLL_Init>:
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8006250:	238b      	movs	r3, #139	@ 0x8b
{
 8006252:	b570      	push	{r4, r5, r6, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	5cc2      	ldrb	r2, [r0, r3]
 8006258:	3b20      	subs	r3, #32
 800625a:	54c2      	strb	r2, [r0, r3]
    pHandle->EnableDualCheck = true;
 800625c:	2201      	movs	r2, #1
 800625e:	330e      	adds	r3, #14
 8006260:	54c2      	strb	r2, [r0, r3]
    pHandle->F3POW2 = 0U;
 8006262:	2300      	movs	r3, #0
 8006264:	8643      	strh	r3, [r0, #50]	@ 0x32
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8006266:	232e      	movs	r3, #46	@ 0x2e
 8006268:	5ec5      	ldrsh	r5, [r0, r3]
{
 800626a:	0004      	movs	r4, r0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800626c:	0029      	movs	r1, r5
 800626e:	4813      	ldr	r0, [pc, #76]	@ (80062bc <STO_PLL_Init+0x6c>)
 8006270:	f7f9 ffd4 	bl	800021c <__divsi3>
 8006274:	b203      	sxth	r3, r0
    while (htempk != 0)
 8006276:	2b00      	cmp	r3, #0
 8006278:	d01d      	beq.n	80062b6 <STO_PLL_Init+0x66>
 800627a:	2201      	movs	r2, #1
    wAux = ((int32_t)1);
 800627c:	2101      	movs	r1, #1
      htempk /= ((int16_t)2);
 800627e:	0fd8      	lsrs	r0, r3, #31
 8006280:	18c3      	adds	r3, r0, r3
 8006282:	0010      	movs	r0, r2
    while (htempk != 0)
 8006284:	3201      	adds	r2, #1
      htempk /= ((int16_t)2);
 8006286:	105b      	asrs	r3, r3, #1
      wAux *= ((int32_t)2);
 8006288:	0049      	lsls	r1, r1, #1
    while (htempk != 0)
 800628a:	b292      	uxth	r2, r2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1f6      	bne.n	800627e <STO_PLL_Init+0x2e>
    pHandle->hF3 = (int16_t)wAux;
 8006290:	b209      	sxth	r1, r1
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 8006292:	434d      	muls	r5, r1
 8006294:	8660      	strh	r0, [r4, #50]	@ 0x32
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8006296:	0028      	movs	r0, r5
    pHandle->hF3 = (int16_t)wAux;
 8006298:	8621      	strh	r1, [r4, #48]	@ 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800629a:	4909      	ldr	r1, [pc, #36]	@ (80062c0 <STO_PLL_Init+0x70>)
 800629c:	f7f9 ffbe 	bl	800021c <__divsi3>
 80062a0:	8560      	strh	r0, [r4, #42]	@ 0x2a
    STO_PLL_Clear(pHandle);
 80062a2:	0020      	movs	r0, r4
 80062a4:	f7ff ffaa 	bl	80061fc <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 80062a8:	0020      	movs	r0, r4
 80062aa:	3034      	adds	r0, #52	@ 0x34
 80062ac:	f7fe fdb2 	bl	8004e14 <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 80062b0:	2300      	movs	r3, #0
 80062b2:	8263      	strh	r3, [r4, #18]
}
 80062b4:	bd70      	pop	{r4, r5, r6, pc}
    while (htempk != 0)
 80062b6:	2101      	movs	r1, #1
 80062b8:	e7ed      	b.n	8006296 <STO_PLL_Init+0x46>
 80062ba:	46c0      	nop			@ (mov r8, r8)
 80062bc:	000fea5e 	.word	0x000fea5e
 80062c0:	000028be 	.word	0x000028be

080062c4 <STO_PLL_IsObserverConverged>:
    int32_t wtemp;
    int16_t hEstimatedSpeedUnit;
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;

    if (true == pHandle->ForceConvergency2)
 80062c4:	2224      	movs	r2, #36	@ 0x24
{
 80062c6:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (true == pHandle->ForceConvergency2)
 80062c8:	32ff      	adds	r2, #255	@ 0xff
 80062ca:	5c82      	ldrb	r2, [r0, r2]
{
 80062cc:	0003      	movs	r3, r0
    if (true == pHandle->ForceConvergency2)
 80062ce:	2a00      	cmp	r2, #0
 80062d0:	d002      	beq.n	80062d8 <STO_PLL_IsObserverConverged+0x14>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 80062d2:	200c      	movs	r0, #12
 80062d4:	5e1a      	ldrsh	r2, [r3, r0]
 80062d6:	800a      	strh	r2, [r1, #0]
    else
    {
      /* Nothing to do */
    }

    if (true == pHandle->ForceConvergency)
 80062d8:	2291      	movs	r2, #145	@ 0x91
 80062da:	0052      	lsls	r2, r2, #1
 80062dc:	5c98      	ldrb	r0, [r3, r2]
 80062de:	2800      	cmp	r0, #0
 80062e0:	d006      	beq.n	80062f0 <STO_PLL_IsObserverConverged+0x2c>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 80062e2:	22f8      	movs	r2, #248	@ 0xf8
 80062e4:	2101      	movs	r1, #1
 80062e6:	5499      	strb	r1, [r3, r2]
      pHandle->_Super.bSpeedErrorNumber = 0U;
 80062e8:	2200      	movs	r2, #0
      bAux = true;
 80062ea:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 80062ec:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 80062ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 80062f0:	220c      	movs	r2, #12
 80062f2:	5e9c      	ldrsh	r4, [r3, r2]
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 80062f4:	2500      	movs	r5, #0
 80062f6:	5f4a      	ldrsh	r2, [r1, r5]
 80062f8:	0015      	movs	r5, r2
 80062fa:	4365      	muls	r5, r4
 80062fc:	0016      	movs	r6, r2
      if (wtemp > 0)
 80062fe:	2d00      	cmp	r5, #0
 8006300:	ddf5      	ble.n	80062ee <STO_PLL_IsObserverConverged+0x2a>
        if (hEstimatedSpeedUnit < 0)
 8006302:	2c00      	cmp	r4, #0
 8006304:	db34      	blt.n	8006370 <STO_PLL_IsObserverConverged+0xac>
        if (*phForcedMecSpeedUnit < 0)
 8006306:	2a00      	cmp	r2, #0
 8006308:	db2e      	blt.n	8006368 <STO_PLL_IsObserverConverged+0xa4>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800630a:	2289      	movs	r2, #137	@ 0x89
 800630c:	0052      	lsls	r2, r2, #1
 800630e:	5c99      	ldrb	r1, [r3, r2]
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8006310:	2214      	movs	r2, #20
 8006312:	32ff      	adds	r2, #255	@ 0xff
 8006314:	5c9d      	ldrb	r5, [r3, r2]
        if (true == pHandle->IsSpeedReliable)
 8006316:	3a1e      	subs	r2, #30
 8006318:	5c9a      	ldrb	r2, [r3, r2]
 800631a:	2a00      	cmp	r2, #0
 800631c:	d020      	beq.n	8006360 <STO_PLL_IsObserverConverged+0x9c>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 800631e:	228a      	movs	r2, #138	@ 0x8a
 8006320:	0052      	lsls	r2, r2, #1
 8006322:	5a9f      	ldrh	r7, [r3, r2]
 8006324:	b2a2      	uxth	r2, r4
 8006326:	4297      	cmp	r7, r2
 8006328:	d21a      	bcs.n	8006360 <STO_PLL_IsObserverConverged+0x9c>
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 800632a:	270f      	movs	r7, #15
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800632c:	4375      	muls	r5, r6
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 800632e:	17ea      	asrs	r2, r5, #31
 8006330:	403a      	ands	r2, r7
 8006332:	1952      	adds	r2, r2, r5
 8006334:	1112      	asrs	r2, r2, #4
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 8006336:	b212      	sxth	r2, r2
 8006338:	4294      	cmp	r4, r2
 800633a:	db11      	blt.n	8006360 <STO_PLL_IsObserverConverged+0x9c>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800633c:	434e      	muls	r6, r1
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 800633e:	17f2      	asrs	r2, r6, #31
 8006340:	403a      	ands	r2, r7
 8006342:	1992      	adds	r2, r2, r6
 8006344:	1112      	asrs	r2, r2, #4
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 8006346:	b212      	sxth	r2, r2
 8006348:	4294      	cmp	r4, r2
 800634a:	dc09      	bgt.n	8006360 <STO_PLL_IsObserverConverged+0x9c>
                pHandle->ConsistencyCounter++;
 800634c:	21f6      	movs	r1, #246	@ 0xf6
 800634e:	5c5a      	ldrb	r2, [r3, r1]
 8006350:	3201      	adds	r2, #1
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	545a      	strb	r2, [r3, r1]
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8006356:	3120      	adds	r1, #32
 8006358:	5c59      	ldrb	r1, [r3, r1]
 800635a:	4291      	cmp	r1, r2
 800635c:	d9c1      	bls.n	80062e2 <STO_PLL_IsObserverConverged+0x1e>
 800635e:	e7c6      	b.n	80062ee <STO_PLL_IsObserverConverged+0x2a>
                pHandle->ConsistencyCounter = 0U;
 8006360:	22f6      	movs	r2, #246	@ 0xf6
 8006362:	2100      	movs	r1, #0
 8006364:	5499      	strb	r1, [r3, r2]
 8006366:	e7c2      	b.n	80062ee <STO_PLL_IsObserverConverged+0x2a>
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 8006368:	4252      	negs	r2, r2
 800636a:	b216      	sxth	r6, r2
 800636c:	800e      	strh	r6, [r1, #0]
 800636e:	e7cc      	b.n	800630a <STO_PLL_IsObserverConverged+0x46>
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 8006370:	4264      	negs	r4, r4
 8006372:	b224      	sxth	r4, r4
        if (*phForcedMecSpeedUnit < 0)
 8006374:	2a00      	cmp	r2, #0
 8006376:	dac8      	bge.n	800630a <STO_PLL_IsObserverConverged+0x46>
 8006378:	e7f6      	b.n	8006368 <STO_PLL_IsObserverConverged+0xa4>
 800637a:	46c0      	nop			@ (mov r8, r8)

0800637c <STO_PLL_GetEstimatedBemf>:
    vaux.alpha = pHandle->hBemf_alfa_est;
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
 800637c:	6f00      	ldr	r0, [r0, #112]	@ 0x70
{
 800637e:	b082      	sub	sp, #8
  return (vaux);
 8006380:	0c02      	lsrs	r2, r0, #16
 8006382:	0400      	lsls	r0, r0, #16
 8006384:	0412      	lsls	r2, r2, #16
 8006386:	0c00      	lsrs	r0, r0, #16
 8006388:	4310      	orrs	r0, r2
}
 800638a:	b002      	add	sp, #8
 800638c:	4770      	bx	lr
 800638e:	46c0      	nop			@ (mov r8, r8)

08006390 <STO_PLL_GetObserverGains>:
/**
  * @brief  Exports current observer gains from @p pHandle and to parameters @p phC2 and @p phC4.
  * 
  */
__weak void STO_PLL_GetObserverGains(STO_PLL_Handle_t *pHandle, int16_t *phC2, int16_t *phC4)
{
 8006390:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 8006392:	2422      	movs	r4, #34	@ 0x22
 8006394:	5f03      	ldrsh	r3, [r0, r4]
 8006396:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 8006398:	2126      	movs	r1, #38	@ 0x26
 800639a:	5e43      	ldrsh	r3, [r0, r1]
 800639c:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800639e:	bd10      	pop	{r4, pc}

080063a0 <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 80063a0:	8441      	strh	r1, [r0, #34]	@ 0x22
    pHandle->hC4 = hhC2;
 80063a2:	84c2      	strh	r2, [r0, #38]	@ 0x26
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 80063a4:	4770      	bx	lr
 80063a6:	46c0      	nop			@ (mov r8, r8)

080063a8 <STO_OTF_ResetPLL>:
  * @brief  Resets the PLL integral term during on-the-fly startup.
  * 
  * @param  pHandle: Handler of the current instance of the STO component.
  */
__weak void STO_OTF_ResetPLL(STO_Handle_t * pHandle)
{
 80063a8:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 80063aa:	6800      	ldr	r0, [r0, #0]
 80063ac:	2100      	movs	r1, #0
 80063ae:	3034      	adds	r0, #52	@ 0x34
 80063b0:	f7fe fd44 	bl	8004e3c <PID_SetIntegralTerm>
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 80063b4:	bd10      	pop	{r4, pc}
 80063b6:	46c0      	nop			@ (mov r8, r8)

080063b8 <STO_PLL_IsVarianceTight>:
    const STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
 80063b8:	23f5      	movs	r3, #245	@ 0xf5
    tempStatus = pHdl->IsSpeedReliable;
 80063ba:	6802      	ldr	r2, [r0, #0]
  return (tempStatus);
 80063bc:	5cd0      	ldrb	r0, [r2, r3]
}
 80063be:	4770      	bx	lr

080063c0 <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 80063c0:	2391      	movs	r3, #145	@ 0x91
 80063c2:	2101      	movs	r1, #1
 80063c4:	6802      	ldr	r2, [r0, #0]
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	54d1      	strb	r1, [r2, r3]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 80063ca:	4770      	bx	lr

080063cc <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 80063cc:	2324      	movs	r3, #36	@ 0x24
 80063ce:	2101      	movs	r1, #1
 80063d0:	6802      	ldr	r2, [r0, #0]
 80063d2:	33ff      	adds	r3, #255	@ 0xff
 80063d4:	54d1      	strb	r1, [r2, r3]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 80063d6:	4770      	bx	lr

080063d8 <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 80063d8:	2392      	movs	r3, #146	@ 0x92
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	54c1      	strb	r1, [r0, r3]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 80063de:	4770      	bx	lr

080063e0 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80063e0:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80063e2:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80063e4:	7003      	strb	r3, [r0, #0]
    pHandle->_Super.hElAngle = 0;
 80063e6:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 80063e8:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 80063ea:	8243      	strh	r3, [r0, #18]
    pHandle->wElAccDppP32 = 0;
 80063ec:	6203      	str	r3, [r0, #32]
    pHandle->wElSpeedDpp32 = 0;
 80063ee:	6243      	str	r3, [r0, #36]	@ 0x24
    pHandle->hRemainingStep = 0U;
 80063f0:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 80063f2:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80063f4:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 80063f6:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 80063f8:	4770      	bx	lr
 80063fa:	46c0      	nop			@ (mov r8, r8)

080063fc <VSS_Init>:
{
 80063fc:	b510      	push	{r4, lr}
  VSS_Clear(pHandle);
 80063fe:	f7ff ffef 	bl	80063e0 <VSS_Clear>
}
 8006402:	bd10      	pop	{r4, pc}

08006404 <VSS_CalcElAngle>:
  *
  * - Systematically called after #SPD_GetElAngle that retrieves last computed rotor electrical angle.
  */
//cstat !MISRAC2012-Rule-8.13
__weak int16_t VSS_CalcElAngle(VirtualSpeedSensor_Handle_t *pHandle, int16_t *pInputVars_str)
{
 8006404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006406:	46c6      	mov	lr, r8
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 8006408:	2333      	movs	r3, #51	@ 0x33
{
 800640a:	b500      	push	{lr}
    if (true == pHandle->bCopyObserver)
 800640c:	5cc3      	ldrb	r3, [r0, r3]
{
 800640e:	0004      	movs	r4, r0
 8006410:	000e      	movs	r6, r1
    if (true == pHandle->bCopyObserver)
 8006412:	2b00      	cmp	r3, #0
 8006414:	d006      	beq.n	8006424 <VSS_CalcElAngle+0x20>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 8006416:	2300      	movs	r3, #0
 8006418:	5ecd      	ldrsh	r5, [r1, r3]
    pHandle->_Super.hElAngle = hRetAngle;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 800641a:	0028      	movs	r0, r5
    pHandle->_Super.hElAngle = hRetAngle;
 800641c:	80a5      	strh	r5, [r4, #4]
}
 800641e:	bc80      	pop	{r7}
 8006420:	46b8      	mov	r8, r7
 8006422:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8006424:	230e      	movs	r3, #14
 8006426:	5ec7      	ldrsh	r7, [r0, r3]
 8006428:	8e05      	ldrh	r5, [r0, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800642a:	7841      	ldrb	r1, [r0, #1]
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800642c:	19ed      	adds	r5, r5, r7
 800642e:	b2ab      	uxth	r3, r5
 8006430:	b22d      	sxth	r5, r5
 8006432:	8605      	strh	r5, [r0, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8006434:	0038      	movs	r0, r7
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8006436:	4698      	mov	r8, r3
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8006438:	f7f9 fef0 	bl	800021c <__divsi3>
 800643c:	88e3      	ldrh	r3, [r4, #6]
 800643e:	18c0      	adds	r0, r0, r3
      if (true == pHandle->bTransitionStarted)
 8006440:	232c      	movs	r3, #44	@ 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8006442:	80e0      	strh	r0, [r4, #6]
      if (true == pHandle->bTransitionStarted)
 8006444:	5ce3      	ldrb	r3, [r4, r3]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0e7      	beq.n	800641a <VSS_CalcElAngle+0x16>
        if (0 == pHandle->hTransitionRemainingSteps)
 800644a:	232e      	movs	r3, #46	@ 0x2e
 800644c:	5ee0      	ldrsh	r0, [r4, r3]
 800644e:	2800      	cmp	r0, #0
 8006450:	d01a      	beq.n	8006488 <VSS_CalcElAngle+0x84>
          pHandle->hTransitionRemainingSteps--;
 8006452:	3801      	subs	r0, #1
 8006454:	b200      	sxth	r0, r0
 8006456:	85e0      	strh	r0, [r4, #46]	@ 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 8006458:	2f00      	cmp	r7, #0
 800645a:	db22      	blt.n	80064a2 <VSS_CalcElAngle+0x9e>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800645c:	4643      	mov	r3, r8
 800645e:	8837      	ldrh	r7, [r6, #0]
 8006460:	1afe      	subs	r6, r7, r3
 8006462:	2301      	movs	r3, #1
 8006464:	4698      	mov	r8, r3
 8006466:	b236      	sxth	r6, r6
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8006468:	2336      	movs	r3, #54	@ 0x36
 800646a:	5ee1      	ldrsh	r1, [r4, r3]
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 800646c:	4370      	muls	r0, r6
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800646e:	f7f9 fed5 	bl	800021c <__divsi3>
          hAngleCorr *= hSignCorr;
 8006472:	4643      	mov	r3, r8
 8006474:	4358      	muls	r0, r3
            pHandle->bTransitionLocked = true;
 8006476:	2332      	movs	r3, #50	@ 0x32
          hAngleCorr *= hSignCorr;
 8006478:	b280      	uxth	r0, r0
          if (hAngleDiff >= 0)
 800647a:	2e00      	cmp	r6, #0
 800647c:	db0b      	blt.n	8006496 <VSS_CalcElAngle+0x92>
            pHandle->bTransitionLocked = true;
 800647e:	2201      	movs	r2, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8006480:	1a38      	subs	r0, r7, r0
            pHandle->bTransitionLocked = true;
 8006482:	54e2      	strb	r2, [r4, r3]
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8006484:	b205      	sxth	r5, r0
 8006486:	e7c8      	b.n	800641a <VSS_CalcElAngle+0x16>
          hRetAngle = *(int16_t *)pInputVars_str;
 8006488:	2300      	movs	r3, #0
 800648a:	5ef5      	ldrsh	r5, [r6, r3]
          pHandle->bTransitionEnded = true;
 800648c:	2201      	movs	r2, #1
 800648e:	232d      	movs	r3, #45	@ 0x2d
 8006490:	54e2      	strb	r2, [r4, r3]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 8006492:	7020      	strb	r0, [r4, #0]
 8006494:	e7c1      	b.n	800641a <VSS_CalcElAngle+0x16>
            if (false == pHandle->bTransitionLocked)
 8006496:	5ce3      	ldrb	r3, [r4, r3]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d0be      	beq.n	800641a <VSS_CalcElAngle+0x16>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 800649c:	19c0      	adds	r0, r0, r7
 800649e:	b205      	sxth	r5, r0
 80064a0:	e7bb      	b.n	800641a <VSS_CalcElAngle+0x16>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 80064a2:	4643      	mov	r3, r8
 80064a4:	8837      	ldrh	r7, [r6, #0]
 80064a6:	1bde      	subs	r6, r3, r7
 80064a8:	4b01      	ldr	r3, [pc, #4]	@ (80064b0 <VSS_CalcElAngle+0xac>)
 80064aa:	b236      	sxth	r6, r6
 80064ac:	4698      	mov	r8, r3
 80064ae:	e7db      	b.n	8006468 <VSS_CalcElAngle+0x64>
 80064b0:	0000ffff 	.word	0x0000ffff

080064b4 <VSS_CalcAvrgMecSpeedUnit>:
  * - Called with the same periodicity on which speed control is executed, precisely during START and SWITCH_OVER states
  * of the MC tasks state machine or in its RUM state in @ref OpenLoop "Open Loop Control" configuration into
  * TSK_MediumFrequencyTask.
  */
__weak bool VSS_CalcAvrgMecSpeedUnit(VirtualSpeedSensor_Handle_t *pHandle, int16_t *hMecSpeedUnit)
{
 80064b4:	b570      	push	{r4, r5, r6, lr}
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 80064b6:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
{
 80064b8:	0004      	movs	r4, r0
 80064ba:	000d      	movs	r5, r1
    if (pHandle->hRemainingStep > 1u)
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d91c      	bls.n	80064fa <VSS_CalcAvrgMecSpeedUnit+0x46>
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80064c0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80064c2:	6a02      	ldr	r2, [r0, #32]
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80064c4:	69e1      	ldr	r1, [r4, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80064c6:	189b      	adds	r3, r3, r2
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80064c8:	8b42      	ldrh	r2, [r0, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80064ca:	6243      	str	r3, [r0, #36]	@ 0x24
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 80064cc:	141b      	asrs	r3, r3, #16
 80064ce:	81c3      	strh	r3, [r0, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80064d0:	4353      	muls	r3, r2
 80064d2:	0098      	lsls	r0, r3, #2
 80064d4:	18c0      	adds	r0, r0, r3
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80064d6:	7863      	ldrb	r3, [r4, #1]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80064d8:	0040      	lsls	r0, r0, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80064da:	4359      	muls	r1, r3
 80064dc:	f7f9 fe9e 	bl	800021c <__divsi3>
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 80064e0:	b200      	sxth	r0, r0
 80064e2:	8028      	strh	r0, [r5, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 80064e4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80064e6:	81a0      	strh	r0, [r4, #12]
      pHandle->hRemainingStep--;
 80064e8:	3b01      	subs	r3, #1
 80064ea:	8523      	strh	r3, [r4, #40]	@ 0x28
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 80064ec:	232d      	movs	r3, #45	@ 0x2d
 80064ee:	5ce0      	ldrb	r0, [r4, r3]
 80064f0:	2800      	cmp	r0, #0
 80064f2:	d10b      	bne.n	800650c <VSS_CalcAvrgMecSpeedUnit+0x58>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80064f4:	78e3      	ldrb	r3, [r4, #3]
 80064f6:	7023      	strb	r3, [r4, #0]
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 80064f8:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->hRemainingStep)
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d00b      	beq.n	8006516 <VSS_CalcAvrgMecSpeedUnit+0x62>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 80064fe:	220c      	movs	r2, #12
 8006500:	5e83      	ldrsh	r3, [r0, r2]
 8006502:	800b      	strh	r3, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 8006504:	232d      	movs	r3, #45	@ 0x2d
 8006506:	5ce0      	ldrb	r0, [r4, r3]
 8006508:	2800      	cmp	r0, #0
 800650a:	d0f3      	beq.n	80064f4 <VSS_CalcAvrgMecSpeedUnit+0x40>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800650c:	0029      	movs	r1, r5
 800650e:	0020      	movs	r0, r4
 8006510:	f7ff fb86 	bl	8005c20 <SPD_IsMecSpeedReliable>
 8006514:	e7f0      	b.n	80064f8 <VSS_CalcAvrgMecSpeedUnit+0x44>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 8006516:	222a      	movs	r2, #42	@ 0x2a
 8006518:	5e83      	ldrsh	r3, [r0, r2]
 800651a:	800b      	strh	r3, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800651c:	8183      	strh	r3, [r0, #12]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800651e:	69c0      	ldr	r0, [r0, #28]
 8006520:	4358      	muls	r0, r3
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8006522:	8b63      	ldrh	r3, [r4, #26]
 8006524:	0099      	lsls	r1, r3, #2
 8006526:	18c9      	adds	r1, r1, r3
 8006528:	0049      	lsls	r1, r1, #1
 800652a:	f7f9 fe77 	bl	800021c <__divsi3>
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800652e:	7863      	ldrb	r3, [r4, #1]
 8006530:	4343      	muls	r3, r0
 8006532:	81e3      	strh	r3, [r4, #14]
      pHandle->hRemainingStep = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	8523      	strh	r3, [r4, #40]	@ 0x28
 8006538:	e7d8      	b.n	80064ec <VSS_CalcAvrgMecSpeedUnit+0x38>
 800653a:	46c0      	nop			@ (mov r8, r8)

0800653c <VSS_SetMecAcceleration>:
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void  VSS_SetMecAcceleration(VirtualSpeedSensor_Handle_t *pHandle, int16_t hFinalMecSpeedUnit,
                                    uint16_t hDurationms)
{
 800653c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653e:	46ce      	mov	lr, r9
 8006540:	4647      	mov	r7, r8
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 8006542:	232c      	movs	r3, #44	@ 0x2c
{
 8006544:	b580      	push	{r7, lr}
    if (false == pHandle->bTransitionStarted)
 8006546:	5cc3      	ldrb	r3, [r0, r3]
{
 8006548:	0004      	movs	r4, r0
 800654a:	000e      	movs	r6, r1
 800654c:	0015      	movs	r5, r2
    if (false == pHandle->bTransitionStarted)
 800654e:	2b00      	cmp	r3, #0
 8006550:	d112      	bne.n	8006578 <VSS_SetMecAcceleration+0x3c>
        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8006552:	7843      	ldrb	r3, [r0, #1]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8006554:	69c0      	ldr	r0, [r0, #28]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8006556:	4698      	mov	r8, r3
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8006558:	8b63      	ldrh	r3, [r4, #26]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800655a:	4348      	muls	r0, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800655c:	0099      	lsls	r1, r3, #2
 800655e:	18c9      	adds	r1, r1, r3
 8006560:	0049      	lsls	r1, r1, #1
                                              / (((int32_t)SPEED_UNIT)
 8006562:	f7f9 fe5b 	bl	800021c <__divsi3>
 8006566:	0007      	movs	r7, r0
      if (0U == hDurationms)
 8006568:	2d00      	cmp	r5, #0
 800656a:	d109      	bne.n	8006580 <VSS_SetMecAcceleration+0x44>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800656c:	4643      	mov	r3, r8
 800656e:	435f      	muls	r7, r3
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8006570:	81a6      	strh	r6, [r4, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8006572:	81e7      	strh	r7, [r4, #14]

        pHandle->hRemainingStep = 0U;
 8006574:	8525      	strh	r5, [r4, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8006576:	8566      	strh	r6, [r4, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8006578:	bcc0      	pop	{r6, r7}
 800657a:	46b9      	mov	r9, r7
 800657c:	46b0      	mov	r8, r6
 800657e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8006580:	21fa      	movs	r1, #250	@ 0xfa
 8006582:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8006584:	0089      	lsls	r1, r1, #2
 8006586:	4368      	muls	r0, r5
 8006588:	f7f9 fdbe 	bl	8000108 <__udivsi3>
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800658c:	220e      	movs	r2, #14
 800658e:	5ea3      	ldrsh	r3, [r4, r2]
        hNbrStep++;
 8006590:	3001      	adds	r0, #1
 8006592:	b285      	uxth	r5, r0
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006594:	4699      	mov	r9, r3
        pHandle->hRemainingStep = hNbrStep;
 8006596:	8525      	strh	r5, [r4, #40]	@ 0x28
        if (0U == hNbrStep)
 8006598:	2d00      	cmp	r5, #0
 800659a:	d104      	bne.n	80065a6 <VSS_SetMecAcceleration+0x6a>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800659c:	464b      	mov	r3, r9
 800659e:	041b      	lsls	r3, r3, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80065a0:	8566      	strh	r6, [r4, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80065a2:	6263      	str	r3, [r4, #36]	@ 0x24
}
 80065a4:	e7e8      	b.n	8006578 <VSS_SetMecAcceleration+0x3c>
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80065a6:	0018      	movs	r0, r3
 80065a8:	4641      	mov	r1, r8
 80065aa:	f7f9 fe37 	bl	800021c <__divsi3>
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80065ae:	b23f      	sxth	r7, r7
 80065b0:	1a38      	subs	r0, r7, r0
 80065b2:	0029      	movs	r1, r5
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 80065b4:	0400      	lsls	r0, r0, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80065b6:	f7f9 fe31 	bl	800021c <__divsi3>
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 80065ba:	4643      	mov	r3, r8
 80065bc:	4343      	muls	r3, r0
 80065be:	6223      	str	r3, [r4, #32]
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80065c0:	464b      	mov	r3, r9
 80065c2:	041b      	lsls	r3, r3, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80065c4:	8566      	strh	r6, [r4, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80065c6:	6263      	str	r3, [r4, #36]	@ 0x24
    }
 80065c8:	e7d6      	b.n	8006578 <VSS_SetMecAcceleration+0x3c>
 80065ca:	46c0      	nop			@ (mov r8, r8)

080065cc <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 80065cc:	2900      	cmp	r1, #0
 80065ce:	d006      	beq.n	80065de <VSS_SetStartTransition+0x12>
    {
      pHandle->bTransitionStarted = true;
 80065d0:	232c      	movs	r3, #44	@ 0x2c
 80065d2:	2201      	movs	r2, #1
 80065d4:	54c2      	strb	r2, [r0, r3]

      if (0 == pHandle->hTransitionSteps)
 80065d6:	2136      	movs	r1, #54	@ 0x36
 80065d8:	5e43      	ldrsh	r3, [r0, r1]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <VSS_SetStartTransition+0x16>
  bool bAux = true;
 80065de:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 80065e0:	4770      	bx	lr
        pHandle->bTransitionEnded = true;
 80065e2:	212d      	movs	r1, #45	@ 0x2d
 80065e4:	5442      	strb	r2, [r0, r1]
        pHandle->_Super.bSpeedErrorNumber = 0U;
 80065e6:	7003      	strb	r3, [r0, #0]
        bAux = false;
 80065e8:	2000      	movs	r0, #0
 80065ea:	e7f9      	b.n	80065e0 <VSS_SetStartTransition+0x14>

080065ec <VSS_TransitionEnded>:
__weak bool VSS_TransitionEnded(VirtualSpeedSensor_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
 80065ec:	232d      	movs	r3, #45	@ 0x2d
 80065ee:	5cc0      	ldrb	r0, [r0, r3]
#endif
}
 80065f0:	4770      	bx	lr
 80065f2:	46c0      	nop			@ (mov r8, r8)

080065f4 <memset>:
 80065f4:	0003      	movs	r3, r0
 80065f6:	1882      	adds	r2, r0, r2
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d100      	bne.n	80065fe <memset+0xa>
 80065fc:	4770      	bx	lr
 80065fe:	7019      	strb	r1, [r3, #0]
 8006600:	3301      	adds	r3, #1
 8006602:	e7f9      	b.n	80065f8 <memset+0x4>

08006604 <__libc_init_array>:
 8006604:	b570      	push	{r4, r5, r6, lr}
 8006606:	2600      	movs	r6, #0
 8006608:	4c0c      	ldr	r4, [pc, #48]	@ (800663c <__libc_init_array+0x38>)
 800660a:	4d0d      	ldr	r5, [pc, #52]	@ (8006640 <__libc_init_array+0x3c>)
 800660c:	1b64      	subs	r4, r4, r5
 800660e:	10a4      	asrs	r4, r4, #2
 8006610:	42a6      	cmp	r6, r4
 8006612:	d109      	bne.n	8006628 <__libc_init_array+0x24>
 8006614:	2600      	movs	r6, #0
 8006616:	f000 f823 	bl	8006660 <_init>
 800661a:	4c0a      	ldr	r4, [pc, #40]	@ (8006644 <__libc_init_array+0x40>)
 800661c:	4d0a      	ldr	r5, [pc, #40]	@ (8006648 <__libc_init_array+0x44>)
 800661e:	1b64      	subs	r4, r4, r5
 8006620:	10a4      	asrs	r4, r4, #2
 8006622:	42a6      	cmp	r6, r4
 8006624:	d105      	bne.n	8006632 <__libc_init_array+0x2e>
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	00b3      	lsls	r3, r6, #2
 800662a:	58eb      	ldr	r3, [r5, r3]
 800662c:	4798      	blx	r3
 800662e:	3601      	adds	r6, #1
 8006630:	e7ee      	b.n	8006610 <__libc_init_array+0xc>
 8006632:	00b3      	lsls	r3, r6, #2
 8006634:	58eb      	ldr	r3, [r5, r3]
 8006636:	4798      	blx	r3
 8006638:	3601      	adds	r6, #1
 800663a:	e7f2      	b.n	8006622 <__libc_init_array+0x1e>
 800663c:	08007498 	.word	0x08007498
 8006640:	08007498 	.word	0x08007498
 8006644:	0800749c 	.word	0x0800749c
 8006648:	08007498 	.word	0x08007498

0800664c <memcpy>:
 800664c:	2300      	movs	r3, #0
 800664e:	b510      	push	{r4, lr}
 8006650:	429a      	cmp	r2, r3
 8006652:	d100      	bne.n	8006656 <memcpy+0xa>
 8006654:	bd10      	pop	{r4, pc}
 8006656:	5ccc      	ldrb	r4, [r1, r3]
 8006658:	54c4      	strb	r4, [r0, r3]
 800665a:	3301      	adds	r3, #1
 800665c:	e7f8      	b.n	8006650 <memcpy+0x4>
	...

08006660 <_init>:
 8006660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006662:	46c0      	nop			@ (mov r8, r8)
 8006664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006666:	bc08      	pop	{r3}
 8006668:	469e      	mov	lr, r3
 800666a:	4770      	bx	lr

0800666c <_fini>:
 800666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666e:	46c0      	nop			@ (mov r8, r8)
 8006670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006672:	bc08      	pop	{r3}
 8006674:	469e      	mov	lr, r3
 8006676:	4770      	bx	lr
