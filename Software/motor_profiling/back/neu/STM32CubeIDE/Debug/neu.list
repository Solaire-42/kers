
neu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1c8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  0800c3a0  0800c3a0  0000d3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c66c  0800c66c  0000eb68  2**0
                  CONTENTS
  4 .ARM          00000008  0800c66c  0800c66c  0000d66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c674  0800c674  0000eb68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c674  0800c674  0000d674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c678  0800c678  0000d678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000b68  20000000  0800c67c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000158c  20000b68  0800d1e4  0000eb68  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020f4  0800d1e4  0000f0f4  2**0
                  ALLOC
 11 .ARM.attributes 0000003a  00000000  00000000  0000eb68  2**0
                  CONTENTS, READONLY
 12 .debug_line   0004de2d  00000000  00000000  0000eba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000007f  00000000  00000000  0005c9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0005a46a  00000000  00000000  0005ca4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000093c8  00000000  00000000  000b6eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000023e8  00000000  00000000  000c0280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013e200  00000000  00000000  000c2668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00003554  00000000  00000000  00200868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0001cf3d  00000000  00000000  00203dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003674c  00000000  00000000  00220cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00001108  00000000  00000000  00257445  2**0
                  CONTENTS, READONLY
 22 .iar.rtmodel  0000006c  00000000  00000000  0025854d  2**0
                  CONTENTS, READONLY
 23 .iar_vfe_header 00000008  00000000  00000000  002585bc  2**2
                  CONTENTS, READONLY
 24 .debug_frame  000058d4  00000000  00000000  002585c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_types  00000820  00000000  00000000  0025de98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_macinfo 00000358  00000000  00000000  0025e6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_loc    00001fad  00000000  00000000  0025ea10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_ranges 00000460  00000000  00000000  002609bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_pubnames 000005a7  00000000  00000000  00260e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000b68 	.word	0x20000b68
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c388 	.word	0x0800c388

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000b6c 	.word	0x20000b6c
 8000214:	0800c388 	.word	0x0800c388

08000218 <OTT_Init>:
 8000218:	b510      	push	{r4, lr}
 800021a:	4604      	mov	r4, r0
 800021c:	f8df 088c 	ldr.w	r0, [pc, #2188]	@ 8000aac <??DataTable2_3>
 8000220:	6120      	str	r0, [r4, #16]
 8000222:	f00b fa2d 	bl	800b680 <REMNG_Init>
 8000226:	2100      	movs	r1, #0
 8000228:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800022c:	f8a4 1058 	strh.w	r1, [r4, #88]	@ 0x58
 8000230:	f8a4 105a 	strh.w	r1, [r4, #90]	@ 0x5a
 8000234:	6221      	str	r1, [r4, #32]
 8000236:	6261      	str	r1, [r4, #36]	@ 0x24
 8000238:	62a1      	str	r1, [r4, #40]	@ 0x28
 800023a:	62e1      	str	r1, [r4, #44]	@ 0x2c
 800023c:	6521      	str	r1, [r4, #80]	@ 0x50
 800023e:	2200      	movs	r2, #0
 8000240:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8000242:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
 8000246:	2300      	movs	r3, #0
 8000248:	6981      	ldr	r1, [r0, #24]
 800024a:	6321      	str	r1, [r4, #48]	@ 0x30
 800024c:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
 8000250:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000252:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8000254:	f8a4 2040 	strh.w	r2, [r4, #64]	@ 0x40
 8000258:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
 800025c:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
 8000260:	edd0 0a00 	vldr	s1, [r0]
 8000264:	ed90 0a07 	vldr	s0, [r0, #28]
 8000268:	eef8 0a60 	vcvt.f32.u32	s1, s1
 800026c:	ee20 0a80 	vmul.f32	s0, s1, s0
 8000270:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8000274:	ee10 1a10 	vmov	r1, s0
 8000278:	f8a4 105c 	strh.w	r1, [r4, #92]	@ 0x5c
 800027c:	ed90 1a09 	vldr	s2, [r0, #36]	@ 0x24
 8000280:	edd0 0a07 	vldr	s1, [r0, #28]
 8000284:	eec1 0a20 	vdiv.f32	s1, s2, s1
 8000288:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 800028c:	ee10 1a90 	vmov	r1, s1
 8000290:	f8a4 105e 	strh.w	r1, [r4, #94]	@ 0x5e
 8000294:	ed90 0a00 	vldr	s0, [r0]
 8000298:	edd0 0a0c 	vldr	s1, [r0, #48]	@ 0x30
 800029c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80002a0:	ee60 0a20 	vmul.f32	s1, s0, s1
 80002a4:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 80002a8:	ee10 1a90 	vmov	r1, s1
 80002ac:	f8a4 1060 	strh.w	r1, [r4, #96]	@ 0x60
 80002b0:	ed90 0a00 	vldr	s0, [r0]
 80002b4:	edd0 0a0d 	vldr	s1, [r0, #52]	@ 0x34
 80002b8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80002bc:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80002c0:	ee60 0a20 	vmul.f32	s1, s0, s1
 80002c4:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 80002c8:	ee10 1a90 	vmov	r1, s1
 80002cc:	f8a4 1074 	strh.w	r1, [r4, #116]	@ 0x74
 80002d0:	6662      	str	r2, [r4, #100]	@ 0x64
 80002d2:	66a2      	str	r2, [r4, #104]	@ 0x68
 80002d4:	f884 206c 	strb.w	r2, [r4, #108]	@ 0x6c
 80002d8:	6722      	str	r2, [r4, #112]	@ 0x70
 80002da:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 80002de:	f891 0020 	ldrb.w	r0, [r1, #32]
 80002e2:	f884 0076 	strb.w	r0, [r4, #118]	@ 0x76
 80002e6:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80002ea:	8c41      	ldrh	r1, [r0, #34]	@ 0x22
 80002ec:	f8a4 1078 	strh.w	r1, [r4, #120]	@ 0x78
 80002f0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80002f2:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
 80002f6:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80002f8:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
 80002fc:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80002fe:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
 8000302:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8000306:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 800030a:	bd10      	pop	{r4, pc}

0800030c <OTT_Clear>:
 800030c:	f890 1062 	ldrb.w	r1, [r0, #98]	@ 0x62
 8000310:	b979      	cbnz	r1, 8000332 <??OTT_Clear_0>
 8000312:	2300      	movs	r3, #0
 8000314:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
 8000318:	6383      	str	r3, [r0, #56]	@ 0x38
 800031a:	63c1      	str	r1, [r0, #60]	@ 0x3c
 800031c:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8000320:	f8a0 104c 	strh.w	r1, [r0, #76]	@ 0x4c
 8000324:	f8a0 304e 	strh.w	r3, [r0, #78]	@ 0x4e
 8000328:	f8c0 1090 	str.w	r1, [r0, #144]	@ 0x90
 800032c:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
 8000330:	4770      	bx	lr

08000332 <??OTT_Clear_0>:
 8000332:	210a      	movs	r1, #10
 8000334:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34
 8000338:	4770      	bx	lr

0800033a <OTT_Stop>:
 800033a:	2100      	movs	r1, #0
 800033c:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34
 8000340:	4770      	bx	lr
	...

08000344 <OTT_MF>:
 8000344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000348:	4604      	mov	r4, r0
 800034a:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 800034e:	6925      	ldr	r5, [r4, #16]
 8000350:	2809      	cmp	r0, #9
 8000352:	f200 80cc 	bhi.w	80004ee <??OTT_MF_2>
 8000356:	e8df f010 	tbh	[pc, r0, lsl #1]

0800035a <??OTT_MF_0>:
 800035a:	000a 0049 00ca 00ca 00ca 00a2 00cc 0147     ..I...........G.
 800036a:	016f 0211                                   o...

0800036e <??OTT_MF_3>:
 800036e:	6860      	ldr	r0, [r4, #4]
 8000370:	2100      	movs	r1, #0
 8000372:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8000376:	2104      	movs	r1, #4
 8000378:	68e0      	ldr	r0, [r4, #12]
 800037a:	f00b fb63 	bl	800ba44 <STC_SetControlMode>
 800037e:	2100      	movs	r1, #0
 8000380:	63a1      	str	r1, [r4, #56]	@ 0x38
 8000382:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8000386:	f8a4 104c 	strh.w	r1, [r4, #76]	@ 0x4c
 800038a:	2000      	movs	r0, #0
 800038c:	63e0      	str	r0, [r4, #60]	@ 0x3c
 800038e:	f8a4 0048 	strh.w	r0, [r4, #72]	@ 0x48
 8000392:	f8a4 004e 	strh.w	r0, [r4, #78]	@ 0x4e
 8000396:	2101      	movs	r1, #1
 8000398:	f884 006c 	strb.w	r0, [r4, #108]	@ 0x6c
 800039c:	f8a4 104a 	strh.w	r1, [r4, #74]	@ 0x4a
 80003a0:	6820      	ldr	r0, [r4, #0]
 80003a2:	f00b fadf 	bl	800b964 <SPD_GetAvrgMecSpeedUnit>
 80003a6:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
 80003aa:	0089      	lsls	r1, r1, #2
 80003ac:	f8df 0700 	ldr.w	r0, [pc, #1792]	@ 8000ab0 <??DataTable2_4>
 80003b0:	fb81 3000 	smull	r3, r0, r1, r0
 80003b4:	1081      	asrs	r1, r0, #2
 80003b6:	2200      	movs	r2, #0
 80003b8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80003bc:	4628      	mov	r0, r5
 80003be:	f00b f9af 	bl	800b720 <REMNG_ExecRamp>
 80003c2:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 80003c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80003ca:	4628      	mov	r0, r5
 80003cc:	f00b f9a8 	bl	800b720 <REMNG_ExecRamp>
 80003d0:	2001      	movs	r0, #1
 80003d2:	6861      	ldr	r1, [r4, #4]
 80003d4:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 80003d8:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 80003dc:	ee00 0a10 	vmov	s0, r0
 80003e0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80003e4:	ed84 0a24 	vstr	s0, [r4, #144]	@ 0x90
 80003e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080003ec <??OTT_MF_4>:
 80003ec:	4628      	mov	r0, r5
 80003ee:	f00b f94f 	bl	800b690 <REMNG_Calc>
 80003f2:	ee00 0a10 	vmov	s0, r0
 80003f6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80003fa:	ed84 0a1c 	vstr	s0, [r4, #112]	@ 0x70
 80003fe:	4620      	mov	r0, r4
 8000400:	f000 faba 	bl	8000978 <OTT_SpeedCtrl>
 8000404:	4606      	mov	r6, r0
 8000406:	4628      	mov	r0, r5
 8000408:	f00b f964 	bl	800b6d4 <REMNG_RampCompleted>
 800040c:	2800      	cmp	r0, #0
 800040e:	d06e      	beq.n	80004ee <??OTT_MF_2>
 8000410:	f8b4 004e 	ldrh.w	r0, [r4, #78]	@ 0x4e
 8000414:	1c40      	adds	r0, r0, #1
 8000416:	2e01      	cmp	r6, #1
 8000418:	f8a4 004e 	strh.w	r0, [r4, #78]	@ 0x4e
 800041c:	d004      	beq.n	8000428 <??OTT_MF_5>
 800041e:	f8b4 1074 	ldrh.w	r1, [r4, #116]	@ 0x74
 8000422:	b280      	uxth	r0, r0
 8000424:	4281      	cmp	r1, r0
 8000426:	d262      	bcs.n	80004ee <??OTT_MF_2>

08000428 <??OTT_MF_5>:
 8000428:	6820      	ldr	r0, [r4, #0]
 800042a:	f00b fa9b 	bl	800b964 <SPD_GetAvrgMecSpeedUnit>
 800042e:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
 8000432:	0089      	lsls	r1, r1, #2
 8000434:	f8df 0678 	ldr.w	r0, [pc, #1656]	@ 8000ab0 <??DataTable2_4>
 8000438:	fb81 2000 	smull	r2, r0, r1, r0
 800043c:	1080      	asrs	r0, r0, #2
 800043e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8000442:	ee00 0a10 	vmov	s0, r0
 8000446:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800044a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800044e:	ed84 0a14 	vstr	s0, [r4, #80]	@ 0x50
 8000452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000456:	edd0 0a0a 	vldr	s1, [r0, #40]	@ 0x28
 800045a:	ee60 0a20 	vmul.f32	s1, s0, s1
 800045e:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8000462:	ee10 1a90 	vmov	r1, s1
 8000466:	f8a4 1058 	strh.w	r1, [r4, #88]	@ 0x58
 800046a:	ed90 1a0b 	vldr	s2, [r0, #44]	@ 0x2c
 800046e:	ee20 0a01 	vmul.f32	s0, s0, s2
 8000472:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8000476:	ee10 1a10 	vmov	r1, s0
 800047a:	2000      	movs	r0, #0
 800047c:	63e0      	str	r0, [r4, #60]	@ 0x3c
 800047e:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40
 8000482:	6460      	str	r0, [r4, #68]	@ 0x44
 8000484:	f8a4 004e 	strh.w	r0, [r4, #78]	@ 0x4e
 8000488:	f8a4 105a 	strh.w	r1, [r4, #90]	@ 0x5a
 800048c:	4628      	mov	r0, r5
 800048e:	b209      	sxth	r1, r1
 8000490:	f00b f946 	bl	800b720 <REMNG_ExecRamp>
 8000494:	2005      	movs	r0, #5
 8000496:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 800049a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800049e <??OTT_MF_6>:
 800049e:	4628      	mov	r0, r5
 80004a0:	f00b f8f6 	bl	800b690 <REMNG_Calc>
 80004a4:	ee00 0a10 	vmov	s0, r0
 80004a8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80004ac:	ed84 0a1c 	vstr	s0, [r4, #112]	@ 0x70
 80004b0:	4620      	mov	r0, r4
 80004b2:	f000 fa61 	bl	8000978 <OTT_SpeedCtrl>
 80004b6:	4606      	mov	r6, r0
 80004b8:	4628      	mov	r0, r5
 80004ba:	f00b f90b 	bl	800b6d4 <REMNG_RampCompleted>
 80004be:	b1b0      	cbz	r0, 80004ee <??OTT_MF_2>
 80004c0:	f8b4 004e 	ldrh.w	r0, [r4, #78]	@ 0x4e
 80004c4:	1c40      	adds	r0, r0, #1
 80004c6:	2e01      	cmp	r6, #1
 80004c8:	d004      	beq.n	80004d4 <??OTT_MF_7>
 80004ca:	f8b4 1074 	ldrh.w	r1, [r4, #116]	@ 0x74
 80004ce:	b282      	uxth	r2, r0
 80004d0:	4291      	cmp	r1, r2
 80004d2:	d20a      	bcs.n	80004ea <??OTT_MF_8>

080004d4 <??OTT_MF_7>:
 80004d4:	2300      	movs	r3, #0
 80004d6:	2000      	movs	r0, #0
 80004d8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80004da:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40
 80004de:	6460      	str	r0, [r4, #68]	@ 0x44
 80004e0:	f8a4 0048 	strh.w	r0, [r4, #72]	@ 0x48
 80004e4:	2106      	movs	r1, #6

080004e6 <??OTT_MF_9>:
 80004e6:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34

080004ea <??OTT_MF_8>:
 80004ea:	f8a4 004e 	strh.w	r0, [r4, #78]	@ 0x4e

080004ee <??OTT_MF_2>:
 80004ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080004f2 <??OTT_MF_10>:
 80004f2:	ed94 0a1c 	vldr	s0, [r4, #112]	@ 0x70
 80004f6:	4620      	mov	r0, r4
 80004f8:	f000 fa3e 	bl	8000978 <OTT_SpeedCtrl>
 80004fc:	6820      	ldr	r0, [r4, #0]
 80004fe:	f00b fa31 	bl	800b964 <SPD_GetAvrgMecSpeedUnit>
 8000502:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	f8df 25a4 	ldr.w	r2, [pc, #1444]	@ 8000ab0 <??DataTable2_4>
 800050c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800050e:	f8b4 605c 	ldrh.w	r6, [r4, #92]	@ 0x5c
 8000512:	fb83 0202 	smull	r0, r2, r3, r2
 8000516:	1090      	asrs	r0, r2, #2
 8000518:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800051c:	6862      	ldr	r2, [r4, #4]
 800051e:	1840      	adds	r0, r0, r1
 8000520:	63e0      	str	r0, [r4, #60]	@ 0x3c
 8000522:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8000524:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8000528:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 800052c:	18c9      	adds	r1, r1, r3
 800052e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000530:	1c52      	adds	r2, r2, #1
 8000532:	b297      	uxth	r7, r2
 8000534:	1c5b      	adds	r3, r3, #1
 8000536:	42be      	cmp	r6, r7
 8000538:	63a1      	str	r1, [r4, #56]	@ 0x38
 800053a:	f8a4 2040 	strh.w	r2, [r4, #64]	@ 0x40
 800053e:	6463      	str	r3, [r4, #68]	@ 0x44
 8000540:	d2d5      	bcs.n	80004ee <??OTT_MF_2>
 8000542:	b292      	uxth	r2, r2
 8000544:	f8b4 6048 	ldrh.w	r6, [r4, #72]	@ 0x48
 8000548:	fb90 f0f2 	sdiv	r0, r0, r2
 800054c:	1a36      	subs	r6, r6, r0
 800054e:	b232      	sxth	r2, r6
 8000550:	2a00      	cmp	r2, #0
 8000552:	bf4c      	ite	mi
 8000554:	4252      	negmi	r2, r2
 8000556:	4632      	movpl	r2, r6
 8000558:	f8a4 0048 	strh.w	r0, [r4, #72]	@ 0x48
 800055c:	f8a4 604a 	strh.w	r6, [r4, #74]	@ 0x4a
 8000560:	2000      	movs	r0, #0
 8000562:	63e0      	str	r0, [r4, #60]	@ 0x3c
 8000564:	2600      	movs	r6, #0
 8000566:	f8b4 0060 	ldrh.w	r0, [r4, #96]	@ 0x60
 800056a:	f8a4 6040 	strh.w	r6, [r4, #64]	@ 0x40
 800056e:	4298      	cmp	r0, r3
 8000570:	db02      	blt.n	8000578 <??OTT_MF_11>
 8000572:	b212      	sxth	r2, r2
 8000574:	2a04      	cmp	r2, #4
 8000576:	dcba      	bgt.n	80004ee <??OTT_MF_2>

08000578 <??OTT_MF_11>:
 8000578:	fb91 f0f3 	sdiv	r0, r1, r3
 800057c:	82a0      	strh	r0, [r4, #20]
 800057e:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 8000778 <??OTT_MF_1>
 8000582:	f9b4 1048 	ldrsh.w	r1, [r4, #72]	@ 0x48
 8000586:	f894 0076 	ldrb.w	r0, [r4, #118]	@ 0x76
 800058a:	ee00 1a10 	vmov	s0, r1
 800058e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8000592:	ee01 0a10 	vmov	s2, r0
 8000596:	ee60 0a20 	vmul.f32	s1, s0, s1
 800059a:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 800059e:	ee20 1a81 	vmul.f32	s2, s1, s2
 80005a2:	ed84 1a06 	vstr	s2, [r4, #24]
 80005a6:	6820      	ldr	r0, [r4, #0]
 80005a8:	f00b f9dc 	bl	800b964 <SPD_GetAvrgMecSpeedUnit>
 80005ac:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
 80005b0:	0092      	lsls	r2, r2, #2
 80005b2:	f8df 14fc 	ldr.w	r1, [pc, #1276]	@ 8000ab0 <??DataTable2_4>
 80005b6:	f8a4 604e 	strh.w	r6, [r4, #78]	@ 0x4e
 80005ba:	fb82 0101 	smull	r0, r1, r2, r1
 80005be:	1088      	asrs	r0, r1, #2
 80005c0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80005c4:	ee00 0a10 	vmov	s0, r0
 80005c8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80005cc:	f9b4 1058 	ldrsh.w	r1, [r4, #88]	@ 0x58
 80005d0:	ed84 0a1c 	vstr	s0, [r4, #112]	@ 0x70
 80005d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80005d8:	4628      	mov	r0, r5
 80005da:	f00b f8a1 	bl	800b720 <REMNG_ExecRamp>
 80005de:	2007      	movs	r0, #7
 80005e0:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 80005e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080005e8 <??OTT_MF_12>:
 80005e8:	4628      	mov	r0, r5
 80005ea:	f00b f851 	bl	800b690 <REMNG_Calc>
 80005ee:	ee00 0a10 	vmov	s0, r0
 80005f2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80005f6:	ed84 0a1c 	vstr	s0, [r4, #112]	@ 0x70
 80005fa:	4620      	mov	r0, r4
 80005fc:	f000 f9bc 	bl	8000978 <OTT_SpeedCtrl>
 8000600:	4606      	mov	r6, r0
 8000602:	4628      	mov	r0, r5
 8000604:	f00b f866 	bl	800b6d4 <REMNG_RampCompleted>
 8000608:	2800      	cmp	r0, #0
 800060a:	f43f af70 	beq.w	80004ee <??OTT_MF_2>
 800060e:	f8b4 004e 	ldrh.w	r0, [r4, #78]	@ 0x4e
 8000612:	1c40      	adds	r0, r0, #1
 8000614:	2e01      	cmp	r6, #1
 8000616:	d005      	beq.n	8000624 <??OTT_MF_13>
 8000618:	f8b4 2074 	ldrh.w	r2, [r4, #116]	@ 0x74
 800061c:	b281      	uxth	r1, r0
 800061e:	428a      	cmp	r2, r1
 8000620:	f4bf af63 	bcs.w	80004ea <??OTT_MF_8>

08000624 <??OTT_MF_13>:
 8000624:	2000      	movs	r0, #0
 8000626:	63a0      	str	r0, [r4, #56]	@ 0x38
 8000628:	63e0      	str	r0, [r4, #60]	@ 0x3c
 800062a:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40
 800062e:	6460      	str	r0, [r4, #68]	@ 0x44
 8000630:	f8a4 0048 	strh.w	r0, [r4, #72]	@ 0x48
 8000634:	2108      	movs	r1, #8
 8000636:	e756      	b.n	80004e6 <??OTT_MF_9>

08000638 <??OTT_MF_14>:
 8000638:	ed94 0a1c 	vldr	s0, [r4, #112]	@ 0x70
 800063c:	4620      	mov	r0, r4
 800063e:	f000 f99b 	bl	8000978 <OTT_SpeedCtrl>
 8000642:	6820      	ldr	r0, [r4, #0]
 8000644:	f00b f98e 	bl	800b964 <SPD_GetAvrgMecSpeedUnit>
 8000648:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	f8df 2460 	ldr.w	r2, [pc, #1120]	@ 8000ab0 <??DataTable2_4>
 8000652:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8000654:	f8b4 505c 	ldrh.w	r5, [r4, #92]	@ 0x5c
 8000658:	fb83 0202 	smull	r0, r2, r3, r2
 800065c:	1090      	asrs	r0, r2, #2
 800065e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8000662:	6863      	ldr	r3, [r4, #4]
 8000664:	1840      	adds	r0, r0, r1
 8000666:	63e0      	str	r0, [r4, #60]	@ 0x3c
 8000668:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800066a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800066e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000670:	1889      	adds	r1, r1, r2
 8000672:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8000676:	1c52      	adds	r2, r2, #1
 8000678:	b296      	uxth	r6, r2
 800067a:	1c5b      	adds	r3, r3, #1
 800067c:	42b5      	cmp	r5, r6
 800067e:	63a1      	str	r1, [r4, #56]	@ 0x38
 8000680:	f8a4 2040 	strh.w	r2, [r4, #64]	@ 0x40
 8000684:	6463      	str	r3, [r4, #68]	@ 0x44
 8000686:	f4bf af32 	bcs.w	80004ee <??OTT_MF_2>
 800068a:	b292      	uxth	r2, r2
 800068c:	fb90 f5f2 	sdiv	r5, r0, r2
 8000690:	f8b4 0048 	ldrh.w	r0, [r4, #72]	@ 0x48
 8000694:	1b40      	subs	r0, r0, r5
 8000696:	b202      	sxth	r2, r0
 8000698:	2a00      	cmp	r2, #0
 800069a:	bf4c      	ite	mi
 800069c:	4252      	negmi	r2, r2
 800069e:	4602      	movpl	r2, r0
 80006a0:	f8a4 004a 	strh.w	r0, [r4, #74]	@ 0x4a
 80006a4:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 80006a8:	2000      	movs	r0, #0
 80006aa:	63e0      	str	r0, [r4, #60]	@ 0x3c
 80006ac:	2500      	movs	r5, #0
 80006ae:	f8b4 0060 	ldrh.w	r0, [r4, #96]	@ 0x60
 80006b2:	f8a4 5040 	strh.w	r5, [r4, #64]	@ 0x40
 80006b6:	4298      	cmp	r0, r3
 80006b8:	db03      	blt.n	80006c2 <??OTT_MF_15>
 80006ba:	b212      	sxth	r2, r2
 80006bc:	2a04      	cmp	r2, #4
 80006be:	f73f af16 	bgt.w	80004ee <??OTT_MF_2>

080006c2 <??OTT_MF_15>:
 80006c2:	fb91 f0f3 	sdiv	r0, r1, r3
 80006c6:	82e0      	strh	r0, [r4, #22]
 80006c8:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 8000778 <??OTT_MF_1>
 80006cc:	f9b4 0048 	ldrsh.w	r0, [r4, #72]	@ 0x48
 80006d0:	f894 1076 	ldrb.w	r1, [r4, #118]	@ 0x76
 80006d4:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80006d8:	ee00 0a10 	vmov	s0, r0
 80006dc:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 80006e0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80006e4:	ee01 1a10 	vmov	s2, r1
 80006e8:	ee60 0a20 	vmul.f32	s1, s0, s1
 80006ec:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 80006f0:	ee20 0a81 	vmul.f32	s0, s1, s2
 80006f4:	ee00 2a90 	vmov	s1, r2
 80006f8:	ee01 0a10 	vmov	s2, r0
 80006fc:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8000700:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8000704:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8000708:	ed84 0a07 	vstr	s0, [r4, #28]
 800070c:	edd4 0a06 	vldr	s1, [r4, #24]
 8000710:	ee30 0ac0 	vsub.f32	s0, s1, s0
 8000714:	eec1 0a00 	vdiv.f32	s1, s2, s0
 8000718:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 800092c <??DataTable1>
 800071c:	eef4 0a40 	vcmp.f32	s1, s0
 8000720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000724:	bf48      	it	mi
 8000726:	eef0 0a40 	vmovmi.f32	s1, s0
 800072a:	edc4 0a08 	vstr	s1, [r4, #32]
 800072e:	ed94 0a06 	vldr	s0, [r4, #24]
 8000732:	edd4 0a07 	vldr	s1, [r4, #28]
 8000736:	ee70 0a60 	vsub.f32	s1, s0, s1
 800073a:	ed9f 1ad9 	vldr	s2, [pc, #868]	@ 8000aa0 <??DataTable2>
 800073e:	ee20 0a81 	vmul.f32	s0, s1, s2
 8000742:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8000746:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 800074a:	edd4 0a07 	vldr	s1, [r4, #28]
 800074e:	68e0      	ldr	r0, [r4, #12]
 8000750:	ed84 0a09 	vstr	s0, [r4, #36]	@ 0x24
 8000754:	ee30 0a20 	vadd.f32	s0, s0, s1
 8000758:	428a      	cmp	r2, r1
 800075a:	ed84 0a09 	vstr	s0, [r4, #36]	@ 0x24
 800075e:	462a      	mov	r2, r5
 8000760:	bfa8      	it	ge
 8000762:	f9b4 1078 	ldrshge.w	r1, [r4, #120]	@ 0x78
 8000766:	f00b f971 	bl	800ba4c <STC_ExecRamp>
 800076a:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
 800076e:	2109      	movs	r1, #9
 8000770:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 8000774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000778 <??OTT_MF_1>:
 8000778:	c49c 3f20                                   .. ?

0800077c <??OTT_MF_16>:
 800077c:	f8b4 004e 	ldrh.w	r0, [r4, #78]	@ 0x4e
 8000780:	1c40      	adds	r0, r0, #1
 8000782:	f8a4 004e 	strh.w	r0, [r4, #78]	@ 0x4e
 8000786:	6820      	ldr	r0, [r4, #0]
 8000788:	f00b f8ec 	bl	800b964 <SPD_GetAvrgMecSpeedUnit>
 800078c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8000790:	0052      	lsls	r2, r2, #1
 8000792:	4bc7      	ldr	r3, [pc, #796]	@ (8000ab0 <??DataTable2_4>)
 8000794:	f894 1076 	ldrb.w	r1, [r4, #118]	@ 0x76
 8000798:	ed94 1a09 	vldr	s2, [r4, #36]	@ 0x24
 800079c:	fb82 0303 	smull	r0, r3, r2, r3
 80007a0:	1098      	asrs	r0, r3, #2
 80007a2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80007a6:	ee01 0a90 	vmov	s3, r0
 80007aa:	ee00 1a10 	vmov	s0, r1
 80007ae:	eddf 0abd 	vldr	s1, [pc, #756]	@ 8000aa4 <??DataTable2_1>
 80007b2:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80007b6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80007ba:	ee61 1aa0 	vmul.f32	s3, s3, s1
 80007be:	ee61 1a80 	vmul.f32	s3, s3, s0
 80007c2:	eef4 1a41 	vcmp.f32	s3, s2
 80007c6:	f8b4 104e 	ldrh.w	r1, [r4, #78]	@ 0x4e
 80007ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ce:	da06      	bge.n	80007de <??OTT_MF_17>
 80007d0:	f8b4 2074 	ldrh.w	r2, [r4, #116]	@ 0x74
 80007d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80007d8:	428a      	cmp	r2, r1
 80007da:	f6bf ae88 	bge.w	80004ee <??OTT_MF_2>

080007de <??OTT_MF_17>:
 80007de:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 80007e2:	eef3 2a0e 	vmov.f32	s5, #62	@ 0x41f00000  30.0
 80007e6:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80007ea:	68a5      	ldr	r5, [r4, #8]
 80007ec:	ed90 2a00 	vldr	s4, [r0]
 80007f0:	ee01 1a10 	vmov	s2, r1
 80007f4:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 80007f8:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 80007fc:	ee81 1a02 	vdiv.f32	s2, s2, s4
 8000800:	eec1 1a81 	vdiv.f32	s3, s3, s2
 8000804:	ee61 1aa2 	vmul.f32	s3, s3, s5
 8000808:	edc4 1a0c 	vstr	s3, [r4, #48]	@ 0x30
 800080c:	ed84 1a0a 	vstr	s2, [r4, #40]	@ 0x28
 8000810:	2110      	movs	r1, #16
 8000812:	ed94 2a08 	vldr	s4, [r4, #32]
 8000816:	ee21 2a02 	vmul.f32	s4, s2, s4
 800081a:	ee62 1a21 	vmul.f32	s3, s4, s3
 800081e:	ee61 0aa0 	vmul.f32	s1, s3, s1
 8000822:	ee20 0a80 	vmul.f32	s0, s1, s0
 8000826:	ed84 2a0b 	vstr	s4, [r4, #44]	@ 0x2c
 800082a:	ed84 0a19 	vstr	s0, [r4, #100]	@ 0x64
 800082e:	ee80 1a01 	vdiv.f32	s2, s0, s2
 8000832:	edd0 2a00 	vldr	s5, [r0]
 8000836:	eef8 2a62 	vcvt.f32.u32	s5, s5
 800083a:	eec1 0a22 	vdiv.f32	s1, s2, s5
 800083e:	edc4 0a1a 	vstr	s1, [r4, #104]	@ 0x68
 8000842:	2610      	movs	r6, #16
 8000844:	2700      	movs	r7, #0
 8000846:	230f      	movs	r3, #15
 8000848:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 800084c:	f05f 0201 	movs.w	r2, #1

08000850 <??OTT_MF_18>:
 8000850:	fa02 fc03 	lsl.w	ip, r2, r3
 8000854:	ee01 ca10 	vmov	s2, ip
 8000858:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 800085c:	ee21 1a00 	vmul.f32	s2, s2, s0
 8000860:	eebd 1ac1 	vcvt.s32.f32	s2, s2
 8000864:	ee11 8a10 	vmov	r8, s2
 8000868:	4580      	cmp	r8, r0
 800086a:	da06      	bge.n	800087a <??OTT_MF_19>
 800086c:	4619      	mov	r1, r3
 800086e:	e004      	b.n	800087a <??OTT_MF_19>

08000870 <??OTT_MF_20>:
 8000870:	fa1f fc81 	uxth.w	ip, r1
 8000874:	f1bc 0f10 	cmp.w	ip, #16
 8000878:	d0ea      	beq.n	8000850 <??OTT_MF_18>

0800087a <??OTT_MF_19>:
 800087a:	fa1f fc86 	uxth.w	ip, r6
 800087e:	f1bc 0f10 	cmp.w	ip, #16
 8000882:	d10e      	bne.n	80008a2 <??OTT_MF_21>
 8000884:	fa02 f703 	lsl.w	r7, r2, r3
 8000888:	ee01 7a10 	vmov	s2, r7
 800088c:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8000890:	ee21 1a20 	vmul.f32	s2, s2, s1
 8000894:	eebd 1ac1 	vcvt.s32.f32	s2, s2
 8000898:	ee11 7a10 	vmov	r7, s2
 800089c:	4287      	cmp	r7, r0
 800089e:	bfb8      	it	lt
 80008a0:	461e      	movlt	r6, r3

080008a2 <??OTT_MF_21>:
 80008a2:	1e5b      	subs	r3, r3, #1
 80008a4:	d5e4      	bpl.n	8000870 <??OTT_MF_20>
 80008a6:	b288      	uxth	r0, r1
 80008a8:	2810      	cmp	r0, #16
 80008aa:	d008      	beq.n	80008be <??OTT_MF_22>
 80008ac:	b289      	uxth	r1, r1
 80008ae:	4628      	mov	r0, r5
 80008b0:	f009 fec8 	bl	800a644 <PID_SetKPDivisorPOW2>
 80008b4:	fa0f f188 	sxth.w	r1, r8
 80008b8:	4628      	mov	r0, r5
 80008ba:	f009 feb3 	bl	800a624 <PID_SetKP>

080008be <??OTT_MF_22>:
 80008be:	b2b0      	uxth	r0, r6
 80008c0:	2810      	cmp	r0, #16
 80008c2:	d007      	beq.n	80008d4 <??OTT_MF_23>
 80008c4:	b2b1      	uxth	r1, r6
 80008c6:	4628      	mov	r0, r5
 80008c8:	f009 feca 	bl	800a660 <PID_SetKIDivisorPOW2>
 80008cc:	b239      	sxth	r1, r7
 80008ce:	4628      	mov	r0, r5
 80008d0:	f009 feaa 	bl	800a628 <PID_SetKI>

080008d4 <??OTT_MF_23>:
 80008d4:	f9b4 1078 	ldrsh.w	r1, [r4, #120]	@ 0x78
 80008d8:	82a9      	strh	r1, [r5, #20]
 80008da:	f8b4 0078 	ldrh.w	r0, [r4, #120]	@ 0x78
 80008de:	4240      	negs	r0, r0
 80008e0:	82e8      	strh	r0, [r5, #22]
 80008e2:	4628      	mov	r0, r5
 80008e4:	f009 feb4 	bl	800a650 <PID_GetKIDivisor>
 80008e8:	4606      	mov	r6, r0
 80008ea:	f8b4 0078 	ldrh.w	r0, [r4, #120]	@ 0x78
 80008ee:	4346      	muls	r6, r0
 80008f0:	4631      	mov	r1, r6
 80008f2:	4628      	mov	r0, r5
 80008f4:	f009 feb2 	bl	800a65c <PID_SetUpperIntegralTermLimit>
 80008f8:	4276      	negs	r6, r6
 80008fa:	4631      	mov	r1, r6
 80008fc:	4628      	mov	r0, r5
 80008fe:	f009 feab 	bl	800a658 <PID_SetLowerIntegralTermLimit>
 8000902:	2001      	movs	r0, #1
 8000904:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 8000908:	2103      	movs	r1, #3
 800090a:	68e0      	ldr	r0, [r4, #12]
 800090c:	f00b f89a 	bl	800ba44 <STC_SetControlMode>
 8000910:	6820      	ldr	r0, [r4, #0]
 8000912:	f00b f827 	bl	800b964 <SPD_GetAvrgMecSpeedUnit>
 8000916:	4601      	mov	r1, r0
 8000918:	68e0      	ldr	r0, [r4, #12]
 800091a:	2200      	movs	r2, #0
 800091c:	f00b f896 	bl	800ba4c <STC_ExecRamp>
 8000920:	200a      	movs	r0, #10
 8000922:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 8000926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800092c <??DataTable1>:
 800092c:	d70a 3c23                                   ..#<

08000930 <OTT_SR>:
 8000930:	b510      	push	{r4, lr}
 8000932:	4604      	mov	r4, r0
 8000934:	f894 0062 	ldrb.w	r0, [r4, #98]	@ 0x62
 8000938:	b9b0      	cbnz	r0, 8000968 <??OTT_SR_0>
 800093a:	6860      	ldr	r0, [r4, #4]
 800093c:	2100      	movs	r1, #0
 800093e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8000942:	2104      	movs	r1, #4
 8000944:	68e0      	ldr	r0, [r4, #12]
 8000946:	f00b f87d 	bl	800ba44 <STC_SetControlMode>
 800094a:	6860      	ldr	r0, [r4, #4]
 800094c:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 8000950:	68e0      	ldr	r0, [r4, #12]
 8000952:	2200      	movs	r2, #0
 8000954:	f00b f87a 	bl	800ba4c <STC_ExecRamp>
 8000958:	68e0      	ldr	r0, [r4, #12]
 800095a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800095e:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000962:	2100      	movs	r1, #0
 8000964:	f00b b872 	b.w	800ba4c <STC_ExecRamp>

08000968 <??OTT_SR_0>:
 8000968:	bd10      	pop	{r4, pc}

0800096a <OTT_ForceTuning>:
 800096a:	2100      	movs	r1, #0
 800096c:	f880 1062 	strb.w	r1, [r0, #98]	@ 0x62
 8000970:	4770      	bx	lr

08000972 <OTT_fGetNominalSpeedRPM>:
 8000972:	ed90 0a14 	vldr	s0, [r0, #80]	@ 0x50
 8000976:	4770      	bx	lr

08000978 <OTT_SpeedCtrl>:
 8000978:	b530      	push	{r4, r5, lr}
 800097a:	4604      	mov	r4, r0
 800097c:	b081      	sub	sp, #4
 800097e:	2500      	movs	r5, #0
 8000980:	ed2d 8b04 	vpush	{d8-d9}
 8000984:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 8000988:	edd0 8a0e 	vldr	s17, [r0, #56]	@ 0x38
 800098c:	6820      	ldr	r0, [r4, #0]
 800098e:	eeb0 8a40 	vmov.f32	s16, s0
 8000992:	f00a ffe7 	bl	800b964 <SPD_GetAvrgMecSpeedUnit>
 8000996:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
 800099a:	0092      	lsls	r2, r2, #2
 800099c:	4944      	ldr	r1, [pc, #272]	@ (8000ab0 <??DataTable2_4>)
 800099e:	ed94 0a21 	vldr	s0, [r4, #132]	@ 0x84
 80009a2:	fb82 0101 	smull	r0, r1, r2, r1
 80009a6:	1088      	asrs	r0, r1, #2
 80009a8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80009ac:	ee00 0a90 	vmov	s1, r0
 80009b0:	eeb8 9ae0 	vcvt.f32.s32	s18, s1
 80009b4:	edd4 0a22 	vldr	s1, [r4, #136]	@ 0x88
 80009b8:	ee38 1a49 	vsub.f32	s2, s16, s18
 80009bc:	eef5 0a40 	vcmp.f32	s1, #0.0
 80009c0:	ee20 0a01 	vmul.f32	s0, s0, s2
 80009c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c8:	bf08      	it	eq
 80009ca:	eddf 1a37 	vldreq	s3, [pc, #220]	@ 8000aa8 <??DataTable2_2>
 80009ce:	d009      	beq.n	80009e4 <??OTT_SpeedCtrl_0>
 80009d0:	edd4 1a25 	vldr	s3, [r4, #148]	@ 0x94
 80009d4:	ee31 1a61 	vsub.f32	s2, s2, s3
 80009d8:	edd4 1a24 	vldr	s3, [r4, #144]	@ 0x90
 80009dc:	ee41 1a20 	vmla.f32	s3, s2, s1
 80009e0:	ee30 0a21 	vadd.f32	s0, s0, s3

080009e4 <??OTT_SpeedCtrl_0>:
 80009e4:	f8b4 1078 	ldrh.w	r1, [r4, #120]	@ 0x78
 80009e8:	edc4 1a24 	vstr	s3, [r4, #144]	@ 0x90
 80009ec:	4608      	mov	r0, r1
 80009ee:	ee01 0a10 	vmov	s2, r0
 80009f2:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 80009f6:	eeb4 1a40 	vcmp.f32	s2, s0
 80009fa:	eef0 0a40 	vmov.f32	s1, s0
 80009fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a02:	bf48      	it	mi
 8000a04:	eef0 0a41 	vmovmi.f32	s1, s2
 8000a08:	4249      	negs	r1, r1
 8000a0a:	ee01 1a10 	vmov	s2, r1
 8000a0e:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8000a12:	eeb4 0a41 	vcmp.f32	s0, s2
 8000a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a1a:	bf48      	it	mi
 8000a1c:	eef0 0a41 	vmovmi.f32	s1, s2
 8000a20:	ee30 1a60 	vsub.f32	s2, s0, s1
 8000a24:	ed94 0a23 	vldr	s0, [r4, #140]	@ 0x8c
 8000a28:	68e0      	ldr	r0, [r4, #12]
 8000a2a:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8000a2e:	ee21 0a00 	vmul.f32	s0, s2, s0
 8000a32:	ee10 1a90 	vmov	r1, s1
 8000a36:	ed84 0a25 	vstr	s0, [r4, #148]	@ 0x94
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	b209      	sxth	r1, r1
 8000a3e:	f00b f805 	bl	800ba4c <STC_ExecRamp>
 8000a42:	ee28 0a28 	vmul.f32	s0, s16, s17
 8000a46:	eeb4 9a40 	vcmp.f32	s18, s0
 8000a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a4e:	d41e      	bmi.n	8000a8e <??OTT_SpeedCtrl_1>
 8000a50:	eeb4 9a48 	vcmp.f32	s18, s16
 8000a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a58:	d40a      	bmi.n	8000a70 <??OTT_SpeedCtrl_2>
 8000a5a:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8000a5e:	ee30 0a68 	vsub.f32	s0, s0, s17
 8000a62:	ee20 0a08 	vmul.f32	s0, s0, s16
 8000a66:	eeb4 9a40 	vcmp.f32	s18, s0
 8000a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a6e:	d50e      	bpl.n	8000a8e <??OTT_SpeedCtrl_1>

08000a70 <??OTT_SpeedCtrl_2>:
 8000a70:	f894 106c 	ldrb.w	r1, [r4, #108]	@ 0x6c
 8000a74:	1c49      	adds	r1, r1, #1
 8000a76:	b248      	sxtb	r0, r1
 8000a78:	2814      	cmp	r0, #20
 8000a7a:	bfa4      	itt	ge
 8000a7c:	2114      	movge	r1, #20
 8000a7e:	2501      	movge	r5, #1
 8000a80:	f884 106c 	strb.w	r1, [r4, #108]	@ 0x6c
 8000a84:	4628      	mov	r0, r5
 8000a86:	ecbd 8b04 	vpop	{d8-d9}
 8000a8a:	b001      	add	sp, #4
 8000a8c:	bd30      	pop	{r4, r5, pc}

08000a8e <??OTT_SpeedCtrl_1>:
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f884 106c 	strb.w	r1, [r4, #108]	@ 0x6c
 8000a94:	4628      	mov	r0, r5
 8000a96:	ecbd 8b04 	vpop	{d8-d9}
 8000a9a:	b001      	add	sp, #4
 8000a9c:	bd30      	pop	{r4, r5, pc}
	...

08000aa0 <??DataTable2>:
 8000aa0:	47ae 3f21                                   .G!?

08000aa4 <??DataTable2_1>:
 8000aa4:	c49c 3f20                                   .. ?

08000aa8 <??DataTable2_2>:
 8000aa8:	0000 0000                                   ....

08000aac <??DataTable2_3>:
 8000aac:	00d8 2000                                   ... 

08000ab0 <??DataTable2_4>:
 8000ab0:	6667 6666                                   gfff

08000ab4 <SCC_Init>:
 8000ab4:	b530      	push	{r4, r5, lr}
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	b081      	sub	sp, #4
 8000aba:	f8df 0418 	ldr.w	r0, [pc, #1048]	@ 8000ed4 <??DataTable3_4>
 8000abe:	63a0      	str	r0, [r4, #56]	@ 0x38
 8000ac0:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8000ac4:	f00a fddc 	bl	800b680 <REMNG_Init>
 8000ac8:	2100      	movs	r1, #0
 8000aca:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 8000ace:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	f000 f8de 	bl	8000c94 <SCC_InitKeDetRevup>
 8000ad8:	f8d4 0548 	ldr.w	r0, [r4, #1352]	@ 0x548
 8000adc:	2100      	movs	r1, #0
 8000ade:	f884 1128 	strb.w	r1, [r4, #296]	@ 0x128
 8000ae2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000ae6:	edd0 0a00 	vldr	s1, [r0]
 8000aea:	6920      	ldr	r0, [r4, #16]
 8000aec:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8000af0:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8000af4:	edc4 0a11 	vstr	s1, [r4, #68]	@ 0x44
 8000af8:	ed84 0a10 	vstr	s0, [r4, #64]	@ 0x40
 8000afc:	f00a ff7a 	bl	800b9f4 <SPD_GetElToMecRatio>
 8000b00:	ee00 0a10 	vmov	s0, r0
 8000b04:	f8d4 0548 	ldr.w	r0, [r4, #1352]	@ 0x548
 8000b08:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8000b0c:	ed84 0a12 	vstr	s0, [r4, #72]	@ 0x48
 8000b10:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8000b14:	ed90 1a13 	vldr	s2, [r0, #76]	@ 0x4c
 8000b18:	ed90 0a09 	vldr	s0, [r0, #36]	@ 0x24
 8000b1c:	ee61 0a20 	vmul.f32	s1, s2, s1
 8000b20:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8000b24:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8000b28:	ee10 1a10 	vmov	r1, s0
 8000b2c:	f8a4 104c 	strh.w	r1, [r4, #76]	@ 0x4c
 8000b30:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8000b34:	edd0 0a06 	vldr	s1, [r0, #24]
 8000b38:	ed90 1a07 	vldr	s2, [r0, #28]
 8000b3c:	ee20 0a80 	vmul.f32	s0, s1, s0
 8000b40:	ee20 1a01 	vmul.f32	s2, s0, s2
 8000b44:	ed90 0a13 	vldr	s0, [r0, #76]	@ 0x4c
 8000b48:	ee80 0a01 	vdiv.f32	s0, s0, s2
 8000b4c:	ed84 0a14 	vstr	s0, [r4, #80]	@ 0x50
 8000b50:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8000b54:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8000b56:	6561      	str	r1, [r4, #84]	@ 0x54
 8000b58:	2100      	movs	r1, #0
 8000b5a:	edd0 0a0b 	vldr	s1, [r0, #44]	@ 0x2c
 8000b5e:	ee20 0a80 	vmul.f32	s0, s1, s0
 8000b62:	ed84 0a17 	vstr	s0, [r4, #92]	@ 0x5c
 8000b66:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8000b68:	65a0      	str	r0, [r4, #88]	@ 0x58
 8000b6a:	6621      	str	r1, [r4, #96]	@ 0x60
 8000b6c:	6661      	str	r1, [r4, #100]	@ 0x64
 8000b6e:	66a1      	str	r1, [r4, #104]	@ 0x68
 8000b70:	66e1      	str	r1, [r4, #108]	@ 0x6c
 8000b72:	f884 1090 	strb.w	r1, [r4, #144]	@ 0x90
 8000b76:	f8c4 1094 	str.w	r1, [r4, #148]	@ 0x94
 8000b7a:	f8c4 1098 	str.w	r1, [r4, #152]	@ 0x98
 8000b7e:	f884 109c 	strb.w	r1, [r4, #156]	@ 0x9c
 8000b82:	f8c4 10a0 	str.w	r1, [r4, #160]	@ 0xa0
 8000b86:	f8c4 10a4 	str.w	r1, [r4, #164]	@ 0xa4
 8000b8a:	f8c4 10a8 	str.w	r1, [r4, #168]	@ 0xa8
 8000b8e:	f8c4 10ac 	str.w	r1, [r4, #172]	@ 0xac
 8000b92:	f8c4 10b0 	str.w	r1, [r4, #176]	@ 0xb0
 8000b96:	f8c4 10b4 	str.w	r1, [r4, #180]	@ 0xb4
 8000b9a:	f8c4 10b8 	str.w	r1, [r4, #184]	@ 0xb8
 8000b9e:	f884 1540 	strb.w	r1, [r4, #1344]	@ 0x540
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	f001 fb14 	bl	80021d0 <SCC_KeDetectionInit>
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f8c4 00d0 	str.w	r0, [r4, #208]	@ 0xd0
 8000bae:	f8c4 00d4 	str.w	r0, [r4, #212]	@ 0xd4
 8000bb2:	f8c4 00d8 	str.w	r0, [r4, #216]	@ 0xd8
 8000bb6:	f884 00dc 	strb.w	r0, [r4, #220]	@ 0xdc
 8000bba:	eddf 0ac2 	vldr	s1, [pc, #776]	@ 8000ec4 <??DataTable3>
 8000bbe:	f8d4 0548 	ldr.w	r0, [r4, #1352]	@ 0x548
 8000bc2:	4ac5      	ldr	r2, [pc, #788]	@ (8000ed8 <??DataTable3_5>)
 8000bc4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8000bc6:	f8c4 10e0 	str.w	r1, [r4, #224]	@ 0xe0
 8000bca:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8000bcc:	fb81 3202 	smull	r3, r2, r1, r2
 8000bd0:	ee00 1a10 	vmov	s0, r1
 8000bd4:	1092      	asrs	r2, r2, #2
 8000bd6:	f8c4 10e4 	str.w	r1, [r4, #228]	@ 0xe4
 8000bda:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8000bde:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8000be2:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000be6:	f8c4 20ec 	str.w	r2, [r4, #236]	@ 0xec
 8000bea:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8000bee:	2100      	movs	r1, #0
 8000bf0:	f8c4 50ec 	str.w	r5, [r4, #236]	@ 0xec
 8000bf4:	edc4 0a3a 	vstr	s1, [r4, #232]	@ 0xe8
 8000bf8:	f8a4 1130 	strh.w	r1, [r4, #304]	@ 0x130
 8000bfc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8000bfe:	f8c4 2134 	str.w	r2, [r4, #308]	@ 0x134
 8000c02:	f884 1138 	strb.w	r1, [r4, #312]	@ 0x138
 8000c06:	f884 1541 	strb.w	r1, [r4, #1345]	@ 0x541
 8000c0a:	b001      	add	sp, #4
 8000c0c:	bd30      	pop	{r4, r5, pc}
	...

08000c10 <SCC_CMD>:
 8000c10:	b530      	push	{r4, r5, lr}
 8000c12:	b081      	sub	sp, #4
 8000c14:	4605      	mov	r5, r0
 8000c16:	7810      	ldrb	r0, [r2, #0]
 8000c18:	2400      	movs	r4, #0
 8000c1a:	2806      	cmp	r0, #6
 8000c1c:	d833      	bhi.n	8000c86 <??SCC_CMD_1>
 8000c1e:	e8df f000 	tbb	[pc, r0]

08000c22 <??SCC_CMD_0>:
 8000c22:	0419 241f 2e29 000b                         ...$)...

08000c2a <??SCC_CMD_2>:
 8000c2a:	49ac      	ldr	r1, [pc, #688]	@ (8000edc <??DataTable3_6>)
 8000c2c:	f891 0034 	ldrb.w	r0, [r1, #52]	@ 0x34
 8000c30:	b128      	cbz	r0, 8000c3e <??SCC_CMD_3>
 8000c32:	280a      	cmp	r0, #10
 8000c34:	d127      	bne.n	8000c86 <??SCC_CMD_1>
 8000c36:	e002      	b.n	8000c3e <??SCC_CMD_3>

08000c38 <??SCC_CMD_4>:
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f885 0541 	strb.w	r0, [r5, #1345]	@ 0x541

08000c3e <??SCC_CMD_3>:
 8000c3e:	4628      	mov	r0, r5
 8000c40:	f001 fa19 	bl	8002076 <SCC_ForceProfile>
 8000c44:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8000c46:	f7ff fe90 	bl	800096a <OTT_ForceTuning>
 8000c4a:	f003 f8df 	bl	8003e0c <MC_AcknowledgeFaultMotor1>
 8000c4e:	f003 f8d1 	bl	8003df4 <MC_StartMotor1>
 8000c52:	e019      	b.n	8000c88 <??SCC_CMD_5>

08000c54 <??SCC_CMD_6>:
 8000c54:	4628      	mov	r0, r5
 8000c56:	f000 f856 	bl	8000d06 <SCC_Stop>
 8000c5a:	f003 f8d1 	bl	8003e00 <MC_StopMotor1>
 8000c5e:	e013      	b.n	8000c88 <??SCC_CMD_5>

08000c60 <??SCC_CMD_7>:
 8000c60:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8000c62:	b180      	cbz	r0, 8000c86 <??SCC_CMD_1>
 8000c64:	2101      	movs	r1, #1
 8000c66:	7441      	strb	r1, [r0, #17]
 8000c68:	e00e      	b.n	8000c88 <??SCC_CMD_5>

08000c6a <??SCC_CMD_8>:
 8000c6a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8000c6c:	b158      	cbz	r0, 8000c86 <??SCC_CMD_1>
 8000c6e:	2101      	movs	r1, #1
 8000c70:	74c1      	strb	r1, [r0, #19]
 8000c72:	e009      	b.n	8000c88 <??SCC_CMD_5>

08000c74 <??SCC_CMD_9>:
 8000c74:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8000c76:	b130      	cbz	r0, 8000c86 <??SCC_CMD_1>
 8000c78:	2101      	movs	r1, #1
 8000c7a:	7501      	strb	r1, [r0, #20]
 8000c7c:	e004      	b.n	8000c88 <??SCC_CMD_5>

08000c7e <??SCC_CMD_10>:
 8000c7e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8000c80:	b108      	cbz	r0, 8000c86 <??SCC_CMD_1>
 8000c82:	7444      	strb	r4, [r0, #17]
 8000c84:	e000      	b.n	8000c88 <??SCC_CMD_5>

08000c86 <??SCC_CMD_1>:
 8000c86:	2402      	movs	r4, #2

08000c88 <??SCC_CMD_5>:
 8000c88:	9904      	ldr	r1, [sp, #16]
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	8008      	strh	r0, [r1, #0]
 8000c8e:	b001      	add	sp, #4
 8000c90:	4620      	mov	r0, r4
 8000c92:	bd30      	pop	{r4, r5, pc}

08000c94 <SCC_InitKeDetRevup>:
 8000c94:	2100      	movs	r1, #0
 8000c96:	f880 103f 	strb.w	r1, [r0, #63]	@ 0x3f
 8000c9a:	f880 10f0 	strb.w	r1, [r0, #240]	@ 0xf0
 8000c9e:	f8a0 111c 	strh.w	r1, [r0, #284]	@ 0x11c
 8000ca2:	f880 111e 	strb.w	r1, [r0, #286]	@ 0x11e
 8000ca6:	f8a0 1120 	strh.w	r1, [r0, #288]	@ 0x120
 8000caa:	f8c0 1124 	str.w	r1, [r0, #292]	@ 0x124
 8000cae:	f8c0 113c 	str.w	r1, [r0, #316]	@ 0x13c
 8000cb2:	4770      	bx	lr

08000cb4 <SCC_Start>:
 8000cb4:	b510      	push	{r4, lr}
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f894 103f 	ldrb.w	r1, [r4, #63]	@ 0x3f
 8000cbe:	2904      	cmp	r1, #4
 8000cc0:	d106      	bne.n	8000cd0 <??SCC_Start_0>
 8000cc2:	f884 00f0 	strb.w	r0, [r4, #240]	@ 0xf0
 8000cc6:	2208      	movs	r2, #8
 8000cc8:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
 8000ccc:	2001      	movs	r0, #1
 8000cce:	bd10      	pop	{r4, pc}

08000cd0 <??SCC_Start_0>:
 8000cd0:	f894 1034 	ldrb.w	r1, [r4, #52]	@ 0x34
 8000cd4:	b9b1      	cbnz	r1, 8000d04 <??SCC_Start_1>
 8000cd6:	6820      	ldr	r0, [r4, #0]
 8000cd8:	f004 fb26 	bl	8005328 <PWMC_RLDetectionModeEnable>
 8000cdc:	2000      	movs	r0, #0
 8000cde:	2101      	movs	r1, #1
 8000ce0:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
 8000ce4:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 8000ce8:	4620      	mov	r0, r4
 8000cea:	f7ff ffd3 	bl	8000c94 <SCC_InitKeDetRevup>
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f884 0128 	strb.w	r0, [r4, #296]	@ 0x128
 8000cf4:	f884 0090 	strb.w	r0, [r4, #144]	@ 0x90
 8000cf8:	f884 009c 	strb.w	r0, [r4, #156]	@ 0x9c
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8000d00:	6562      	str	r2, [r4, #84]	@ 0x54
 8000d02:	87a0      	strh	r0, [r4, #60]	@ 0x3c

08000d04 <??SCC_Start_1>:
 8000d04:	bd10      	pop	{r4, pc}

08000d06 <SCC_Stop>:
 8000d06:	b510      	push	{r4, lr}
 8000d08:	4604      	mov	r4, r0
 8000d0a:	6820      	ldr	r0, [r4, #0]
 8000d0c:	f004 fb0e 	bl	800532c <PWMC_RLDetectionModeDisable>
 8000d10:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8000d14:	2806      	cmp	r0, #6
 8000d16:	bf18      	it	ne
 8000d18:	2807      	cmpne	r0, #7
 8000d1a:	d004      	beq.n	8000d26 <??SCC_Stop_0>
 8000d1c:	280a      	cmp	r0, #10
 8000d1e:	bf1c      	itt	ne
 8000d20:	2000      	movne	r0, #0
 8000d22:	f884 0034 	strbne.w	r0, [r4, #52]	@ 0x34

08000d26 <??SCC_Stop_0>:
 8000d26:	bd10      	pop	{r4, pc}

08000d28 <SCC_CheckOC_RL>:
 8000d28:	b570      	push	{r4, r5, r6, lr}
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f894 1034 	ldrb.w	r1, [r4, #52]	@ 0x34
 8000d30:	1e49      	subs	r1, r1, #1
 8000d32:	2907      	cmp	r1, #7
 8000d34:	f200 80c4 	bhi.w	8000ec0 <??SCC_CheckOC_RL_1>
 8000d38:	e8df f001 	tbb	[pc, r1]

08000d3c <??SCC_CheckOC_RL_0>:
 8000d3c:	0404 0404 c226 4bc2                         ....&..K

08000d44 <??SCC_CheckOC_RL_2>:
 8000d44:	6820      	ldr	r0, [r4, #0]
 8000d46:	f004 fad3 	bl	80052f0 <PWMC_IsFaultOccurred>
 8000d4a:	0005      	movs	r5, r0
 8000d4c:	d016      	beq.n	8000d7c <??SCC_CheckOC_RL_3>
 8000d4e:	2007      	movs	r0, #7
 8000d50:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 8000d54:	6820      	ldr	r0, [r4, #0]
 8000d56:	f004 fa7f 	bl	8005258 <PWMC_SwitchOffPWM>
 8000d5a:	43e8      	mvns	r0, r5
 8000d5c:	b282      	uxth	r2, r0
 8000d5e:	4629      	mov	r1, r5
 8000d60:	f8df 0dac 	ldr.w	r0, [pc, #3500]	@ 8001b10 <??DataTable4>
 8000d64:	f003 f892 	bl	8003e8c <MCI_FaultProcessing>
 8000d68:	edd4 0a4b 	vldr	s1, [r4, #300]	@ 0x12c
 8000d6c:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 8000ec8 <??DataTable3_1>
 8000d70:	ee20 0a80 	vmul.f32	s0, s1, s0
 8000d74:	4620      	mov	r0, r4
 8000d76:	f001 fd65 	bl	8002844 <SCC_SetNominalCurrent>
 8000d7a:	e09c      	b.n	8000eb6 <??SCC_CheckOC_RL_4>

08000d7c <??SCC_CheckOC_RL_3>:
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	f001 f8ed 	bl	8001f5c <SCC_GetCurrent>
 8000d82:	ed84 0a4b 	vstr	s0, [r4, #300]	@ 0x12c
 8000d86:	bd70      	pop	{r4, r5, r6, pc}

08000d88 <??SCC_CheckOC_RL_5>:
 8000d88:	6820      	ldr	r0, [r4, #0]
 8000d8a:	f004 fab1 	bl	80052f0 <PWMC_IsFaultOccurred>
 8000d8e:	0005      	movs	r5, r0
 8000d90:	f000 8096 	beq.w	8000ec0 <??SCC_CheckOC_RL_1>
 8000d94:	2007      	movs	r0, #7
 8000d96:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 8000d9a:	6820      	ldr	r0, [r4, #0]
 8000d9c:	f004 fa5c 	bl	8005258 <PWMC_SwitchOffPWM>
 8000da0:	43e8      	mvns	r0, r5
 8000da2:	b282      	uxth	r2, r0
 8000da4:	4629      	mov	r1, r5
 8000da6:	f8df 0d68 	ldr.w	r0, [pc, #3432]	@ 8001b10 <??DataTable4>
 8000daa:	f003 f86f 	bl	8003e8c <MCI_FaultProcessing>
 8000dae:	edd4 0a4b 	vldr	s1, [r4, #300]	@ 0x12c
 8000db2:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 8000ec8 <??DataTable3_1>
 8000db6:	ee20 0a80 	vmul.f32	s0, s1, s0
 8000dba:	4620      	mov	r0, r4
 8000dbc:	f001 fd42 	bl	8002844 <SCC_SetNominalCurrent>
 8000dc0:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8000dc2:	f8c4 012c 	str.w	r0, [r4, #300]	@ 0x12c
 8000dc6:	f8df 0d54 	ldr.w	r0, [pc, #3412]	@ 8001b1c <??DataTable4_3>
 8000dca:	8801      	ldrh	r1, [r0, #0]
 8000dcc:	1c49      	adds	r1, r1, #1
 8000dce:	8001      	strh	r1, [r0, #0]
 8000dd0:	bd70      	pop	{r4, r5, r6, pc}

08000dd2 <??SCC_CheckOC_RL_6>:
 8000dd2:	f894 003f 	ldrb.w	r0, [r4, #63]	@ 0x3f
 8000dd6:	2804      	cmp	r0, #4
 8000dd8:	d072      	beq.n	8000ec0 <??SCC_CheckOC_RL_1>
 8000dda:	6820      	ldr	r0, [r4, #0]
 8000ddc:	f004 fa88 	bl	80052f0 <PWMC_IsFaultOccurred>
 8000de0:	0005      	movs	r5, r0
 8000de2:	d06d      	beq.n	8000ec0 <??SCC_CheckOC_RL_1>
 8000de4:	ed94 0a4b 	vldr	s0, [r4, #300]	@ 0x12c
 8000de8:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8000ec8 <??DataTable3_1>
 8000dec:	ee20 0a20 	vmul.f32	s0, s0, s1
 8000df0:	4620      	mov	r0, r4
 8000df2:	f001 fd27 	bl	8002844 <SCC_SetNominalCurrent>
 8000df6:	f8d4 0548 	ldr.w	r0, [r4, #1352]	@ 0x548
 8000dfa:	ed94 0a15 	vldr	s0, [r4, #84]	@ 0x54
 8000dfe:	ed84 0a4b 	vstr	s0, [r4, #300]	@ 0x12c
 8000e02:	ed9f 1a32 	vldr	s2, [pc, #200]	@ 8000ecc <??DataTable3_2>
 8000e06:	edd0 1a06 	vldr	s3, [r0, #24]
 8000e0a:	edd0 0a07 	vldr	s1, [r0, #28]
 8000e0e:	ee21 1a81 	vmul.f32	s2, s3, s2
 8000e12:	ee61 0a20 	vmul.f32	s1, s2, s1
 8000e16:	ed90 1a13 	vldr	s2, [r0, #76]	@ 0x4c
 8000e1a:	ee80 1a81 	vdiv.f32	s2, s1, s2
 8000e1e:	ee21 0a00 	vmul.f32	s0, s2, s0
 8000e22:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8000e26:	ee10 0a10 	vmov	r0, s0
 8000e2a:	1e46      	subs	r6, r0, #1
 8000e2c:	6a20      	ldr	r0, [r4, #32]
 8000e2e:	b232      	sxth	r2, r6
 8000e30:	2100      	movs	r1, #0
 8000e32:	f00a fd91 	bl	800b958 <RUC_SetPhaseFinalTorque>
 8000e36:	6a20      	ldr	r0, [r4, #32]
 8000e38:	b232      	sxth	r2, r6
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	f00a fd8c 	bl	800b958 <RUC_SetPhaseFinalTorque>
 8000e40:	6a20      	ldr	r0, [r4, #32]
 8000e42:	b232      	sxth	r2, r6
 8000e44:	2102      	movs	r1, #2
 8000e46:	f00a fd87 	bl	800b958 <RUC_SetPhaseFinalTorque>
 8000e4a:	6a20      	ldr	r0, [r4, #32]
 8000e4c:	b232      	sxth	r2, r6
 8000e4e:	2103      	movs	r1, #3
 8000e50:	f00a fd82 	bl	800b958 <RUC_SetPhaseFinalTorque>
 8000e54:	6a20      	ldr	r0, [r4, #32]
 8000e56:	b232      	sxth	r2, r6
 8000e58:	2104      	movs	r1, #4
 8000e5a:	f00a fd7d 	bl	800b958 <RUC_SetPhaseFinalTorque>
 8000e5e:	f894 00f0 	ldrb.w	r0, [r4, #240]	@ 0xf0
 8000e62:	2801      	cmp	r0, #1
 8000e64:	d11a      	bne.n	8000e9c <??SCC_CheckOC_RL_7>
 8000e66:	6920      	ldr	r0, [r4, #16]
 8000e68:	f00a fd7c 	bl	800b964 <SPD_GetAvrgMecSpeedUnit>
 8000e6c:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
 8000e70:	0092      	lsls	r2, r2, #2
 8000e72:	4919      	ldr	r1, [pc, #100]	@ (8000ed8 <??DataTable3_5>)
 8000e74:	fb82 0101 	smull	r0, r1, r2, r1
 8000e78:	1088      	asrs	r0, r1, #2
 8000e7a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8000e7e:	ee00 0a10 	vmov	s0, r0
 8000e82:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8000e86:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8000ed0 <??DataTable3_3>
 8000e8a:	ee60 0a20 	vmul.f32	s1, s0, s1
 8000e8e:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8000e92:	edc4 0a3a 	vstr	s1, [r4, #232]	@ 0xe8
 8000e96:	4620      	mov	r0, r4
 8000e98:	f001 fc66 	bl	8002768 <SCC_UpdateRevup>

08000e9c <??SCC_CheckOC_RL_7>:
 8000e9c:	2006      	movs	r0, #6
 8000e9e:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 8000ea2:	6820      	ldr	r0, [r4, #0]
 8000ea4:	f004 f9d8 	bl	8005258 <PWMC_SwitchOffPWM>
 8000ea8:	43e8      	mvns	r0, r5
 8000eaa:	b282      	uxth	r2, r0
 8000eac:	4629      	mov	r1, r5
 8000eae:	f8df 0c60 	ldr.w	r0, [pc, #3168]	@ 8001b10 <??DataTable4>
 8000eb2:	f002 ffeb 	bl	8003e8c <MCI_FaultProcessing>

08000eb6 <??SCC_CheckOC_RL_4>:
 8000eb6:	f8df 1c64 	ldr.w	r1, [pc, #3172]	@ 8001b1c <??DataTable4_3>
 8000eba:	8808      	ldrh	r0, [r1, #0]
 8000ebc:	1c40      	adds	r0, r0, #1
 8000ebe:	8008      	strh	r0, [r1, #0]

08000ec0 <??SCC_CheckOC_RL_1>:
 8000ec0:	bd70      	pop	{r4, r5, r6, pc}
	...

08000ec4 <??DataTable3>:
 8000ec4:	cccd 3ecc                                   ...>

08000ec8 <??DataTable3_1>:
 8000ec8:	6666 3f66                                   fff?

08000ecc <??DataTable3_2>:
 8000ecc:	0000 4780                                   ...G

08000ed0 <??DataTable3_3>:
 8000ed0:	cccd 3f4c                                   ..L?

08000ed4 <??DataTable3_4>:
 8000ed4:	063c 2000                                   <.. 

08000ed8 <??DataTable3_5>:
 8000ed8:	6667 6666                                   gfff

08000edc <??DataTable3_6>:
 8000edc:	00f0 2000                                   ... 

08000ee0 <SCC_SetPhaseVoltage>:
 8000ee0:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8000ee2:	ed2d 8b04 	vpush	{d8-d9}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	a904      	add	r1, sp, #16
 8000eea:	2000      	movs	r0, #0
 8000eec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8000eee:	f8ad 0004 	strh.w	r0, [sp, #4]
 8000ef2:	6008      	str	r0, [r1, #0]
 8000ef4:	2400      	movs	r4, #0
 8000ef6:	6b90      	ldr	r0, [r2, #56]	@ 0x38
 8000ef8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8000efa:	9000      	str	r0, [sp, #0]
 8000efc:	f891 0034 	ldrb.w	r0, [r1, #52]	@ 0x34
 8000f00:	280d      	cmp	r0, #13
 8000f02:	f200 85f9 	bhi.w	8001af8 <??SCC_SetPhaseVoltage_5>
 8000f06:	e8df f010 	tbh	[pc, r0, lsl #1]

08000f0a <??SCC_SetPhaseVoltage_0>:
 8000f0a:	05cf 000e 00bc 000e 00f3 01f7 05c6 05f7     ................
 8000f1a:	03a1 05ba 05f7 000e 007e 0096               ........~...

08000f26 <??SCC_SetPhaseVoltage_6>:
 8000f26:	ed91 0a15 	vldr	s0, [r1, #84]	@ 0x54
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	f001 f8ea 	bl	8002104 <SCC_CurrCtrl>
 8000f30:	2801      	cmp	r0, #1
 8000f32:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8000f34:	d140      	bne.n	8000fb8 <??SCC_SetPhaseVoltage_7>
 8000f36:	f891 0034 	ldrb.w	r0, [r1, #52]	@ 0x34
 8000f3a:	2801      	cmp	r0, #1
 8000f3c:	d10f      	bne.n	8000f5e <??SCC_SetPhaseVoltage_8>
 8000f3e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8000f40:	2102      	movs	r1, #2
 8000f42:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34
 8000f46:	9800      	ldr	r0, [sp, #0]
 8000f48:	f00a fb9a 	bl	800b680 <REMNG_Init>
 8000f4c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8000f4e:	f8d1 0548 	ldr.w	r0, [r1, #1352]	@ 0x548
 8000f52:	8e42      	ldrh	r2, [r0, #50]	@ 0x32
 8000f54:	9800      	ldr	r0, [sp, #0]
 8000f56:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8000f5a:	f00a fbe1 	bl	800b720 <REMNG_ExecRamp>

08000f5e <??SCC_SetPhaseVoltage_8>:
 8000f5e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8000f60:	f891 0034 	ldrb.w	r0, [r1, #52]	@ 0x34
 8000f64:	2803      	cmp	r0, #3
 8000f66:	d10e      	bne.n	8000f86 <??SCC_SetPhaseVoltage_9>
 8000f68:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8000f6a:	2104      	movs	r1, #4
 8000f6c:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34
 8000f70:	9800      	ldr	r0, [sp, #0]
 8000f72:	f00a fb85 	bl	800b680 <REMNG_Init>
 8000f76:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8000f78:	f8d1 0548 	ldr.w	r0, [r1, #1352]	@ 0x548
 8000f7c:	8e82      	ldrh	r2, [r0, #52]	@ 0x34
 8000f7e:	8f89      	ldrh	r1, [r1, #60]	@ 0x3c
 8000f80:	9800      	ldr	r0, [sp, #0]
 8000f82:	f00a fbcd 	bl	800b720 <REMNG_ExecRamp>

08000f86 <??SCC_SetPhaseVoltage_9>:
 8000f86:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8000f88:	f891 0034 	ldrb.w	r0, [r1, #52]	@ 0x34
 8000f8c:	280b      	cmp	r0, #11
 8000f8e:	f040 80a8 	bne.w	80010e2 <??SCC_SetPhaseVoltage_10>
 8000f92:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8000f94:	210c      	movs	r1, #12
 8000f96:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34
 8000f9a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8000f9c:	f8c0 4544 	str.w	r4, [r0, #1348]	@ 0x544
 8000fa0:	9800      	ldr	r0, [sp, #0]
 8000fa2:	f00a fb6d 	bl	800b680 <REMNG_Init>
 8000fa6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8000fa8:	f8d1 0548 	ldr.w	r0, [r1, #1352]	@ 0x548
 8000fac:	8e82      	ldrh	r2, [r0, #52]	@ 0x34
 8000fae:	8f89      	ldrh	r1, [r1, #60]	@ 0x3c
 8000fb0:	9800      	ldr	r0, [sp, #0]
 8000fb2:	f00a fbb5 	bl	800b720 <REMNG_ExecRamp>
 8000fb6:	e094      	b.n	80010e2 <??SCC_SetPhaseVoltage_10>

08000fb8 <??SCC_SetPhaseVoltage_7>:
 8000fb8:	8f8a      	ldrh	r2, [r1, #60]	@ 0x3c
 8000fba:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8000fbe:	4282      	cmp	r2, r0
 8000fc0:	f040 808f 	bne.w	80010e2 <??SCC_SetPhaseVoltage_10>
 8000fc4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8000fc6:	8784      	strh	r4, [r0, #60]	@ 0x3c
 8000fc8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8000fca:	f000 ffc7 	bl	8001f5c <SCC_GetCurrent>
 8000fce:	eef0 0a40 	vmov.f32	s1, s0
 8000fd2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8000fd4:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8000fd8:	ee20 0a80 	vmul.f32	s0, s1, s0
 8000fdc:	ed81 0a15 	vstr	s0, [r1, #84]	@ 0x54
 8000fe0:	f06f 0013 	mvn.w	r0, #19
 8000fe4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8000fe6:	f881 00dc 	strb.w	r0, [r1, #220]	@ 0xdc
 8000fea:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8000fec:	f890 109c 	ldrb.w	r1, [r0, #156]	@ 0x9c
 8000ff0:	1c49      	adds	r1, r1, #1
 8000ff2:	f880 109c 	strb.w	r1, [r0, #156]	@ 0x9c
 8000ff6:	b2c9      	uxtb	r1, r1
 8000ff8:	2903      	cmp	r1, #3
 8000ffa:	d372      	bcc.n	80010e2 <??SCC_SetPhaseVoltage_10>
 8000ffc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8000ffe:	2009      	movs	r0, #9
 8001000:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 8001004:	e06d      	b.n	80010e2 <??SCC_SetPhaseVoltage_10>

08001006 <??SCC_SetPhaseVoltage_11>:
 8001006:	4608      	mov	r0, r1
 8001008:	ed90 0a15 	vldr	s0, [r0, #84]	@ 0x54
 800100c:	f001 f87a 	bl	8002104 <SCC_CurrCtrl>
 8001010:	9800      	ldr	r0, [sp, #0]
 8001012:	f00a fb3d 	bl	800b690 <REMNG_Calc>
 8001016:	9800      	ldr	r0, [sp, #0]
 8001018:	f00a fb5c 	bl	800b6d4 <REMNG_RampCompleted>
 800101c:	2800      	cmp	r0, #0
 800101e:	f000 8571 	beq.w	8001b04 <??SCC_SetPhaseVoltage_12>
 8001022:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001024:	200d      	movs	r0, #13
 8001026:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 800102a:	b008      	add	sp, #32
 800102c:	4620      	mov	r0, r4
 800102e:	ecbd 8b04 	vpop	{d8-d9}
 8001032:	b001      	add	sp, #4
 8001034:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001036 <??SCC_SetPhaseVoltage_13>:
 8001036:	f8d1 0544 	ldr.w	r0, [r1, #1348]	@ 0x544
 800103a:	f8df 1b04 	ldr.w	r1, [pc, #2820]	@ 8001b40 <??DataTable4_12>
 800103e:	4288      	cmp	r0, r1
 8001040:	d209      	bcs.n	8001056 <??SCC_SetPhaseVoltage_14>
 8001042:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001044:	1c40      	adds	r0, r0, #1
 8001046:	f8c1 0544 	str.w	r0, [r1, #1348]	@ 0x544
 800104a:	b008      	add	sp, #32
 800104c:	4620      	mov	r0, r4
 800104e:	ecbd 8b04 	vpop	{d8-d9}
 8001052:	b001      	add	sp, #4
 8001054:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001056 <??SCC_SetPhaseVoltage_14>:
 8001056:	f8df 0aec 	ldr.w	r0, [pc, #2796]	@ 8001b44 <??DataTable4_13>
 800105a:	6800      	ldr	r0, [r0, #0]
 800105c:	f004 f8fc 	bl	8005258 <PWMC_SwitchOffPWM>
 8001060:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001062:	f7ff fe50 	bl	8000d06 <SCC_Stop>
 8001066:	f002 fecb 	bl	8003e00 <MC_StopMotor1>
 800106a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800106c:	f8c1 4544 	str.w	r4, [r1, #1348]	@ 0x544
 8001070:	4620      	mov	r0, r4
 8001072:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001074:	f881 4541 	strb.w	r4, [r1, #1345]	@ 0x541
 8001078:	b008      	add	sp, #32
 800107a:	ecbd 8b04 	vpop	{d8-d9}
 800107e:	b001      	add	sp, #4
 8001080:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001082 <??SCC_SetPhaseVoltage_15>:
 8001082:	4608      	mov	r0, r1
 8001084:	ed90 0a15 	vldr	s0, [r0, #84]	@ 0x54
 8001088:	f001 f83c 	bl	8002104 <SCC_CurrCtrl>
 800108c:	9800      	ldr	r0, [sp, #0]
 800108e:	f00a faff 	bl	800b690 <REMNG_Calc>
 8001092:	9800      	ldr	r0, [sp, #0]
 8001094:	f00a fb1e 	bl	800b6d4 <REMNG_RampCompleted>
 8001098:	b318      	cbz	r0, 80010e2 <??SCC_SetPhaseVoltage_10>
 800109a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800109c:	f890 1541 	ldrb.w	r1, [r0, #1345]	@ 0x541
 80010a0:	2901      	cmp	r1, #1
 80010a2:	bf0c      	ite	eq
 80010a4:	200b      	moveq	r0, #11
 80010a6:	2003      	movne	r0, #3
 80010a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80010aa:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 80010ae:	eef5 0a00 	vmov.f32	s1, #80	@ 0x3e800000  0.250
 80010b2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80010b4:	f8c0 40ac 	str.w	r4, [r0, #172]	@ 0xac
 80010b8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80010ba:	f8c0 40b0 	str.w	r4, [r0, #176]	@ 0xb0
 80010be:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80010c0:	f8c0 40b4 	str.w	r4, [r0, #180]	@ 0xb4
 80010c4:	f06f 0013 	mvn.w	r0, #19
 80010c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80010ca:	ed91 0a15 	vldr	s0, [r1, #84]	@ 0x54
 80010ce:	ee20 0a20 	vmul.f32	s0, s0, s1
 80010d2:	ed81 0a15 	vstr	s0, [r1, #84]	@ 0x54
 80010d6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80010d8:	ed81 0a17 	vstr	s0, [r1, #92]	@ 0x5c
 80010dc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80010de:	f881 00dc 	strb.w	r0, [r1, #220]	@ 0xdc

080010e2 <??SCC_SetPhaseVoltage_10>:
 80010e2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80010e4:	8f81      	ldrh	r1, [r0, #60]	@ 0x3c
 80010e6:	6800      	ldr	r0, [r0, #0]
 80010e8:	f004 f922 	bl	8005330 <PWMC_RLDetectionModeSetDuty>
 80010ec:	f000 bd09 	b.w	8001b02 <??SCC_SetPhaseVoltage_16>

080010f0 <??SCC_SetPhaseVoltage_17>:
 80010f0:	4608      	mov	r0, r1
 80010f2:	ed90 0a15 	vldr	s0, [r0, #84]	@ 0x54
 80010f6:	f001 f805 	bl	8002104 <SCC_CurrCtrl>
 80010fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80010fc:	8f88      	ldrh	r0, [r1, #60]	@ 0x3c
 80010fe:	f8ad 0004 	strh.w	r0, [sp, #4]
 8001102:	9800      	ldr	r0, [sp, #0]
 8001104:	f00a fac4 	bl	800b690 <REMNG_Calc>
 8001108:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800110a:	f000 ff27 	bl	8001f5c <SCC_GetCurrent>
 800110e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001110:	eef0 0a40 	vmov.f32	s1, s0
 8001114:	ed90 0a2b 	vldr	s0, [r0, #172]	@ 0xac
 8001118:	ee30 0a20 	vadd.f32	s0, s0, s1
 800111c:	ed80 0a2b 	vstr	s0, [r0, #172]	@ 0xac
 8001120:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 800131c <??SCC_SetPhaseVoltage_2>
 8001124:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001126:	f8d1 00b4 	ldr.w	r0, [r1, #180]	@ 0xb4
 800112a:	1c40      	adds	r0, r0, #1
 800112c:	f8c1 00b4 	str.w	r0, [r1, #180]	@ 0xb4
 8001130:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001132:	6841      	ldr	r1, [r0, #4]
 8001134:	88c8      	ldrh	r0, [r1, #6]
 8001136:	8849      	ldrh	r1, [r1, #2]
 8001138:	ee00 0a10 	vmov	s0, r0
 800113c:	ee01 1a10 	vmov	s2, r1
 8001140:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001144:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 8001148:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800114a:	ee20 1a01 	vmul.f32	s2, s0, s2
 800114e:	ee21 0a20 	vmul.f32	s0, s2, s1
 8001152:	ed80 0a18 	vstr	s0, [r0, #96]	@ 0x60
 8001156:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800115a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800115c:	ee01 1a10 	vmov	s2, r1
 8001160:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 8001164:	ee21 1a20 	vmul.f32	s2, s2, s1
 8001168:	edd0 0a2c 	vldr	s1, [r0, #176]	@ 0xb0
 800116c:	ee41 0a00 	vmla.f32	s1, s2, s0
 8001170:	edc0 0a2c 	vstr	s1, [r0, #176]	@ 0xb0
 8001174:	9800      	ldr	r0, [sp, #0]
 8001176:	f00a faad 	bl	800b6d4 <REMNG_RampCompleted>
 800117a:	2800      	cmp	r0, #0
 800117c:	f000 825b 	beq.w	8001636 <??SCC_SetPhaseVoltage_18>
 8001180:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001182:	ed90 0a2d 	vldr	s0, [r0, #180]	@ 0xb4
 8001186:	eef8 0a40 	vcvt.f32.u32	s1, s0
 800118a:	ed90 0a2b 	vldr	s0, [r0, #172]	@ 0xac
 800118e:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8001192:	ed80 0a25 	vstr	s0, [r0, #148]	@ 0x94
 8001196:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001198:	f890 2090 	ldrb.w	r2, [r0, #144]	@ 0x90
 800119c:	edd0 0a2d 	vldr	s1, [r0, #180]	@ 0xb4
 80011a0:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 80011a4:	eeb8 1a60 	vcvt.f32.u32	s2, s1
 80011a8:	edd0 0a2c 	vldr	s1, [r0, #176]	@ 0xb0
 80011ac:	ed83 0a1c 	vstr	s0, [r3, #112]	@ 0x70
 80011b0:	eec0 0a81 	vdiv.f32	s1, s1, s2
 80011b4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80011b6:	f890 2090 	ldrb.w	r2, [r0, #144]	@ 0x90
 80011ba:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 80011be:	edc3 0a20 	vstr	s1, [r3, #128]	@ 0x80
 80011c2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80011c4:	f890 1090 	ldrb.w	r1, [r0, #144]	@ 0x90
 80011c8:	1c49      	adds	r1, r1, #1
 80011ca:	f880 1090 	strb.w	r1, [r0, #144]	@ 0x90
 80011ce:	b2c9      	uxtb	r1, r1
 80011d0:	2904      	cmp	r1, #4
 80011d2:	d21b      	bcs.n	800120c <??SCC_SetPhaseVoltage_19>
 80011d4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80011d6:	edd0 0a15 	vldr	s1, [r0, #84]	@ 0x54
 80011da:	ed90 0a17 	vldr	s0, [r0, #92]	@ 0x5c
 80011de:	ee30 0a80 	vadd.f32	s0, s1, s0
 80011e2:	ed80 0a15 	vstr	s0, [r0, #84]	@ 0x54
 80011e6:	f06f 0113 	mvn.w	r1, #19
 80011ea:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80011ec:	f880 10dc 	strb.w	r1, [r0, #220]	@ 0xdc
 80011f0:	2003      	movs	r0, #3
 80011f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80011f4:	f8c1 40ac 	str.w	r4, [r1, #172]	@ 0xac
 80011f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80011fa:	f8c1 40b0 	str.w	r4, [r1, #176]	@ 0xb0
 80011fe:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001200:	f8c1 40b4 	str.w	r4, [r1, #180]	@ 0xb4
 8001204:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001206:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 800120a:	e214      	b.n	8001636 <??SCC_SetPhaseVoltage_18>

0800120c <??SCC_SetPhaseVoltage_19>:
 800120c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800120e:	2005      	movs	r0, #5
 8001210:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 8001214:	ed9f 8a42 	vldr	s16, [pc, #264]	@ 8001320 <??SCC_SetPhaseVoltage_2+0x4>
 8001218:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800121a:	f880 403e 	strb.w	r4, [r0, #62]	@ 0x3e
 800121e:	9800      	ldr	r0, [sp, #0]
 8001220:	f00a fa2e 	bl	800b680 <REMNG_Init>
 8001224:	9800      	ldr	r0, [sp, #0]
 8001226:	2264      	movs	r2, #100	@ 0x64
 8001228:	f64e 2160 	movw	r1, #60000	@ 0xea60
 800122c:	f00a fa78 	bl	800b720 <REMNG_ExecRamp>
 8001230:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001232:	aa05      	add	r2, sp, #20
 8001234:	f05f 0003 	movs.w	r0, #3

08001238 <??SCC_SetPhaseVoltage_20>:
 8001238:	edd1 0a21 	vldr	s1, [r1, #132]	@ 0x84
 800123c:	ed91 0a20 	vldr	s0, [r1, #128]	@ 0x80
 8001240:	ed91 1a1c 	vldr	s2, [r1, #112]	@ 0x70
 8001244:	ee30 0ac0 	vsub.f32	s0, s1, s0
 8001248:	edd1 0a1d 	vldr	s1, [r1, #116]	@ 0x74
 800124c:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8001250:	1d09      	adds	r1, r1, #4
 8001252:	ee80 0a01 	vdiv.f32	s0, s0, s2
 8001256:	ed82 0a00 	vstr	s0, [r2]
 800125a:	1d12      	adds	r2, r2, #4
 800125c:	1e40      	subs	r0, r0, #1
 800125e:	ee38 8a00 	vadd.f32	s16, s16, s0
 8001262:	d1e9      	bne.n	8001238 <??SCC_SetPhaseVoltage_20>
 8001264:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001266:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 800126a:	eec8 0a00 	vdiv.f32	s1, s16, s0
 800126e:	edc0 0a19 	vstr	s1, [r0, #100]	@ 0x64
 8001272:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001274:	f8d1 1548 	ldr.w	r1, [r1, #1352]	@ 0x548
 8001278:	f891 0040 	ldrb.w	r0, [r1, #64]	@ 0x40
 800127c:	bb48      	cbnz	r0, 80012d2 <??SCC_SetPhaseVoltage_21>
 800127e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001280:	ed91 0a0a 	vldr	s0, [r1, #40]	@ 0x28
 8001284:	ee30 0ac0 	vsub.f32	s0, s1, s0
 8001288:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8001324 <??SCC_SetPhaseVoltage_2+0x8>
 800128c:	eeb4 0a60 	vcmp.f32	s0, s1
 8001290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001294:	ed80 0a19 	vstr	s0, [r0, #100]	@ 0x64
 8001298:	d504      	bpl.n	80012a4 <??SCC_SetPhaseVoltage_22>
 800129a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800129c:	f8df 1d4c 	ldr.w	r1, [pc, #3404]	@ 8001fec <??DataTable8_3>
 80012a0:	6641      	str	r1, [r0, #100]	@ 0x64
 80012a2:	e006      	b.n	80012b2 <??SCC_SetPhaseVoltage_23>

080012a4 <??SCC_SetPhaseVoltage_22>:
 80012a4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80012a6:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 80012aa:	ee20 0a20 	vmul.f32	s0, s0, s1
 80012ae:	ed80 0a19 	vstr	s0, [r0, #100]	@ 0x64

080012b2 <??SCC_SetPhaseVoltage_23>:
 80012b2:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8001328 <??SCC_SetPhaseVoltage_2+0xc>
 80012b6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80012b8:	edd0 0a25 	vldr	s1, [r0, #148]	@ 0x94
 80012bc:	ee20 0a80 	vmul.f32	s0, s1, s0
 80012c0:	ed80 0a26 	vstr	s0, [r0, #152]	@ 0x98
 80012c4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80012c6:	f8c0 40a8 	str.w	r4, [r0, #168]	@ 0xa8
 80012ca:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80012cc:	f8c0 40a4 	str.w	r4, [r0, #164]	@ 0xa4
 80012d0:	e1b1      	b.n	8001636 <??SCC_SetPhaseVoltage_18>

080012d2 <??SCC_SetPhaseVoltage_21>:
 80012d2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80012d4:	210a      	movs	r1, #10
 80012d6:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34
 80012da:	2108      	movs	r1, #8
 80012dc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80012de:	68c2      	ldr	r2, [r0, #12]
 80012e0:	77d1      	strb	r1, [r2, #31]
 80012e2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80012e4:	6800      	ldr	r0, [r0, #0]
 80012e6:	f003 ffb7 	bl	8005258 <PWMC_SwitchOffPWM>
 80012ea:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80012ec:	6800      	ldr	r0, [r0, #0]
 80012ee:	f004 f81d 	bl	800532c <PWMC_RLDetectionModeDisable>
 80012f2:	f8ad 4004 	strh.w	r4, [sp, #4]
 80012f6:	e19e      	b.n	8001636 <??SCC_SetPhaseVoltage_18>

080012f8 <??SCC_SetPhaseVoltage_24>:
 80012f8:	4608      	mov	r0, r1
 80012fa:	f000 fe2f 	bl	8001f5c <SCC_GetCurrent>
 80012fe:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001300:	f891 003e 	ldrb.w	r0, [r1, #62]	@ 0x3e
 8001304:	b110      	cbz	r0, 800130c <??SCC_SetPhaseVoltage_25>
 8001306:	2802      	cmp	r0, #2
 8001308:	d010      	beq.n	800132c <??SCC_SetPhaseVoltage_26>
 800130a:	e024      	b.n	8001356 <??SCC_SetPhaseVoltage_27>

0800130c <??SCC_SetPhaseVoltage_25>:
 800130c:	eddf 0acd 	vldr	s1, [pc, #820]	@ 8001644 <??SCC_SetPhaseVoltage_3>
 8001310:	eeb4 0a60 	vcmp.f32	s0, s1
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d51d      	bpl.n	8001356 <??SCC_SetPhaseVoltage_27>
 800131a:	e019      	b.n	8001350 <??SCC_SetPhaseVoltage_28>

0800131c <??SCC_SetPhaseVoltage_2>:
 800131c:	0000 3780 0000 0000 cccd 3e4c d29e 3f21     ...7......L>..!?

0800132c <??SCC_SetPhaseVoltage_26>:
 800132c:	8f88      	ldrh	r0, [r1, #60]	@ 0x3c
 800132e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001330:	f8ad 0004 	strh.w	r0, [sp, #4]
 8001334:	edd1 0a26 	vldr	s1, [r1, #152]	@ 0x98
 8001338:	eeb4 0a60 	vcmp.f32	s0, s1
 800133c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001340:	d506      	bpl.n	8001350 <??SCC_SetPhaseVoltage_28>
 8001342:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001344:	f8d1 00a0 	ldr.w	r0, [r1, #160]	@ 0xa0
 8001348:	1c40      	adds	r0, r0, #1
 800134a:	f8c1 00a0 	str.w	r0, [r1, #160]	@ 0xa0
 800134e:	e002      	b.n	8001356 <??SCC_SetPhaseVoltage_27>

08001350 <??SCC_SetPhaseVoltage_28>:
 8001350:	9800      	ldr	r0, [sp, #0]
 8001352:	f00a f9c5 	bl	800b6e0 <REMNG_StopRamp>

08001356 <??SCC_SetPhaseVoltage_27>:
 8001356:	9800      	ldr	r0, [sp, #0]
 8001358:	f00a f99a 	bl	800b690 <REMNG_Calc>
 800135c:	9800      	ldr	r0, [sp, #0]
 800135e:	f00a f9b9 	bl	800b6d4 <REMNG_RampCompleted>
 8001362:	2800      	cmp	r0, #0
 8001364:	f000 8167 	beq.w	8001636 <??SCC_SetPhaseVoltage_18>
 8001368:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800136a:	f890 103e 	ldrb.w	r1, [r0, #62]	@ 0x3e
 800136e:	b119      	cbz	r1, 8001378 <??SCC_SetPhaseVoltage_29>
 8001370:	2902      	cmp	r1, #2
 8001372:	d012      	beq.n	800139a <??SCC_SetPhaseVoltage_30>
 8001374:	d309      	bcc.n	800138a <??SCC_SetPhaseVoltage_31>
 8001376:	e15e      	b.n	8001636 <??SCC_SetPhaseVoltage_18>

08001378 <??SCC_SetPhaseVoltage_29>:
 8001378:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800137a:	2001      	movs	r0, #1
 800137c:	f881 003e 	strb.w	r0, [r1, #62]	@ 0x3e
 8001380:	9800      	ldr	r0, [sp, #0]
 8001382:	f00a f97d 	bl	800b680 <REMNG_Init>
 8001386:	220a      	movs	r2, #10
 8001388:	e150      	b.n	800162c <??SCC_SetPhaseVoltage_32>

0800138a <??SCC_SetPhaseVoltage_31>:
 800138a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800138c:	2002      	movs	r0, #2
 800138e:	f881 003e 	strb.w	r0, [r1, #62]	@ 0x3e
 8001392:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001394:	f8c1 40a0 	str.w	r4, [r1, #160]	@ 0xa0
 8001398:	e144      	b.n	8001624 <??SCC_SetPhaseVoltage_33>

0800139a <??SCC_SetPhaseVoltage_30>:
 800139a:	f880 403e 	strb.w	r4, [r0, #62]	@ 0x3e
 800139e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80013a0:	ed91 0a28 	vldr	s0, [r1, #160]	@ 0xa0
 80013a4:	edd1 0a10 	vldr	s1, [r1, #64]	@ 0x40
 80013a8:	ed91 1a2a 	vldr	s2, [r1, #168]	@ 0xa8
 80013ac:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80013b0:	ee20 0a20 	vmul.f32	s0, s0, s1
 80013b4:	edd1 0a19 	vldr	s1, [r1, #100]	@ 0x64
 80013b8:	ee00 1a20 	vmla.f32	s2, s0, s1
 80013bc:	ed81 1a2a 	vstr	s2, [r1, #168]	@ 0xa8
 80013c0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80013c2:	f8d0 10a4 	ldr.w	r1, [r0, #164]	@ 0xa4
 80013c6:	1c49      	adds	r1, r1, #1
 80013c8:	2914      	cmp	r1, #20
 80013ca:	f8c0 10a4 	str.w	r1, [r0, #164]	@ 0xa4
 80013ce:	f040 8129 	bne.w	8001624 <??SCC_SetPhaseVoltage_33>
 80013d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80013d4:	2006      	movs	r0, #6
 80013d6:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 80013da:	2008      	movs	r0, #8
 80013dc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80013de:	68ca      	ldr	r2, [r1, #12]
 80013e0:	77d0      	strb	r0, [r2, #31]
 80013e2:	2610      	movs	r6, #16
 80013e4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80013e6:	6800      	ldr	r0, [r0, #0]
 80013e8:	f003 ff36 	bl	8005258 <PWMC_SwitchOffPWM>
 80013ec:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80013ee:	6800      	ldr	r0, [r0, #0]
 80013f0:	f003 ff9c 	bl	800532c <PWMC_RLDetectionModeDisable>
 80013f4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80013f6:	f8ad 4004 	strh.w	r4, [sp, #4]
 80013fa:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 8001648 <??SCC_SetPhaseVoltage_3+0x4>
 80013fe:	ed91 0a29 	vldr	s0, [r1, #164]	@ 0xa4
 8001402:	edd1 0a2a 	vldr	s1, [r1, #168]	@ 0xa8
 8001406:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800140a:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800140e:	ed81 0a1a 	vstr	s0, [r1, #104]	@ 0x68
 8001412:	2510      	movs	r5, #16
 8001414:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001416:	6841      	ldr	r1, [r0, #4]
 8001418:	88c8      	ldrh	r0, [r1, #6]
 800141a:	884a      	ldrh	r2, [r1, #2]
 800141c:	ee00 0a10 	vmov	s0, r0
 8001420:	ee00 2a90 	vmov	s1, r2
 8001424:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001428:	eef8 0a60 	vcvt.f32.u32	s1, s1
 800142c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800142e:	ee60 0a20 	vmul.f32	s1, s0, s1
 8001432:	ee20 0a81 	vmul.f32	s0, s1, s2
 8001436:	ed81 0a18 	vstr	s0, [r1, #96]	@ 0x60
 800143a:	2110      	movs	r1, #16
 800143c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800143e:	f8d0 0548 	ldr.w	r0, [r0, #1352]	@ 0x548
 8001442:	edd0 0a06 	vldr	s1, [r0, #24]
 8001446:	ee60 0a20 	vmul.f32	s1, s0, s1
 800144a:	ed90 0a07 	vldr	s0, [r0, #28]
 800144e:	ee20 0a80 	vmul.f32	s0, s1, s0
 8001452:	edd0 0a13 	vldr	s1, [r0, #76]	@ 0x4c
 8001456:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001458:	ed90 2a19 	vldr	s4, [r0, #100]	@ 0x64
 800145c:	edd0 1a4d 	vldr	s3, [r0, #308]	@ 0x134
 8001460:	ed90 1a38 	vldr	s2, [r0, #224]	@ 0xe0
 8001464:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8001468:	edd0 0a1a 	vldr	s1, [r0, #104]	@ 0x68
 800146c:	ee60 0aa1 	vmul.f32	s1, s1, s3
 8001470:	ee62 1a21 	vmul.f32	s3, s4, s3
 8001474:	ed90 2a10 	vldr	s4, [r0, #64]	@ 0x40
 8001478:	eec0 0a80 	vdiv.f32	s1, s1, s0
 800147c:	ee61 1a82 	vmul.f32	s3, s3, s4
 8001480:	ee20 1a81 	vmul.f32	s2, s1, s2
 8001484:	ee81 0a80 	vdiv.f32	s0, s3, s0
 8001488:	2000      	movs	r0, #0
 800148a:	f04f 0c0f 	mov.w	ip, #15
 800148e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001492:	2301      	movs	r3, #1

08001494 <??SCC_SetPhaseVoltage_34>:
 8001494:	fa03 f70c 	lsl.w	r7, r3, ip
 8001498:	ee01 7a90 	vmov	s3, r7
 800149c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80014a0:	ee61 1aa0 	vmul.f32	s3, s3, s1
 80014a4:	eefd 1ae1 	vcvt.s32.f32	s3, s3
 80014a8:	ee11 7a90 	vmov	r7, s3
 80014ac:	4297      	cmp	r7, r2
 80014ae:	da08      	bge.n	80014c2 <??SCC_SetPhaseVoltage_35>
 80014b0:	4661      	mov	r1, ip
 80014b2:	e006      	b.n	80014c2 <??SCC_SetPhaseVoltage_35>

080014b4 <??SCC_SetPhaseVoltage_36>:
 80014b4:	4666      	mov	r6, ip
 80014b6:	e017      	b.n	80014e8 <??SCC_SetPhaseVoltage_37>

080014b8 <??SCC_SetPhaseVoltage_38>:
 80014b8:	fa1f fe81 	uxth.w	lr, r1
 80014bc:	f1be 0f10 	cmp.w	lr, #16
 80014c0:	d0e8      	beq.n	8001494 <??SCC_SetPhaseVoltage_34>

080014c2 <??SCC_SetPhaseVoltage_35>:
 80014c2:	fa1f fe86 	uxth.w	lr, r6
 80014c6:	f1be 0f10 	cmp.w	lr, #16
 80014ca:	d10d      	bne.n	80014e8 <??SCC_SetPhaseVoltage_37>
 80014cc:	fa03 f00c 	lsl.w	r0, r3, ip
 80014d0:	ee01 0a90 	vmov	s3, r0
 80014d4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80014d8:	ee61 1a81 	vmul.f32	s3, s3, s2
 80014dc:	eefd 1ae1 	vcvt.s32.f32	s3, s3
 80014e0:	ee11 0a90 	vmov	r0, s3
 80014e4:	4290      	cmp	r0, r2
 80014e6:	dbe5      	blt.n	80014b4 <??SCC_SetPhaseVoltage_36>

080014e8 <??SCC_SetPhaseVoltage_37>:
 80014e8:	fa1f fe85 	uxth.w	lr, r5
 80014ec:	f1be 0f10 	cmp.w	lr, #16
 80014f0:	d10e      	bne.n	8001510 <??SCC_SetPhaseVoltage_39>
 80014f2:	fa03 f40c 	lsl.w	r4, r3, ip
 80014f6:	ee01 4a90 	vmov	s3, r4
 80014fa:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80014fe:	ee61 1a80 	vmul.f32	s3, s3, s0
 8001502:	eefd 1ae1 	vcvt.s32.f32	s3, s3
 8001506:	ee11 4a90 	vmov	r4, s3
 800150a:	4294      	cmp	r4, r2
 800150c:	bfb8      	it	lt
 800150e:	4665      	movlt	r5, ip

08001510 <??SCC_SetPhaseVoltage_39>:
 8001510:	f1bc 0c01 	subs.w	ip, ip, #1
 8001514:	d5d0      	bpl.n	80014b8 <??SCC_SetPhaseVoltage_38>
 8001516:	9002      	str	r0, [sp, #8]
 8001518:	b288      	uxth	r0, r1
 800151a:	2810      	cmp	r0, #16
 800151c:	d00a      	beq.n	8001534 <??SCC_SetPhaseVoltage_40>
 800151e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001520:	6980      	ldr	r0, [r0, #24]
 8001522:	b289      	uxth	r1, r1
 8001524:	f009 f88e 	bl	800a644 <PID_SetKPDivisorPOW2>
 8001528:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800152a:	6980      	ldr	r0, [r0, #24]
 800152c:	b239      	sxth	r1, r7
 800152e:	f009 f879 	bl	800a624 <PID_SetKP>
 8001532:	e003      	b.n	800153c <??SCC_SetPhaseVoltage_41>

08001534 <??SCC_SetPhaseVoltage_40>:
 8001534:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001536:	2109      	movs	r1, #9
 8001538:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34

0800153c <??SCC_SetPhaseVoltage_41>:
 800153c:	b2b0      	uxth	r0, r6
 800153e:	2810      	cmp	r0, #16
 8001540:	d00b      	beq.n	800155a <??SCC_SetPhaseVoltage_42>
 8001542:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001544:	69c0      	ldr	r0, [r0, #28]
 8001546:	b2b1      	uxth	r1, r6
 8001548:	f009 f87c 	bl	800a644 <PID_SetKPDivisorPOW2>
 800154c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800154e:	9902      	ldr	r1, [sp, #8]
 8001550:	69c0      	ldr	r0, [r0, #28]
 8001552:	b209      	sxth	r1, r1
 8001554:	f009 f866 	bl	800a624 <PID_SetKP>
 8001558:	e003      	b.n	8001562 <??SCC_SetPhaseVoltage_43>

0800155a <??SCC_SetPhaseVoltage_42>:
 800155a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800155c:	2109      	movs	r1, #9
 800155e:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34

08001562 <??SCC_SetPhaseVoltage_43>:
 8001562:	b2a8      	uxth	r0, r5
 8001564:	2810      	cmp	r0, #16
 8001566:	d014      	beq.n	8001592 <??SCC_SetPhaseVoltage_44>
 8001568:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800156a:	6980      	ldr	r0, [r0, #24]
 800156c:	b2a9      	uxth	r1, r5
 800156e:	f009 f877 	bl	800a660 <PID_SetKIDivisorPOW2>
 8001572:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001574:	69c0      	ldr	r0, [r0, #28]
 8001576:	b2a9      	uxth	r1, r5
 8001578:	f009 f872 	bl	800a660 <PID_SetKIDivisorPOW2>
 800157c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800157e:	6980      	ldr	r0, [r0, #24]
 8001580:	b221      	sxth	r1, r4
 8001582:	f009 f851 	bl	800a628 <PID_SetKI>
 8001586:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001588:	69c0      	ldr	r0, [r0, #28]
 800158a:	b221      	sxth	r1, r4
 800158c:	f009 f84c 	bl	800a628 <PID_SetKI>
 8001590:	e003      	b.n	800159a <??SCC_SetPhaseVoltage_45>

08001592 <??SCC_SetPhaseVoltage_44>:
 8001592:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001594:	2109      	movs	r1, #9
 8001596:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34

0800159a <??SCC_SetPhaseVoltage_45>:
 800159a:	eddf 0ab1 	vldr	s1, [pc, #708]	@ 8001860 <??SCC_SetPhaseVoltage_4>
 800159e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80015a0:	f8d0 0548 	ldr.w	r0, [r0, #1352]	@ 0x548
 80015a4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80015a6:	ed90 0a06 	vldr	s0, [r0, #24]
 80015aa:	ed90 1a07 	vldr	s2, [r0, #28]
 80015ae:	ee60 0a20 	vmul.f32	s1, s0, s1
 80015b2:	ee20 1a81 	vmul.f32	s2, s1, s2
 80015b6:	ed90 0a13 	vldr	s0, [r0, #76]	@ 0x4c
 80015ba:	edd1 0a15 	vldr	s1, [r1, #84]	@ 0x54
 80015be:	ee81 0a00 	vdiv.f32	s0, s2, s0
 80015c2:	ee20 0a20 	vmul.f32	s0, s0, s1
 80015c6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80015ca:	ee10 0a10 	vmov	r0, s0
 80015ce:	1e44      	subs	r4, r0, #1
 80015d0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80015d2:	6a00      	ldr	r0, [r0, #32]
 80015d4:	b222      	sxth	r2, r4
 80015d6:	2100      	movs	r1, #0
 80015d8:	f00a f9be 	bl	800b958 <RUC_SetPhaseFinalTorque>
 80015dc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80015de:	6a00      	ldr	r0, [r0, #32]
 80015e0:	b222      	sxth	r2, r4
 80015e2:	2101      	movs	r1, #1
 80015e4:	f00a f9b8 	bl	800b958 <RUC_SetPhaseFinalTorque>
 80015e8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80015ea:	6a00      	ldr	r0, [r0, #32]
 80015ec:	b222      	sxth	r2, r4
 80015ee:	2102      	movs	r1, #2
 80015f0:	f00a f9b2 	bl	800b958 <RUC_SetPhaseFinalTorque>
 80015f4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80015f6:	6a00      	ldr	r0, [r0, #32]
 80015f8:	b222      	sxth	r2, r4
 80015fa:	2103      	movs	r1, #3
 80015fc:	f00a f9ac 	bl	800b958 <RUC_SetPhaseFinalTorque>
 8001600:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001602:	6a00      	ldr	r0, [r0, #32]
 8001604:	b222      	sxth	r2, r4
 8001606:	2104      	movs	r1, #4
 8001608:	f00a f9a6 	bl	800b958 <RUC_SetPhaseFinalTorque>
 800160c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800160e:	f8d1 0548 	ldr.w	r0, [r1, #1352]	@ 0x548
 8001612:	8e42      	ldrh	r2, [r0, #50]	@ 0x32
 8001614:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001616:	6a00      	ldr	r0, [r0, #32]
 8001618:	2100      	movs	r1, #0
 800161a:	f00a f991 	bl	800b940 <RUC_SetPhaseDurationms>
 800161e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001620:	f001 f8a2 	bl	8002768 <SCC_UpdateRevup>

08001624 <??SCC_SetPhaseVoltage_33>:
 8001624:	9800      	ldr	r0, [sp, #0]
 8001626:	f00a f82b 	bl	800b680 <REMNG_Init>
 800162a:	2264      	movs	r2, #100	@ 0x64

0800162c <??SCC_SetPhaseVoltage_32>:
 800162c:	9800      	ldr	r0, [sp, #0]
 800162e:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8001632:	f00a f875 	bl	800b720 <REMNG_ExecRamp>

08001636 <??SCC_SetPhaseVoltage_18>:
 8001636:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001638:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800163c:	6800      	ldr	r0, [r0, #0]
 800163e:	f003 fe77 	bl	8005330 <PWMC_RLDetectionModeSetDuty>
 8001642:	e25e      	b.n	8001b02 <??SCC_SetPhaseVoltage_16>

08001644 <??SCC_SetPhaseVoltage_3>:
 8001644:	d70a 3c23 0000 3780                         ..#<...7

0800164c <??SCC_SetPhaseVoltage_46>:
 800164c:	68c8      	ldr	r0, [r1, #12]
 800164e:	f002 fc65 	bl	8003f1c <MCI_GetSTMState>
 8001652:	2804      	cmp	r0, #4
 8001654:	bf18      	it	ne
 8001656:	2806      	cmpne	r0, #6
 8001658:	d005      	beq.n	8001666 <??SCC_SetPhaseVoltage_47>
 800165a:	2808      	cmp	r0, #8
 800165c:	f000 8202 	beq.w	8001a64 <??SCC_SetPhaseVoltage_48>
 8001660:	2813      	cmp	r0, #19
 8001662:	f040 8249 	bne.w	8001af8 <??SCC_SetPhaseVoltage_5>

08001666 <??SCC_SetPhaseVoltage_47>:
 8001666:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001668:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 800166a:	6941      	ldr	r1, [r0, #20]
 800166c:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
 8001670:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001672:	f8ad 0004 	strh.w	r0, [sp, #4]
 8001676:	6888      	ldr	r0, [r1, #8]
 8001678:	6800      	ldr	r0, [r0, #0]
 800167a:	f002 fd3f 	bl	80040fc <MCM_Clarke>
 800167e:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8001682:	4605      	mov	r5, r0
 8001684:	f002 fd7a 	bl	800417c <MCM_Park>
 8001688:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800168a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800168c:	9002      	str	r0, [sp, #8]
 800168e:	6888      	ldr	r0, [r1, #8]
 8001690:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 8001694:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8001698:	1a09      	subs	r1, r1, r0
 800169a:	6990      	ldr	r0, [r2, #24]
 800169c:	f009 f802 	bl	800a6a4 <PI_Controller>
 80016a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80016a2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80016a4:	f8ad 000c 	strh.w	r0, [sp, #12]
 80016a8:	6888      	ldr	r0, [r1, #8]
 80016aa:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 80016ae:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 80016b2:	1a09      	subs	r1, r1, r0
 80016b4:	69d0      	ldr	r0, [r2, #28]
 80016b6:	f008 fff5 	bl	800a6a4 <PI_Controller>
 80016ba:	f8ad 000e 	strh.w	r0, [sp, #14]
 80016be:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80016c0:	9903      	ldr	r1, [sp, #12]
 80016c2:	6940      	ldr	r0, [r0, #20]
 80016c4:	f008 fdbe 	bl	800a244 <Circle_Limitation>
 80016c8:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 80016cc:	4607      	mov	r7, r0
 80016ce:	f002 fd97 	bl	8004200 <MCM_Rev_Park>
 80016d2:	4606      	mov	r6, r0
 80016d4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80016d6:	6800      	ldr	r0, [r0, #0]
 80016d8:	4631      	mov	r1, r6
 80016da:	f003 fc75 	bl	8004fc8 <PWMC_SetPhaseVoltage>
 80016de:	4604      	mov	r4, r0
 80016e0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80016e2:	6881      	ldr	r1, [r0, #8]
 80016e4:	604d      	str	r5, [r1, #4]
 80016e6:	9506      	str	r5, [sp, #24]
 80016e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80016ea:	688a      	ldr	r2, [r1, #8]
 80016ec:	9802      	ldr	r0, [sp, #8]
 80016ee:	60d0      	str	r0, [r2, #12]
 80016f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80016f2:	6888      	ldr	r0, [r1, #8]
 80016f4:	f8c0 7016 	str.w	r7, [r0, #22]
 80016f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80016fa:	6891      	ldr	r1, [r2, #8]
 80016fc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80016fe:	f8d1 001a 	ldr.w	r0, [r1, #26]
 8001702:	9005      	str	r0, [sp, #20]
 8001704:	6891      	ldr	r1, [r2, #8]
 8001706:	f8c1 601a 	str.w	r6, [r1, #26]
 800170a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800170c:	6891      	ldr	r1, [r2, #8]
 800170e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8001712:	8408      	strh	r0, [r1, #32]
 8001714:	a905      	add	r1, sp, #20
 8001716:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8001718:	6850      	ldr	r0, [r2, #4]
 800171a:	88c0      	ldrh	r0, [r0, #6]
 800171c:	f8ad 001c 	strh.w	r0, [sp, #28]
 8001720:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001722:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8001724:	f00a fa2a 	bl	800bb7c <STO_PLL_CalcElAngle>
 8001728:	f8ad 0006 	strh.w	r0, [sp, #6]
 800172c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800172e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8001730:	f00a fbb6 	bl	800bea0 <STO_PLL_CalcAvrgElSpeedDpp>
 8001734:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001736:	6900      	ldr	r0, [r0, #16]
 8001738:	f10d 0106 	add.w	r1, sp, #6
 800173c:	f00a fcf8 	bl	800c130 <VSS_CalcElAngle>
 8001740:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001742:	f891 003f 	ldrb.w	r0, [r1, #63]	@ 0x3f
 8001746:	2805      	cmp	r0, #5
 8001748:	f200 81dc 	bhi.w	8001b04 <??SCC_SetPhaseVoltage_12>
 800174c:	e8df f010 	tbh	[pc, r0, lsl #1]

08001750 <??SCC_SetPhaseVoltage_1>:
 8001750:	0006 008a 01da 015a 01da 0173               ......Z...s.

0800175c <??SCC_SetPhaseVoltage_49>:
 800175c:	4608      	mov	r0, r1
 800175e:	f000 fd43 	bl	80021e8 <SCC_KeDetection>
 8001762:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001764:	f881 0128 	strb.w	r0, [r1, #296]	@ 0x128
 8001768:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800176a:	f890 0128 	ldrb.w	r0, [r0, #296]	@ 0x128
 800176e:	2802      	cmp	r0, #2
 8001770:	d125      	bne.n	80017be <??SCC_SetPhaseVoltage_50>
 8001772:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001774:	6900      	ldr	r0, [r0, #16]
 8001776:	f00a f8f5 	bl	800b964 <SPD_GetAvrgMecSpeedUnit>
 800177a:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
 800177e:	0089      	lsls	r1, r1, #2
 8001780:	f8df 03c4 	ldr.w	r0, [pc, #964]	@ 8001b48 <??DataTable4_14>
 8001784:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8001786:	fb81 2000 	smull	r2, r0, r1, r0
 800178a:	1080      	asrs	r0, r0, #2
 800178c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8001790:	f8c3 00e8 	str.w	r0, [r3, #232]	@ 0xe8
 8001794:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001796:	6900      	ldr	r0, [r0, #16]
 8001798:	f00a f8e4 	bl	800b964 <SPD_GetAvrgMecSpeedUnit>
 800179c:	4601      	mov	r1, r0
 800179e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80017a0:	f001 f83a 	bl	8002818 <SCC_SetMinStarupSpeedSTO>
 80017a4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80017a6:	2101      	movs	r1, #1
 80017a8:	f880 103f 	strb.w	r1, [r0, #63]	@ 0x3f
 80017ac:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80017ae:	f000 fd0f 	bl	80021d0 <SCC_KeDetectionInit>
 80017b2:	b008      	add	sp, #32
 80017b4:	4620      	mov	r0, r4
 80017b6:	ecbd 8b04 	vpop	{d8-d9}
 80017ba:	b001      	add	sp, #4
 80017bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017be <??SCC_SetPhaseVoltage_50>:
 80017be:	2801      	cmp	r0, #1
 80017c0:	f000 81a0 	beq.w	8001b04 <??SCC_SetPhaseVoltage_12>
 80017c4:	2803      	cmp	r0, #3
 80017c6:	d121      	bne.n	800180c <??SCC_SetPhaseVoltage_51>
 80017c8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80017ca:	ed90 0a3b 	vldr	s0, [r0, #236]	@ 0xec
 80017ce:	eebb 0aef 	vcvt.f32.u32	s0, s0, #1
 80017d2:	eefc 0ac0 	vcvt.u32.f32	s1, s0
 80017d6:	edc0 0a3b 	vstr	s1, [r0, #236]	@ 0xec
 80017da:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80017dc:	f000 ffc4 	bl	8002768 <SCC_UpdateRevup>
 80017e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80017e2:	2006      	movs	r0, #6
 80017e4:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 80017e8:	2008      	movs	r0, #8
 80017ea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80017ec:	68d1      	ldr	r1, [r2, #12]
 80017ee:	77c8      	strb	r0, [r1, #31]
 80017f0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80017f2:	6800      	ldr	r0, [r0, #0]
 80017f4:	f003 fd30 	bl	8005258 <PWMC_SwitchOffPWM>
 80017f8:	49c8      	ldr	r1, [pc, #800]	@ (8001b1c <??DataTable4_3>)
 80017fa:	8848      	ldrh	r0, [r1, #2]
 80017fc:	1c40      	adds	r0, r0, #1
 80017fe:	8048      	strh	r0, [r1, #2]
 8001800:	b008      	add	sp, #32
 8001802:	4620      	mov	r0, r4
 8001804:	ecbd 8b04 	vpop	{d8-d9}
 8001808:	b001      	add	sp, #4
 800180a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800180c <??SCC_SetPhaseVoltage_51>:
 800180c:	2804      	cmp	r0, #4
 800180e:	f040 8179 	bne.w	8001b04 <??SCC_SetPhaseVoltage_12>
 8001812:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001814:	ed90 0a49 	vldr	s0, [r0, #292]	@ 0x124
 8001818:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800181c:	eddf 0abd 	vldr	s1, [pc, #756]	@ 8001b14 <??DataTable4_1>
 8001820:	ee60 0a20 	vmul.f32	s1, s0, s1
 8001824:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8001828:	edc0 0a3a 	vstr	s1, [r0, #232]	@ 0xe8
 800182c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800182e:	f000 ff9b 	bl	8002768 <SCC_UpdateRevup>
 8001832:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001834:	2006      	movs	r0, #6
 8001836:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 800183a:	2008      	movs	r0, #8
 800183c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800183e:	68d1      	ldr	r1, [r2, #12]
 8001840:	77c8      	strb	r0, [r1, #31]
 8001842:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001844:	6800      	ldr	r0, [r0, #0]
 8001846:	f003 fd07 	bl	8005258 <PWMC_SwitchOffPWM>
 800184a:	49b4      	ldr	r1, [pc, #720]	@ (8001b1c <??DataTable4_3>)
 800184c:	8888      	ldrh	r0, [r1, #4]
 800184e:	1c40      	adds	r0, r0, #1
 8001850:	8088      	strh	r0, [r1, #4]
 8001852:	b008      	add	sp, #32
 8001854:	4620      	mov	r0, r4
 8001856:	ecbd 8b04 	vpop	{d8-d9}
 800185a:	b001      	add	sp, #4
 800185c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800185e:	bf00      	nop

08001860 <??SCC_SetPhaseVoltage_4>:
 8001860:	0000 4780                                   ...G

08001864 <??SCC_SetPhaseVoltage_52>:
 8001864:	688a      	ldr	r2, [r1, #8]
 8001866:	f8d1 0548 	ldr.w	r0, [r1, #1352]	@ 0x548
 800186a:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 800186e:	edd0 0a06 	vldr	s1, [r0, #24]
 8001872:	edd0 1a07 	vldr	s3, [r0, #28]
 8001876:	ed9f 1aa8 	vldr	s2, [pc, #672]	@ 8001b18 <??DataTable4_2>
 800187a:	ee20 1a81 	vmul.f32	s2, s1, s2
 800187e:	ee00 1a10 	vmov	s0, r1
 8001882:	ee61 1a21 	vmul.f32	s3, s2, s3
 8001886:	edd0 0a13 	vldr	s1, [r0, #76]	@ 0x4c
 800188a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800188c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001890:	eec0 0aa1 	vdiv.f32	s1, s1, s3
 8001894:	ed90 1a2f 	vldr	s2, [r0, #188]	@ 0xbc
 8001898:	ee00 1a20 	vmla.f32	s2, s0, s1
 800189c:	ed80 1a2f 	vstr	s2, [r0, #188]	@ 0xbc
 80018a0:	ed9f 1a9f 	vldr	s2, [pc, #636]	@ 8001b20 <??DataTable4_4>
 80018a4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80018a6:	6841      	ldr	r1, [r0, #4]
 80018a8:	88c8      	ldrh	r0, [r1, #6]
 80018aa:	8849      	ldrh	r1, [r1, #2]
 80018ac:	ee00 0a10 	vmov	s0, r0
 80018b0:	ee00 1a90 	vmov	s1, r1
 80018b4:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80018b8:	eef8 0a60 	vcvt.f32.u32	s1, s1
 80018bc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80018be:	ee60 0a20 	vmul.f32	s1, s0, s1
 80018c2:	ee20 0a81 	vmul.f32	s0, s1, s2
 80018c6:	ed80 0a18 	vstr	s0, [r0, #96]	@ 0x60
 80018ca:	eddf 0a96 	vldr	s1, [pc, #600]	@ 8001b24 <??DataTable4_5>
 80018ce:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80018d0:	6888      	ldr	r0, [r1, #8]
 80018d2:	f9b0 1016 	ldrsh.w	r1, [r0, #22]
 80018d6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80018d8:	ee01 1a10 	vmov	s2, r1
 80018dc:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80018e0:	ee21 0a00 	vmul.f32	s0, s2, s0
 80018e4:	ed90 1a30 	vldr	s2, [r0, #192]	@ 0xc0
 80018e8:	ee00 1a20 	vmla.f32	s2, s0, s1
 80018ec:	ed80 1a30 	vstr	s2, [r0, #192]	@ 0xc0
 80018f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80018f2:	6888      	ldr	r0, [r1, #8]
 80018f4:	f9b0 1018 	ldrsh.w	r1, [r0, #24]
 80018f8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80018fa:	ed90 1a18 	vldr	s2, [r0, #96]	@ 0x60
 80018fe:	ee00 1a10 	vmov	s0, r1
 8001902:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001906:	ee20 0a01 	vmul.f32	s0, s0, s2
 800190a:	ed90 1a31 	vldr	s2, [r0, #196]	@ 0xc4
 800190e:	ee00 1a20 	vmla.f32	s2, s0, s1
 8001912:	ed80 1a31 	vstr	s2, [r0, #196]	@ 0xc4
 8001916:	f242 7110 	movw	r1, #10000	@ 0x2710
 800191a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800191c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800191e:	f8d0 00cc 	ldr.w	r0, [r0, #204]	@ 0xcc
 8001922:	1c40      	adds	r0, r0, #1
 8001924:	4288      	cmp	r0, r1
 8001926:	f8c2 00cc 	str.w	r0, [r2, #204]	@ 0xcc
 800192a:	f0c0 80eb 	bcc.w	8001b04 <??SCC_SetPhaseVoltage_12>
 800192e:	ee00 0a10 	vmov	s0, r0
 8001932:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001934:	edd0 0a2f 	vldr	s1, [r0, #188]	@ 0xbc
 8001938:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800193c:	ee80 8a80 	vdiv.f32	s16, s1, s0
 8001940:	edd0 0a30 	vldr	s1, [r0, #192]	@ 0xc0
 8001944:	eec0 8a80 	vdiv.f32	s17, s1, s0
 8001948:	edd0 0a31 	vldr	s1, [r0, #196]	@ 0xc4
 800194c:	ee80 9a80 	vdiv.f32	s18, s1, s0
 8001950:	f000 fc3e 	bl	80021d0 <SCC_KeDetectionInit>
 8001954:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001956:	6900      	ldr	r0, [r0, #16]
 8001958:	f00a f804 	bl	800b964 <SPD_GetAvrgMecSpeedUnit>
 800195c:	ee00 0a10 	vmov	s0, r0
 8001960:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001962:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001966:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 800196a:	ed90 1a19 	vldr	s2, [r0, #100]	@ 0x64
 800196e:	eec0 0a20 	vdiv.f32	s1, s0, s1
 8001972:	ee41 8a48 	vmls.f32	s17, s2, s16
 8001976:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 8001b28 <??DataTable4_6>
 800197a:	ed90 1a12 	vldr	s2, [r0, #72]	@ 0x48
 800197e:	ee20 0a80 	vmul.f32	s0, s1, s0
 8001982:	ee20 1a81 	vmul.f32	s2, s1, s2
 8001986:	eddf 0a69 	vldr	s1, [pc, #420]	@ 8001b2c <??DataTable4_7>
 800198a:	ee61 0a20 	vmul.f32	s1, s2, s1
 800198e:	ed90 1a1a 	vldr	s2, [r0, #104]	@ 0x68
 8001992:	ee60 0a81 	vmul.f32	s1, s1, s2
 8001996:	ee00 9a88 	vmla.f32	s18, s1, s16
 800199a:	ee68 0aa8 	vmul.f32	s1, s17, s17
 800199e:	ee49 0a09 	vmla.f32	s1, s18, s18
 80019a2:	eef5 0a40 	vcmp.f32	s1, #0.0
 80019a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019aa:	db02      	blt.n	80019b2 <??SCC_SetPhaseVoltage_53>
 80019ac:	eef1 0ae0 	vsqrt.f32	s1, s1
 80019b0:	e001      	b.n	80019b6 <??SCC_SetPhaseVoltage_54>

080019b2 <??SCC_SetPhaseVoltage_53>:
 80019b2:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001b30 <??DataTable4_8>

080019b6 <??SCC_SetPhaseVoltage_54>:
 80019b6:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 8001b34 <??DataTable4_9>
 80019ba:	ee20 1a81 	vmul.f32	s2, s1, s2
 80019be:	eddf 1a5e 	vldr	s3, [pc, #376]	@ 8001b38 <??DataTable4_10>
 80019c2:	ee61 1a21 	vmul.f32	s3, s2, s3
 80019c6:	ee81 1a80 	vdiv.f32	s2, s3, s0
 80019ca:	ed80 1a1b 	vstr	s2, [r0, #108]	@ 0x6c
 80019ce:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80019d2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80019d4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80019d6:	ed81 1a26 	vstr	s2, [r1, #152]	@ 0x98
 80019da:	ed9f 1a58 	vldr	s2, [pc, #352]	@ 8001b3c <??DataTable4_11>
 80019de:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80019e0:	edd0 0a18 	vldr	s1, [r0, #96]	@ 0x60
 80019e4:	ee80 1a81 	vdiv.f32	s2, s1, s2
 80019e8:	ee20 0a01 	vmul.f32	s0, s0, s2
 80019ec:	ed80 0a34 	vstr	s0, [r0, #208]	@ 0xd0
 80019f0:	2102      	movs	r1, #2
 80019f2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80019f4:	f880 103f 	strb.w	r1, [r0, #63]	@ 0x3f
 80019f8:	b008      	add	sp, #32
 80019fa:	4620      	mov	r0, r4
 80019fc:	ecbd 8b04 	vpop	{d8-d9}
 8001a00:	b001      	add	sp, #4
 8001a02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a04 <??SCC_SetPhaseVoltage_55>:
 8001a04:	9800      	ldr	r0, [sp, #0]
 8001a06:	f009 fe43 	bl	800b690 <REMNG_Calc>
 8001a0a:	9800      	ldr	r0, [sp, #0]
 8001a0c:	f009 fe62 	bl	800b6d4 <REMNG_RampCompleted>
 8001a10:	2800      	cmp	r0, #0
 8001a12:	d077      	beq.n	8001b04 <??SCC_SetPhaseVoltage_12>
 8001a14:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001a16:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8001a18:	f009 ffa4 	bl	800b964 <SPD_GetAvrgMecSpeedUnit>
 8001a1c:	ee00 0a10 	vmov	s0, r0
 8001a20:	eeba 0a67 	vcvt.f32.s16	s0, s0, #1
 8001a24:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001a28:	ee10 1a10 	vmov	r1, s0
 8001a2c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001a2e:	b209      	sxth	r1, r1
 8001a30:	f000 fef2 	bl	8002818 <SCC_SetMinStarupSpeedSTO>
 8001a34:	e00c      	b.n	8001a50 <??SCC_SetPhaseVoltage_56>

08001a36 <??SCC_SetPhaseVoltage_57>:
 8001a36:	6a09      	ldr	r1, [r1, #32]
 8001a38:	6888      	ldr	r0, [r1, #8]
 8001a3a:	b918      	cbnz	r0, 8001a44 <??SCC_SetPhaseVoltage_58>
 8001a3c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001a3e:	2103      	movs	r1, #3
 8001a40:	f880 103f 	strb.w	r1, [r0, #63]	@ 0x3f

08001a44 <??SCC_SetPhaseVoltage_58>:
 8001a44:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001a46:	68c0      	ldr	r0, [r0, #12]
 8001a48:	f002 fa68 	bl	8003f1c <MCI_GetSTMState>
 8001a4c:	2806      	cmp	r0, #6
 8001a4e:	d159      	bne.n	8001b04 <??SCC_SetPhaseVoltage_12>

08001a50 <??SCC_SetPhaseVoltage_56>:
 8001a50:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001a52:	2104      	movs	r1, #4
 8001a54:	f880 103f 	strb.w	r1, [r0, #63]	@ 0x3f
 8001a58:	b008      	add	sp, #32
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	ecbd 8b04 	vpop	{d8-d9}
 8001a60:	b001      	add	sp, #4
 8001a62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a64 <??SCC_SetPhaseVoltage_48>:
 8001a64:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001a66:	6800      	ldr	r0, [r0, #0]
 8001a68:	f003 fbf6 	bl	8005258 <PWMC_SwitchOffPWM>
 8001a6c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001a6e:	f881 4034 	strb.w	r4, [r1, #52]	@ 0x34
 8001a72:	b008      	add	sp, #32
 8001a74:	4620      	mov	r0, r4
 8001a76:	ecbd 8b04 	vpop	{d8-d9}
 8001a7a:	b001      	add	sp, #4
 8001a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a7e <??SCC_SetPhaseVoltage_59>:
 8001a7e:	68ca      	ldr	r2, [r1, #12]
 8001a80:	2008      	movs	r0, #8
 8001a82:	77d0      	strb	r0, [r2, #31]
 8001a84:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001a86:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
 8001a8a:	b008      	add	sp, #32
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	ecbd 8b04 	vpop	{d8-d9}
 8001a92:	b001      	add	sp, #4
 8001a94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a96 <??SCC_SetPhaseVoltage_60>:
 8001a96:	f8d1 10b8 	ldr.w	r1, [r1, #184]	@ 0xb8
 8001a9a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8001a9e:	d110      	bne.n	8001ac2 <??SCC_SetPhaseVoltage_61>
 8001aa0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001aa2:	f8c1 40b8 	str.w	r4, [r1, #184]	@ 0xb8
 8001aa6:	e00c      	b.n	8001ac2 <??SCC_SetPhaseVoltage_61>

08001aa8 <??SCC_SetPhaseVoltage_62>:
 8001aa8:	68c9      	ldr	r1, [r1, #12]
 8001aaa:	7fc8      	ldrb	r0, [r1, #31]
 8001aac:	2814      	cmp	r0, #20
 8001aae:	d123      	bne.n	8001af8 <??SCC_SetPhaseVoltage_5>
 8001ab0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001ab2:	f8d1 00b8 	ldr.w	r0, [r1, #184]	@ 0xb8
 8001ab6:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8001aba:	bf04      	itt	eq
 8001abc:	980c      	ldreq	r0, [sp, #48]	@ 0x30
 8001abe:	f8c0 40b8 	streq.w	r4, [r0, #184]	@ 0xb8

08001ac2 <??SCC_SetPhaseVoltage_61>:
 8001ac2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001ac4:	f000 fa72 	bl	8001fac <SCC_GetIaCurrent>
 8001ac8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8001aca:	6811      	ldr	r1, [r2, #0]
 8001acc:	2003      	movs	r0, #3
 8001ace:	f881 007a 	strb.w	r0, [r1, #122]	@ 0x7a
 8001ad2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001ad4:	f8d0 10b8 	ldr.w	r1, [r0, #184]	@ 0xb8
 8001ad8:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8001adc:	ed83 0a50 	vstr	s0, [r3, #320]	@ 0x140
 8001ae0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001ae2:	f8d0 10b8 	ldr.w	r1, [r0, #184]	@ 0xb8
 8001ae6:	1c49      	adds	r1, r1, #1
 8001ae8:	f8c0 10b8 	str.w	r1, [r0, #184]	@ 0xb8
 8001aec:	b008      	add	sp, #32
 8001aee:	4620      	mov	r0, r4
 8001af0:	ecbd 8b04 	vpop	{d8-d9}
 8001af4:	b001      	add	sp, #4
 8001af6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001af8 <??SCC_SetPhaseVoltage_5>:
 8001af8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001afa:	9904      	ldr	r1, [sp, #16]
 8001afc:	6800      	ldr	r0, [r0, #0]
 8001afe:	f003 fa63 	bl	8004fc8 <PWMC_SetPhaseVoltage>

08001b02 <??SCC_SetPhaseVoltage_16>:
 8001b02:	4604      	mov	r4, r0

08001b04 <??SCC_SetPhaseVoltage_12>:
 8001b04:	b008      	add	sp, #32
 8001b06:	4620      	mov	r0, r4
 8001b08:	ecbd 8b04 	vpop	{d8-d9}
 8001b0c:	b001      	add	sp, #4
 8001b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b10 <??DataTable4>:
 8001b10:	0000 2000                                   ... 

08001b14 <??DataTable4_1>:
 8001b14:	cccd 3f4c                                   ..L?

08001b18 <??DataTable4_2>:
 8001b18:	0000 4780                                   ...G

08001b1c <??DataTable4_3>:
 8001b1c:	0b84 2000                                   ... 

08001b20 <??DataTable4_4>:
 8001b20:	0000 3780                                   ...7

08001b24 <??DataTable4_5>:
 8001b24:	cd46 3793                                   F..7

08001b28 <??DataTable4_6>:
 8001b28:	0000 4270                                   ..pB

08001b2c <??DataTable4_7>:
 8001b2c:	0fdb 40c9                                   ...@

08001b30 <??DataTable4_8>:
 8001b30:	0000 0000                                   ....

08001b34 <??DataTable4_9>:
 8001b34:	c471 3f9c                                   q..?

08001b38 <??DataTable4_10>:
 8001b38:	0000 447a                                   ..zD

08001b3c <??DataTable4_11>:
 8001b3c:	b3d7 3fdd                                   ...?

08001b40 <??DataTable4_12>:
 8001b40:	d090 0003                                   ....

08001b44 <??DataTable4_13>:
 8001b44:	0dec 2000                                   ... 

08001b48 <??DataTable4_14>:
 8001b48:	6667 6666                                   gfff

08001b4c <SCC_MF>:
 8001b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b50:	ed2d 8b02 	vpush	{d8}
 8001b54:	4605      	mov	r5, r0
 8001b56:	b086      	sub	sp, #24
 8001b58:	6bac      	ldr	r4, [r5, #56]	@ 0x38
 8001b5a:	68e8      	ldr	r0, [r5, #12]
 8001b5c:	f002 f9de 	bl	8003f1c <MCI_GetSTMState>
 8001b60:	f895 1034 	ldrb.w	r1, [r5, #52]	@ 0x34
 8001b64:	2906      	cmp	r1, #6
 8001b66:	d00a      	beq.n	8001b7e <??SCC_MF_1>
 8001b68:	f0c0 81a3 	bcc.w	8001eb2 <??SCC_MF_2>
 8001b6c:	2908      	cmp	r1, #8
 8001b6e:	d06b      	beq.n	8001c48 <??SCC_MF_3>
 8001b70:	f0c0 818e 	bcc.w	8001e90 <??SCC_MF_4>
 8001b74:	b006      	add	sp, #24
 8001b76:	ecbd 8b02 	vpop	{d8}
 8001b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001b7e <??SCC_MF_1>:
 8001b7e:	280b      	cmp	r0, #11
 8001b80:	f200 8197 	bhi.w	8001eb2 <??SCC_MF_2>
 8001b84:	e8df f010 	tbh	[pc, r0, lsl #1]

08001b88 <??SCC_MF_0>:
 8001b88:	000c 0195 0195 0195 004f 0195 0195 0195     ........O.......
 8001b98:	0195 0195 0195 0192                         ........

08001ba0 <??SCC_MF_5>:
 8001ba0:	4628      	mov	r0, r5
 8001ba2:	f000 fcaf 	bl	8002504 <SCC_DetectBemf>
 8001ba6:	2800      	cmp	r0, #0
 8001ba8:	f040 8183 	bne.w	8001eb2 <??SCC_MF_2>
 8001bac:	ed95 0a11 	vldr	s0, [r5, #68]	@ 0x44
 8001bb0:	edd5 0a1a 	vldr	s1, [r5, #104]	@ 0x68
 8001bb4:	ed95 1a19 	vldr	s2, [r5, #100]	@ 0x64
 8001bb8:	68e8      	ldr	r0, [r5, #12]
 8001bba:	ee20 2a80 	vmul.f32	s4, s1, s0
 8001bbe:	ee81 2a02 	vdiv.f32	s4, s2, s4
 8001bc2:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8001bc6:	eef5 1a00 	vmov.f32	s3, #80	@ 0x3e800000  0.250
 8001bca:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8001bce:	ee23 2aa1 	vmul.f32	s4, s7, s3
 8001bd2:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8001bd6:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8001bda:	eef5 2a00 	vmov.f32	s5, #80	@ 0x3e800000  0.250
 8001bde:	ee72 2a22 	vadd.f32	s5, s4, s5
 8001be2:	eeb8 3a00 	vmov.f32	s6, #128	@ 0xc0000000 -2.0
 8001be6:	ee32 3a83 	vadd.f32	s6, s5, s6
 8001bea:	eefd 2a00 	vmov.f32	s5, #208	@ 0xbe800000 -0.250
 8001bee:	ee73 2aa2 	vadd.f32	s5, s7, s5
 8001bf2:	ee42 2a21 	vmla.f32	s5, s4, s3
 8001bf6:	ee62 1a80 	vmul.f32	s3, s5, s0
 8001bfa:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8001bfe:	ee03 1a00 	vmla.f32	s2, s6, s0
 8001c02:	ee21 0a80 	vmul.f32	s0, s3, s0
 8001c06:	ee20 0a20 	vmul.f32	s0, s0, s1
 8001c0a:	ed85 1a35 	vstr	s2, [r5, #212]	@ 0xd4
 8001c0e:	ed85 0a36 	vstr	s0, [r5, #216]	@ 0xd8
 8001c12:	f002 f989 	bl	8003f28 <MCI_StartMotor>
 8001c16:	6828      	ldr	r0, [r5, #0]
 8001c18:	f003 fb1e 	bl	8005258 <PWMC_SwitchOffPWM>
 8001c1c:	b006      	add	sp, #24
 8001c1e:	ecbd 8b02 	vpop	{d8}
 8001c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001c26 <??SCC_MF_6>:
 8001c26:	2008      	movs	r0, #8
 8001c28:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
 8001c2c:	4628      	mov	r0, r5
 8001c2e:	f7ff f831 	bl	8000c94 <SCC_InitKeDetRevup>
 8001c32:	2001      	movs	r0, #1
 8001c34:	f885 0128 	strb.w	r0, [r5, #296]	@ 0x128
 8001c38:	4628      	mov	r0, r5
 8001c3a:	f000 fac9 	bl	80021d0 <SCC_KeDetectionInit>
 8001c3e:	b006      	add	sp, #24
 8001c40:	ecbd 8b02 	vpop	{d8}
 8001c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001c48 <??SCC_MF_3>:
 8001c48:	f895 003f 	ldrb.w	r0, [r5, #63]	@ 0x3f
 8001c4c:	2802      	cmp	r0, #2
 8001c4e:	f040 8130 	bne.w	8001eb2 <??SCC_MF_2>
 8001c52:	ed95 1a34 	vldr	s2, [r5, #208]	@ 0xd0
 8001c56:	edd5 1a1b 	vldr	s3, [r5, #108]	@ 0x6c
 8001c5a:	ee61 1a21 	vmul.f32	s3, s2, s3
 8001c5e:	eddf 0abe 	vldr	s1, [pc, #760]	@ 8001f58 <??DataTable6>
 8001c62:	ee61 0aa0 	vmul.f32	s1, s3, s1
 8001c66:	ed9f 1ad0 	vldr	s2, [pc, #832]	@ 8001fa8 <??DataTable7>
 8001c6a:	eec0 0a81 	vdiv.f32	s1, s1, s2
 8001c6e:	f9b5 004c 	ldrsh.w	r0, [r5, #76]	@ 0x4c
 8001c72:	ed95 1a14 	vldr	s2, [r5, #80]	@ 0x50
 8001c76:	ed95 3a1a 	vldr	s6, [r5, #104]	@ 0x68
 8001c7a:	edd5 1a11 	vldr	s3, [r5, #68]	@ 0x44
 8001c7e:	ee63 3a21 	vmul.f32	s7, s6, s3
 8001c82:	ee63 2a01 	vmul.f32	s5, s6, s2
 8001c86:	ee02 0a10 	vmov	s4, r0
 8001c8a:	ed95 3a19 	vldr	s6, [r5, #100]	@ 0x64
 8001c8e:	ee62 2aa1 	vmul.f32	s5, s5, s3
 8001c92:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8001c96:	ee83 3a23 	vdiv.f32	s6, s6, s7
 8001c9a:	ee82 2a22 	vdiv.f32	s4, s4, s5
 8001c9e:	edd5 3a35 	vldr	s7, [r5, #212]	@ 0xd4
 8001ca2:	ed9f 0acf 	vldr	s0, [pc, #828]	@ 8001fe0 <??DataTable8>
 8001ca6:	ed9f 5ace 	vldr	s10, [pc, #824]	@ 8001fe0 <??DataTable8>
 8001caa:	ed9f 6acd 	vldr	s12, [pc, #820]	@ 8001fe0 <??DataTable8>
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	230e      	movs	r3, #14
 8001cb4:	eec0 2aa2 	vdiv.f32	s5, s1, s5
 8001cb8:	eec3 3aa1 	vdiv.f32	s7, s7, s3
 8001cbc:	ed9f 4ac9 	vldr	s8, [pc, #804]	@ 8001fe4 <??DataTable8_1>
 8001cc0:	eddf 4ac9 	vldr	s9, [pc, #804]	@ 8001fe8 <??DataTable8_2>
 8001cc4:	f05f 0001 	movs.w	r0, #1

08001cc8 <??SCC_MF_7>:
 8001cc8:	fa00 f603 	lsl.w	r6, r0, r3
 8001ccc:	ee05 6a90 	vmov	s11, r6
 8001cd0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001cd4:	ee63 6a25 	vmul.f32	s13, s6, s11
 8001cd8:	eef4 6a64 	vcmp.f32	s13, s9
 8001cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce0:	bfbe      	ittt	lt
 8001ce2:	ee23 6aa5 	vmullt.f32	s12, s7, s11
 8001ce6:	eeb4 6a64 	vcmplt.f32	s12, s9
 8001cea:	eef1 fa10 	vmrslt	APSR_nzcv, fpscr
 8001cee:	db05      	blt.n	8001cfc <??SCC_MF_8>

08001cf0 <??SCC_MF_9>:
 8001cf0:	1e5b      	subs	r3, r3, #1
 8001cf2:	b25e      	sxtb	r6, r3
 8001cf4:	2e00      	cmp	r6, #0
 8001cf6:	dce7      	bgt.n	8001cc8 <??SCC_MF_7>
 8001cf8:	e01c      	b.n	8001d34 <??SCC_MF_10>
 8001cfa:	bf00      	nop

08001cfc <??SCC_MF_8>:
 8001cfc:	eeb4 6a44 	vcmp.f32	s12, s8
 8001d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d04:	d4f4      	bmi.n	8001cf0 <??SCC_MF_9>
 8001d06:	ee22 0aa5 	vmul.f32	s0, s5, s11
 8001d0a:	eeb4 0a64 	vcmp.f32	s0, s9
 8001d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d12:	bfbe      	ittt	lt
 8001d14:	ee22 5a25 	vmullt.f32	s10, s4, s11
 8001d18:	eeb4 5a64 	vcmplt.f32	s10, s9
 8001d1c:	eef1 fa10 	vmrslt	APSR_nzcv, fpscr
 8001d20:	dae6      	bge.n	8001cf0 <??SCC_MF_9>
 8001d22:	b25b      	sxtb	r3, r3
 8001d24:	ee02 3a10 	vmov	s4, r3
 8001d28:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8001d2c:	eebd 2ac2 	vcvt.s32.f32	s4, s4
 8001d30:	ee12 2a10 	vmov	r2, s4

08001d34 <??SCC_MF_10>:
 8001d34:	ed95 2a36 	vldr	s4, [r5, #216]	@ 0xd8
 8001d38:	ee22 1a01 	vmul.f32	s2, s4, s2
 8001d3c:	eec1 0a20 	vdiv.f32	s1, s2, s1
 8001d40:	f05f 030e 	movs.w	r3, #14
 8001d44:	eec0 0aa1 	vdiv.f32	s1, s1, s3

08001d48 <??SCC_MF_11>:
 8001d48:	fa00 f603 	lsl.w	r6, r0, r3
 8001d4c:	ee01 6a10 	vmov	s2, r6
 8001d50:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8001d54:	ee60 1a81 	vmul.f32	s3, s1, s2
 8001d58:	eef4 1a64 	vcmp.f32	s3, s9
 8001d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d60:	db04      	blt.n	8001d6c <??SCC_MF_12>

08001d62 <??SCC_MF_13>:
 8001d62:	1e5b      	subs	r3, r3, #1
 8001d64:	b25e      	sxtb	r6, r3
 8001d66:	2e00      	cmp	r6, #0
 8001d68:	dcee      	bgt.n	8001d48 <??SCC_MF_11>
 8001d6a:	e00d      	b.n	8001d88 <??SCC_MF_14>

08001d6c <??SCC_MF_12>:
 8001d6c:	eef4 1a44 	vcmp.f32	s3, s8
 8001d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d74:	d4f5      	bmi.n	8001d62 <??SCC_MF_13>
 8001d76:	b25b      	sxtb	r3, r3
 8001d78:	ee00 3a90 	vmov	s1, r3
 8001d7c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8001d80:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8001d84:	ee10 1a90 	vmov	r1, s1

08001d88 <??SCC_MF_14>:
 8001d88:	eefd 0ae6 	vcvt.s32.f32	s1, s13
 8001d8c:	ee10 0a90 	vmov	r0, s1
 8001d90:	f8ad 0000 	strh.w	r0, [sp]
 8001d94:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001d98:	eefd 0ac6 	vcvt.s32.f32	s1, s12
 8001d9c:	ee10 0a10 	vmov	r0, s0
 8001da0:	ee10 3a90 	vmov	r3, s1
 8001da4:	f8ad 0004 	strh.w	r0, [sp, #4]
 8001da8:	f8ad 3002 	strh.w	r3, [sp, #2]
 8001dac:	eebd 0ac5 	vcvt.s32.f32	s0, s10
 8001db0:	eefd 0ae1 	vcvt.s32.f32	s1, s3
 8001db4:	ee10 0a10 	vmov	r0, s0
 8001db8:	ee10 3a90 	vmov	r3, s1
 8001dbc:	f8ad 0008 	strh.w	r0, [sp, #8]
 8001dc0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8001dc4:	eebd 0ac1 	vcvt.s32.f32	s0, s2
 8001dc8:	eefd 0ae5 	vcvt.s32.f32	s1, s11
 8001dcc:	ee10 0a10 	vmov	r0, s0
 8001dd0:	ee10 3a90 	vmov	r3, s1
 8001dd4:	f8ad 000c 	strh.w	r0, [sp, #12]
 8001dd8:	f8ad 300a 	strh.w	r3, [sp, #10]
 8001ddc:	f8ad 200e 	strh.w	r2, [sp, #14]
 8001de0:	f8ad 1010 	strh.w	r1, [sp, #16]
 8001de4:	4669      	mov	r1, sp
 8001de6:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8001de8:	f000 f868 	bl	8001ebc <STO_ReInit>
 8001dec:	ed95 1a34 	vldr	s2, [r5, #208]	@ 0xd0
 8001df0:	ed95 0a11 	vldr	s0, [r5, #68]	@ 0x44
 8001df4:	edd5 0a12 	vldr	s1, [r5, #72]	@ 0x48
 8001df8:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8001dfa:	ed9f 2aba 	vldr	s4, [pc, #744]	@ 80020e4 <??DataTable9>
 8001dfe:	ee21 2a02 	vmul.f32	s4, s2, s4
 8001e02:	ee22 2a20 	vmul.f32	s4, s4, s1
 8001e06:	ee60 2a00 	vmul.f32	s5, s0, s0
 8001e0a:	ee82 2a22 	vdiv.f32	s4, s4, s5
 8001e0e:	eef5 1a00 	vmov.f32	s3, #80	@ 0x3e800000  0.250
 8001e12:	ee22 8a21 	vmul.f32	s16, s4, s3
 8001e16:	ed9f 2ab4 	vldr	s4, [pc, #720]	@ 80020e8 <??DataTable9_1>
 8001e1a:	ee21 1a02 	vmul.f32	s2, s2, s4
 8001e1e:	ee61 0a20 	vmul.f32	s1, s2, s1
 8001e22:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8001e26:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001e2a:	ee10 1a10 	vmov	r1, s0
 8001e2e:	b209      	sxth	r1, r1
 8001e30:	f106 0034 	add.w	r0, r6, #52	@ 0x34
 8001e34:	f008 fbf6 	bl	800a624 <PID_SetKP>
 8001e38:	eebd 0ac8 	vcvt.s32.f32	s0, s16
 8001e3c:	ee10 1a10 	vmov	r1, s0
 8001e40:	b209      	sxth	r1, r1
 8001e42:	f106 0034 	add.w	r0, r6, #52	@ 0x34
 8001e46:	f008 fbef 	bl	800a628 <PID_SetKI>
 8001e4a:	6928      	ldr	r0, [r5, #16]
 8001e4c:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8001e50:	f009 fd8c 	bl	800b96c <SPD_GetElSpeedDpp>
 8001e54:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8001e56:	4680      	mov	r8, r0
 8001e58:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001e5c:	f008 fbf8 	bl	800a650 <PID_GetKIDivisor>
 8001e60:	fb00 f108 	mul.w	r1, r0, r8
 8001e64:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001e68:	f008 fbe8 	bl	800a63c <PID_SetIntegralTerm>
 8001e6c:	80be      	strh	r6, [r7, #4]
 8001e6e:	4620      	mov	r0, r4
 8001e70:	f009 fc06 	bl	800b680 <REMNG_Init>
 8001e74:	22fa      	movs	r2, #250	@ 0xfa
 8001e76:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	f009 fc50 	bl	800b720 <REMNG_ExecRamp>
 8001e80:	2003      	movs	r0, #3
 8001e82:	f885 003f 	strb.w	r0, [r5, #63]	@ 0x3f
 8001e86:	b006      	add	sp, #24
 8001e88:	ecbd 8b02 	vpop	{d8}
 8001e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001e90 <??SCC_MF_4>:
 8001e90:	b950      	cbnz	r0, 8001ea8 <??SCC_MF_15>
 8001e92:	68e8      	ldr	r0, [r5, #12]
 8001e94:	f002 f848 	bl	8003f28 <MCI_StartMotor>
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
 8001e9e:	b006      	add	sp, #24
 8001ea0:	ecbd 8b02 	vpop	{d8}
 8001ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ea8 <??SCC_MF_15>:
 8001ea8:	280b      	cmp	r0, #11
 8001eaa:	d102      	bne.n	8001eb2 <??SCC_MF_2>

08001eac <??SCC_MF_16>:
 8001eac:	68e8      	ldr	r0, [r5, #12]
 8001eae:	f002 f86d 	bl	8003f8c <MCI_FaultAcknowledged>

08001eb2 <??SCC_MF_2>:
 8001eb2:	b006      	add	sp, #24
 8001eb4:	ecbd 8b02 	vpop	{d8}
 8001eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ebc <STO_ReInit>:
 8001ebc:	b430      	push	{r4, r5}
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	8808      	ldrh	r0, [r1, #0]
 8001ec2:	f8df 5a88 	ldr.w	r5, [pc, #2696]	@ 800294c <??DataTable19_7>
 8001ec6:	8410      	strh	r0, [r2, #32]
 8001ec8:	2400      	movs	r4, #0
 8001eca:	884b      	ldrh	r3, [r1, #2]
 8001ecc:	8453      	strh	r3, [r2, #34]	@ 0x22
 8001ece:	8888      	ldrh	r0, [r1, #4]
 8001ed0:	8490      	strh	r0, [r2, #36]	@ 0x24
 8001ed2:	88cb      	ldrh	r3, [r1, #6]
 8001ed4:	84d3      	strh	r3, [r2, #38]	@ 0x26
 8001ed6:	8908      	ldrh	r0, [r1, #8]
 8001ed8:	8510      	strh	r0, [r2, #40]	@ 0x28
 8001eda:	894b      	ldrh	r3, [r1, #10]
 8001edc:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8001ede:	8988      	ldrh	r0, [r1, #12]
 8001ee0:	85d0      	strh	r0, [r2, #46]	@ 0x2e
 8001ee2:	89cb      	ldrh	r3, [r1, #14]
 8001ee4:	f8a2 311c 	strh.w	r3, [r2, #284]	@ 0x11c
 8001ee8:	2301      	movs	r3, #1
 8001eea:	8a08      	ldrh	r0, [r1, #16]
 8001eec:	f8a2 011e 	strh.w	r0, [r2, #286]	@ 0x11e
 8001ef0:	f8a2 4032 	strh.w	r4, [r2, #50]	@ 0x32
 8001ef4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8001ef8:	fb95 f0f0 	sdiv	r0, r5, r0
 8001efc:	b200      	sxth	r0, r0
 8001efe:	b1c8      	cbz	r0, 8001f34 <??STO_ReInit_0>

08001f00 <??STO_ReInit_1>:
 8001f00:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8001f04:	1040      	asrs	r0, r0, #1
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	1c64      	adds	r4, r4, #1
 8001f0a:	b198      	cbz	r0, 8001f34 <??STO_ReInit_0>
 8001f0c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8001f10:	1040      	asrs	r0, r0, #1
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	1c64      	adds	r4, r4, #1
 8001f16:	b168      	cbz	r0, 8001f34 <??STO_ReInit_0>
 8001f18:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8001f1c:	1040      	asrs	r0, r0, #1
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	1c64      	adds	r4, r4, #1
 8001f22:	2800      	cmp	r0, #0
 8001f24:	d006      	beq.n	8001f34 <??STO_ReInit_0>
 8001f26:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8001f2a:	1040      	asrs	r0, r0, #1
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	1c64      	adds	r4, r4, #1
 8001f30:	2800      	cmp	r0, #0
 8001f32:	d1e5      	bne.n	8001f00 <??STO_ReInit_1>

08001f34 <??STO_ReInit_0>:
 8001f34:	8654      	strh	r4, [r2, #50]	@ 0x32
 8001f36:	8613      	strh	r3, [r2, #48]	@ 0x30
 8001f38:	f9b1 400c 	ldrsh.w	r4, [r1, #12]
 8001f3c:	f9b2 3030 	ldrsh.w	r3, [r2, #48]	@ 0x30
 8001f40:	f8df 1a0c 	ldr.w	r1, [pc, #2572]	@ 8002950 <??DataTable19_8>
 8001f44:	fb14 f303 	smulbb	r3, r4, r3
 8001f48:	fb83 0101 	smull	r0, r1, r3, r1
 8001f4c:	1208      	asrs	r0, r1, #8
 8001f4e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8001f52:	8550      	strh	r0, [r2, #42]	@ 0x2a
 8001f54:	bc30      	pop	{r4, r5}
 8001f56:	4770      	bx	lr

08001f58 <??DataTable6>:
 8001f58:	0481 3fb5                                   ...?

08001f5c <SCC_GetCurrent>:
 8001f5c:	f8d0 1548 	ldr.w	r1, [r0, #1352]	@ 0x548
 8001f60:	ed91 1a06 	vldr	s2, [r1, #24]
 8001f64:	edd1 0a07 	vldr	s1, [r1, #28]
 8001f68:	ed9f 0a98 	vldr	s0, [pc, #608]	@ 80021cc <??DataTable10>
 8001f6c:	ee21 0a00 	vmul.f32	s0, s2, s0
 8001f70:	ee60 0a20 	vmul.f32	s1, s0, s1
 8001f74:	ed91 0a13 	vldr	s0, [r1, #76]	@ 0x4c
 8001f78:	6881      	ldr	r1, [r0, #8]
 8001f7a:	f9b1 0000 	ldrsh.w	r0, [r1]
 8001f7e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8001f82:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8001f86:	ee00 0a90 	vmov	s1, r0
 8001f8a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8001f8e:	ee01 1a10 	vmov	s2, r1
 8001f92:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8001f96:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8001f9a:	ee41 0a40 	vmls.f32	s1, s2, s0
 8001f9e:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001fa2:	ee20 0a80 	vmul.f32	s0, s1, s0
 8001fa6:	4770      	bx	lr

08001fa8 <??DataTable7>:
 8001fa8:	8000 44d8                                   ...D

08001fac <SCC_GetIaCurrent>:
 8001fac:	6882      	ldr	r2, [r0, #8]
 8001fae:	f8d0 1548 	ldr.w	r1, [r0, #1352]	@ 0x548
 8001fb2:	f9b2 0000 	ldrsh.w	r0, [r2]
 8001fb6:	edd1 1a06 	vldr	s3, [r1, #24]
 8001fba:	ed91 1a07 	vldr	s2, [r1, #28]
 8001fbe:	eddf 0a83 	vldr	s1, [pc, #524]	@ 80021cc <??DataTable10>
 8001fc2:	ee61 0aa0 	vmul.f32	s1, s3, s1
 8001fc6:	ee20 1a81 	vmul.f32	s2, s1, s2
 8001fca:	ee00 0a10 	vmov	s0, r0
 8001fce:	edd1 0a13 	vldr	s1, [r1, #76]	@ 0x4c
 8001fd2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001fd6:	eec0 0a81 	vdiv.f32	s1, s1, s2
 8001fda:	ee20 0a60 	vnmul.f32	s0, s0, s1
 8001fde:	4770      	bx	lr

08001fe0 <??DataTable8>:
 8001fe0:	0000 0000                                   ....

08001fe4 <??DataTable8_1>:
 8001fe4:	fe00 c6ff                                   ....

08001fe8 <??DataTable8_2>:
 8001fe8:	fe01 46ff                                   ...F

08001fec <??DataTable8_3>:
 8001fec:	cccd 3dcc                                   ...=

08001ff0 <SCC_GetState>:
 8001ff0:	b530      	push	{r4, r5, lr}
 8001ff2:	4605      	mov	r5, r0
 8001ff4:	b081      	sub	sp, #4
 8001ff6:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001ff8:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	290a      	cmp	r1, #10
 8002000:	bf08      	it	eq
 8002002:	f885 4138 	strbeq.w	r4, [r5, #312]	@ 0x138
 8002006:	68e8      	ldr	r0, [r5, #12]
 8002008:	f001 ff88 	bl	8003f1c <MCI_GetSTMState>
 800200c:	280a      	cmp	r0, #10
 800200e:	d106      	bne.n	800201e <??SCC_GetState_1>
 8002010:	f885 4138 	strb.w	r4, [r5, #312]	@ 0x138
 8002014:	f885 4034 	strb.w	r4, [r5, #52]	@ 0x34
 8002018:	4620      	mov	r0, r4
 800201a:	b001      	add	sp, #4
 800201c:	bd30      	pop	{r4, r5, pc}

0800201e <??SCC_GetState_1>:
 800201e:	f895 1034 	ldrb.w	r1, [r5, #52]	@ 0x34
 8002022:	290d      	cmp	r1, #13
 8002024:	d820      	bhi.n	8002068 <??SCC_GetState_2>
 8002026:	e8df f001 	tbb	[pc, r1]

0800202a <??SCC_GetState_0>:
 800202a:	0a07 120e 1212 1616 0716 1f1a 1e1f          ..............

08002038 <??SCC_GetState_3>:
 8002038:	f895 0138 	ldrb.w	r0, [r5, #312]	@ 0x138
 800203c:	b1a0      	cbz	r0, 8002068 <??SCC_GetState_2>

0800203e <??SCC_GetState_4>:
 800203e:	2401      	movs	r4, #1
 8002040:	4620      	mov	r0, r4
 8002042:	b001      	add	sp, #4
 8002044:	bd30      	pop	{r4, r5, pc}

08002046 <??SCC_GetState_5>:
 8002046:	2402      	movs	r4, #2
 8002048:	4620      	mov	r0, r4
 800204a:	b001      	add	sp, #4
 800204c:	bd30      	pop	{r4, r5, pc}

0800204e <??SCC_GetState_6>:
 800204e:	2403      	movs	r4, #3
 8002050:	4620      	mov	r0, r4
 8002052:	b001      	add	sp, #4
 8002054:	bd30      	pop	{r4, r5, pc}

08002056 <??SCC_GetState_7>:
 8002056:	2404      	movs	r4, #4
 8002058:	4620      	mov	r0, r4
 800205a:	b001      	add	sp, #4
 800205c:	bd30      	pop	{r4, r5, pc}

0800205e <??SCC_GetState_8>:
 800205e:	240e      	movs	r4, #14
 8002060:	4620      	mov	r0, r4
 8002062:	b001      	add	sp, #4
 8002064:	bd30      	pop	{r4, r5, pc}

08002066 <??SCC_GetState_9>:
 8002066:	240f      	movs	r4, #15

08002068 <??SCC_GetState_2>:
 8002068:	4620      	mov	r0, r4
 800206a:	b001      	add	sp, #4
 800206c:	bd30      	pop	{r4, r5, pc}

0800206e <SCC_GetEstNominalSpeed>:
 800206e:	ed90 0a34 	vldr	s0, [r0, #208]	@ 0xd0
 8002072:	f002 b8f3 	b.w	800425c <MCM_floatToIntBit>

08002076 <SCC_ForceProfile>:
 8002076:	f890 103f 	ldrb.w	r1, [r0, #63]	@ 0x3f
 800207a:	2904      	cmp	r1, #4
 800207c:	bf1c      	itt	ne
 800207e:	f890 1034 	ldrbne.w	r1, [r0, #52]	@ 0x34
 8002082:	290a      	cmpne	r1, #10
 8002084:	d122      	bne.n	80020cc <??SCC_ForceProfile_0>
 8002086:	2200      	movs	r2, #0
 8002088:	f880 203f 	strb.w	r2, [r0, #63]	@ 0x3f
 800208c:	f880 20f0 	strb.w	r2, [r0, #240]	@ 0xf0
 8002090:	f8a0 211c 	strh.w	r2, [r0, #284]	@ 0x11c
 8002094:	f880 211e 	strb.w	r2, [r0, #286]	@ 0x11e
 8002098:	f8a0 2120 	strh.w	r2, [r0, #288]	@ 0x120
 800209c:	f8c0 2124 	str.w	r2, [r0, #292]	@ 0x124
 80020a0:	f8c0 213c 	str.w	r2, [r0, #316]	@ 0x13c
 80020a4:	f880 2128 	strb.w	r2, [r0, #296]	@ 0x128
 80020a8:	f44f 7cfa 	mov.w	ip, #500	@ 0x1f4
 80020ac:	f8d0 30e4 	ldr.w	r3, [r0, #228]	@ 0xe4
 80020b0:	f8df 28a0 	ldr.w	r2, [pc, #2208]	@ 8002954 <??DataTable19_9>
 80020b4:	fb83 1202 	smull	r1, r2, r3, r2
 80020b8:	1091      	asrs	r1, r2, #2
 80020ba:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80020be:	f8c0 10ec 	str.w	r1, [r0, #236]	@ 0xec
 80020c2:	2200      	movs	r2, #0
 80020c4:	f8c0 c0ec 	str.w	ip, [r0, #236]	@ 0xec
 80020c8:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34

080020cc <??SCC_ForceProfile_0>:
 80020cc:	2101      	movs	r1, #1
 80020ce:	f880 1138 	strb.w	r1, [r0, #312]	@ 0x138
 80020d2:	2300      	movs	r3, #0
 80020d4:	f8df 0428 	ldr.w	r0, [pc, #1064]	@ 8002500 <??DataTable12_4>
 80020d8:	8003      	strh	r3, [r0, #0]
 80020da:	2200      	movs	r2, #0
 80020dc:	8042      	strh	r2, [r0, #2]
 80020de:	2100      	movs	r1, #0
 80020e0:	8081      	strh	r1, [r0, #4]
 80020e2:	4770      	bx	lr

080020e4 <??DataTable9>:
 80020e4:	edb0 49b7                                   ...I

080020e8 <??DataTable9_1>:
 80020e8:	0000 4405                                   ...D

080020ec <SCC_StopProfile>:
 80020ec:	b510      	push	{r4, lr}
 80020ee:	4604      	mov	r4, r0
 80020f0:	6820      	ldr	r0, [r4, #0]
 80020f2:	f003 f8b1 	bl	8005258 <PWMC_SwitchOffPWM>
 80020f6:	2100      	movs	r1, #0
 80020f8:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 80020fc:	f884 1138 	strb.w	r1, [r4, #312]	@ 0x138
 8002100:	bd10      	pop	{r4, pc}
	...

08002104 <SCC_CurrCtrl>:
 8002104:	f8d0 2548 	ldr.w	r2, [r0, #1352]	@ 0x548
 8002108:	6883      	ldr	r3, [r0, #8]
 800210a:	edd2 1a06 	vldr	s3, [r2, #24]
 800210e:	ed92 1a07 	vldr	s2, [r2, #28]
 8002112:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 80021cc <??DataTable10>
 8002116:	2100      	movs	r1, #0
 8002118:	ee61 0aa0 	vmul.f32	s1, s3, s1
 800211c:	ee20 1a81 	vmul.f32	s2, s1, s2
 8002120:	edd2 0a13 	vldr	s1, [r2, #76]	@ 0x4c
 8002124:	5e5a      	ldrsh	r2, [r3, r1]
 8002126:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800212a:	eec0 0a81 	vdiv.f32	s1, s1, s2
 800212e:	ee01 2a10 	vmov	s2, r2
 8002132:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8002136:	ee01 3a90 	vmov	s3, r3
 800213a:	ee21 1a60 	vnmul.f32	s2, s2, s1
 800213e:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8002142:	ee01 1ae0 	vmls.f32	s2, s3, s1
 8002146:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800214a:	ee61 0a20 	vmul.f32	s1, s2, s1
 800214e:	eef4 0a40 	vcmp.f32	s1, s0
 8002152:	8f82      	ldrh	r2, [r0, #60]	@ 0x3c
 8002154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002158:	db18      	blt.n	800218c <??SCC_CurrCtrl_0>
 800215a:	b10a      	cbz	r2, 8002160 <??SCC_CurrCtrl_1>
 800215c:	1e52      	subs	r2, r2, #1
 800215e:	8782      	strh	r2, [r0, #60]	@ 0x3c

08002160 <??SCC_CurrCtrl_1>:
 8002160:	ee70 0ac0 	vsub.f32	s1, s1, s0
 8002164:	ed9f 0acd 	vldr	s0, [pc, #820]	@ 800249c <??DataTable11>
 8002168:	eef4 0a40 	vcmp.f32	s1, s0
 800216c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002170:	d41b      	bmi.n	80021aa <??SCC_CurrCtrl_2>

08002172 <??SCC_CurrCtrl_3>:
 8002172:	f890 20dc 	ldrb.w	r2, [r0, #220]	@ 0xdc
 8002176:	1e52      	subs	r2, r2, #1
 8002178:	b253      	sxtb	r3, r2
 800217a:	f113 0f13 	cmn.w	r3, #19
 800217e:	da1c      	bge.n	80021ba <??SCC_CurrCtrl_4>
 8002180:	f06f 0213 	mvn.w	r2, #19
 8002184:	f880 20dc 	strb.w	r2, [r0, #220]	@ 0xdc
 8002188:	4608      	mov	r0, r1
 800218a:	4770      	bx	lr

0800218c <??SCC_CurrCtrl_0>:
 800218c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002190:	429a      	cmp	r2, r3
 8002192:	bfbc      	itt	lt
 8002194:	1c52      	addlt	r2, r2, #1
 8002196:	8782      	strhlt	r2, [r0, #60]	@ 0x3c
 8002198:	ee70 0a60 	vsub.f32	s1, s0, s1
 800219c:	ed9f 0abf 	vldr	s0, [pc, #764]	@ 800249c <??DataTable11>
 80021a0:	eef4 0a40 	vcmp.f32	s1, s0
 80021a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a8:	d5e3      	bpl.n	8002172 <??SCC_CurrCtrl_3>

080021aa <??SCC_CurrCtrl_2>:
 80021aa:	f890 20dc 	ldrb.w	r2, [r0, #220]	@ 0xdc
 80021ae:	1c52      	adds	r2, r2, #1
 80021b0:	b253      	sxtb	r3, r2
 80021b2:	2b14      	cmp	r3, #20
 80021b4:	bfa8      	it	ge
 80021b6:	2214      	movge	r2, #20
 80021b8:	da02      	bge.n	80021c0 <??SCC_CurrCtrl_5>

080021ba <??SCC_CurrCtrl_4>:
 80021ba:	b253      	sxtb	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d400      	bmi.n	80021c2 <??SCC_CurrCtrl_6>

080021c0 <??SCC_CurrCtrl_5>:
 80021c0:	2101      	movs	r1, #1

080021c2 <??SCC_CurrCtrl_6>:
 80021c2:	f880 20dc 	strb.w	r2, [r0, #220]	@ 0xdc
 80021c6:	4608      	mov	r0, r1
 80021c8:	4770      	bx	lr
	...

080021cc <??DataTable10>:
 80021cc:	0000 4780                                   ...G

080021d0 <SCC_KeDetectionInit>:
 80021d0:	2200      	movs	r2, #0
 80021d2:	f8c0 20bc 	str.w	r2, [r0, #188]	@ 0xbc
 80021d6:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 80021da:	f8c0 20c4 	str.w	r2, [r0, #196]	@ 0xc4
 80021de:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
 80021e2:	f8c0 20cc 	str.w	r2, [r0, #204]	@ 0xcc
 80021e6:	4770      	bx	lr

080021e8 <SCC_KeDetection>:
 80021e8:	eddf 0ac1 	vldr	s1, [pc, #772]	@ 80024f0 <??DataTable12>
 80021ec:	b570      	push	{r4, r5, r6, lr}
 80021ee:	4604      	mov	r4, r0
 80021f0:	2601      	movs	r6, #1
 80021f2:	ed2d 8b06 	vpush	{d8-d10}
 80021f6:	f8d4 0548 	ldr.w	r0, [r4, #1352]	@ 0x548
 80021fa:	68a1      	ldr	r1, [r4, #8]
 80021fc:	edd0 1a06 	vldr	s3, [r0, #24]
 8002200:	ed90 1a07 	vldr	s2, [r0, #28]
 8002204:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002208:	6861      	ldr	r1, [r4, #4]
 800220a:	ee61 0aa0 	vmul.f32	s1, s3, s1
 800220e:	ee20 1a81 	vmul.f32	s2, s1, s2
 8002212:	edd0 0a13 	vldr	s1, [r0, #76]	@ 0x4c
 8002216:	ee00 2a10 	vmov	s0, r2
 800221a:	eec0 0a81 	vdiv.f32	s1, s1, s2
 800221e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002222:	ed94 1a2f 	vldr	s2, [r4, #188]	@ 0xbc
 8002226:	ee00 1a20 	vmla.f32	s2, s0, s1
 800222a:	ed84 1a2f 	vstr	s2, [r4, #188]	@ 0xbc
 800222e:	ed9f 1ab1 	vldr	s2, [pc, #708]	@ 80024f4 <??DataTable12_1>
 8002232:	88c8      	ldrh	r0, [r1, #6]
 8002234:	8849      	ldrh	r1, [r1, #2]
 8002236:	ee00 0a10 	vmov	s0, r0
 800223a:	ee00 1a90 	vmov	s1, r1
 800223e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8002242:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8002246:	ee60 0a20 	vmul.f32	s1, s0, s1
 800224a:	68a1      	ldr	r1, [r4, #8]
 800224c:	ee60 0a81 	vmul.f32	s1, s1, s2
 8002250:	edc4 0a18 	vstr	s1, [r4, #96]	@ 0x60
 8002254:	ed9f 0aa8 	vldr	s0, [pc, #672]	@ 80024f8 <??DataTable12_2>
 8002258:	f9b1 0016 	ldrsh.w	r0, [r1, #22]
 800225c:	68a1      	ldr	r1, [r4, #8]
 800225e:	ee01 0a10 	vmov	s2, r0
 8002262:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8002266:	ee21 1a20 	vmul.f32	s2, s2, s1
 800226a:	edd4 0a30 	vldr	s1, [r4, #192]	@ 0xc0
 800226e:	ee41 0a00 	vmla.f32	s1, s2, s0
 8002272:	edc4 0a30 	vstr	s1, [r4, #192]	@ 0xc0
 8002276:	eddf 8aa1 	vldr	s17, [pc, #644]	@ 80024fc <??DataTable12_3>
 800227a:	f9b1 0018 	ldrsh.w	r0, [r1, #24]
 800227e:	ed94 1a18 	vldr	s2, [r4, #96]	@ 0x60
 8002282:	ee00 0a90 	vmov	s1, r0
 8002286:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800228a:	ee20 1a81 	vmul.f32	s2, s1, s2
 800228e:	edd4 0a31 	vldr	s1, [r4, #196]	@ 0xc4
 8002292:	6920      	ldr	r0, [r4, #16]
 8002294:	ee41 0a00 	vmla.f32	s1, s2, s0
 8002298:	edc4 0a31 	vstr	s1, [r4, #196]	@ 0xc4
 800229c:	f009 fb62 	bl	800b964 <SPD_GetAvrgMecSpeedUnit>
 80022a0:	f246 6167 	movw	r1, #26215	@ 0x6667
 80022a4:	fb10 f101 	smulbb	r1, r0, r1
 80022a8:	1489      	asrs	r1, r1, #18
 80022aa:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80022ae:	ee00 1a90 	vmov	s1, r1
 80022b2:	eeb8 1ae0 	vcvt.f32.s32	s2, s1
 80022b6:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
 80022ba:	ed94 0a12 	vldr	s0, [r4, #72]	@ 0x48
 80022be:	edd4 0a32 	vldr	s1, [r4, #200]	@ 0xc8
 80022c2:	f242 7010 	movw	r0, #10000	@ 0x2710
 80022c6:	ee41 0a00 	vmla.f32	s1, s2, s0
 80022ca:	1c49      	adds	r1, r1, #1
 80022cc:	4281      	cmp	r1, r0
 80022ce:	edc4 0a32 	vstr	s1, [r4, #200]	@ 0xc8
 80022d2:	f8c4 10cc 	str.w	r1, [r4, #204]	@ 0xcc
 80022d6:	f0c0 80dd 	bcc.w	8002494 <??SCC_KeDetection_0>
 80022da:	ee00 1a10 	vmov	s0, r1
 80022de:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80022e2:	ed94 1a2f 	vldr	s2, [r4, #188]	@ 0xbc
 80022e6:	edd4 0a30 	vldr	s1, [r4, #192]	@ 0xc0
 80022ea:	eec1 9a00 	vdiv.f32	s19, s2, s0
 80022ee:	eec0 aa80 	vdiv.f32	s21, s1, s0
 80022f2:	ed94 1a31 	vldr	s2, [r4, #196]	@ 0xc4
 80022f6:	edd4 0a32 	vldr	s1, [r4, #200]	@ 0xc8
 80022fa:	ee81 aa00 	vdiv.f32	s20, s2, s0
 80022fe:	ee80 9a80 	vdiv.f32	s18, s1, s0
 8002302:	4620      	mov	r0, r4
 8002304:	f7ff ff64 	bl	80021d0 <SCC_KeDetectionInit>
 8002308:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800230c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002310:	f000 80c0 	beq.w	8002494 <??SCC_KeDetection_0>
 8002314:	6920      	ldr	r0, [r4, #16]
 8002316:	f009 fb25 	bl	800b964 <SPD_GetAvrgMecSpeedUnit>
 800231a:	ed9f 0aa7 	vldr	s0, [pc, #668]	@ 80025b8 <??DataTable13>
 800231e:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
 8002322:	ee29 8a00 	vmul.f32	s16, s18, s0
 8002326:	0092      	lsls	r2, r2, #2
 8002328:	f8df 1628 	ldr.w	r1, [pc, #1576]	@ 8002954 <??DataTable19_9>
 800232c:	ed94 0a1a 	vldr	s0, [r4, #104]	@ 0x68
 8002330:	edd4 0a19 	vldr	s1, [r4, #100]	@ 0x64
 8002334:	fb82 0101 	smull	r0, r1, r2, r1
 8002338:	ee28 0a00 	vmul.f32	s0, s16, s0
 800233c:	1088      	asrs	r0, r1, #2
 800233e:	ee40 aae9 	vmls.f32	s21, s1, s19
 8002342:	ee00 aa29 	vmla.f32	s20, s0, s19
 8002346:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800234a:	ee2a 0aaa 	vmul.f32	s0, s21, s21
 800234e:	ee01 0a10 	vmov	s2, r0
 8002352:	ee0a 0a0a 	vmla.f32	s0, s20, s20
 8002356:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 800235a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800235e:	eebd 1ac1 	vcvt.s32.f32	s2, s2
 8002362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002366:	ee11 5a10 	vmov	r5, s2
 800236a:	db01      	blt.n	8002370 <??SCC_KeDetection_1>
 800236c:	eef1 8ac0 	vsqrt.f32	s17, s0

08002370 <??SCC_KeDetection_1>:
 8002370:	f8b4 011c 	ldrh.w	r0, [r4, #284]	@ 0x11c
 8002374:	f104 01f4 	add.w	r1, r4, #244	@ 0xf4
 8002378:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800237c:	f504 7184 	add.w	r1, r4, #264	@ 0x108
 8002380:	edc2 8a00 	vstr	s17, [r2]
 8002384:	f8b4 011c 	ldrh.w	r0, [r4, #284]	@ 0x11c
 8002388:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800238c:	ed82 8a00 	vstr	s16, [r2]
 8002390:	f8b4 011c 	ldrh.w	r0, [r4, #284]	@ 0x11c
 8002394:	1c40      	adds	r0, r0, #1
 8002396:	f8a4 011c 	strh.w	r0, [r4, #284]	@ 0x11c
 800239a:	b280      	uxth	r0, r0
 800239c:	2805      	cmp	r0, #5
 800239e:	d304      	bcc.n	80023aa <??SCC_KeDetection_2>
 80023a0:	2100      	movs	r1, #0
 80023a2:	f8a4 111c 	strh.w	r1, [r4, #284]	@ 0x11c
 80023a6:	f884 611e 	strb.w	r6, [r4, #286]	@ 0x11e

080023aa <??SCC_KeDetection_2>:
 80023aa:	f894 011e 	ldrb.w	r0, [r4, #286]	@ 0x11e
 80023ae:	2800      	cmp	r0, #0
 80023b0:	d050      	beq.n	8002454 <??SCC_KeDetection_3>
 80023b2:	f8d4 00e4 	ldr.w	r0, [r4, #228]	@ 0xe4
 80023b6:	f000 fd5f 	bl	8002e78 <__aeabi_i2d>
 80023ba:	f8df 259c 	ldr.w	r2, [pc, #1436]	@ 8002958 <??DataTable19_10>
 80023be:	f8df 359c 	ldr.w	r3, [pc, #1436]	@ 800295c <??DataTable19_11>
 80023c2:	f000 fadd 	bl	8002980 <__aeabi_dmul>
 80023c6:	f000 fdc1 	bl	8002f4c <__aeabi_d2iz>
 80023ca:	42a8      	cmp	r0, r5
 80023cc:	da42      	bge.n	8002454 <??SCC_KeDetection_3>
 80023ce:	2205      	movs	r2, #5
 80023d0:	f104 01f4 	add.w	r1, r4, #244	@ 0xf4
 80023d4:	f504 7084 	add.w	r0, r4, #264	@ 0x108
 80023d8:	f000 f8f2 	bl	80025c0 <Fitab>
 80023dc:	ed9f 2a77 	vldr	s4, [pc, #476]	@ 80025bc <??DataTable13_1>
 80023e0:	eef0 1a68 	vmov.f32	s3, s17
 80023e4:	eeb0 1a48 	vmov.f32	s2, s16
 80023e8:	4620      	mov	r0, r4
 80023ea:	f000 f859 	bl	80024a0 <SCC_CheckBemf>
 80023ee:	2800      	cmp	r0, #0
 80023f0:	f894 00f0 	ldrb.w	r0, [r4, #240]	@ 0xf0
 80023f4:	d00e      	beq.n	8002414 <??SCC_KeDetection_4>
 80023f6:	b950      	cbnz	r0, 800240e <??SCC_KeDetection_5>
 80023f8:	f8d4 10e8 	ldr.w	r1, [r4, #232]	@ 0xe8
 80023fc:	f8df 2560 	ldr.w	r2, [pc, #1376]	@ 8002960 <??DataTable19_12>
 8002400:	1869      	adds	r1, r5, r1
 8002402:	fb81 0202 	smull	r0, r2, r1, r2
 8002406:	eb02 70d2 	add.w	r0, r2, r2, lsr #31
 800240a:	f8c4 013c 	str.w	r0, [r4, #316]	@ 0x13c

0800240e <??SCC_KeDetection_5>:
 800240e:	f884 60f0 	strb.w	r6, [r4, #240]	@ 0xf0
 8002412:	e01f      	b.n	8002454 <??SCC_KeDetection_3>

08002414 <??SCC_KeDetection_4>:
 8002414:	2801      	cmp	r0, #1
 8002416:	d115      	bne.n	8002444 <??SCC_KeDetection_6>
 8002418:	ed9f 0ad2 	vldr	s0, [pc, #840]	@ 8002764 <??DataTable14>
 800241c:	ee29 0a00 	vmul.f32	s0, s18, s0
 8002420:	edd4 0a12 	vldr	s1, [r4, #72]	@ 0x48
 8002424:	eec0 0a20 	vdiv.f32	s1, s0, s1
 8002428:	2100      	movs	r1, #0
 800242a:	eefc 0ae0 	vcvt.u32.f32	s1, s1
 800242e:	f884 10f0 	strb.w	r1, [r4, #240]	@ 0xf0
 8002432:	edc4 0a49 	vstr	s1, [r4, #292]	@ 0x124
 8002436:	f8a4 1120 	strh.w	r1, [r4, #288]	@ 0x120
 800243a:	2604      	movs	r6, #4
 800243c:	ecbd 8b06 	vpop	{d8-d10}
 8002440:	4630      	mov	r0, r6
 8002442:	bd70      	pop	{r4, r5, r6, pc}

08002444 <??SCC_KeDetection_6>:
 8002444:	f8b4 0120 	ldrh.w	r0, [r4, #288]	@ 0x120
 8002448:	1c40      	adds	r0, r0, #1
 800244a:	f8a4 0120 	strh.w	r0, [r4, #288]	@ 0x120
 800244e:	b280      	uxth	r0, r0
 8002450:	2804      	cmp	r0, #4
 8002452:	da07      	bge.n	8002464 <??SCC_KeDetection_7>

08002454 <??SCC_KeDetection_3>:
 8002454:	6a20      	ldr	r0, [r4, #32]
 8002456:	f009 fa69 	bl	800b92c <RUC_FirstAccelerationStageReached>
 800245a:	2800      	cmp	r0, #0
 800245c:	f894 00f0 	ldrb.w	r0, [r4, #240]	@ 0xf0
 8002460:	d002      	beq.n	8002468 <??SCC_KeDetection_8>
 8002462:	b998      	cbnz	r0, 800248c <??SCC_KeDetection_9>

08002464 <??SCC_KeDetection_7>:
 8002464:	2603      	movs	r6, #3
 8002466:	e012      	b.n	800248e <??SCC_KeDetection_10>

08002468 <??SCC_KeDetection_8>:
 8002468:	b1a0      	cbz	r0, 8002494 <??SCC_KeDetection_0>
 800246a:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
 800246e:	42a8      	cmp	r0, r5
 8002470:	d210      	bcs.n	8002494 <??SCC_KeDetection_0>
 8002472:	6a20      	ldr	r0, [r4, #32]
 8002474:	6ec5      	ldr	r5, [r0, #108]	@ 0x6c
 8002476:	2200      	movs	r2, #0
 8002478:	6082      	str	r2, [r0, #8]
 800247a:	8082      	strh	r2, [r0, #4]
 800247c:	4628      	mov	r0, r5
 800247e:	f009 fa71 	bl	800b964 <SPD_GetAvrgMecSpeedUnit>
 8002482:	4601      	mov	r1, r0
 8002484:	2200      	movs	r2, #0
 8002486:	4628      	mov	r0, r5
 8002488:	f009 fef6 	bl	800c278 <VSS_SetMecAcceleration>

0800248c <??SCC_KeDetection_9>:
 800248c:	2602      	movs	r6, #2

0800248e <??SCC_KeDetection_10>:
 800248e:	2000      	movs	r0, #0
 8002490:	f8a4 0120 	strh.w	r0, [r4, #288]	@ 0x120

08002494 <??SCC_KeDetection_0>:
 8002494:	4630      	mov	r0, r6
 8002496:	ecbd 8b06 	vpop	{d8-d10}
 800249a:	bd70      	pop	{r4, r5, r6, pc}

0800249c <??DataTable11>:
 800249c:	cccd 3e4c                                   ..L>

080024a0 <SCC_CheckBemf>:
 80024a0:	ee01 0a20 	vmla.f32	s0, s2, s1
 80024a4:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80024a8:	ee32 1a01 	vadd.f32	s2, s4, s2
 80024ac:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 80024b0:	ee21 1a00 	vmul.f32	s2, s2, s0
 80024b4:	ee32 2ac2 	vsub.f32	s4, s5, s4
 80024b8:	4601      	mov	r1, r0
 80024ba:	ee22 0a00 	vmul.f32	s0, s4, s0
 80024be:	2000      	movs	r0, #0
 80024c0:	eeb4 0a61 	vcmp.f32	s0, s3
 80024c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c8:	bf44      	itt	mi
 80024ca:	eef4 1a41 	vcmpmi.f32	s3, s2
 80024ce:	eef1 fa10 	vmrsmi	APSR_nzcv, fpscr
 80024d2:	d50b      	bpl.n	80024ec <??SCC_CheckBemf_0>
 80024d4:	eddf 1ad9 	vldr	s3, [pc, #868]	@ 800283c <??DataTable16>
 80024d8:	ed91 0a12 	vldr	s0, [r1, #72]	@ 0x48
 80024dc:	ee81 0a80 	vdiv.f32	s0, s3, s0
 80024e0:	eeb4 0a60 	vcmp.f32	s0, s1
 80024e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e8:	bf48      	it	mi
 80024ea:	2001      	movmi	r0, #1

080024ec <??SCC_CheckBemf_0>:
 80024ec:	4770      	bx	lr
	...

080024f0 <??DataTable12>:
 80024f0:	0000 4780                                   ...G

080024f4 <??DataTable12_1>:
 80024f4:	0000 3780                                   ...7

080024f8 <??DataTable12_2>:
 80024f8:	cd46 3793                                   F..7

080024fc <??DataTable12_3>:
 80024fc:	0000 0000                                   ....

08002500 <??DataTable12_4>:
 8002500:	0b84 2000                                   ... 

08002504 <SCC_DetectBemf>:
 8002504:	b530      	push	{r4, r5, lr}
 8002506:	4605      	mov	r5, r0
 8002508:	b081      	sub	sp, #4
 800250a:	f895 0540 	ldrb.w	r0, [r5, #1344]	@ 0x540
 800250e:	2401      	movs	r4, #1
 8002510:	b990      	cbnz	r0, 8002538 <??SCC_DetectBemf_0>
 8002512:	6828      	ldr	r0, [r5, #0]
 8002514:	f002 ff0e 	bl	8005334 <PWMC_RLTurnOnLowSidesAndStart>
 8002518:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800251c:	f8a5 1130 	strh.w	r1, [r5, #304]	@ 0x130
 8002520:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002524:	f8a5 0132 	strh.w	r0, [r5, #306]	@ 0x132
 8002528:	2100      	movs	r1, #0
 800252a:	f8c5 10b8 	str.w	r1, [r5, #184]	@ 0xb8
 800252e:	f885 4540 	strb.w	r4, [r5, #1344]	@ 0x540
 8002532:	4620      	mov	r0, r4
 8002534:	b001      	add	sp, #4
 8002536:	bd30      	pop	{r4, r5, pc}

08002538 <??SCC_DetectBemf_0>:
 8002538:	f8b5 0132 	ldrh.w	r0, [r5, #306]	@ 0x132
 800253c:	b3a0      	cbz	r0, 80025a8 <??SCC_DetectBemf_1>
 800253e:	1e40      	subs	r0, r0, #1
 8002540:	f8a5 0132 	strh.w	r0, [r5, #306]	@ 0x132
 8002544:	eddf 0abe 	vldr	s1, [pc, #760]	@ 8002840 <??DataTable16_1>
 8002548:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800254c:	462a      	mov	r2, r5
 800254e:	4601      	mov	r1, r0

08002550 <??SCC_DetectBemf_2>:
 8002550:	ed92 0a50 	vldr	s0, [r2, #320]	@ 0x140
 8002554:	1d12      	adds	r2, r2, #4
 8002556:	1e49      	subs	r1, r1, #1
 8002558:	ee70 0a80 	vadd.f32	s1, s1, s0
 800255c:	d1f8      	bne.n	8002550 <??SCC_DetectBemf_2>
 800255e:	ed9f 0acf 	vldr	s0, [pc, #828]	@ 800289c <??DataTable17>
 8002562:	ee60 0a80 	vmul.f32	s1, s1, s0
 8002566:	ed9f 1ab6 	vldr	s2, [pc, #728]	@ 8002840 <??DataTable16_1>
 800256a:	4629      	mov	r1, r5

0800256c <??SCC_DetectBemf_3>:
 800256c:	edd1 1a50 	vldr	s3, [r1, #320]	@ 0x140
 8002570:	1d09      	adds	r1, r1, #4
 8002572:	ee71 1ae0 	vsub.f32	s3, s3, s1
 8002576:	1e40      	subs	r0, r0, #1
 8002578:	ee01 1aa1 	vmla.f32	s2, s3, s3
 800257c:	d1f6      	bne.n	800256c <??SCC_DetectBemf_3>
 800257e:	ee61 0a00 	vmul.f32	s1, s2, s0
 8002582:	ed9f 0ad9 	vldr	s0, [pc, #868]	@ 80028e8 <??DataTable18>
 8002586:	eef4 0a40 	vcmp.f32	s1, s0
 800258a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258e:	bfa8      	it	ge
 8002590:	f44f 707a 	movge.w	r0, #1000	@ 0x3e8
 8002594:	da03      	bge.n	800259e <??SCC_DetectBemf_4>
 8002596:	f8b5 0130 	ldrh.w	r0, [r5, #304]	@ 0x130
 800259a:	b128      	cbz	r0, 80025a8 <??SCC_DetectBemf_1>
 800259c:	1e40      	subs	r0, r0, #1

0800259e <??SCC_DetectBemf_4>:
 800259e:	f8a5 0130 	strh.w	r0, [r5, #304]	@ 0x130
 80025a2:	b001      	add	sp, #4
 80025a4:	4620      	mov	r0, r4
 80025a6:	bd30      	pop	{r4, r5, pc}

080025a8 <??SCC_DetectBemf_1>:
 80025a8:	2100      	movs	r1, #0
 80025aa:	f885 1540 	strb.w	r1, [r5, #1344]	@ 0x540
 80025ae:	2400      	movs	r4, #0
 80025b0:	4620      	mov	r0, r4
 80025b2:	b001      	add	sp, #4
 80025b4:	bd30      	pop	{r4, r5, pc}
	...

080025b8 <??DataTable13>:
 80025b8:	0fdb 40c9                                   ...@

080025bc <??DataTable13_1>:
 80025bc:	cccd 3dcc                                   ...=

080025c0 <Fitab>:
 80025c0:	b4f0      	push	{r4, r5, r6, r7}
 80025c2:	4603      	mov	r3, r0
 80025c4:	f20f 30b0 	addw	r0, pc, #944	@ 0x3b0
 80025c8:	460c      	mov	r4, r1
 80025ca:	ec90 1a02 	vldmia	r0, {s2-s3}
 80025ce:	b291      	uxth	r1, r2
 80025d0:	2500      	movs	r5, #0
 80025d2:	b290      	uxth	r0, r2
 80025d4:	ee02 1a10 	vmov	s4, r1
 80025d8:	2800      	cmp	r0, #0
 80025da:	ed9f 0a99 	vldr	s0, [pc, #612]	@ 8002840 <??DataTable16_1>
 80025de:	eddf 0a98 	vldr	s1, [pc, #608]	@ 8002840 <??DataTable16_1>
 80025e2:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 80025e6:	eddf 2a96 	vldr	s5, [pc, #600]	@ 8002840 <??DataTable16_1>
 80025ea:	d04b      	beq.n	8002684 <??Fitab_0>
 80025ec:	f010 0103 	ands.w	r1, r0, #3
 80025f0:	f000 800f 	beq.w	8002612 <??Fitab_1>

080025f4 <??Fitab_2>:
 80025f4:	eb03 0685 	add.w	r6, r3, r5, lsl #2
 80025f8:	eb04 0785 	add.w	r7, r4, r5, lsl #2
 80025fc:	1c6d      	adds	r5, r5, #1
 80025fe:	edd6 3a00 	vldr	s7, [r6]
 8002602:	ed97 3a00 	vldr	s6, [r7]
 8002606:	1e49      	subs	r1, r1, #1
 8002608:	ee30 0a23 	vadd.f32	s0, s0, s7
 800260c:	ee70 0a83 	vadd.f32	s1, s1, s6
 8002610:	d1f0      	bne.n	80025f4 <??Fitab_2>

08002612 <??Fitab_1>:
 8002612:	0880      	lsrs	r0, r0, #2
 8002614:	f000 8036 	beq.w	8002684 <??Fitab_0>

08002618 <??Fitab_3>:
 8002618:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 800261c:	eb04 0785 	add.w	r7, r4, r5, lsl #2
 8002620:	1c6d      	adds	r5, r5, #1
 8002622:	edd1 3a00 	vldr	s7, [r1]
 8002626:	ed97 3a00 	vldr	s6, [r7]
 800262a:	eb03 0685 	add.w	r6, r3, r5, lsl #2
 800262e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8002632:	ee30 0a23 	vadd.f32	s0, s0, s7
 8002636:	ee70 0a83 	vadd.f32	s1, s1, s6
 800263a:	1c6d      	adds	r5, r5, #1
 800263c:	edd6 3a00 	vldr	s7, [r6]
 8002640:	ed91 3a00 	vldr	s6, [r1]
 8002644:	eb03 0685 	add.w	r6, r3, r5, lsl #2
 8002648:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800264c:	ee30 0a23 	vadd.f32	s0, s0, s7
 8002650:	ee70 0a83 	vadd.f32	s1, s1, s6
 8002654:	1c6d      	adds	r5, r5, #1
 8002656:	edd6 3a00 	vldr	s7, [r6]
 800265a:	ed91 3a00 	vldr	s6, [r1]
 800265e:	eb03 0685 	add.w	r6, r3, r5, lsl #2
 8002662:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8002666:	ee30 0a23 	vadd.f32	s0, s0, s7
 800266a:	ee70 0a83 	vadd.f32	s1, s1, s6
 800266e:	1c6d      	adds	r5, r5, #1
 8002670:	edd6 3a00 	vldr	s7, [r6]
 8002674:	ed91 3a00 	vldr	s6, [r1]
 8002678:	1e40      	subs	r0, r0, #1
 800267a:	ee30 0a23 	vadd.f32	s0, s0, s7
 800267e:	ee70 0a83 	vadd.f32	s1, s1, s6
 8002682:	d1c9      	bne.n	8002618 <??Fitab_3>

08002684 <??Fitab_0>:
 8002684:	2100      	movs	r1, #0
 8002686:	b290      	uxth	r0, r2
 8002688:	2800      	cmp	r0, #0
 800268a:	ee80 5a02 	vdiv.f32	s10, s0, s4
 800268e:	d05d      	beq.n	800274c <??Fitab_4>
 8002690:	b292      	uxth	r2, r2
 8002692:	f012 0003 	ands.w	r0, r2, #3
 8002696:	d014      	beq.n	80026c2 <??Fitab_5>

08002698 <??Fitab_6>:
 8002698:	eb03 0681 	add.w	r6, r3, r1, lsl #2
 800269c:	eb04 0581 	add.w	r5, r4, r1, lsl #2
 80026a0:	ed96 4a00 	vldr	s8, [r6]
 80026a4:	ed95 3a00 	vldr	s6, [r5]
 80026a8:	eef0 3a61 	vmov.f32	s7, s3
 80026ac:	1c49      	adds	r1, r1, #1
 80026ae:	ee34 4a45 	vsub.f32	s8, s8, s10
 80026b2:	ee44 3a03 	vmla.f32	s7, s8, s6
 80026b6:	1e40      	subs	r0, r0, #1
 80026b8:	ee44 2a04 	vmla.f32	s5, s8, s8
 80026bc:	eef0 1a63 	vmov.f32	s3, s7
 80026c0:	d1ea      	bne.n	8002698 <??Fitab_6>

080026c2 <??Fitab_5>:
 80026c2:	0892      	lsrs	r2, r2, #2
 80026c4:	f000 8042 	beq.w	800274c <??Fitab_4>

080026c8 <??Fitab_7>:
 80026c8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 80026cc:	eb04 0681 	add.w	r6, r4, r1, lsl #2
 80026d0:	edd0 3a00 	vldr	s7, [r0]
 80026d4:	ed96 3a00 	vldr	s6, [r6]
 80026d8:	1c49      	adds	r1, r1, #1
 80026da:	ee73 4ac5 	vsub.f32	s9, s7, s10
 80026de:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 80026e2:	eef0 3a61 	vmov.f32	s7, s3
 80026e6:	eb04 0081 	add.w	r0, r4, r1, lsl #2
 80026ea:	1c49      	adds	r1, r1, #1
 80026ec:	ee44 3a83 	vmla.f32	s7, s9, s6
 80026f0:	edd5 5a00 	vldr	s11, [r5]
 80026f4:	ed90 4a00 	vldr	s8, [r0]
 80026f8:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 80026fc:	ee35 3ac5 	vsub.f32	s6, s11, s10
 8002700:	eb04 0081 	add.w	r0, r4, r1, lsl #2
 8002704:	1c49      	adds	r1, r1, #1
 8002706:	ee43 3a04 	vmla.f32	s7, s6, s8
 800270a:	edd5 5a00 	vldr	s11, [r5]
 800270e:	ed90 6a00 	vldr	s12, [r0]
 8002712:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8002716:	eb04 0081 	add.w	r0, r4, r1, lsl #2
 800271a:	ee35 4ac5 	vsub.f32	s8, s11, s10
 800271e:	ee44 2aa4 	vmla.f32	s5, s9, s9
 8002722:	ee44 3a06 	vmla.f32	s7, s8, s12
 8002726:	edd5 5a00 	vldr	s11, [r5]
 800272a:	ee43 2a03 	vmla.f32	s5, s6, s6
 800272e:	ed90 3a00 	vldr	s6, [r0]
 8002732:	1c49      	adds	r1, r1, #1
 8002734:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8002738:	ee44 2a04 	vmla.f32	s5, s8, s8
 800273c:	ee45 3a83 	vmla.f32	s7, s11, s6
 8002740:	1e52      	subs	r2, r2, #1
 8002742:	ee45 2aa5 	vmla.f32	s5, s11, s11
 8002746:	eef0 1a63 	vmov.f32	s3, s7
 800274a:	d1bd      	bne.n	80026c8 <??Fitab_7>

0800274c <??Fitab_4>:
 800274c:	bcf0      	pop	{r4, r5, r6, r7}
 800274e:	eec1 2aa2 	vdiv.f32	s5, s3, s5
 8002752:	ee40 0a62 	vmls.f32	s1, s0, s5
 8002756:	eef0 1a62 	vmov.f32	s3, s5
 800275a:	ee80 0a82 	vdiv.f32	s0, s1, s4
 800275e:	eef0 0a61 	vmov.f32	s1, s3
 8002762:	4770      	bx	lr

08002764 <??DataTable14>:
 8002764:	0000 4270                                   ..pB

08002768 <SCC_UpdateRevup>:
 8002768:	b530      	push	{r4, r5, lr}
 800276a:	b081      	sub	sp, #4
 800276c:	4604      	mov	r4, r0
 800276e:	ed2d 8b02 	vpush	{d8}
 8002772:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
 8002776:	ed94 0a3a 	vldr	s0, [r4, #232]	@ 0xe8
 800277a:	ee01 0a90 	vmov	s3, r0
 800277e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002782:	eef8 1a61 	vcvt.f32.u32	s3, s3
 8002786:	eec0 1a21 	vdiv.f32	s3, s0, s3
 800278a:	ed9f 1a69 	vldr	s2, [pc, #420]	@ 8002930 <??DataTable19>
 800278e:	ee21 8a81 	vmul.f32	s16, s3, s2
 8002792:	eddf 0a68 	vldr	s1, [pc, #416]	@ 8002934 <??DataTable19_1>
 8002796:	eeb4 8a60 	vcmp.f32	s16, s1
 800279a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279e:	db09      	blt.n	80027b4 <??SCC_UpdateRevup_0>
 80027a0:	eb00 1080 	add.w	r0, r0, r0, lsl #6
 80027a4:	ee00 0a10 	vmov	s0, r0
 80027a8:	ed84 0a3a 	vstr	s0, [r4, #232]	@ 0xe8
 80027ac:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80027b0:	ed9f 8a61 	vldr	s16, [pc, #388]	@ 8002938 <??DataTable19_2>

080027b4 <??SCC_UpdateRevup_0>:
 80027b4:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80027b8:	ee60 0a20 	vmul.f32	s1, s0, s1
 80027bc:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 800293c <??DataTable19_3>
 80027c0:	ee80 0a80 	vdiv.f32	s0, s1, s0
 80027c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80027c8:	ee10 5a10 	vmov	r5, s0
 80027cc:	b229      	sxth	r1, r5
 80027ce:	4620      	mov	r0, r4
 80027d0:	f000 f822 	bl	8002818 <SCC_SetMinStarupSpeedSTO>
 80027d4:	6a20      	ldr	r0, [r4, #32]
 80027d6:	b22a      	sxth	r2, r5
 80027d8:	2101      	movs	r1, #1
 80027da:	f009 f8b7 	bl	800b94c <RUC_SetPhaseFinalMecSpeedUnit>
 80027de:	6a20      	ldr	r0, [r4, #32]
 80027e0:	b22a      	sxth	r2, r5
 80027e2:	2102      	movs	r1, #2
 80027e4:	f009 f8b2 	bl	800b94c <RUC_SetPhaseFinalMecSpeedUnit>
 80027e8:	6a20      	ldr	r0, [r4, #32]
 80027ea:	b22a      	sxth	r2, r5
 80027ec:	2103      	movs	r1, #3
 80027ee:	f009 f8ad 	bl	800b94c <RUC_SetPhaseFinalMecSpeedUnit>
 80027f2:	6a20      	ldr	r0, [r4, #32]
 80027f4:	b22a      	sxth	r2, r5
 80027f6:	2104      	movs	r1, #4
 80027f8:	f009 f8a8 	bl	800b94c <RUC_SetPhaseFinalMecSpeedUnit>
 80027fc:	eebd 0ac8 	vcvt.s32.f32	s0, s16
 8002800:	ee10 0a10 	vmov	r0, s0
 8002804:	b282      	uxth	r2, r0
 8002806:	6a20      	ldr	r0, [r4, #32]
 8002808:	ecbd 8b02 	vpop	{d8}
 800280c:	2101      	movs	r1, #1
 800280e:	b001      	add	sp, #4
 8002810:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002814:	f009 b894 	b.w	800b940 <RUC_SetPhaseDurationms>

08002818 <SCC_SetMinStarupSpeedSTO>:
 8002818:	ee00 1a10 	vmov	s0, r1
 800281c:	eef8 0ac0 	vcvt.f32.s32	s1, s0
 8002820:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 8002940 <??DataTable19_4>
 8002824:	ee20 0a80 	vmul.f32	s0, s1, s0
 8002828:	eeb0 0ac0 	vabs.f32	s0, s0
 800282c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800282e:	eefd 0ac0 	vcvt.s32.f32	s1, s0
 8002832:	ee10 1a90 	vmov	r1, s1
 8002836:	f8a0 1114 	strh.w	r1, [r0, #276]	@ 0x114
 800283a:	4770      	bx	lr

0800283c <??DataTable16>:
 800283c:	b717 3ad1                                   ...:

08002840 <??DataTable16_1>:
 8002840:	0000 0000                                   ....

08002844 <SCC_SetNominalCurrent>:
 8002844:	eef5 0a00 	vmov.f32	s1, #80	@ 0x3e800000  0.250
 8002848:	ee60 0a20 	vmul.f32	s1, s0, s1
 800284c:	edc0 0a17 	vstr	s1, [r0, #92]	@ 0x5c
 8002850:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8002944 <??DataTable19_5>
 8002854:	f8d0 1548 	ldr.w	r1, [r0, #1352]	@ 0x548
 8002858:	ed80 0a15 	vstr	s0, [r0, #84]	@ 0x54
 800285c:	ed80 0a16 	vstr	s0, [r0, #88]	@ 0x58
 8002860:	ee60 0a20 	vmul.f32	s1, s0, s1
 8002864:	ed91 0a06 	vldr	s0, [r1, #24]
 8002868:	ee20 0a80 	vmul.f32	s0, s1, s0
 800286c:	edd1 0a07 	vldr	s1, [r1, #28]
 8002870:	ee60 0a20 	vmul.f32	s1, s0, s1
 8002874:	ed91 0a13 	vldr	s0, [r1, #76]	@ 0x4c
 8002878:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800287a:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800287e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002882:	ee10 2a10 	vmov	r2, s0
 8002886:	b119      	cbz	r1, 8002890 <??SCC_SetNominalCurrent_0>
 8002888:	b213      	sxth	r3, r2
 800288a:	425b      	negs	r3, r3
 800288c:	84ca      	strh	r2, [r1, #38]	@ 0x26
 800288e:	850b      	strh	r3, [r1, #40]	@ 0x28

08002890 <??SCC_SetNominalCurrent_0>:
 8002890:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002892:	b108      	cbz	r0, 8002898 <??SCC_SetNominalCurrent_1>
 8002894:	f8a0 2078 	strh.w	r2, [r0, #120]	@ 0x78

08002898 <??SCC_SetNominalCurrent_1>:
 8002898:	4770      	bx	lr
	...

0800289c <??DataTable17>:
 800289c:	0000 3b80                                   ...;

080028a0 <SCC_SetNominalSpeed>:
 80028a0:	b911      	cbnz	r1, 80028a8 <??SCC_SetNominalSpeed_0>
 80028a2:	f8d0 1548 	ldr.w	r1, [r0, #1352]	@ 0x548
 80028a6:	6c49      	ldr	r1, [r1, #68]	@ 0x44

080028a8 <??SCC_SetNominalSpeed_0>:
 80028a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002954 <??DataTable19_9>)
 80028aa:	fb81 2303 	smull	r2, r3, r1, r3
 80028ae:	ee00 1a90 	vmov	s1, r1
 80028b2:	109a      	asrs	r2, r3, #2
 80028b4:	f8c0 10e4 	str.w	r1, [r0, #228]	@ 0xe4
 80028b8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80028bc:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8002948 <??DataTable19_6>
 80028c0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80028c4:	ee20 0a80 	vmul.f32	s0, s1, s0
 80028c8:	f8c0 20ec 	str.w	r2, [r0, #236]	@ 0xec
 80028cc:	f44f 7cfa 	mov.w	ip, #500	@ 0x1f4
 80028d0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80028d4:	f8d0 10e4 	ldr.w	r1, [r0, #228]	@ 0xe4
 80028d8:	f8c0 c0ec 	str.w	ip, [r0, #236]	@ 0xec
 80028dc:	ed80 0a3a 	vstr	s0, [r0, #232]	@ 0xe8
 80028e0:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80028e2:	f8c0 1080 	str.w	r1, [r0, #128]	@ 0x80
 80028e6:	4770      	bx	lr

080028e8 <??DataTable18>:
 80028e8:	d70b 3c23                                   ..#<

080028ec <SCC_GetResistorOffset>:
 80028ec:	f8d0 0548 	ldr.w	r0, [r0, #1352]	@ 0x548
 80028f0:	ed90 0a0a 	vldr	s0, [r0, #40]	@ 0x28
 80028f4:	4770      	bx	lr
	...

080028f8 <SCC_GetStartupCurrentS16>:
 80028f8:	f8d0 1548 	ldr.w	r1, [r0, #1352]	@ 0x548
 80028fc:	ed91 1a06 	vldr	s2, [r1, #24]
 8002900:	ed91 0a07 	vldr	s0, [r1, #28]
 8002904:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8002944 <??DataTable19_5>
 8002908:	ee61 0a20 	vmul.f32	s1, s2, s1
 800290c:	ee20 0a80 	vmul.f32	s0, s1, s0
 8002910:	edd1 0a13 	vldr	s1, [r1, #76]	@ 0x4c
 8002914:	eec0 0a20 	vdiv.f32	s1, s0, s1
 8002918:	ed90 0a15 	vldr	s0, [r0, #84]	@ 0x54
 800291c:	ee20 0a80 	vmul.f32	s0, s1, s0
 8002920:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002924:	ee10 0a10 	vmov	r0, s0
 8002928:	1e40      	subs	r0, r0, #1
 800292a:	b200      	sxth	r0, r0
 800292c:	4770      	bx	lr
	...

08002930 <??DataTable19>:
 8002930:	0000 447a                                   ..zD

08002934 <??DataTable19_1>:
 8002934:	ff01 477f                                   ...G

08002938 <??DataTable19_2>:
 8002938:	e800 477d                                   ..}G

0800293c <??DataTable19_3>:
 800293c:	0000 4270                                   ..pB

08002940 <??DataTable19_4>:
 8002940:	cccd 3f8c                                   ...?

08002944 <??DataTable19_5>:
 8002944:	0000 4780                                   ...G

08002948 <??DataTable19_6>:
 8002948:	cccd 3ecc                                   ...>

0800294c <??DataTable19_7>:
 800294c:	ea5e 000f                                   ^...

08002950 <??DataTable19_8>:
 8002950:	8dc5 0648                                   ..H.

08002954 <??DataTable19_9>:
 8002954:	6667 6666                                   gfff

08002958 <??DataTable19_10>:
 8002958:	999a 9999                                   ....

0800295c <??DataTable19_11>:
 800295c:	9999 3fb9                                   ...?

08002960 <??DataTable19_12>:
 8002960:	5556 5555                                   VUUU

08002964 <SCC_SetPBCharacterization>:
 8002964:	f8d0 0548 	ldr.w	r0, [r0, #1352]	@ 0x548
 8002968:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
 800296c:	4770      	bx	lr

0800296e <SCC_SetResistorOffset>:
 800296e:	f8d0 0548 	ldr.w	r0, [r0, #1352]	@ 0x548
 8002972:	ed80 0a0a 	vstr	s0, [r0, #40]	@ 0x28
 8002976:	4770      	bx	lr

08002978 <?_0>:
	...

08002980 <__aeabi_dmul>:
 8002980:	b570      	push	{r4, r5, r6, lr}
 8002982:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8002986:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800298a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800298e:	bf1d      	ittte	ne
 8002990:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002994:	ea94 0f0c 	teqne	r4, ip
 8002998:	ea95 0f0c 	teqne	r5, ip
 800299c:	f000 f8de 	bleq	8002b5c <__aeabi_dmul+0x1dc>
 80029a0:	442c      	add	r4, r5
 80029a2:	ea81 0603 	eor.w	r6, r1, r3
 80029a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80029aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80029ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80029b2:	bf18      	it	ne
 80029b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80029b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80029bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029c0:	d038      	beq.n	8002a34 <__aeabi_dmul+0xb4>
 80029c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80029c6:	f04f 0500 	mov.w	r5, #0
 80029ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80029ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80029d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80029d6:	f04f 0600 	mov.w	r6, #0
 80029da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80029de:	f09c 0f00 	teq	ip, #0
 80029e2:	bf18      	it	ne
 80029e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80029e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80029ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80029f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80029f4:	d204      	bcs.n	8002a00 <__aeabi_dmul+0x80>
 80029f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80029fa:	416d      	adcs	r5, r5
 80029fc:	eb46 0606 	adc.w	r6, r6, r6
 8002a00:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8002a04:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002a08:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8002a0c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8002a10:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8002a14:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8002a18:	bf88      	it	hi
 8002a1a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8002a1e:	d81e      	bhi.n	8002a5e <__aeabi_dmul+0xde>
 8002a20:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8002a24:	bf08      	it	eq
 8002a26:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8002a2a:	f150 0000 	adcs.w	r0, r0, #0
 8002a2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002a32:	bd70      	pop	{r4, r5, r6, pc}
 8002a34:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8002a38:	ea46 0101 	orr.w	r1, r6, r1
 8002a3c:	ea40 0002 	orr.w	r0, r0, r2
 8002a40:	ea81 0103 	eor.w	r1, r1, r3
 8002a44:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8002a48:	bfc2      	ittt	gt
 8002a4a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002a4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002a52:	bd70      	popgt	{r4, r5, r6, pc}
 8002a54:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8002a58:	f04f 0e00 	mov.w	lr, #0
 8002a5c:	3c01      	subs	r4, #1
 8002a5e:	f300 80ab 	bgt.w	8002bb8 <__aeabi_dmul+0x238>
 8002a62:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8002a66:	bfde      	ittt	le
 8002a68:	2000      	movle	r0, #0
 8002a6a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8002a6e:	bd70      	pople	{r4, r5, r6, pc}
 8002a70:	f1c4 0400 	rsb	r4, r4, #0
 8002a74:	3c20      	subs	r4, #32
 8002a76:	da35      	bge.n	8002ae4 <__aeabi_dmul+0x164>
 8002a78:	340c      	adds	r4, #12
 8002a7a:	dc1b      	bgt.n	8002ab4 <__aeabi_dmul+0x134>
 8002a7c:	f104 0414 	add.w	r4, r4, #20
 8002a80:	f1c4 0520 	rsb	r5, r4, #32
 8002a84:	fa00 f305 	lsl.w	r3, r0, r5
 8002a88:	fa20 f004 	lsr.w	r0, r0, r4
 8002a8c:	fa01 f205 	lsl.w	r2, r1, r5
 8002a90:	ea40 0002 	orr.w	r0, r0, r2
 8002a94:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8002a98:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8002a9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002aa0:	fa21 f604 	lsr.w	r6, r1, r4
 8002aa4:	eb42 0106 	adc.w	r1, r2, r6
 8002aa8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002aac:	bf08      	it	eq
 8002aae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002ab2:	bd70      	pop	{r4, r5, r6, pc}
 8002ab4:	f1c4 040c 	rsb	r4, r4, #12
 8002ab8:	f1c4 0520 	rsb	r5, r4, #32
 8002abc:	fa00 f304 	lsl.w	r3, r0, r4
 8002ac0:	fa20 f005 	lsr.w	r0, r0, r5
 8002ac4:	fa01 f204 	lsl.w	r2, r1, r4
 8002ac8:	ea40 0002 	orr.w	r0, r0, r2
 8002acc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8002ad0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002ad4:	f141 0100 	adc.w	r1, r1, #0
 8002ad8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002adc:	bf08      	it	eq
 8002ade:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002ae2:	bd70      	pop	{r4, r5, r6, pc}
 8002ae4:	f1c4 0520 	rsb	r5, r4, #32
 8002ae8:	fa00 f205 	lsl.w	r2, r0, r5
 8002aec:	ea4e 0e02 	orr.w	lr, lr, r2
 8002af0:	fa20 f304 	lsr.w	r3, r0, r4
 8002af4:	fa01 f205 	lsl.w	r2, r1, r5
 8002af8:	ea43 0302 	orr.w	r3, r3, r2
 8002afc:	fa21 f004 	lsr.w	r0, r1, r4
 8002b00:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8002b04:	fa21 f204 	lsr.w	r2, r1, r4
 8002b08:	ea20 0002 	bic.w	r0, r0, r2
 8002b0c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8002b10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002b14:	bf08      	it	eq
 8002b16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002b1a:	bd70      	pop	{r4, r5, r6, pc}
 8002b1c:	f094 0f00 	teq	r4, #0
 8002b20:	d10f      	bne.n	8002b42 <__aeabi_dmul+0x1c2>
 8002b22:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8002b26:	0040      	lsls	r0, r0, #1
 8002b28:	eb41 0101 	adc.w	r1, r1, r1
 8002b2c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8002b30:	bf08      	it	eq
 8002b32:	3c01      	subeq	r4, #1
 8002b34:	d0f7      	beq.n	8002b26 <__aeabi_dmul+0x1a6>
 8002b36:	ea41 0106 	orr.w	r1, r1, r6
 8002b3a:	f095 0f00 	teq	r5, #0
 8002b3e:	bf18      	it	ne
 8002b40:	4770      	bxne	lr
 8002b42:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8002b46:	0052      	lsls	r2, r2, #1
 8002b48:	eb43 0303 	adc.w	r3, r3, r3
 8002b4c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002b50:	bf08      	it	eq
 8002b52:	3d01      	subeq	r5, #1
 8002b54:	d0f7      	beq.n	8002b46 <__aeabi_dmul+0x1c6>
 8002b56:	ea43 0306 	orr.w	r3, r3, r6
 8002b5a:	4770      	bx	lr
 8002b5c:	ea94 0f0c 	teq	r4, ip
 8002b60:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002b64:	bf18      	it	ne
 8002b66:	ea95 0f0c 	teqne	r5, ip
 8002b6a:	d00c      	beq.n	8002b86 <__aeabi_dmul+0x206>
 8002b6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002b70:	bf18      	it	ne
 8002b72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002b76:	d1d1      	bne.n	8002b1c <__aeabi_dmul+0x19c>
 8002b78:	ea81 0103 	eor.w	r1, r1, r3
 8002b7c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8002b80:	f04f 0000 	mov.w	r0, #0
 8002b84:	bd70      	pop	{r4, r5, r6, pc}
 8002b86:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002b8a:	bf06      	itte	eq
 8002b8c:	4610      	moveq	r0, r2
 8002b8e:	4619      	moveq	r1, r3
 8002b90:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002b94:	d019      	beq.n	8002bca <__aeabi_dmul+0x24a>
 8002b96:	ea94 0f0c 	teq	r4, ip
 8002b9a:	d102      	bne.n	8002ba2 <__aeabi_dmul+0x222>
 8002b9c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8002ba0:	d113      	bne.n	8002bca <__aeabi_dmul+0x24a>
 8002ba2:	ea95 0f0c 	teq	r5, ip
 8002ba6:	d105      	bne.n	8002bb4 <__aeabi_dmul+0x234>
 8002ba8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8002bac:	bf1c      	itt	ne
 8002bae:	4610      	movne	r0, r2
 8002bb0:	4619      	movne	r1, r3
 8002bb2:	d10a      	bne.n	8002bca <__aeabi_dmul+0x24a>
 8002bb4:	ea81 0103 	eor.w	r1, r1, r3
 8002bb8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8002bbc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8002bc0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002bc4:	f04f 0000 	mov.w	r0, #0
 8002bc8:	bd70      	pop	{r4, r5, r6, pc}
 8002bca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8002bce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}

08002bd4 <__aeabi_drsub>:
 8002bd4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8002bd8:	e002      	b.n	8002be0 <__adddf3>
 8002bda:	bf00      	nop

08002bdc <__aeabi_dsub>:
 8002bdc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08002be0 <__adddf3>:
 8002be0:	b530      	push	{r4, r5, lr}
 8002be2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8002be6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8002bea:	ea94 0f05 	teq	r4, r5
 8002bee:	bf08      	it	eq
 8002bf0:	ea90 0f02 	teqeq	r0, r2
 8002bf4:	bf1f      	itttt	ne
 8002bf6:	ea54 0c00 	orrsne.w	ip, r4, r0
 8002bfa:	ea55 0c02 	orrsne.w	ip, r5, r2
 8002bfe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8002c02:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002c06:	f000 80e2 	beq.w	8002dce <__adddf3+0x1ee>
 8002c0a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8002c0e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8002c12:	bfb8      	it	lt
 8002c14:	426d      	neglt	r5, r5
 8002c16:	dd0c      	ble.n	8002c32 <__adddf3+0x52>
 8002c18:	442c      	add	r4, r5
 8002c1a:	ea80 0202 	eor.w	r2, r0, r2
 8002c1e:	ea81 0303 	eor.w	r3, r1, r3
 8002c22:	ea82 0000 	eor.w	r0, r2, r0
 8002c26:	ea83 0101 	eor.w	r1, r3, r1
 8002c2a:	ea80 0202 	eor.w	r2, r0, r2
 8002c2e:	ea81 0303 	eor.w	r3, r1, r3
 8002c32:	2d36      	cmp	r5, #54	@ 0x36
 8002c34:	bf88      	it	hi
 8002c36:	bd30      	pophi	{r4, r5, pc}
 8002c38:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8002c3c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002c40:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8002c44:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002c48:	d002      	beq.n	8002c50 <__adddf3+0x70>
 8002c4a:	4240      	negs	r0, r0
 8002c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002c50:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8002c54:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002c58:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002c5c:	d002      	beq.n	8002c64 <__adddf3+0x84>
 8002c5e:	4252      	negs	r2, r2
 8002c60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002c64:	ea94 0f05 	teq	r4, r5
 8002c68:	f000 80a7 	beq.w	8002dba <__adddf3+0x1da>
 8002c6c:	f1a4 0401 	sub.w	r4, r4, #1
 8002c70:	f1d5 0e20 	rsbs	lr, r5, #32
 8002c74:	db0d      	blt.n	8002c92 <__adddf3+0xb2>
 8002c76:	fa02 fc0e 	lsl.w	ip, r2, lr
 8002c7a:	fa22 f205 	lsr.w	r2, r2, r5
 8002c7e:	1880      	adds	r0, r0, r2
 8002c80:	f141 0100 	adc.w	r1, r1, #0
 8002c84:	fa03 f20e 	lsl.w	r2, r3, lr
 8002c88:	1880      	adds	r0, r0, r2
 8002c8a:	fa43 f305 	asr.w	r3, r3, r5
 8002c8e:	4159      	adcs	r1, r3
 8002c90:	e00e      	b.n	8002cb0 <__adddf3+0xd0>
 8002c92:	f1a5 0520 	sub.w	r5, r5, #32
 8002c96:	f10e 0e20 	add.w	lr, lr, #32
 8002c9a:	2a01      	cmp	r2, #1
 8002c9c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8002ca0:	bf28      	it	cs
 8002ca2:	f04c 0c02 	orrcs.w	ip, ip, #2
 8002ca6:	fa43 f305 	asr.w	r3, r3, r5
 8002caa:	18c0      	adds	r0, r0, r3
 8002cac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8002cb0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8002cb4:	d507      	bpl.n	8002cc6 <__adddf3+0xe6>
 8002cb6:	f04f 0e00 	mov.w	lr, #0
 8002cba:	f1dc 0c00 	rsbs	ip, ip, #0
 8002cbe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8002cc2:	eb6e 0101 	sbc.w	r1, lr, r1
 8002cc6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8002cca:	d31b      	bcc.n	8002d04 <__adddf3+0x124>
 8002ccc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8002cd0:	d30c      	bcc.n	8002cec <__adddf3+0x10c>
 8002cd2:	0849      	lsrs	r1, r1, #1
 8002cd4:	ea5f 0030 	movs.w	r0, r0, rrx
 8002cd8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8002cdc:	f104 0401 	add.w	r4, r4, #1
 8002ce0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8002ce4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8002ce8:	f080 809a 	bcs.w	8002e20 <__adddf3+0x240>
 8002cec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8002cf0:	bf08      	it	eq
 8002cf2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002cf6:	f150 0000 	adcs.w	r0, r0, #0
 8002cfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002cfe:	ea41 0105 	orr.w	r1, r1, r5
 8002d02:	bd30      	pop	{r4, r5, pc}
 8002d04:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8002d08:	4140      	adcs	r0, r0
 8002d0a:	eb41 0101 	adc.w	r1, r1, r1
 8002d0e:	3c01      	subs	r4, #1
 8002d10:	bf28      	it	cs
 8002d12:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8002d16:	d2e9      	bcs.n	8002cec <__adddf3+0x10c>
 8002d18:	f091 0f00 	teq	r1, #0
 8002d1c:	bf04      	itt	eq
 8002d1e:	4601      	moveq	r1, r0
 8002d20:	2000      	moveq	r0, #0
 8002d22:	fab1 f381 	clz	r3, r1
 8002d26:	bf08      	it	eq
 8002d28:	3320      	addeq	r3, #32
 8002d2a:	f1a3 030b 	sub.w	r3, r3, #11
 8002d2e:	f1b3 0220 	subs.w	r2, r3, #32
 8002d32:	da0c      	bge.n	8002d4e <__adddf3+0x16e>
 8002d34:	320c      	adds	r2, #12
 8002d36:	dd08      	ble.n	8002d4a <__adddf3+0x16a>
 8002d38:	f102 0c14 	add.w	ip, r2, #20
 8002d3c:	f1c2 020c 	rsb	r2, r2, #12
 8002d40:	fa01 f00c 	lsl.w	r0, r1, ip
 8002d44:	fa21 f102 	lsr.w	r1, r1, r2
 8002d48:	e00c      	b.n	8002d64 <__adddf3+0x184>
 8002d4a:	f102 0214 	add.w	r2, r2, #20
 8002d4e:	bfd8      	it	le
 8002d50:	f1c2 0c20 	rsble	ip, r2, #32
 8002d54:	fa01 f102 	lsl.w	r1, r1, r2
 8002d58:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002d5c:	bfdc      	itt	le
 8002d5e:	ea41 010c 	orrle.w	r1, r1, ip
 8002d62:	4090      	lslle	r0, r2
 8002d64:	1ae4      	subs	r4, r4, r3
 8002d66:	bfa2      	ittt	ge
 8002d68:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8002d6c:	4329      	orrge	r1, r5
 8002d6e:	bd30      	popge	{r4, r5, pc}
 8002d70:	ea6f 0404 	mvn.w	r4, r4
 8002d74:	3c1f      	subs	r4, #31
 8002d76:	da1c      	bge.n	8002db2 <__adddf3+0x1d2>
 8002d78:	340c      	adds	r4, #12
 8002d7a:	dc0e      	bgt.n	8002d9a <__adddf3+0x1ba>
 8002d7c:	f104 0414 	add.w	r4, r4, #20
 8002d80:	f1c4 0220 	rsb	r2, r4, #32
 8002d84:	fa20 f004 	lsr.w	r0, r0, r4
 8002d88:	fa01 f302 	lsl.w	r3, r1, r2
 8002d8c:	ea40 0003 	orr.w	r0, r0, r3
 8002d90:	fa21 f304 	lsr.w	r3, r1, r4
 8002d94:	ea45 0103 	orr.w	r1, r5, r3
 8002d98:	bd30      	pop	{r4, r5, pc}
 8002d9a:	f1c4 040c 	rsb	r4, r4, #12
 8002d9e:	f1c4 0220 	rsb	r2, r4, #32
 8002da2:	fa20 f002 	lsr.w	r0, r0, r2
 8002da6:	fa01 f304 	lsl.w	r3, r1, r4
 8002daa:	ea40 0003 	orr.w	r0, r0, r3
 8002dae:	4629      	mov	r1, r5
 8002db0:	bd30      	pop	{r4, r5, pc}
 8002db2:	fa21 f004 	lsr.w	r0, r1, r4
 8002db6:	4629      	mov	r1, r5
 8002db8:	bd30      	pop	{r4, r5, pc}
 8002dba:	f094 0f00 	teq	r4, #0
 8002dbe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8002dc2:	bf06      	itte	eq
 8002dc4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8002dc8:	3401      	addeq	r4, #1
 8002dca:	3d01      	subne	r5, #1
 8002dcc:	e74e      	b.n	8002c6c <__adddf3+0x8c>
 8002dce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002dd2:	bf18      	it	ne
 8002dd4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002dd8:	d029      	beq.n	8002e2e <__adddf3+0x24e>
 8002dda:	ea94 0f05 	teq	r4, r5
 8002dde:	bf08      	it	eq
 8002de0:	ea90 0f02 	teqeq	r0, r2
 8002de4:	d005      	beq.n	8002df2 <__adddf3+0x212>
 8002de6:	ea54 0c00 	orrs.w	ip, r4, r0
 8002dea:	bf04      	itt	eq
 8002dec:	4619      	moveq	r1, r3
 8002dee:	4610      	moveq	r0, r2
 8002df0:	bd30      	pop	{r4, r5, pc}
 8002df2:	ea91 0f03 	teq	r1, r3
 8002df6:	bf1e      	ittt	ne
 8002df8:	2100      	movne	r1, #0
 8002dfa:	2000      	movne	r0, #0
 8002dfc:	bd30      	popne	{r4, r5, pc}
 8002dfe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8002e02:	d105      	bne.n	8002e10 <__adddf3+0x230>
 8002e04:	0040      	lsls	r0, r0, #1
 8002e06:	4149      	adcs	r1, r1
 8002e08:	bf28      	it	cs
 8002e0a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8002e0e:	bd30      	pop	{r4, r5, pc}
 8002e10:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8002e14:	bf3c      	itt	cc
 8002e16:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8002e1a:	bd30      	popcc	{r4, r5, pc}
 8002e1c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8002e20:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8002e24:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002e28:	f04f 0000 	mov.w	r0, #0
 8002e2c:	bd30      	pop	{r4, r5, pc}
 8002e2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002e32:	bf1a      	itte	ne
 8002e34:	4619      	movne	r1, r3
 8002e36:	4610      	movne	r0, r2
 8002e38:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8002e3c:	bf1c      	itt	ne
 8002e3e:	460b      	movne	r3, r1
 8002e40:	4602      	movne	r2, r0
 8002e42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002e46:	bf06      	itte	eq
 8002e48:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002e4c:	ea91 0f03 	teqeq	r1, r3
 8002e50:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8002e54:	bd30      	pop	{r4, r5, pc}
 8002e56:	bf00      	nop

08002e58 <__aeabi_ui2d>:
 8002e58:	f090 0f00 	teq	r0, #0
 8002e5c:	bf04      	itt	eq
 8002e5e:	2100      	moveq	r1, #0
 8002e60:	4770      	bxeq	lr
 8002e62:	b530      	push	{r4, r5, lr}
 8002e64:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8002e68:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8002e6c:	f04f 0500 	mov.w	r5, #0
 8002e70:	f04f 0100 	mov.w	r1, #0
 8002e74:	e750      	b.n	8002d18 <__adddf3+0x138>
 8002e76:	bf00      	nop

08002e78 <__aeabi_i2d>:
 8002e78:	f090 0f00 	teq	r0, #0
 8002e7c:	bf04      	itt	eq
 8002e7e:	2100      	moveq	r1, #0
 8002e80:	4770      	bxeq	lr
 8002e82:	b530      	push	{r4, r5, lr}
 8002e84:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8002e88:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8002e8c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8002e90:	bf48      	it	mi
 8002e92:	4240      	negmi	r0, r0
 8002e94:	f04f 0100 	mov.w	r1, #0
 8002e98:	e73e      	b.n	8002d18 <__adddf3+0x138>
 8002e9a:	bf00      	nop

08002e9c <__aeabi_f2d>:
 8002e9c:	0042      	lsls	r2, r0, #1
 8002e9e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8002ea2:	ea4f 0131 	mov.w	r1, r1, rrx
 8002ea6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8002eaa:	bf1f      	itttt	ne
 8002eac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8002eb0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8002eb4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8002eb8:	4770      	bxne	lr
 8002eba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8002ebe:	bf08      	it	eq
 8002ec0:	4770      	bxeq	lr
 8002ec2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8002ec6:	bf04      	itt	eq
 8002ec8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8002ecc:	4770      	bxeq	lr
 8002ece:	b530      	push	{r4, r5, lr}
 8002ed0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8002ed4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8002ed8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8002edc:	e71c      	b.n	8002d18 <__adddf3+0x138>
 8002ede:	bf00      	nop

08002ee0 <__aeabi_ul2d>:
 8002ee0:	ea50 0201 	orrs.w	r2, r0, r1
 8002ee4:	bf08      	it	eq
 8002ee6:	4770      	bxeq	lr
 8002ee8:	b530      	push	{r4, r5, lr}
 8002eea:	f04f 0500 	mov.w	r5, #0
 8002eee:	e00a      	b.n	8002f06 <__aeabi_l2d+0x16>

08002ef0 <__aeabi_l2d>:
 8002ef0:	ea50 0201 	orrs.w	r2, r0, r1
 8002ef4:	bf08      	it	eq
 8002ef6:	4770      	bxeq	lr
 8002ef8:	b530      	push	{r4, r5, lr}
 8002efa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8002efe:	d502      	bpl.n	8002f06 <__aeabi_l2d+0x16>
 8002f00:	4240      	negs	r0, r0
 8002f02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002f06:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8002f0a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8002f0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8002f12:	f43f aed8 	beq.w	8002cc6 <__adddf3+0xe6>
 8002f16:	f04f 0203 	mov.w	r2, #3
 8002f1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002f1e:	bf18      	it	ne
 8002f20:	3203      	addne	r2, #3
 8002f22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002f26:	bf18      	it	ne
 8002f28:	3203      	addne	r2, #3
 8002f2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8002f2e:	f1c2 0320 	rsb	r3, r2, #32
 8002f32:	fa00 fc03 	lsl.w	ip, r0, r3
 8002f36:	fa20 f002 	lsr.w	r0, r0, r2
 8002f3a:	fa01 fe03 	lsl.w	lr, r1, r3
 8002f3e:	ea40 000e 	orr.w	r0, r0, lr
 8002f42:	fa21 f102 	lsr.w	r1, r1, r2
 8002f46:	4414      	add	r4, r2
 8002f48:	e6bd      	b.n	8002cc6 <__adddf3+0xe6>
 8002f4a:	bf00      	nop

08002f4c <__aeabi_d2iz>:
 8002f4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002f50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8002f54:	d215      	bcs.n	8002f82 <__aeabi_d2iz+0x36>
 8002f56:	d511      	bpl.n	8002f7c <__aeabi_d2iz+0x30>
 8002f58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8002f5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8002f60:	d912      	bls.n	8002f88 <__aeabi_d2iz+0x3c>
 8002f62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002f66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8002f6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8002f72:	fa23 f002 	lsr.w	r0, r3, r2
 8002f76:	bf18      	it	ne
 8002f78:	4240      	negne	r0, r0
 8002f7a:	4770      	bx	lr
 8002f7c:	f04f 0000 	mov.w	r0, #0
 8002f80:	4770      	bx	lr
 8002f82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8002f86:	d105      	bne.n	8002f94 <__aeabi_d2iz+0x48>
 8002f88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8002f8c:	bf08      	it	eq
 8002f8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8002f92:	4770      	bx	lr
 8002f94:	f04f 0000 	mov.w	r0, #0
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop

08002f9c <__aeabi_uldivmod>:
 8002f9c:	b953      	cbnz	r3, 8002fb4 <__aeabi_uldivmod+0x18>
 8002f9e:	b94a      	cbnz	r2, 8002fb4 <__aeabi_uldivmod+0x18>
 8002fa0:	2900      	cmp	r1, #0
 8002fa2:	bf08      	it	eq
 8002fa4:	2800      	cmpeq	r0, #0
 8002fa6:	bf1c      	itt	ne
 8002fa8:	f04f 31ff 	movne.w	r1, #4294967295
 8002fac:	f04f 30ff 	movne.w	r0, #4294967295
 8002fb0:	f000 b96a 	b.w	8003288 <__aeabi_idiv0>
 8002fb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8002fb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8002fbc:	f000 f806 	bl	8002fcc <__udivmoddi4>
 8002fc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8002fc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002fc8:	b004      	add	sp, #16
 8002fca:	4770      	bx	lr

08002fcc <__udivmoddi4>:
 8002fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fd0:	9d08      	ldr	r5, [sp, #32]
 8002fd2:	460c      	mov	r4, r1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d14e      	bne.n	8003076 <__udivmoddi4+0xaa>
 8002fd8:	4694      	mov	ip, r2
 8002fda:	458c      	cmp	ip, r1
 8002fdc:	4686      	mov	lr, r0
 8002fde:	fab2 f282 	clz	r2, r2
 8002fe2:	d962      	bls.n	80030aa <__udivmoddi4+0xde>
 8002fe4:	b14a      	cbz	r2, 8002ffa <__udivmoddi4+0x2e>
 8002fe6:	f1c2 0320 	rsb	r3, r2, #32
 8002fea:	4091      	lsls	r1, r2
 8002fec:	fa20 f303 	lsr.w	r3, r0, r3
 8002ff0:	fa0c fc02 	lsl.w	ip, ip, r2
 8002ff4:	4319      	orrs	r1, r3
 8002ff6:	fa00 fe02 	lsl.w	lr, r0, r2
 8002ffa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002ffe:	fa1f f68c 	uxth.w	r6, ip
 8003002:	fbb1 f4f7 	udiv	r4, r1, r7
 8003006:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800300a:	fb07 1114 	mls	r1, r7, r4, r1
 800300e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003012:	fb04 f106 	mul.w	r1, r4, r6
 8003016:	4299      	cmp	r1, r3
 8003018:	d90a      	bls.n	8003030 <__udivmoddi4+0x64>
 800301a:	eb1c 0303 	adds.w	r3, ip, r3
 800301e:	f104 30ff 	add.w	r0, r4, #4294967295
 8003022:	f080 8112 	bcs.w	800324a <__udivmoddi4+0x27e>
 8003026:	4299      	cmp	r1, r3
 8003028:	f240 810f 	bls.w	800324a <__udivmoddi4+0x27e>
 800302c:	3c02      	subs	r4, #2
 800302e:	4463      	add	r3, ip
 8003030:	1a59      	subs	r1, r3, r1
 8003032:	fa1f f38e 	uxth.w	r3, lr
 8003036:	fbb1 f0f7 	udiv	r0, r1, r7
 800303a:	fb07 1110 	mls	r1, r7, r0, r1
 800303e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003042:	fb00 f606 	mul.w	r6, r0, r6
 8003046:	429e      	cmp	r6, r3
 8003048:	d90a      	bls.n	8003060 <__udivmoddi4+0x94>
 800304a:	eb1c 0303 	adds.w	r3, ip, r3
 800304e:	f100 31ff 	add.w	r1, r0, #4294967295
 8003052:	f080 80fc 	bcs.w	800324e <__udivmoddi4+0x282>
 8003056:	429e      	cmp	r6, r3
 8003058:	f240 80f9 	bls.w	800324e <__udivmoddi4+0x282>
 800305c:	4463      	add	r3, ip
 800305e:	3802      	subs	r0, #2
 8003060:	1b9b      	subs	r3, r3, r6
 8003062:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8003066:	2100      	movs	r1, #0
 8003068:	b11d      	cbz	r5, 8003072 <__udivmoddi4+0xa6>
 800306a:	40d3      	lsrs	r3, r2
 800306c:	2200      	movs	r2, #0
 800306e:	e9c5 3200 	strd	r3, r2, [r5]
 8003072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003076:	428b      	cmp	r3, r1
 8003078:	d905      	bls.n	8003086 <__udivmoddi4+0xba>
 800307a:	b10d      	cbz	r5, 8003080 <__udivmoddi4+0xb4>
 800307c:	e9c5 0100 	strd	r0, r1, [r5]
 8003080:	2100      	movs	r1, #0
 8003082:	4608      	mov	r0, r1
 8003084:	e7f5      	b.n	8003072 <__udivmoddi4+0xa6>
 8003086:	fab3 f183 	clz	r1, r3
 800308a:	2900      	cmp	r1, #0
 800308c:	d146      	bne.n	800311c <__udivmoddi4+0x150>
 800308e:	42a3      	cmp	r3, r4
 8003090:	d302      	bcc.n	8003098 <__udivmoddi4+0xcc>
 8003092:	4290      	cmp	r0, r2
 8003094:	f0c0 80f0 	bcc.w	8003278 <__udivmoddi4+0x2ac>
 8003098:	1a86      	subs	r6, r0, r2
 800309a:	eb64 0303 	sbc.w	r3, r4, r3
 800309e:	2001      	movs	r0, #1
 80030a0:	2d00      	cmp	r5, #0
 80030a2:	d0e6      	beq.n	8003072 <__udivmoddi4+0xa6>
 80030a4:	e9c5 6300 	strd	r6, r3, [r5]
 80030a8:	e7e3      	b.n	8003072 <__udivmoddi4+0xa6>
 80030aa:	2a00      	cmp	r2, #0
 80030ac:	f040 8090 	bne.w	80031d0 <__udivmoddi4+0x204>
 80030b0:	eba1 040c 	sub.w	r4, r1, ip
 80030b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80030b8:	fa1f f78c 	uxth.w	r7, ip
 80030bc:	2101      	movs	r1, #1
 80030be:	fbb4 f6f8 	udiv	r6, r4, r8
 80030c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80030c6:	fb08 4416 	mls	r4, r8, r6, r4
 80030ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80030ce:	fb07 f006 	mul.w	r0, r7, r6
 80030d2:	4298      	cmp	r0, r3
 80030d4:	d908      	bls.n	80030e8 <__udivmoddi4+0x11c>
 80030d6:	eb1c 0303 	adds.w	r3, ip, r3
 80030da:	f106 34ff 	add.w	r4, r6, #4294967295
 80030de:	d202      	bcs.n	80030e6 <__udivmoddi4+0x11a>
 80030e0:	4298      	cmp	r0, r3
 80030e2:	f200 80cd 	bhi.w	8003280 <__udivmoddi4+0x2b4>
 80030e6:	4626      	mov	r6, r4
 80030e8:	1a1c      	subs	r4, r3, r0
 80030ea:	fa1f f38e 	uxth.w	r3, lr
 80030ee:	fbb4 f0f8 	udiv	r0, r4, r8
 80030f2:	fb08 4410 	mls	r4, r8, r0, r4
 80030f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80030fa:	fb00 f707 	mul.w	r7, r0, r7
 80030fe:	429f      	cmp	r7, r3
 8003100:	d908      	bls.n	8003114 <__udivmoddi4+0x148>
 8003102:	eb1c 0303 	adds.w	r3, ip, r3
 8003106:	f100 34ff 	add.w	r4, r0, #4294967295
 800310a:	d202      	bcs.n	8003112 <__udivmoddi4+0x146>
 800310c:	429f      	cmp	r7, r3
 800310e:	f200 80b0 	bhi.w	8003272 <__udivmoddi4+0x2a6>
 8003112:	4620      	mov	r0, r4
 8003114:	1bdb      	subs	r3, r3, r7
 8003116:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800311a:	e7a5      	b.n	8003068 <__udivmoddi4+0x9c>
 800311c:	f1c1 0620 	rsb	r6, r1, #32
 8003120:	408b      	lsls	r3, r1
 8003122:	fa22 f706 	lsr.w	r7, r2, r6
 8003126:	431f      	orrs	r7, r3
 8003128:	fa20 fc06 	lsr.w	ip, r0, r6
 800312c:	fa04 f301 	lsl.w	r3, r4, r1
 8003130:	ea43 030c 	orr.w	r3, r3, ip
 8003134:	40f4      	lsrs	r4, r6
 8003136:	fa00 f801 	lsl.w	r8, r0, r1
 800313a:	0c38      	lsrs	r0, r7, #16
 800313c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8003140:	fbb4 fef0 	udiv	lr, r4, r0
 8003144:	fa1f fc87 	uxth.w	ip, r7
 8003148:	fb00 441e 	mls	r4, r0, lr, r4
 800314c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8003150:	fb0e f90c 	mul.w	r9, lr, ip
 8003154:	45a1      	cmp	r9, r4
 8003156:	fa02 f201 	lsl.w	r2, r2, r1
 800315a:	d90a      	bls.n	8003172 <__udivmoddi4+0x1a6>
 800315c:	193c      	adds	r4, r7, r4
 800315e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8003162:	f080 8084 	bcs.w	800326e <__udivmoddi4+0x2a2>
 8003166:	45a1      	cmp	r9, r4
 8003168:	f240 8081 	bls.w	800326e <__udivmoddi4+0x2a2>
 800316c:	f1ae 0e02 	sub.w	lr, lr, #2
 8003170:	443c      	add	r4, r7
 8003172:	eba4 0409 	sub.w	r4, r4, r9
 8003176:	fa1f f983 	uxth.w	r9, r3
 800317a:	fbb4 f3f0 	udiv	r3, r4, r0
 800317e:	fb00 4413 	mls	r4, r0, r3, r4
 8003182:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8003186:	fb03 fc0c 	mul.w	ip, r3, ip
 800318a:	45a4      	cmp	ip, r4
 800318c:	d907      	bls.n	800319e <__udivmoddi4+0x1d2>
 800318e:	193c      	adds	r4, r7, r4
 8003190:	f103 30ff 	add.w	r0, r3, #4294967295
 8003194:	d267      	bcs.n	8003266 <__udivmoddi4+0x29a>
 8003196:	45a4      	cmp	ip, r4
 8003198:	d965      	bls.n	8003266 <__udivmoddi4+0x29a>
 800319a:	3b02      	subs	r3, #2
 800319c:	443c      	add	r4, r7
 800319e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80031a2:	fba0 9302 	umull	r9, r3, r0, r2
 80031a6:	eba4 040c 	sub.w	r4, r4, ip
 80031aa:	429c      	cmp	r4, r3
 80031ac:	46ce      	mov	lr, r9
 80031ae:	469c      	mov	ip, r3
 80031b0:	d351      	bcc.n	8003256 <__udivmoddi4+0x28a>
 80031b2:	d04e      	beq.n	8003252 <__udivmoddi4+0x286>
 80031b4:	b155      	cbz	r5, 80031cc <__udivmoddi4+0x200>
 80031b6:	ebb8 030e 	subs.w	r3, r8, lr
 80031ba:	eb64 040c 	sbc.w	r4, r4, ip
 80031be:	fa04 f606 	lsl.w	r6, r4, r6
 80031c2:	40cb      	lsrs	r3, r1
 80031c4:	431e      	orrs	r6, r3
 80031c6:	40cc      	lsrs	r4, r1
 80031c8:	e9c5 6400 	strd	r6, r4, [r5]
 80031cc:	2100      	movs	r1, #0
 80031ce:	e750      	b.n	8003072 <__udivmoddi4+0xa6>
 80031d0:	f1c2 0320 	rsb	r3, r2, #32
 80031d4:	fa20 f103 	lsr.w	r1, r0, r3
 80031d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80031dc:	fa24 f303 	lsr.w	r3, r4, r3
 80031e0:	4094      	lsls	r4, r2
 80031e2:	430c      	orrs	r4, r1
 80031e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80031e8:	fa00 fe02 	lsl.w	lr, r0, r2
 80031ec:	fa1f f78c 	uxth.w	r7, ip
 80031f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80031f4:	fb08 3110 	mls	r1, r8, r0, r3
 80031f8:	0c23      	lsrs	r3, r4, #16
 80031fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80031fe:	fb00 f107 	mul.w	r1, r0, r7
 8003202:	4299      	cmp	r1, r3
 8003204:	d908      	bls.n	8003218 <__udivmoddi4+0x24c>
 8003206:	eb1c 0303 	adds.w	r3, ip, r3
 800320a:	f100 36ff 	add.w	r6, r0, #4294967295
 800320e:	d22c      	bcs.n	800326a <__udivmoddi4+0x29e>
 8003210:	4299      	cmp	r1, r3
 8003212:	d92a      	bls.n	800326a <__udivmoddi4+0x29e>
 8003214:	3802      	subs	r0, #2
 8003216:	4463      	add	r3, ip
 8003218:	1a5b      	subs	r3, r3, r1
 800321a:	b2a4      	uxth	r4, r4
 800321c:	fbb3 f1f8 	udiv	r1, r3, r8
 8003220:	fb08 3311 	mls	r3, r8, r1, r3
 8003224:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8003228:	fb01 f307 	mul.w	r3, r1, r7
 800322c:	42a3      	cmp	r3, r4
 800322e:	d908      	bls.n	8003242 <__udivmoddi4+0x276>
 8003230:	eb1c 0404 	adds.w	r4, ip, r4
 8003234:	f101 36ff 	add.w	r6, r1, #4294967295
 8003238:	d213      	bcs.n	8003262 <__udivmoddi4+0x296>
 800323a:	42a3      	cmp	r3, r4
 800323c:	d911      	bls.n	8003262 <__udivmoddi4+0x296>
 800323e:	3902      	subs	r1, #2
 8003240:	4464      	add	r4, ip
 8003242:	1ae4      	subs	r4, r4, r3
 8003244:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8003248:	e739      	b.n	80030be <__udivmoddi4+0xf2>
 800324a:	4604      	mov	r4, r0
 800324c:	e6f0      	b.n	8003030 <__udivmoddi4+0x64>
 800324e:	4608      	mov	r0, r1
 8003250:	e706      	b.n	8003060 <__udivmoddi4+0x94>
 8003252:	45c8      	cmp	r8, r9
 8003254:	d2ae      	bcs.n	80031b4 <__udivmoddi4+0x1e8>
 8003256:	ebb9 0e02 	subs.w	lr, r9, r2
 800325a:	eb63 0c07 	sbc.w	ip, r3, r7
 800325e:	3801      	subs	r0, #1
 8003260:	e7a8      	b.n	80031b4 <__udivmoddi4+0x1e8>
 8003262:	4631      	mov	r1, r6
 8003264:	e7ed      	b.n	8003242 <__udivmoddi4+0x276>
 8003266:	4603      	mov	r3, r0
 8003268:	e799      	b.n	800319e <__udivmoddi4+0x1d2>
 800326a:	4630      	mov	r0, r6
 800326c:	e7d4      	b.n	8003218 <__udivmoddi4+0x24c>
 800326e:	46d6      	mov	lr, sl
 8003270:	e77f      	b.n	8003172 <__udivmoddi4+0x1a6>
 8003272:	4463      	add	r3, ip
 8003274:	3802      	subs	r0, #2
 8003276:	e74d      	b.n	8003114 <__udivmoddi4+0x148>
 8003278:	4606      	mov	r6, r0
 800327a:	4623      	mov	r3, r4
 800327c:	4608      	mov	r0, r1
 800327e:	e70f      	b.n	80030a0 <__udivmoddi4+0xd4>
 8003280:	3e02      	subs	r6, #2
 8003282:	4463      	add	r3, ip
 8003284:	e730      	b.n	80030e8 <__udivmoddi4+0x11c>
 8003286:	bf00      	nop

08003288 <__aeabi_idiv0>:
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop

0800328c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800328c:	480d      	ldr	r0, [pc, #52]	@ (80032c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800328e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003290:	f004 f894 	bl	80073bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003294:	480c      	ldr	r0, [pc, #48]	@ (80032c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003296:	490d      	ldr	r1, [pc, #52]	@ (80032cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003298:	4a0d      	ldr	r2, [pc, #52]	@ (80032d0 <LoopForever+0xe>)
  movs r3, #0
 800329a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800329c:	e002      	b.n	80032a4 <LoopCopyDataInit>

0800329e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800329e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032a2:	3304      	adds	r3, #4

080032a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032a8:	d3f9      	bcc.n	800329e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032aa:	4a0a      	ldr	r2, [pc, #40]	@ (80032d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032ac:	4c0a      	ldr	r4, [pc, #40]	@ (80032d8 <LoopForever+0x16>)
  movs r3, #0
 80032ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032b0:	e001      	b.n	80032b6 <LoopFillZerobss>

080032b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032b4:	3204      	adds	r2, #4

080032b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032b8:	d3fb      	bcc.n	80032b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032ba:	f009 f833 	bl	800c324 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032be:	f000 fba9 	bl	8003a14 <main>

080032c2 <LoopForever>:

LoopForever:
    b LoopForever
 80032c2:	e7fe      	b.n	80032c2 <LoopForever>
  ldr   r0, =_estack
 80032c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032cc:	20000b68 	.word	0x20000b68
  ldr r2, =_sidata
 80032d0:	0800c67c 	.word	0x0800c67c
  ldr r2, =_sbss
 80032d4:	20000b68 	.word	0x20000b68
  ldr r4, =_ebss
 80032d8:	200020f4 	.word	0x200020f4

080032dc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032dc:	e7fe      	b.n	80032dc <ADC3_IRQHandler>
	...

080032e0 <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->ASPEPIp);
 80032e4:	6940      	ldr	r0, [r0, #20]
 80032e6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80032e8:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 80032ea:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
    /* Configure UART to receive first packet*/
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80032ec:	6d65      	ldr	r5, [r4, #84]	@ 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 80032ee:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 80032f2:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80032f6:	6960      	ldr	r0, [r4, #20]
 80032f8:	f104 011c 	add.w	r1, r4, #28
 80032fc:	462b      	mov	r3, r5
 80032fe:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8003300:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8003304:	4718      	bx	r3
 8003306:	bf00      	nop

08003308 <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8003308:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 800330a:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 800330c:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800330e:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8003312:	4c1e      	ldr	r4, [pc, #120]	@ (800338c <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8003314:	01db      	lsls	r3, r3, #7
 8003316:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 800331a:	784a      	ldrb	r2, [r1, #1]
 800331c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8003320:	78ca      	ldrb	r2, [r1, #3]
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8003322:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8003326:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800332a:	b2da      	uxtb	r2, r3
 800332c:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 8003330:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8003334:	5ca2      	ldrb	r2, [r4, r2]
 8003336:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 800333a:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800333c:	5ca2      	ldrb	r2, [r4, r2]
 800333e:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 8003342:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8003344:	5ca2      	ldrb	r2, [r4, r2]
 8003346:	4c12      	ldr	r4, [pc, #72]	@ (8003390 <ASPEP_sendBeacon+0x88>)
 8003348:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 800334c:	5ca2      	ldrb	r2, [r4, r2]
 800334e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003352:	f043 0305 	orr.w	r3, r3, #5
 8003356:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003358:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800335a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800335c:	b14b      	cbz	r3, 8003372 <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 800335e:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 8003360:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8003364:	b913      	cbnz	r3, 800336c <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 8003366:	2302      	movs	r3, #2
 8003368:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 800336c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003370:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8003372:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8003376:	2303      	movs	r3, #3
 8003378:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800337c:	6481      	str	r1, [r0, #72]	@ 0x48
 800337e:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8003380:	2204      	movs	r2, #4
 8003382:	6d83      	ldr	r3, [r0, #88]	@ 0x58
}
 8003384:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8003388:	6940      	ldr	r0, [r0, #20]
 800338a:	4718      	bx	r3
 800338c:	0800c3b0 	.word	0x0800c3b0
 8003390:	0800c3a0 	.word	0x0800c3a0

08003394 <ASPEP_sendPing>:
{
 8003394:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 8003396:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8003398:	f890 c060 	ldrb.w	ip, [r0, #96]	@ 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 800339c:	f890 4063 	ldrb.w	r4, [r0, #99]	@ 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80033a0:	4d1d      	ldr	r5, [pc, #116]	@ (8003418 <ASPEP_sendPing+0x84>)
                   | (uint32_t)((uint32_t)cBit << 5U)
 80033a2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80033a6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 80033aa:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80033ae:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80033b2:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 80033b6:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80033ba:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	4c16      	ldr	r4, [pc, #88]	@ (800341c <ASPEP_sendPing+0x88>)
 80033c2:	f042 0206 	orr.w	r2, r2, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80033c6:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80033ca:	5ca2      	ldrb	r2, [r4, r2]
 80033cc:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 80033d0:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80033d2:	5ca2      	ldrb	r2, [r4, r2]
 80033d4:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 80033d8:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80033da:	5ca2      	ldrb	r2, [r4, r2]
 80033dc:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 80033e0:	5ceb      	ldrb	r3, [r5, r3]
 80033e2:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 80033e6:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80033e8:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80033ea:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80033ec:	b143      	cbz	r3, 8003400 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 80033ee:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 80033f0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80033f4:	b913      	cbnz	r3, 80033fc <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 80033f6:	2302      	movs	r3, #2
 80033f8:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 80033fc:	bc30      	pop	{r4, r5}
 80033fe:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8003400:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8003404:	2303      	movs	r3, #3
 8003406:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800340a:	6481      	str	r1, [r0, #72]	@ 0x48
 800340c:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 800340e:	2204      	movs	r2, #4
 8003410:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003412:	6940      	ldr	r0, [r0, #20]
}
 8003414:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8003416:	4718      	bx	r3
 8003418:	0800c3a0 	.word	0x0800c3a0
 800341c:	0800c3b0 	.word	0x0800c3b0

08003420 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 8003420:	2a0a      	cmp	r2, #10
 8003422:	d009      	beq.n	8003438 <ASPEP_getBuffer+0x18>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 8003424:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8003428:	2b01      	cmp	r3, #1
 800342a:	d91d      	bls.n	8003468 <ASPEP_getBuffer+0x48>
 800342c:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8003430:	2b01      	cmp	r3, #1
 8003432:	d90d      	bls.n	8003450 <ASPEP_getBuffer+0x30>
        result = false;
 8003434:	2000      	movs	r0, #0
}
 8003436:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8003438:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 800343c:	2b01      	cmp	r3, #1
 800343e:	d8f9      	bhi.n	8003434 <ASPEP_getBuffer+0x14>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8003440:	6a83      	ldr	r3, [r0, #40]	@ 0x28
        pHandle->syncBuffer.state = writeLock;
 8003442:	2201      	movs	r2, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8003444:	3304      	adds	r3, #4
 8003446:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 8003448:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
  bool result = true;
 800344c:	2001      	movs	r0, #1
 800344e:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8003450:	6b83      	ldr	r3, [r0, #56]	@ 0x38
          pHandle->asyncBufferB.state = writeLock;
 8003452:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8003456:	f100 0238 	add.w	r2, r0, #56	@ 0x38
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 800345a:	3304      	adds	r3, #4
          pHandle->asyncBufferB.state = writeLock;
 800345c:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8003460:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8003462:	600b      	str	r3, [r1, #0]
  bool result = true;
 8003464:	2001      	movs	r0, #1
 8003466:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8003468:	6b03      	ldr	r3, [r0, #48]	@ 0x30
          pHandle->asyncBufferA.state = writeLock;
 800346a:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 800346e:	f100 0230 	add.w	r2, r0, #48	@ 0x30
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8003472:	3304      	adds	r3, #4
          pHandle->asyncBufferA.state = writeLock;
 8003474:	f880 c036 	strb.w	ip, [r0, #54]	@ 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8003478:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 800347a:	600b      	str	r3, [r1, #0]
 800347c:	e7f2      	b.n	8003464 <ASPEP_getBuffer+0x44>
 800347e:	bf00      	nop

08003480 <ASPEP_sendPacket>:
{
 8003480:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8003482:	f890 0064 	ldrb.w	r0, [r0, #100]	@ 0x64
 8003486:	2802      	cmp	r0, #2
 8003488:	d001      	beq.n	800348e <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 800348a:	2002      	movs	r0, #2
 800348c:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 800348e:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 8003492:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8003496:	f89c 006c 	ldrb.w	r0, [ip, #108]	@ 0x6c
 800349a:	2801      	cmp	r0, #1
 800349c:	d104      	bne.n	80034a8 <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 800349e:	f64f 60ca 	movw	r0, #65226	@ 0xfeca
 80034a2:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 80034a4:	3202      	adds	r2, #2
 80034a6:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 80034a8:	2b0a      	cmp	r3, #10
 80034aa:	d105      	bne.n	80034b8 <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 80034ac:	f89c 0010 	ldrb.w	r0, [ip, #16]
 80034b0:	b348      	cbz	r0, 8003506 <ASPEP_sendPacket+0x86>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 80034b2:	2000      	movs	r0, #0
 80034b4:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 80034b8:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 80034bc:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80034be:	4d34      	ldr	r5, [pc, #208]	@ (8003590 <ASPEP_sendPacket+0x110>)
 80034c0:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 80034c2:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80034c4:	5d2e      	ldrb	r6, [r5, r4]
 80034c6:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80034ca:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 80034cc:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80034d0:	5d2e      	ldrb	r6, [r5, r4]
 80034d2:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80034d6:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 80034d8:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80034da:	5d2c      	ldrb	r4, [r5, r4]
 80034dc:	f3c0 6503 	ubfx	r5, r0, #24, #4
 80034e0:	406c      	eors	r4, r5
 80034e2:	4d2c      	ldr	r5, [pc, #176]	@ (8003594 <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 80034e4:	5d2c      	ldrb	r4, [r5, r4]
 80034e6:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 80034ea:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 80034ee:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80034f0:	f8dc 1048 	ldr.w	r1, [ip, #72]	@ 0x48
 80034f4:	b1b9      	cbz	r1, 8003526 <ASPEP_sendPacket+0xa6>
  __ASM volatile ("cpsie i" : : : "memory");
 80034f6:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 80034f8:	2b09      	cmp	r3, #9
 80034fa:	d006      	beq.n	800350a <ASPEP_sendPacket+0x8a>
      else if (MCTL_SYNC == dataType)
 80034fc:	2b0a      	cmp	r3, #10
 80034fe:	d02a      	beq.n	8003556 <ASPEP_sendPacket+0xd6>
      else if(ASPEP_CTRL == dataType)
 8003500:	b37b      	cbz	r3, 8003562 <ASPEP_sendPacket+0xe2>
  uint8_t result = ASPEP_OK;
 8003502:	2000      	movs	r0, #0
}
 8003504:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 8003506:	2001      	movs	r0, #1
}
 8003508:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 800350a:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 800350e:	6819      	ldr	r1, [r3, #0]
  uint8_t result = ASPEP_OK;
 8003510:	458e      	cmp	lr, r1
 8003512:	bf14      	ite	ne
 8003514:	2003      	movne	r0, #3
 8003516:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 8003518:	f8dc 1044 	ldr.w	r1, [ip, #68]	@ 0x44
 800351c:	b3a1      	cbz	r1, 8003588 <ASPEP_sendPacket+0x108>
        pHandle->lastRequestedAsyncBuff->state = pending;
 800351e:	2102      	movs	r1, #2
 8003520:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8003522:	809a      	strh	r2, [r3, #4]
}
 8003524:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 8003526:	2b09      	cmp	r3, #9
 8003528:	d029      	beq.n	800357e <ASPEP_sendPacket+0xfe>
      else if (MCTL_SYNC == dataType)
 800352a:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 800352c:	f04f 0303 	mov.w	r3, #3
 8003530:	bf0b      	itete	eq
 8003532:	f88c 302e 	strbeq.w	r3, [ip, #46]	@ 0x2e
        pHandle->ctrlBuffer.state = readLock;
 8003536:	f88c 3024 	strbne.w	r3, [ip, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 800353a:	f10c 0328 	addeq.w	r3, ip, #40	@ 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800353e:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8003542:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
 8003546:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8003548:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
 800354c:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8003550:	4671      	mov	r1, lr
 8003552:	4798      	blx	r3
 8003554:	e7d5      	b.n	8003502 <ASPEP_sendPacket+0x82>
        if (pHandle -> syncBuffer.state != writeLock)
 8003556:	f89c 302e 	ldrb.w	r3, [ip, #46]	@ 0x2e
 800355a:	2b01      	cmp	r3, #1
 800355c:	d009      	beq.n	8003572 <ASPEP_sendPacket+0xf2>
          result = ASPEP_BUFFER_ERROR;
 800355e:	2003      	movs	r0, #3
}
 8003560:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->ctrlBuffer.state != available)
 8003562:	f89c 3024 	ldrb.w	r3, [ip, #36]	@ 0x24
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f9      	bne.n	800355e <ASPEP_sendPacket+0xde>
          pHandle->ctrlBuffer.state = pending;
 800356a:	2302      	movs	r3, #2
 800356c:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
 8003570:	e7c7      	b.n	8003502 <ASPEP_sendPacket+0x82>
          pHandle->syncBuffer.state = pending;
 8003572:	2302      	movs	r3, #2
 8003574:	f88c 302e 	strb.w	r3, [ip, #46]	@ 0x2e
          pHandle->syncBuffer.length = bufferLength;
 8003578:	f8ac 202c 	strh.w	r2, [ip, #44]	@ 0x2c
 800357c:	e7c1      	b.n	8003502 <ASPEP_sendPacket+0x82>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 800357e:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8003582:	2103      	movs	r1, #3
 8003584:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8003586:	e7dc      	b.n	8003542 <ASPEP_sendPacket+0xc2>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8003588:	f8cc 3044 	str.w	r3, [ip, #68]	@ 0x44
 800358c:	e7c7      	b.n	800351e <ASPEP_sendPacket+0x9e>
 800358e:	bf00      	nop
 8003590:	0800c3b0 	.word	0x0800c3b0
 8003594:	0800c3a0 	.word	0x0800c3a0

08003598 <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8003598:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 800359a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800359e:	2b03      	cmp	r3, #3
{
 80035a0:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 80035a2:	d013      	beq.n	80035cc <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 80035a4:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80035a6:	2100      	movs	r1, #0
 80035a8:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 80035aa:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 80035ae:	2a02      	cmp	r2, #2
 80035b0:	d013      	beq.n	80035da <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d11d      	bne.n	80035f2 <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 80035b6:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 80035ba:	6d83      	ldr	r3, [r0, #88]	@ 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 80035bc:	6481      	str	r1, [r0, #72]	@ 0x48
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 80035be:	2204      	movs	r2, #4
 80035c0:	6940      	ldr	r0, [r0, #20]
 80035c2:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 80035c4:	2303      	movs	r3, #3
 80035c6:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 80035ca:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 80035cc:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
      pHandle->ctrlBuffer.state = available;
 80035d0:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 80035d2:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 80035d4:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (pHandle->syncBuffer.state == pending)
 80035d8:	d10b      	bne.n	80035f2 <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80035da:	f104 0028 	add.w	r0, r4, #40	@ 0x28
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 80035de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80035e0:	64a0      	str	r0, [r4, #72]	@ 0x48
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 80035e2:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80035e4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80035e6:	6960      	ldr	r0, [r4, #20]
 80035e8:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 80035ea:	2303      	movs	r3, #3
 80035ec:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 80035f0:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 80035f2:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 80035f4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80035f6:	b1cb      	cbz	r3, 800362c <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 80035f8:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 80035fa:	64a3      	str	r3, [r4, #72]	@ 0x48
        pHandle->asyncNextBuffer->state = readLock;
 80035fc:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 80035fe:	6819      	ldr	r1, [r3, #0]
 8003600:	889a      	ldrh	r2, [r3, #4]
 8003602:	6960      	ldr	r0, [r4, #20]
 8003604:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003606:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8003608:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 800360c:	2b02      	cmp	r3, #2
 800360e:	d007      	beq.n	8003620 <ASPEP_HWDataTransmittedIT+0x88>
 8003610:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003614:	2b02      	cmp	r3, #2
 8003616:	d003      	beq.n	8003620 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 8003618:	2300      	movs	r3, #0
 800361a:	6463      	str	r3, [r4, #68]	@ 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 800361c:	b662      	cpsie	i
}
 800361e:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8003620:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003622:	0063      	lsls	r3, r4, #1
 8003624:	3368      	adds	r3, #104	@ 0x68
 8003626:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 8003628:	6463      	str	r3, [r4, #68]	@ 0x44
        {
 800362a:	e7f7      	b.n	800361c <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 800362c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800362e:	e7f5      	b.n	800361c <ASPEP_HWDataTransmittedIT+0x84>

08003630 <ASPEP_RXframeProcess>:
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 8003630:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8003634:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 8003636:	f04f 0c00 	mov.w	ip, #0
{
 800363a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800363e:	4604      	mov	r4, r0
    *packetLength = 0;
 8003640:	f8a1 c000 	strh.w	ip, [r1]
    if (pHandle->NewPacketAvailable)
 8003644:	b1cb      	cbz	r3, 800367a <ASPEP_RXframeProcess+0x4a>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 8003646:	f890 3064 	ldrb.w	r3, [r0, #100]	@ 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 800364a:	f880 c061 	strb.w	ip, [r0, #97]	@ 0x61
      switch (pHandle->ASPEP_State)
 800364e:	2b01      	cmp	r3, #1
 8003650:	d055      	beq.n	80036fe <ASPEP_RXframeProcess+0xce>
 8003652:	2b02      	cmp	r3, #2
 8003654:	d018      	beq.n	8003688 <ASPEP_RXframeProcess+0x58>
 8003656:	b933      	cbnz	r3, 8003666 <ASPEP_RXframeProcess+0x36>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 8003658:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 800365a:	2905      	cmp	r1, #5
 800365c:	f000 80e3 	beq.w	8003826 <ASPEP_RXframeProcess+0x1f6>
              /* Nothing to do, controller has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 8003660:	2906      	cmp	r1, #6
 8003662:	f000 8129 	beq.w	80038b8 <ASPEP_RXframeProcess+0x288>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8003666:	2500      	movs	r5, #0

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8003668:	6960      	ldr	r0, [r4, #20]
 800366a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800366c:	2204      	movs	r2, #4
 800366e:	f104 011c 	add.w	r1, r4, #28
 8003672:	4798      	blx	r3
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 8003674:	4628      	mov	r0, r5
 8003676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 800367a:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 800367e:	b9bb      	cbnz	r3, 80036b0 <ASPEP_RXframeProcess+0x80>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8003680:	2500      	movs	r5, #0
}
 8003682:	4628      	mov	r0, r5
 8003684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 8003688:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800368a:	2b05      	cmp	r3, #5
 800368c:	d045      	beq.n	800371a <ASPEP_RXframeProcess+0xea>
          else if (PING == pHandle->rxPacketType)
 800368e:	2b06      	cmp	r3, #6
 8003690:	f000 8118 	beq.w	80038c4 <ASPEP_RXframeProcess+0x294>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8003694:	2b09      	cmp	r3, #9
 8003696:	d1e6      	bne.n	8003666 <ASPEP_RXframeProcess+0x36>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8003698:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
              *packetLength = pHandle->rxLengthASPEP;
 800369c:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
              result = pHandle->rxBuffer;
 80036a0:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 80036a2:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 80036a4:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 80036a6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 80036aa:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLengthASPEP;
 80036ac:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 80036ae:	e7db      	b.n	8003668 <ASPEP_RXframeProcess+0x38>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 80036b0:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 80036b4:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80036b6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80036ba:	488b      	ldr	r0, [pc, #556]	@ (80038e8 <ASPEP_RXframeProcess+0x2b8>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80036bc:	4d8b      	ldr	r5, [pc, #556]	@ (80038ec <ASPEP_RXframeProcess+0x2bc>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80036be:	f082 0209 	eor.w	r2, r2, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 80036c2:	f043 010f 	orr.w	r1, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80036c6:	5c82      	ldrb	r2, [r0, r2]
 80036c8:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 80036cc:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80036ce:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 80036d0:	5ceb      	ldrb	r3, [r5, r3]
 80036d2:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 80036d6:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80036d8:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80036da:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80f7 	beq.w	80038d0 <ASPEP_RXframeProcess+0x2a0>
  __ASM volatile ("cpsie i" : : : "memory");
 80036e2:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 80036e4:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80036e8:	b913      	cbnz	r3, 80036f0 <ASPEP_RXframeProcess+0xc0>
          pHandle->ctrlBuffer.state = pending;
 80036ea:	2302      	movs	r3, #2
 80036ec:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 80036f0:	2200      	movs	r2, #0
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 80036f2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80036f4:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 80036f6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 80036fa:	4798      	blx	r3
 80036fc:	e7c0      	b.n	8003680 <ASPEP_RXframeProcess+0x50>
          if (BEACON == pHandle->rxPacketType)
 80036fe:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8003700:	2905      	cmp	r1, #5
 8003702:	d04f      	beq.n	80037a4 <ASPEP_RXframeProcess+0x174>
          else if (PING == pHandle->rxPacketType)
 8003704:	2906      	cmp	r1, #6
 8003706:	d1ae      	bne.n	8003666 <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8003708:	4619      	mov	r1, r3
 800370a:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800370e:	f7ff fe41 	bl	8003394 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8003712:	2302      	movs	r3, #2
 8003714:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8003718:	e7a5      	b.n	8003666 <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 800371a:	f894 e01d 	ldrb.w	lr, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800371e:	f894 506d 	ldrb.w	r5, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8003722:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8003724:	f894 606c 	ldrb.w	r6, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8003728:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800372c:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8003730:	f00e 0e3f 	and.w	lr, lr, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8003734:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8003736:	4575      	cmp	r5, lr
 8003738:	bf28      	it	cs
 800373a:	4675      	movcs	r5, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800373c:	42b0      	cmp	r0, r6
 800373e:	4601      	mov	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8003740:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8003744:	bf28      	it	cs
 8003746:	4631      	movcs	r1, r6
 8003748:	4663      	mov	r3, ip
 800374a:	f361 0307 	bfi	r3, r1, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 800374e:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8003752:	45b8      	cmp	r8, r7
 8003754:	4641      	mov	r1, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8003756:	f365 230f 	bfi	r3, r5, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800375a:	bf28      	it	cs
 800375c:	4639      	movcs	r1, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800375e:	45ca      	cmp	sl, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8003760:	f361 4317 	bfi	r3, r1, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8003764:	4651      	mov	r1, sl
 8003766:	bf28      	it	cs
 8003768:	4649      	movcs	r1, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800376a:	f361 631f 	bfi	r3, r1, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800376e:	42b0      	cmp	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8003770:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8003772:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8003776:	d80f      	bhi.n	8003798 <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8003778:	45ae      	cmp	lr, r5
 800377a:	d80d      	bhi.n	8003798 <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 800377c:	45b8      	cmp	r8, r7
 800377e:	d80b      	bhi.n	8003798 <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8003780:	45ca      	cmp	sl, r9
 8003782:	d809      	bhi.n	8003798 <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8003784:	f894 c070 	ldrb.w	ip, [r4, #112]	@ 0x70
 8003788:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800378c:	ebac 0c02 	sub.w	ip, ip, r2
 8003790:	fabc fc8c 	clz	ip, ip
 8003794:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8003798:	f884 c064 	strb.w	ip, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 800379c:	4620      	mov	r0, r4
 800379e:	f7ff fdb3 	bl	8003308 <ASPEP_sendBeacon>
 80037a2:	e760      	b.n	8003666 <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80037a4:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80037a6:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80037aa:	7f01      	ldrb	r1, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80037ac:	f890 006d 	ldrb.w	r0, [r0, #109]	@ 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80037b0:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80037b4:	f894 e06f 	ldrb.w	lr, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80037b8:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80037bc:	09c9      	lsrs	r1, r1, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80037be:	42a8      	cmp	r0, r5
 80037c0:	bf28      	it	cs
 80037c2:	4628      	movcs	r0, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80037c4:	42b1      	cmp	r1, r6
 80037c6:	4663      	mov	r3, ip
 80037c8:	468c      	mov	ip, r1
 80037ca:	bf28      	it	cs
 80037cc:	46b4      	movcs	ip, r6
 80037ce:	f36c 0307 	bfi	r3, ip, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80037d2:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80037d6:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80037da:	45bc      	cmp	ip, r7
 80037dc:	46e1      	mov	r9, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80037de:	f360 230f 	bfi	r3, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80037e2:	bf28      	it	cs
 80037e4:	46b9      	movcs	r9, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80037e6:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80037e8:	f369 4317 	bfi	r3, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80037ec:	46c1      	mov	r9, r8
 80037ee:	bf28      	it	cs
 80037f0:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80037f2:	f369 631f 	bfi	r3, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80037f6:	42b1      	cmp	r1, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80037f8:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80037fa:	d80b      	bhi.n	8003814 <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80037fc:	4285      	cmp	r5, r0
 80037fe:	d809      	bhi.n	8003814 <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8003800:	45bc      	cmp	ip, r7
 8003802:	d807      	bhi.n	8003814 <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8003804:	45f0      	cmp	r8, lr
 8003806:	d805      	bhi.n	8003814 <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8003808:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800380c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8003810:	4293      	cmp	r3, r2
 8003812:	d002      	beq.n	800381a <ASPEP_RXframeProcess+0x1ea>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8003814:	2300      	movs	r3, #0
 8003816:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 800381a:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 800381e:	4620      	mov	r0, r4
 8003820:	f7ff fd72 	bl	8003308 <ASPEP_sendBeacon>
 8003824:	e71f      	b.n	8003666 <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8003826:	f890 c01d 	ldrb.w	ip, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800382a:	f890 106d 	ldrb.w	r1, [r0, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 800382e:	7f05      	ldrb	r5, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8003830:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8003834:	f890 706e 	ldrb.w	r7, [r0, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8003838:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 800383c:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8003840:	09ed      	lsrs	r5, r5, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8003842:	4561      	cmp	r1, ip
 8003844:	bf28      	it	cs
 8003846:	4661      	movcs	r1, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8003848:	42b5      	cmp	r5, r6
 800384a:	4628      	mov	r0, r5
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 800384c:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8003850:	bf28      	it	cs
 8003852:	4630      	movcs	r0, r6
 8003854:	f360 0307 	bfi	r3, r0, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8003858:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800385c:	45b8      	cmp	r8, r7
 800385e:	4640      	mov	r0, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8003860:	f361 230f 	bfi	r3, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8003864:	bf28      	it	cs
 8003866:	4638      	movcs	r0, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8003868:	45ca      	cmp	sl, r9
 800386a:	46d6      	mov	lr, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800386c:	f360 4317 	bfi	r3, r0, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8003870:	bf28      	it	cs
 8003872:	46ce      	movcs	lr, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8003874:	f36e 631f 	bfi	r3, lr, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8003878:	42b5      	cmp	r5, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800387a:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800387c:	d8cd      	bhi.n	800381a <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 800387e:	458c      	cmp	ip, r1
 8003880:	d8cb      	bhi.n	800381a <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8003882:	45b8      	cmp	r8, r7
 8003884:	d8c9      	bhi.n	800381a <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8003886:	45ca      	cmp	sl, r9
 8003888:	d8c7      	bhi.n	800381a <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 800388a:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800388e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8003892:	4293      	cmp	r3, r2
 8003894:	d1c1      	bne.n	800381a <ASPEP_RXframeProcess+0x1ea>
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8003896:	1c4b      	adds	r3, r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8003898:	1c42      	adds	r2, r0, #1
 800389a:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800389c:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800389e:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 80038a0:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80038a4:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 80038a6:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80038a8:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 80038aa:	f8a4 e00e 	strh.w	lr, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80038ae:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 80038b2:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
 80038b6:	e7b0      	b.n	800381a <ASPEP_RXframeProcess+0x1ea>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 80038b8:	f3c2 320f 	ubfx	r2, r2, #12, #16
 80038bc:	4619      	mov	r1, r3
 80038be:	f7ff fd69 	bl	8003394 <ASPEP_sendPing>
 80038c2:	e6d0      	b.n	8003666 <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 80038c4:	f3c2 320f 	ubfx	r2, r2, #12, #16
 80038c8:	2101      	movs	r1, #1
 80038ca:	f7ff fd63 	bl	8003394 <ASPEP_sendPing>
 80038ce:	e6ca      	b.n	8003666 <ASPEP_RXframeProcess+0x36>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80038d0:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 80038d4:	2303      	movs	r3, #3
 80038d6:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80038da:	64a1      	str	r1, [r4, #72]	@ 0x48
 80038dc:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 80038de:	2204      	movs	r2, #4
 80038e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80038e2:	6960      	ldr	r0, [r4, #20]
 80038e4:	4798      	blx	r3
 80038e6:	e703      	b.n	80036f0 <ASPEP_RXframeProcess+0xc0>
 80038e8:	0800c3b0 	.word	0x0800c3b0
 80038ec:	0800c3a0 	.word	0x0800c3a0

080038f0 <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 80038f0:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 80038f2:	f890 3065 	ldrb.w	r3, [r0, #101]	@ 0x65
{
 80038f6:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 80038f8:	b13b      	cbz	r3, 800390a <ASPEP_HWDataReceivedIT+0x1a>
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d104      	bne.n	8003908 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 80038fe:	2200      	movs	r2, #0
 8003900:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8003904:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8003908:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 800390a:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800390c:	4a1e      	ldr	r2, [pc, #120]	@ (8003988 <ASPEP_HWDataReceivedIT+0x98>)
 800390e:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8003910:	5cd3      	ldrb	r3, [r2, r3]
 8003912:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8003916:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8003918:	5cd3      	ldrb	r3, [r2, r3]
 800391a:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 800391e:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8003920:	5cd3      	ldrb	r3, [r2, r3]
 8003922:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8003926:	5cd3      	ldrb	r3, [r2, r3]
 8003928:	b95b      	cbnz	r3, 8003942 <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 800392a:	7f03      	ldrb	r3, [r0, #28]
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	2b06      	cmp	r3, #6
 8003932:	6683      	str	r3, [r0, #104]	@ 0x68
          switch (pHandle->rxPacketType)
 8003934:	d809      	bhi.n	800394a <ASPEP_HWDataReceivedIT+0x5a>
 8003936:	2b04      	cmp	r3, #4
 8003938:	d81e      	bhi.n	8003978 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 800393a:	2301      	movs	r3, #1
 800393c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 8003940:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8003942:	2304      	movs	r3, #4
 8003944:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8003948:	bd10      	pop	{r4, pc}
 800394a:	2b09      	cmp	r3, #9
 800394c:	d1f5      	bne.n	800393a <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLengthASPEP = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 800394e:	8b83      	ldrh	r3, [r0, #28]
 8003950:	091b      	lsrs	r3, r3, #4
 8003952:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
              if (0U == pHandle->rxLengthASPEP) /* data packet with length 0 is a valid packet */
 8003956:	b17b      	cbz	r3, 8003978 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLengthASPEP <= pHandle->maxRXPayload)
 8003958:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 800395c:	429a      	cmp	r2, r3
 800395e:	d30f      	bcc.n	8003980 <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8003960:	f890 206c 	ldrb.w	r2, [r0, #108]	@ 0x6c
 8003964:	6981      	ldr	r1, [r0, #24]
 8003966:	6940      	ldr	r0, [r0, #20]
 8003968:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800396c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800396e:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8003970:	2301      	movs	r3, #1
 8003972:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
}
 8003976:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 8003978:	2301      	movs	r3, #1
 800397a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 800397e:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8003980:	2302      	movs	r3, #2
 8003982:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8003986:	bd10      	pop	{r4, pc}
 8003988:	0800c3b0 	.word	0x0800c3b0

0800398c <ASPEP_HWReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWReset(ASPEP_Handle_t *pHandle)
{
 800398c:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 800398e:	2200      	movs	r2, #0
 8003990:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8003994:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003996:	6940      	ldr	r0, [r0, #20]
 8003998:	2204      	movs	r2, #4
 800399a:	311c      	adds	r1, #28
 800399c:	4718      	bx	r3
 800399e:	bf00      	nop

080039a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039a0:	b510      	push	{r4, lr}
 80039a2:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039a4:	2238      	movs	r2, #56	@ 0x38
 80039a6:	2100      	movs	r1, #0
 80039a8:	a806      	add	r0, sp, #24
 80039aa:	f008 fcb3 	bl	800c314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039ae:	2000      	movs	r0, #0
 80039b0:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80039b4:	e9cd 0003 	strd	r0, r0, [sp, #12]
 80039b8:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80039ba:	f004 feef 	bl	800879c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039be:	2001      	movs	r0, #1
 80039c0:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80039c4:	2206      	movs	r2, #6
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039ca:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039cc:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80039ce:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80039d0:	2155      	movs	r1, #85	@ 0x55
 80039d2:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039d4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039d6:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80039da:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80039de:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039e2:	f004 ff55 	bl	8008890 <HAL_RCC_OscConfig>
 80039e6:	b108      	cbz	r0, 80039ec <SystemClock_Config+0x4c>
  __ASM volatile ("cpsid i" : : : "memory");
 80039e8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039ea:	e7fe      	b.n	80039ea <SystemClock_Config+0x4a>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80039ec:	2104      	movs	r1, #4
 80039ee:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039f0:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80039f2:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039f6:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80039fa:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039fe:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003a00:	f005 f9c4 	bl	8008d8c <HAL_RCC_ClockConfig>
 8003a04:	b108      	cbz	r0, 8003a0a <SystemClock_Config+0x6a>
 8003a06:	b672      	cpsid	i
  while (1)
 8003a08:	e7fe      	b.n	8003a08 <SystemClock_Config+0x68>
  HAL_RCC_EnableCSS();
 8003a0a:	f005 faed 	bl	8008fe8 <HAL_RCC_EnableCSS>
}
 8003a0e:	b014      	add	sp, #80	@ 0x50
 8003a10:	bd10      	pop	{r4, pc}
 8003a12:	bf00      	nop

08003a14 <main>:
{
 8003a14:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a16:	2400      	movs	r4, #0
{
 8003a18:	b0a4      	sub	sp, #144	@ 0x90
  HAL_Init();
 8003a1a:	f003 fcff 	bl	800741c <HAL_Init>
  SystemClock_Config();
 8003a1e:	f7ff ffbf 	bl	80039a0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a22:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a26:	4da2      	ldr	r5, [pc, #648]	@ (8003cb0 <main+0x29c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a28:	9419      	str	r4, [sp, #100]	@ 0x64
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a2a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8003a2c:	48a1      	ldr	r0, [pc, #644]	@ (8003cb4 <main+0x2a0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a2e:	f043 0304 	orr.w	r3, r3, #4
 8003a32:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8003a34:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	9303      	str	r3, [sp, #12]
 8003a3c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a3e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8003a40:	f043 0320 	orr.w	r3, r3, #32
 8003a44:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8003a46:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	9304      	str	r3, [sp, #16]
 8003a4e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a50:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8003a58:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	9305      	str	r3, [sp, #20]
 8003a60:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a62:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8003a64:	f043 0302 	orr.w	r3, r3, #2
 8003a68:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8003a6a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8003a72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8003a76:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8003a78:	9315      	str	r3, [sp, #84]	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003a7a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a7e:	9a06      	ldr	r2, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003a80:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8003a82:	f004 fd83 	bl	800858c <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003a86:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8003a88:	f043 0304 	orr.w	r3, r3, #4
 8003a8c:	64ab      	str	r3, [r5, #72]	@ 0x48
 8003a8e:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	9301      	str	r3, [sp, #4]
 8003a96:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a98:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	64ab      	str	r3, [r5, #72]	@ 0x48
 8003aa0:	6cab      	ldr	r3, [r5, #72]	@ 0x48
  hadc1.Instance = ADC1;
 8003aa2:	4d85      	ldr	r5, [pc, #532]	@ (8003cb8 <main+0x2a4>)
  ADC_MultiModeTypeDef multimode = {0};
 8003aa4:	940a      	str	r4, [sp, #40]	@ 0x28
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003aa6:	f003 0301 	and.w	r3, r3, #1
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003aaa:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003aac:	9302      	str	r3, [sp, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003aae:	223c      	movs	r2, #60	@ 0x3c
 8003ab0:	a815      	add	r0, sp, #84	@ 0x54
  ADC_ChannelConfTypeDef sConfig = {0};
 8003ab2:	2620      	movs	r6, #32
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003ab4:	9b02      	ldr	r3, [sp, #8]
  ADC_MultiModeTypeDef multimode = {0};
 8003ab6:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003aba:	f008 fc2b 	bl	800c314 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8003abe:	4621      	mov	r1, r4
 8003ac0:	4632      	mov	r2, r6
 8003ac2:	a80d      	add	r0, sp, #52	@ 0x34
 8003ac4:	f008 fc26 	bl	800c314 <memset>
  hadc1.Instance = ADC1;
 8003ac8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003acc:	602b      	str	r3, [r5, #0]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8003ace:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003ad2:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ad6:	e9c5 440b 	strd	r4, r4, [r5, #44]	@ 0x2c
  hadc1.Init.GainCompensation = 0;
 8003ada:	612c      	str	r4, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003adc:	83ac      	strh	r4, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003ade:	f885 4024 	strb.w	r4, [r5, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003ae2:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003ae6:	63ec      	str	r4, [r5, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003ae8:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8003aec:	60eb      	str	r3, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003aee:	2701      	movs	r7, #1
 8003af0:	2404      	movs	r4, #4
  hadc1.Init.NbrOfConversion = 2;
 8003af2:	2302      	movs	r3, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003af4:	4628      	mov	r0, r5
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003af6:	e9c5 7405 	strd	r7, r4, [r5, #20]
  hadc1.Init.NbrOfConversion = 2;
 8003afa:	622b      	str	r3, [r5, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003afc:	f003 fcb8 	bl	8007470 <HAL_ADC_Init>
 8003b00:	b108      	cbz	r0, 8003b06 <main+0xf2>
 8003b02:	b672      	cpsid	i
  while (1)
 8003b04:	e7fe      	b.n	8003b04 <main+0xf0>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003b06:	900a      	str	r0, [sp, #40]	@ 0x28
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003b08:	a90a      	add	r1, sp, #40	@ 0x28
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	f004 fb50 	bl	80081b0 <HAL_ADCEx_MultiModeConfigChannel>
 8003b10:	b108      	cbz	r0, 8003b16 <main+0x102>
 8003b12:	b672      	cpsid	i
  while (1)
 8003b14:	e7fe      	b.n	8003b14 <main+0x100>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8003b16:	2380      	movs	r3, #128	@ 0x80
  sConfigInjected.InjectedOffset = 0;
 8003b18:	e9cd 4019 	strd	r4, r0, [sp, #100]	@ 0x64
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8003b1c:	f8ad 0078 	strh.w	r0, [sp, #120]	@ 0x78
  sConfigInjected.QueueInjectedContext = DISABLE;
 8003b20:	f88d 007a 	strb.w	r0, [sp, #122]	@ 0x7a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8003b24:	f88d 0084 	strb.w	r0, [sp, #132]	@ 0x84
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8003b28:	4864      	ldr	r0, [pc, #400]	@ (8003cbc <main+0x2a8>)
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8003b2a:	9717      	str	r7, [sp, #92]	@ 0x5c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8003b2c:	e9cd 331f 	strd	r3, r3, [sp, #124]	@ 0x7c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8003b30:	2309      	movs	r3, #9
 8003b32:	e9cd 0315 	strd	r0, r3, [sp, #84]	@ 0x54
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8003b36:	f04f 087f 	mov.w	r8, #127	@ 0x7f
  sConfigInjected.InjectedNbrOfConversion = 3;
 8003b3a:	2703      	movs	r7, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003b3c:	a915      	add	r1, sp, #84	@ 0x54
 8003b3e:	4628      	mov	r0, r5
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8003b40:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
  sConfigInjected.InjectedNbrOfConversion = 3;
 8003b44:	971d      	str	r7, [sp, #116]	@ 0x74
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003b46:	f004 f82d 	bl	8007ba4 <HAL_ADCEx_InjectedConfigChannel>
 8003b4a:	b108      	cbz	r0, 8003b50 <main+0x13c>
 8003b4c:	b672      	cpsid	i
  while (1)
 8003b4e:	e7fe      	b.n	8003b4e <main+0x13a>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8003b50:	495b      	ldr	r1, [pc, #364]	@ (8003cc0 <main+0x2ac>)
 8003b52:	f240 130f 	movw	r3, #271	@ 0x10f
 8003b56:	e9cd 1315 	strd	r1, r3, [sp, #84]	@ 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	a915      	add	r1, sp, #84	@ 0x54
 8003b5e:	f004 f821 	bl	8007ba4 <HAL_ADCEx_InjectedConfigChannel>
 8003b62:	b108      	cbz	r0, 8003b68 <main+0x154>
 8003b64:	b672      	cpsid	i
  while (1)
 8003b66:	e7fe      	b.n	8003b66 <main+0x152>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8003b68:	4a56      	ldr	r2, [pc, #344]	@ (8003cc4 <main+0x2b0>)
 8003b6a:	f240 2315 	movw	r3, #533	@ 0x215
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003b6e:	a915      	add	r1, sp, #84	@ 0x54
 8003b70:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8003b72:	e9cd 2315 	strd	r2, r3, [sp, #84]	@ 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003b76:	f004 f815 	bl	8007ba4 <HAL_ADCEx_InjectedConfigChannel>
 8003b7a:	b108      	cbz	r0, 8003b80 <main+0x16c>
 8003b7c:	b672      	cpsid	i
  while (1)
 8003b7e:	e7fe      	b.n	8003b7e <main+0x16a>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003b80:	f8df e154 	ldr.w	lr, [pc, #340]	@ 8003cd8 <main+0x2c4>
  sConfig.Offset = 0;
 8003b84:	9012      	str	r0, [sp, #72]	@ 0x48
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003b86:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b88:	a90d      	add	r1, sp, #52	@ 0x34
 8003b8a:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003b8c:	e9cd e30d 	strd	lr, r3, [sp, #52]	@ 0x34
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003b90:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8003b94:	940f      	str	r4, [sp, #60]	@ 0x3c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003b96:	9411      	str	r4, [sp, #68]	@ 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b98:	f003 fd86 	bl	80076a8 <HAL_ADC_ConfigChannel>
 8003b9c:	b108      	cbz	r0, 8003ba2 <main+0x18e>
 8003b9e:	b672      	cpsid	i
  while (1)
 8003ba0:	e7fe      	b.n	8003ba0 <main+0x18c>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003ba2:	f8df c138 	ldr.w	ip, [pc, #312]	@ 8003cdc <main+0x2c8>
 8003ba6:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ba8:	4628      	mov	r0, r5
 8003baa:	a90d      	add	r1, sp, #52	@ 0x34
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003bac:	e9cd c30d 	strd	ip, r3, [sp, #52]	@ 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003bb0:	f003 fd7a 	bl	80076a8 <HAL_ADC_ConfigChannel>
 8003bb4:	b108      	cbz	r0, 8003bba <main+0x1a6>
 8003bb6:	b672      	cpsid	i
  while (1)
 8003bb8:	e7fe      	b.n	8003bb8 <main+0x1a4>
  hcordic.Instance = CORDIC;
 8003bba:	4843      	ldr	r0, [pc, #268]	@ (8003cc8 <main+0x2b4>)
 8003bbc:	4b43      	ldr	r3, [pc, #268]	@ (8003ccc <main+0x2b8>)
 8003bbe:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8003bc0:	f004 fbaa 	bl	8008318 <HAL_CORDIC_Init>
 8003bc4:	4604      	mov	r4, r0
 8003bc6:	b108      	cbz	r0, 8003bcc <main+0x1b8>
 8003bc8:	b672      	cpsid	i
  while (1)
 8003bca:	e7fe      	b.n	8003bca <main+0x1b6>
  htim1.Instance = TIM1;
 8003bcc:	4d40      	ldr	r5, [pc, #256]	@ (8003cd0 <main+0x2bc>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bce:	9007      	str	r0, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003bd0:	4601      	mov	r1, r0
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8003bd2:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bd6:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 8003bda:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 8003bde:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
 8003be2:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003be6:	e9cd 0008 	strd	r0, r0, [sp, #32]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003bea:	2234      	movs	r2, #52	@ 0x34
 8003bec:	a815      	add	r0, sp, #84	@ 0x54
 8003bee:	f008 fb91 	bl	800c314 <memset>
  htim1.Instance = TIM1;
 8003bf2:	4b38      	ldr	r3, [pc, #224]	@ (8003cd4 <main+0x2c0>)
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8003bf4:	616f      	str	r7, [r5, #20]
  htim1.Instance = TIM1;
 8003bf6:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003bf8:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8003bfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bfe:	f44f 57a6 	mov.w	r7, #5312	@ 0x14c0
 8003c02:	e9c5 7303 	strd	r7, r3, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003c06:	60ae      	str	r6, [r5, #8]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8003c08:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c0a:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003c0c:	f005 fc4a 	bl	80094a4 <HAL_TIM_PWM_Init>
 8003c10:	4603      	mov	r3, r0
 8003c12:	b108      	cbz	r0, 8003c18 <main+0x204>
 8003c14:	b672      	cpsid	i
  while (1)
 8003c16:	e7fe      	b.n	8003c16 <main+0x202>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c18:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c1c:	a907      	add	r1, sp, #28
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8003c1e:	2370      	movs	r3, #112	@ 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c20:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8003c22:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c24:	f005 fe12 	bl	800984c <HAL_TIMEx_MasterConfigSynchronization>
 8003c28:	b108      	cbz	r0, 8003c2e <main+0x21a>
 8003c2a:	b672      	cpsid	i
  while (1)
 8003c2c:	e7fe      	b.n	8003c2c <main+0x218>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8003c2e:	2101      	movs	r1, #1
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8003c30:	aa0a      	add	r2, sp, #40	@ 0x28
 8003c32:	4827      	ldr	r0, [pc, #156]	@ (8003cd0 <main+0x2bc>)
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 8003c34:	910c      	str	r1, [sp, #48]	@ 0x30
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8003c36:	e9cd 110a 	strd	r1, r1, [sp, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8003c3a:	f005 feb3 	bl	80099a4 <HAL_TIMEx_ConfigBreakInput>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	b108      	cbz	r0, 8003c46 <main+0x232>
 8003c42:	b672      	cpsid	i
  while (1)
 8003c44:	e7fe      	b.n	8003c44 <main+0x230>
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8003c46:	2160      	movs	r1, #96	@ 0x60
 8003c48:	f44f 6326 	mov.w	r3, #2656	@ 0xa60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8003c4c:	2408      	movs	r4, #8
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8003c4e:	e9cd 130d 	strd	r1, r3, [sp, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8003c52:	e9cd 040f 	strd	r0, r4, [sp, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c56:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8003c5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c5e:	481c      	ldr	r0, [pc, #112]	@ (8003cd0 <main+0x2bc>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8003c60:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c62:	a90d      	add	r1, sp, #52	@ 0x34
 8003c64:	f005 fd04 	bl	8009670 <HAL_TIM_PWM_ConfigChannel>
 8003c68:	b108      	cbz	r0, 8003c6e <main+0x25a>
 8003c6a:	b672      	cpsid	i
  while (1)
 8003c6c:	e7fe      	b.n	8003c6c <main+0x258>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c6e:	4818      	ldr	r0, [pc, #96]	@ (8003cd0 <main+0x2bc>)
 8003c70:	2204      	movs	r2, #4
 8003c72:	a90d      	add	r1, sp, #52	@ 0x34
 8003c74:	f005 fcfc 	bl	8009670 <HAL_TIM_PWM_ConfigChannel>
 8003c78:	b108      	cbz	r0, 8003c7e <main+0x26a>
 8003c7a:	b672      	cpsid	i
  while (1)
 8003c7c:	e7fe      	b.n	8003c7c <main+0x268>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c7e:	4814      	ldr	r0, [pc, #80]	@ (8003cd0 <main+0x2bc>)
 8003c80:	4622      	mov	r2, r4
 8003c82:	a90d      	add	r1, sp, #52	@ 0x34
 8003c84:	f005 fcf4 	bl	8009670 <HAL_TIM_PWM_ConfigChannel>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	b108      	cbz	r0, 8003c90 <main+0x27c>
 8003c8c:	b672      	cpsid	i
  while (1)
 8003c8e:	e7fe      	b.n	8003c8e <main+0x27a>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003c90:	2270      	movs	r2, #112	@ 0x70
 8003c92:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8003c94:	f241 42bf 	movw	r2, #5311	@ 0x14bf
 8003c98:	920e      	str	r2, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c9a:	480d      	ldr	r0, [pc, #52]	@ (8003cd0 <main+0x2bc>)
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c9c:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c9e:	a90d      	add	r1, sp, #52	@ 0x34
 8003ca0:	220c      	movs	r2, #12
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ca2:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003ca4:	f005 fce4 	bl	8009670 <HAL_TIM_PWM_ConfigChannel>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	b1c8      	cbz	r0, 8003ce0 <main+0x2cc>
 8003cac:	b672      	cpsid	i
  while (1)
 8003cae:	e7fe      	b.n	8003cae <main+0x29a>
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	48000800 	.word	0x48000800
 8003cb8:	20000d54 	.word	0x20000d54
 8003cbc:	04300002 	.word	0x04300002
 8003cc0:	1d500080 	.word	0x1d500080
 8003cc4:	19200040 	.word	0x19200040
 8003cc8:	20000d2c 	.word	0x20000d2c
 8003ccc:	40020c00 	.word	0x40020c00
 8003cd0:	20000ce0 	.word	0x20000ce0
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	08600004 	.word	0x08600004
 8003cdc:	21800100 	.word	0x21800100
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8003ce0:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8003ce4:	9415      	str	r4, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8003ce6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8003cea:	9416      	str	r4, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8003cec:	2448      	movs	r4, #72	@ 0x48
 8003cee:	e9cd 3417 	strd	r3, r4, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003cf2:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8003cf6:	f44f 5400 	mov.w	r4, #8192	@ 0x2000
 8003cfa:	e9cd 5419 	strd	r5, r4, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.BreakFilter = 3;
 8003cfe:	2203      	movs	r2, #3
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003d00:	4838      	ldr	r0, [pc, #224]	@ (8003de4 <main+0x3d0>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003d02:	9321      	str	r3, [sp, #132]	@ 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003d04:	a915      	add	r1, sp, #84	@ 0x54
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003d06:	f04f 7400 	mov.w	r4, #33554432	@ 0x2000000
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003d0a:	e9cd 231b 	strd	r2, r3, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003d0e:	e9cd 341d 	strd	r3, r4, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003d12:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003d16:	f005 fdf3 	bl	8009900 <HAL_TIMEx_ConfigBreakDeadTime>
 8003d1a:	4605      	mov	r5, r0
 8003d1c:	b108      	cbz	r0, 8003d22 <main+0x30e>
 8003d1e:	b672      	cpsid	i
  while (1)
 8003d20:	e7fe      	b.n	8003d20 <main+0x30c>
  huart2.Instance = USART2;
 8003d22:	4c31      	ldr	r4, [pc, #196]	@ (8003de8 <main+0x3d4>)
  HAL_TIM_MspPostInit(&htim1);
 8003d24:	482f      	ldr	r0, [pc, #188]	@ (8003de4 <main+0x3d0>)
 8003d26:	f003 f9c1 	bl	80070ac <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 8003d2a:	4930      	ldr	r1, [pc, #192]	@ (8003dec <main+0x3d8>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d2c:	62a5      	str	r5, [r4, #40]	@ 0x28
  huart2.Init.BaudRate = 1843200;
 8003d2e:	f44f 12e1 	mov.w	r2, #1843200	@ 0x1c2000
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d32:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d34:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 1843200;
 8003d36:	e9c4 1200 	strd	r1, r2, [r4]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d3a:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d3e:	e9c4 5304 	strd	r5, r3, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d42:	e9c4 5506 	strd	r5, r5, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d46:	e9c4 5508 	strd	r5, r5, [r4, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d4a:	f006 f99f 	bl	800a08c <HAL_UART_Init>
 8003d4e:	4601      	mov	r1, r0
 8003d50:	b108      	cbz	r0, 8003d56 <main+0x342>
 8003d52:	b672      	cpsid	i
  while (1)
 8003d54:	e7fe      	b.n	8003d54 <main+0x340>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d56:	4620      	mov	r0, r4
 8003d58:	f006 f9ea 	bl	800a130 <HAL_UARTEx_SetTxFifoThreshold>
 8003d5c:	4601      	mov	r1, r0
 8003d5e:	b108      	cbz	r0, 8003d64 <main+0x350>
 8003d60:	b672      	cpsid	i
  while (1)
 8003d62:	e7fe      	b.n	8003d62 <main+0x34e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d64:	4620      	mov	r0, r4
 8003d66:	f006 fa25 	bl	800a1b4 <HAL_UARTEx_SetRxFifoThreshold>
 8003d6a:	b108      	cbz	r0, 8003d70 <main+0x35c>
 8003d6c:	b672      	cpsid	i
  while (1)
 8003d6e:	e7fe      	b.n	8003d6e <main+0x35a>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003d70:	4620      	mov	r0, r4
 8003d72:	f006 f9bf 	bl	800a0f4 <HAL_UARTEx_DisableFifoMode>
 8003d76:	b108      	cbz	r0, 8003d7c <main+0x368>
 8003d78:	b672      	cpsid	i
  while (1)
 8003d7a:	e7fe      	b.n	8003d7a <main+0x366>
  MX_MotorControl_Init();
 8003d7c:	f001 f89a 	bl	8004eb4 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8003d80:	2201      	movs	r2, #1
 8003d82:	2103      	movs	r1, #3
 8003d84:	2026      	movs	r0, #38	@ 0x26
 8003d86:	f004 faf3 	bl	8008370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d8a:	2026      	movs	r0, #38	@ 0x26
 8003d8c:	f004 fb2c 	bl	80083e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8003d90:	2200      	movs	r2, #0
 8003d92:	2103      	movs	r1, #3
 8003d94:	200b      	movs	r0, #11
 8003d96:	f004 faeb 	bl	8008370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003d9a:	200b      	movs	r0, #11
 8003d9c:	f004 fb24 	bl	80083e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8003da0:	2201      	movs	r2, #1
 8003da2:	2104      	movs	r1, #4
 8003da4:	2018      	movs	r0, #24
 8003da6:	f004 fae3 	bl	8008370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003daa:	2018      	movs	r0, #24
 8003dac:	f004 fb1c 	bl	80083e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003db0:	2200      	movs	r2, #0
 8003db2:	4611      	mov	r1, r2
 8003db4:	2019      	movs	r0, #25
 8003db6:	f004 fadb 	bl	8008370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003dba:	2019      	movs	r0, #25
 8003dbc:	f004 fb14 	bl	80083e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	2012      	movs	r0, #18
 8003dc6:	f004 fad3 	bl	8008370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003dca:	2012      	movs	r0, #18
 8003dcc:	f004 fb0c 	bl	80083e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8003dd0:	2028      	movs	r0, #40	@ 0x28
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2103      	movs	r1, #3
 8003dd6:	f004 facb 	bl	8008370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003dda:	2028      	movs	r0, #40	@ 0x28
 8003ddc:	f004 fb04 	bl	80083e8 <HAL_NVIC_EnableIRQ>
  while (1)
 8003de0:	e7fe      	b.n	8003de0 <main+0x3cc>
 8003de2:	bf00      	nop
 8003de4:	20000ce0 	.word	0x20000ce0
 8003de8:	20000c4c 	.word	0x20000c4c
 8003dec:	40004400 	.word	0x40004400

08003df0 <Error_Handler>:
 8003df0:	b672      	cpsid	i
  while (1)
 8003df2:	e7fe      	b.n	8003df2 <Error_Handler+0x2>

08003df4 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 8003df4:	4b01      	ldr	r3, [pc, #4]	@ (8003dfc <MC_StartMotor1+0x8>)
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	f000 b896 	b.w	8003f28 <MCI_StartMotor>
 8003dfc:	20002090 	.word	0x20002090

08003e00 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 8003e00:	4b01      	ldr	r3, [pc, #4]	@ (8003e08 <MC_StopMotor1+0x8>)
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	f000 b8a6 	b.w	8003f54 <MCI_StopMotor>
 8003e08:	20002090 	.word	0x20002090

08003e0c <MC_AcknowledgeFaultMotor1>:
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1(void)
{
  return (MCI_FaultAcknowledged(pMCI[M1]));
 8003e0c:	4b01      	ldr	r3, [pc, #4]	@ (8003e14 <MC_AcknowledgeFaultMotor1+0x8>)
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	f000 b8bc 	b.w	8003f8c <MCI_FaultAcknowledged>
 8003e14:	20002090 	.word	0x20002090

08003e18 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
  return (MCI_GetSTMState(pMCI[M1]));
 8003e18:	4b01      	ldr	r3, [pc, #4]	@ (8003e20 <MC_GetSTMStateMotor1+0x8>)
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	f000 b87e 	b.w	8003f1c <MCI_GetSTMState>
 8003e20:	20002090 	.word	0x20002090

08003e24 <MC_ProfilerCommand>:
 * - txLength : Amount of space actually used for the answer - Set in the command itself
 * - txBuffer : Pointer to the buffer containing the answer
 * @retval returns MCP_CMD_OK or MCP_CMD_NOK if profiler is started correctly or not.
 *  */
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
 8003e24:	b500      	push	{lr}
 8003e26:	b083      	sub	sp, #12
 8003e28:	4684      	mov	ip, r0
 8003e2a:	9804      	ldr	r0, [sp, #16]
  return (SCC_CMD(&SCC, rxLength, rxBuffer, txSyncFreeSpace, txLength, txBuffer));
 8003e2c:	9001      	str	r0, [sp, #4]
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	4804      	ldr	r0, [pc, #16]	@ (8003e44 <MC_ProfilerCommand+0x20>)
 8003e32:	4613      	mov	r3, r2
 8003e34:	460a      	mov	r2, r1
 8003e36:	4661      	mov	r1, ip
 8003e38:	f7fc feea 	bl	8000c10 <SCC_CMD>
}
 8003e3c:	b003      	add	sp, #12
 8003e3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e42:	bf00      	nop
 8003e44:	200000f0 	.word	0x200000f0

08003e48 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop

08003e4c <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop

08003e50 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8003e50:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8003e54:	f240 3301 	movw	r3, #769	@ 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8003e58:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 8003e5c:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 8003e5e:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8003e60:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8003e62:	4770      	bx	lr

08003e64 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8003e64:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8003e68:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8003e6c:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 8003e70:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 8003e72:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8003e74:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8003e76:	4770      	bx	lr

08003e78 <MCI_SetCurrentReferences>:
  * function.

  @sa MCI_SetCurrentReferences_F
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 8003e78:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8003e7a:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8003e7c:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8003e80:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 8003e82:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8003e86:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8003e88:	b002      	add	sp, #8
 8003e8a:	4770      	bx	lr

08003e8c <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8003e8c:	8c03      	ldrh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 8003e8e:	f8b0 c022 	ldrh.w	ip, [r0, #34]	@ 0x22
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8003e92:	430b      	orrs	r3, r1
 8003e94:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 8003e98:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8003e9c:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 8003e9e:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop

08003ea4 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8003ea4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d000      	beq.n	8003eae <MCI_ExecBufferedCommands+0xa>
 8003eac:	4770      	bx	lr
{
 8003eae:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8003eb0:	7b02      	ldrb	r2, [r0, #12]
 8003eb2:	2a02      	cmp	r2, #2
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	d007      	beq.n	8003ec8 <MCI_ExecBufferedCommands+0x24>
 8003eb8:	2a03      	cmp	r2, #3
 8003eba:	d028      	beq.n	8003f0e <MCI_ExecBufferedCommands+0x6a>
 8003ebc:	2a01      	cmp	r2, #1
 8003ebe:	d017      	beq.n	8003ef0 <MCI_ExecBufferedCommands+0x4c>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8003ec6:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8003ec8:	6843      	ldr	r3, [r0, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8003ed0:	6800      	ldr	r0, [r0, #0]
 8003ed2:	2104      	movs	r1, #4
 8003ed4:	f007 fdb6 	bl	800ba44 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8003ed8:	8ba2      	ldrh	r2, [r4, #28]
 8003eda:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8003ede:	6820      	ldr	r0, [r4, #0]
 8003ee0:	f007 fdb4 	bl	800ba4c <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d0eb      	beq.n	8003ec0 <MCI_ExecBufferedCommands+0x1c>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 8003ee8:	2302      	movs	r3, #2
 8003eea:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8003eee:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8003ef0:	6843      	ldr	r3, [r0, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8003ef8:	6800      	ldr	r0, [r0, #0]
 8003efa:	2103      	movs	r1, #3
 8003efc:	f007 fda2 	bl	800ba44 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8003f00:	8ba2      	ldrh	r2, [r4, #28]
 8003f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f06:	6820      	ldr	r0, [r4, #0]
 8003f08:	f007 fda0 	bl	800ba4c <STC_ExecRamp>
          break;
 8003f0c:	e7ea      	b.n	8003ee4 <MCI_ExecBufferedCommands+0x40>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8003f0e:	6842      	ldr	r2, [r0, #4]
 8003f10:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8003f14:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8003f18:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 8003f1a:	e7e5      	b.n	8003ee8 <MCI_ExecBufferedCommands+0x44>

08003f1c <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 8003f1c:	7fc0      	ldrb	r0, [r0, #31]
 8003f1e:	4770      	bx	lr

08003f20 <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 8003f20:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8003f22:	4770      	bx	lr

08003f24 <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 8003f24:	8c00      	ldrh	r0, [r0, #32]
 8003f26:	4770      	bx	lr

08003f28 <MCI_StartMotor>:
{
 8003f28:	b510      	push	{r4, lr}
 8003f2a:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8003f2c:	f7ff fff6 	bl	8003f1c <MCI_GetSTMState>
 8003f30:	b108      	cbz	r0, 8003f36 <MCI_StartMotor+0xe>
  bool retVal = false;
 8003f32:	2000      	movs	r0, #0
}
 8003f34:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8003f36:	4620      	mov	r0, r4
 8003f38:	f7ff fff2 	bl	8003f20 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	d1f8      	bne.n	8003f32 <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8003f40:	4620      	mov	r0, r4
 8003f42:	f7ff ffef 	bl	8003f24 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8003f46:	2800      	cmp	r0, #0
 8003f48:	d1f3      	bne.n	8003f32 <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 8003f4a:	2001      	movs	r0, #1
 8003f4c:	77a0      	strb	r0, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8003f4e:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8003f52:	bd10      	pop	{r4, pc}

08003f54 <MCI_StopMotor>:
{
 8003f54:	b538      	push	{r3, r4, r5, lr}
 8003f56:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 8003f58:	f7ff ffe0 	bl	8003f1c <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 8003f5c:	4604      	mov	r4, r0
 8003f5e:	b118      	cbz	r0, 8003f68 <MCI_StopMotor+0x14>
 8003f60:	f1b0 040c 	subs.w	r4, r0, #12
 8003f64:	bf18      	it	ne
 8003f66:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8003f68:	4628      	mov	r0, r5
 8003f6a:	f7ff ffd9 	bl	8003f20 <MCI_GetOccurredFaults>
 8003f6e:	b110      	cbz	r0, 8003f76 <MCI_StopMotor+0x22>
  bool retVal = false;
 8003f70:	2400      	movs	r4, #0
}
 8003f72:	4620      	mov	r0, r4
 8003f74:	bd38      	pop	{r3, r4, r5, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8003f76:	4628      	mov	r0, r5
 8003f78:	f7ff ffd4 	bl	8003f24 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	d1f7      	bne.n	8003f70 <MCI_StopMotor+0x1c>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8003f80:	2c00      	cmp	r4, #0
 8003f82:	d0f5      	beq.n	8003f70 <MCI_StopMotor+0x1c>
      pHandle->DirectCommand = MCI_STOP;
 8003f84:	2305      	movs	r3, #5
 8003f86:	77ab      	strb	r3, [r5, #30]
      retVal = true;
 8003f88:	e7f3      	b.n	8003f72 <MCI_StopMotor+0x1e>
 8003f8a:	bf00      	nop

08003f8c <MCI_FaultAcknowledged>:
{
 8003f8c:	b510      	push	{r4, lr}
 8003f8e:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8003f90:	f7ff ffc4 	bl	8003f1c <MCI_GetSTMState>
 8003f94:	280b      	cmp	r0, #11
 8003f96:	d001      	beq.n	8003f9c <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 8003f98:	2000      	movs	r0, #0
}
 8003f9a:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f7ff ffc1 	bl	8003f24 <MCI_GetCurrentFaults>
 8003fa2:	2800      	cmp	r0, #0
 8003fa4:	d1f8      	bne.n	8003f98 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	77a3      	strb	r3, [r4, #30]
      pHandle->PastFaults = MC_NO_FAULTS;
 8003faa:	8460      	strh	r0, [r4, #34]	@ 0x22
      reVal = true;
 8003fac:	2001      	movs	r0, #1
}
 8003fae:	bd10      	pop	{r4, pc}

08003fb0 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8003fb0:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8003fb2:	8c00      	ldrh	r0, [r0, #32]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 8003fb4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop

08003fbc <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8003fbc:	f890 0025 	ldrb.w	r0, [r0, #37]	@ 0x25
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop

08003fc4 <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 8003fc4:	7b03      	ldrb	r3, [r0, #12]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d005      	beq.n	8003fd6 <MCI_GetImposedMotorDirection+0x12>
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d013      	beq.n	8003ff6 <MCI_GetImposedMotorDirection+0x32>
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d009      	beq.n	8003fe6 <MCI_GetImposedMotorDirection+0x22>
  int16_t retVal = 1;
 8003fd2:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (retVal);
}
 8003fd4:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 8003fd6:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
          retVal = -1;
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bfac      	ite	ge
 8003fde:	2001      	movge	r0, #1
 8003fe0:	f04f 30ff 	movlt.w	r0, #4294967295
 8003fe4:	4770      	bx	lr
        if (pHandle->hFinalSpeed < 0)
 8003fe6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
          retVal = -1;
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	bfac      	ite	ge
 8003fee:	2001      	movge	r0, #1
 8003ff0:	f04f 30ff 	movlt.w	r0, #4294967295
 8003ff4:	4770      	bx	lr
        if (pHandle->Iqdref.q < 0)
 8003ff6:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
          retVal = -1;
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bfac      	ite	ge
 8003ffe:	2001      	movge	r0, #1
 8004000:	f04f 30ff 	movlt.w	r0, #4294967295
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop

08004008 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8004008:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop

08004010 <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 8004010:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop

08004018 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8004018:	8b80      	ldrh	r0, [r0, #28]
 800401a:	4770      	bx	lr

0800401c <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 800401c:	6803      	ldr	r3, [r0, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 800401e:	2200      	movs	r2, #0
 8004020:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 8004022:	619a      	str	r2, [r3, #24]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop

08004028 <MCI_GetAvrgMecSpeedUnit>:
static inline SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 8004028:	6803      	ldr	r3, [r0, #0]
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 800402a:	6958      	ldr	r0, [r3, #20]
 800402c:	f007 bc9a 	b.w	800b964 <SPD_GetAvrgMecSpeedUnit>

08004030 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8004030:	6800      	ldr	r0, [r0, #0]
 8004032:	f007 bd03 	b.w	800ba3c <STC_GetMecSpeedRefUnit>
 8004036:	bf00      	nop

08004038 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 8004038:	6842      	ldr	r2, [r0, #4]
 800403a:	6810      	ldr	r0, [r2, #0]
 800403c:	2300      	movs	r3, #0
 800403e:	b282      	uxth	r2, r0
 8004040:	f362 030f 	bfi	r3, r2, #0, #16
 8004044:	0c00      	lsrs	r0, r0, #16
 8004046:	f360 431f 	bfi	r3, r0, #16, #16
{
 800404a:	b082      	sub	sp, #8
#endif
}
 800404c:	4618      	mov	r0, r3
 800404e:	b002      	add	sp, #8
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop

08004054 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 8004054:	6842      	ldr	r2, [r0, #4]
 8004056:	6850      	ldr	r0, [r2, #4]
 8004058:	2300      	movs	r3, #0
 800405a:	b282      	uxth	r2, r0
 800405c:	f362 030f 	bfi	r3, r2, #0, #16
 8004060:	0c00      	lsrs	r0, r0, #16
 8004062:	f360 431f 	bfi	r3, r0, #16, #16
{
 8004066:	b082      	sub	sp, #8
#endif
}
 8004068:	4618      	mov	r0, r3
 800406a:	b002      	add	sp, #8
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop

08004070 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 8004070:	6842      	ldr	r2, [r0, #4]
 8004072:	68d0      	ldr	r0, [r2, #12]
 8004074:	2300      	movs	r3, #0
 8004076:	b282      	uxth	r2, r0
 8004078:	f362 030f 	bfi	r3, r2, #0, #16
 800407c:	0c00      	lsrs	r0, r0, #16
 800407e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8004082:	b082      	sub	sp, #8
#endif
}
 8004084:	4618      	mov	r0, r3
 8004086:	b002      	add	sp, #8
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop

0800408c <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 800408c:	6842      	ldr	r2, [r0, #4]
 800408e:	6910      	ldr	r0, [r2, #16]
 8004090:	2300      	movs	r3, #0
 8004092:	b282      	uxth	r2, r0
 8004094:	f362 030f 	bfi	r3, r2, #0, #16
 8004098:	0c00      	lsrs	r0, r0, #16
 800409a:	f360 431f 	bfi	r3, r0, #16, #16
{
 800409e:	b082      	sub	sp, #8
#endif
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	b002      	add	sp, #8
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop

080040a8 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 80040a8:	6842      	ldr	r2, [r0, #4]
 80040aa:	f8d2 0016 	ldr.w	r0, [r2, #22]
 80040ae:	2300      	movs	r3, #0
 80040b0:	b282      	uxth	r2, r0
 80040b2:	f362 030f 	bfi	r3, r2, #0, #16
 80040b6:	0c00      	lsrs	r0, r0, #16
 80040b8:	f360 431f 	bfi	r3, r0, #16, #16
{
 80040bc:	b082      	sub	sp, #8
#endif
}
 80040be:	4618      	mov	r0, r3
 80040c0:	b002      	add	sp, #8
 80040c2:	4770      	bx	lr

080040c4 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 80040c4:	6842      	ldr	r2, [r0, #4]
 80040c6:	f8d2 001a 	ldr.w	r0, [r2, #26]
 80040ca:	2300      	movs	r3, #0
 80040cc:	b282      	uxth	r2, r0
 80040ce:	f362 030f 	bfi	r3, r2, #0, #16
 80040d2:	0c00      	lsrs	r0, r0, #16
 80040d4:	f360 431f 	bfi	r3, r0, #16, #16
{
 80040d8:	b082      	sub	sp, #8
#endif
}
 80040da:	4618      	mov	r0, r3
 80040dc:	b002      	add	sp, #8
 80040de:	4770      	bx	lr

080040e0 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 80040e0:	6843      	ldr	r3, [r0, #4]
#endif
}
 80040e2:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 80040e6:	4770      	bx	lr

080040e8 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 80040e8:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 80040ea:	e9d0 0400 	ldrd	r0, r4, [r0]
 80040ee:	f007 fd2f 	bl	800bb50 <STC_GetDefaultIqdref>
 80040f2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80040f6:	8220      	strh	r0, [r4, #16]
 80040f8:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80040fa:	bd10      	pop	{r4, pc}

080040fc <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 80040fc:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8004100:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8004104:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8004108:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 800410c:	fb10 f202 	smulbb	r2, r0, r2
 8004110:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8004114:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 8004118:	b084      	sub	sp, #16
 800411a:	b203      	sxth	r3, r0
  if (wbeta_tmp > INT16_MAX)
 800411c:	da05      	bge.n	800412a <MCM_Clarke+0x2e>
 800411e:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8004120:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 8004124:	da0c      	bge.n	8004140 <MCM_Clarke+0x44>
 8004126:	4a09      	ldr	r2, [pc, #36]	@ (800414c <MCM_Clarke+0x50>)
 8004128:	e001      	b.n	800412e <MCM_Clarke+0x32>
 800412a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 800412e:	b29b      	uxth	r3, r3
 8004130:	2000      	movs	r0, #0
 8004132:	f363 000f 	bfi	r0, r3, #0, #16
 8004136:	b293      	uxth	r3, r2
 8004138:	f363 401f 	bfi	r0, r3, #16, #16
}
 800413c:	b004      	add	sp, #16
 800413e:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8004140:	4802      	ldr	r0, [pc, #8]	@ (800414c <MCM_Clarke+0x50>)
 8004142:	b20a      	sxth	r2, r1
 8004144:	4282      	cmp	r2, r0
 8004146:	bfb8      	it	lt
 8004148:	4602      	movlt	r2, r0
 800414a:	e7f0      	b.n	800412e <MCM_Clarke+0x32>
 800414c:	ffff8001 	.word	0xffff8001

08004150 <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A�Conversion�should�not�be�performed�between�a�
   * pointer�to�object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8004150:	4b09      	ldr	r3, [pc, #36]	@ (8004178 <MCM_Trig_Functions+0x28>)
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed�between�a
   * pointer�to�object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8004152:	f100 40ff 	add.w	r0, r0, #2139095040	@ 0x7f800000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8004156:	f04f 1260 	mov.w	r2, #6291552	@ 0x600060
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 800415a:	f500 00fe 	add.w	r0, r0, #8323072	@ 0x7f0000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 800415e:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8004160:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8004162:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed between�a
   * pointer�to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
 8004164:	2000      	movs	r0, #0
 8004166:	b29a      	uxth	r2, r3
 8004168:	f362 000f 	bfi	r0, r2, #0, #16
 800416c:	0c1b      	lsrs	r3, r3, #16
{
 800416e:	b082      	sub	sp, #8
  return (CosSin.Components); //cstat !UNION-type-punning
 8004170:	f363 401f 	bfi	r0, r3, #16, #16
}
 8004174:	b002      	add	sp, #8
 8004176:	4770      	bx	lr
 8004178:	40020c00 	.word	0x40020c00

0800417c <MCM_Park>:
{
 800417c:	b530      	push	{r4, r5, lr}
 800417e:	4605      	mov	r5, r0
 8004180:	4604      	mov	r4, r0
 8004182:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8004184:	4608      	mov	r0, r1
 8004186:	f7ff ffe3 	bl	8004150 <MCM_Trig_Functions>
 800418a:	b22d      	sxth	r5, r5
 800418c:	b201      	sxth	r1, r0
 800418e:	1424      	asrs	r4, r4, #16
 8004190:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8004192:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8004196:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 800419a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800419e:	da05      	bge.n	80041ac <MCM_Park+0x30>
 80041a0:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 80041a2:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 80041a6:	da22      	bge.n	80041ee <MCM_Park+0x72>
 80041a8:	4a14      	ldr	r2, [pc, #80]	@ (80041fc <MCM_Park+0x80>)
 80041aa:	e001      	b.n	80041b0 <MCM_Park+0x34>
 80041ac:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 80041b0:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80041b4:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 80041b8:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80041bc:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 80041c0:	da04      	bge.n	80041cc <MCM_Park+0x50>
  else if (wqd_tmp < (-32768))
 80041c2:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80041c6:	da0c      	bge.n	80041e2 <MCM_Park+0x66>
 80041c8:	4b0c      	ldr	r3, [pc, #48]	@ (80041fc <MCM_Park+0x80>)
 80041ca:	e001      	b.n	80041d0 <MCM_Park+0x54>
 80041cc:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return (Output);
 80041d0:	b292      	uxth	r2, r2
 80041d2:	2000      	movs	r0, #0
 80041d4:	f362 000f 	bfi	r0, r2, #0, #16
 80041d8:	b29b      	uxth	r3, r3
 80041da:	f363 401f 	bfi	r0, r3, #16, #16
}
 80041de:	b005      	add	sp, #20
 80041e0:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 80041e2:	4906      	ldr	r1, [pc, #24]	@ (80041fc <MCM_Park+0x80>)
 80041e4:	b21b      	sxth	r3, r3
 80041e6:	428b      	cmp	r3, r1
 80041e8:	bfb8      	it	lt
 80041ea:	460b      	movlt	r3, r1
 80041ec:	e7f0      	b.n	80041d0 <MCM_Park+0x54>
    hqd_tmp = ((int16_t)wqd_tmp);
 80041ee:	4b03      	ldr	r3, [pc, #12]	@ (80041fc <MCM_Park+0x80>)
 80041f0:	b212      	sxth	r2, r2
 80041f2:	429a      	cmp	r2, r3
 80041f4:	bfb8      	it	lt
 80041f6:	461a      	movlt	r2, r3
 80041f8:	e7da      	b.n	80041b0 <MCM_Park+0x34>
 80041fa:	bf00      	nop
 80041fc:	ffff8001 	.word	0xffff8001

08004200 <MCM_Rev_Park>:
{
 8004200:	b530      	push	{r4, r5, lr}
 8004202:	4605      	mov	r5, r0
 8004204:	b085      	sub	sp, #20
 8004206:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8004208:	4608      	mov	r0, r1
 800420a:	f7ff ffa1 	bl	8004150 <MCM_Trig_Functions>
 800420e:	1424      	asrs	r4, r4, #16
 8004210:	1402      	asrs	r2, r0, #16
 8004212:	b22d      	sxth	r5, r5
 8004214:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8004216:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 800421a:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 800421e:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8004222:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 8004226:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 800422a:	2000      	movs	r0, #0
 800422c:	f363 000f 	bfi	r0, r3, #0, #16
 8004230:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8004234:	f364 401f 	bfi	r0, r4, #16, #16
}
 8004238:	b005      	add	sp, #20
 800423a:	bd30      	pop	{r4, r5, pc}

0800423c <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 800423c:	2800      	cmp	r0, #0
 800423e:	dd09      	ble.n	8004254 <MCM_Sqrt+0x18>
 8004240:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* Disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 8004242:	4b05      	ldr	r3, [pc, #20]	@ (8004258 <MCM_Sqrt+0x1c>)
 8004244:	f240 1269 	movw	r2, #361	@ 0x169
 8004248:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 800424a:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 800424c:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800424e:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 8004250:	b662      	cpsie	i
}
 8004252:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8004254:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8004256:	4770      	bx	lr
 8004258:	40020c00 	.word	0x40020c00

0800425c <MCM_floatToIntBit>:
  * @brief  This function codify a floating point number into the relative 32bit integer.
  * @param  float Floating point number to be coded.
  * @retval uint32_t Coded 32bit integer.
  */
__weak uint32_t MCM_floatToIntBit( float_t x ) //cstat !MISRAC2012-Dir-4.6_a
{
 800425c:	b082      	sub	sp, #8
 800425e:	ed8d 0a01 	vstr	s0, [sp, #4]
  const uint32_t *pInt;
  pInt = (uint32_t *)(&x); //cstat !MISRAC2012-Rule-11.3
  return (*pInt);
 8004262:	9801      	ldr	r0, [sp, #4]
}
 8004264:	b002      	add	sp, #8
 8004266:	4770      	bx	lr

08004268 <MCboot>:
{
  /* USER CODE BEGIN MCboot 0 */

  /* USER CODE END MCboot 0 */

  if (MC_NULL == pMCIList)
 8004268:	b308      	cbz	r0, 80042ae <MCboot+0x46>
{
 800426a:	b510      	push	{r4, lr}
    bMCBootCompleted = (uint8_t )0;

    /*************************************************/
    /*    FOC initialization         */
    /*************************************************/
    pMCIList[M1] = &Mci[M1];
 800426c:	4a10      	ldr	r2, [pc, #64]	@ (80042b0 <MCboot+0x48>)
    bMCBootCompleted = (uint8_t )0;
 800426e:	4c11      	ldr	r4, [pc, #68]	@ (80042b4 <MCboot+0x4c>)
    pMCIList[M1] = &Mci[M1];
 8004270:	6002      	str	r2, [r0, #0]
    bMCBootCompleted = (uint8_t )0;
 8004272:	2300      	movs	r3, #0
 8004274:	7023      	strb	r3, [r4, #0]
    FOC_Init();
 8004276:	f000 f9f1 	bl	800465c <FOC_Init>

    ASPEP_start(&aspepOverUartA);
 800427a:	480f      	ldr	r0, [pc, #60]	@ (80042b8 <MCboot+0x50>)
 800427c:	f7ff f830 	bl	80032e0 <ASPEP_start>
    /* USER CODE END MCboot 1 */

    /******************************************************/
    /*   PID component initialization: speed regulation   */
    /******************************************************/
    PID_HandleInit(&PIDSpeedHandle_M1);
 8004280:	480e      	ldr	r0, [pc, #56]	@ (80042bc <MCboot+0x54>)
 8004282:	f006 f9c7 	bl	800a614 <PID_HandleInit>

    /****************************************************/
    /*   Virtual speed sensor component initialization  */
    /****************************************************/
    VSS_Init(&VirtualSpeedSensorM1);
 8004286:	480e      	ldr	r0, [pc, #56]	@ (80042c0 <MCboot+0x58>)
 8004288:	f007 ff4e 	bl	800c128 <VSS_Init>

    /********************************************************/
    /*   Bus voltage sensor component initialization        */
    /********************************************************/
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 800428c:	480d      	ldr	r0, [pc, #52]	@ (80042c4 <MCboot+0x5c>)
 800428e:	f002 fb19 	bl	80068c4 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 8004292:	480d      	ldr	r0, [pc, #52]	@ (80042c8 <MCboot+0x60>)
 8004294:	f007 f99a 	bl	800b5cc <RVBS_Init>

    /*******************************************************/
    /*   Temperature measurement component initialization  */
    /*******************************************************/
    (void)RCM_RegisterRegConv(&TempRegConv_M1);
 8004298:	480c      	ldr	r0, [pc, #48]	@ (80042cc <MCboot+0x64>)
 800429a:	f002 fb13 	bl	80068c4 <RCM_RegisterRegConv>
    NTC_Init(&TempSensor_M1);
 800429e:	480c      	ldr	r0, [pc, #48]	@ (80042d0 <MCboot+0x68>)
 80042a0:	f006 f97c 	bl	800a59c <NTC_Init>

    /* Applicative hook in MCBoot() */
    MC_APP_BootHook();
 80042a4:	f7ff fdd0 	bl	8003e48 <MC_APP_BootHook>

    /* USER CODE BEGIN MCboot 2 */

    /* USER CODE END MCboot 2 */

    bMCBootCompleted = 1U;
 80042a8:	2301      	movs	r3, #1
 80042aa:	7023      	strb	r3, [r4, #0]
  }
}
 80042ac:	bd10      	pop	{r4, pc}
 80042ae:	4770      	bx	lr
 80042b0:	20000000 	.word	0x20000000
 80042b4:	20000dfc 	.word	0x20000dfc
 80042b8:	20000ad0 	.word	0x20000ad0
 80042bc:	20000954 	.word	0x20000954
 80042c0:	200009e8 	.word	0x200009e8
 80042c4:	200009ac 	.word	0x200009ac
 80042c8:	20000990 	.word	0x20000990
 80042cc:	200009d8 	.word	0x200009d8
 80042d0:	200009bc 	.word	0x200009bc

080042d4 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 80042d4:	4b01      	ldr	r3, [pc, #4]	@ (80042dc <TSK_SetChargeBootCapDelayM1+0x8>)
 80042d6:	8018      	strh	r0, [r3, #0]
}
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000e00 	.word	0x20000e00

080042e0 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 80042e0:	4b03      	ldr	r3, [pc, #12]	@ (80042f0 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 80042e2:	8818      	ldrh	r0, [r3, #0]
 80042e4:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80042e6:	fab0 f080 	clz	r0, r0
 80042ea:	0940      	lsrs	r0, r0, #5
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	20000e00 	.word	0x20000e00

080042f4 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 80042f4:	4b01      	ldr	r3, [pc, #4]	@ (80042fc <TSK_SetStopPermanencyTimeM1+0x8>)
 80042f6:	8018      	strh	r0, [r3, #0]
}
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	20000dfe 	.word	0x20000dfe

08004300 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8004300:	4b03      	ldr	r3, [pc, #12]	@ (8004310 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8004302:	8818      	ldrh	r0, [r3, #0]
 8004304:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8004306:	fab0 f080 	clz	r0, r0
 800430a:	0940      	lsrs	r0, r0, #5
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	20000dfe 	.word	0x20000dfe

08004314 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8004314:	b508      	push	{r3, lr}
  bMotorNbr = 0;

  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */
  FOC_HighFrequencyTask(bMotorNbr);
 8004316:	2000      	movs	r0, #0
 8004318:	f000 fc28 	bl	8004b6c <FOC_HighFrequencyTask>

  /* USER CODE BEGIN HighFrequencyTask 1 */

  /* USER CODE END HighFrequencyTask 1 */

  GLOBAL_TIMESTAMP++;
 800431c:	4a06      	ldr	r2, [pc, #24]	@ (8004338 <TSK_HighFrequencyTask+0x24>)
  if (0U == MCPA_UART_A.Mark)
 800431e:	4807      	ldr	r0, [pc, #28]	@ (800433c <TSK_HighFrequencyTask+0x28>)
  GLOBAL_TIMESTAMP++;
 8004320:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8004322:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
  GLOBAL_TIMESTAMP++;
 8004326:	3301      	adds	r3, #1
 8004328:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 800432a:	b909      	cbnz	r1, 8004330 <TSK_HighFrequencyTask+0x1c>
    MCPA_dataLog (&MCPA_UART_A);
  }

  return (bMotorNbr);

}
 800432c:	2000      	movs	r0, #0
 800432e:	bd08      	pop	{r3, pc}
    MCPA_dataLog (&MCPA_UART_A);
 8004330:	f005 ffb6 	bl	800a2a0 <MCPA_dataLog>
}
 8004334:	2000      	movs	r0, #0
 8004336:	bd08      	pop	{r3, pc}
 8004338:	200020f0 	.word	0x200020f0
 800433c:	20000a94 	.word	0x20000a94

08004340 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8004340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint8_t lbmotor = M1;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  if (M1 == bMotor)
 8004342:	4604      	mov	r4, r0
 8004344:	b198      	cbz	r0, 800436e <TSK_SafetyTask_PWMOFF+0x2e>
  {
    /* Nothing to do */
  }

/* Due to warning array subscript 1 is above array bounds of PWMC_Handle_t *[1] [-Warray-bounds] */
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8004346:	4e24      	ldr	r6, [pc, #144]	@ (80043d8 <TSK_SafetyTask_PWMOFF+0x98>)
 8004348:	6830      	ldr	r0, [r6, #0]
 800434a:	f000 ffd1 	bl	80052f0 <PWMC_IsFaultOccurred>
 800434e:	4601      	mov	r1, r0
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8004350:	4d22      	ldr	r5, [pc, #136]	@ (80043dc <TSK_SafetyTask_PWMOFF+0x9c>)
 8004352:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004356:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800435a:	43ca      	mvns	r2, r1
 800435c:	4628      	mov	r0, r5
 800435e:	b292      	uxth	r2, r2
 8004360:	f7ff fd94 	bl	8003e8c <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8004364:	4628      	mov	r0, r5
 8004366:	f7ff fe23 	bl	8003fb0 <MCI_GetFaultState>
 800436a:	b9d8      	cbnz	r0, 80043a4 <TSK_SafetyTask_PWMOFF+0x64>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 800436c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 800436e:	481c      	ldr	r0, [pc, #112]	@ (80043e0 <TSK_SafetyTask_PWMOFF+0xa0>)
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8004370:	4e19      	ldr	r6, [pc, #100]	@ (80043d8 <TSK_SafetyTask_PWMOFF+0x98>)
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 8004372:	f002 fba3 	bl	8006abc <RCM_ExecRegularConv>
 8004376:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 8004378:	481a      	ldr	r0, [pc, #104]	@ (80043e4 <TSK_SafetyTask_PWMOFF+0xa4>)
 800437a:	f006 f921 	bl	800a5c0 <NTC_CalcAvTemp>
 800437e:	4607      	mov	r7, r0
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8004380:	6830      	ldr	r0, [r6, #0]
 8004382:	f000 ffb5 	bl	80052f0 <PWMC_IsFaultOccurred>
 8004386:	4605      	mov	r5, r0
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8004388:	4817      	ldr	r0, [pc, #92]	@ (80043e8 <TSK_SafetyTask_PWMOFF+0xa8>)
 800438a:	f002 fb97 	bl	8006abc <RCM_ExecRegularConv>
 800438e:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8004390:	4816      	ldr	r0, [pc, #88]	@ (80043ec <TSK_SafetyTask_PWMOFF+0xac>)
 8004392:	f007 f947 	bl	800b624 <RVBS_CalcAvVbus>
 8004396:	4307      	orrs	r7, r0
 8004398:	f007 070e 	and.w	r7, r7, #14
 800439c:	ea45 0107 	orr.w	r1, r5, r7
 80043a0:	b289      	uxth	r1, r1
 80043a2:	e7d5      	b.n	8004350 <TSK_SafetyTask_PWMOFF+0x10>
      SCC_Stop(&SCC);
 80043a4:	4812      	ldr	r0, [pc, #72]	@ (80043f0 <TSK_SafetyTask_PWMOFF+0xb0>)
 80043a6:	f7fc fcae 	bl	8000d06 <SCC_Stop>
      OTT_Stop(&OTT);
 80043aa:	4812      	ldr	r0, [pc, #72]	@ (80043f4 <TSK_SafetyTask_PWMOFF+0xb4>)
 80043ac:	f7fb ffc5 	bl	800033a <OTT_Stop>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80043b0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80043b4:	f000 ff50 	bl	8005258 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0U)
 80043b8:	480f      	ldr	r0, [pc, #60]	@ (80043f8 <TSK_SafetyTask_PWMOFF+0xb8>)
 80043ba:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 80043be:	b923      	cbnz	r3, 80043ca <TSK_SafetyTask_PWMOFF+0x8a>
    FOC_Clear(bMotor);
 80043c0:	4620      	mov	r0, r4
}
 80043c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FOC_Clear(bMotor);
 80043c6:	f000 b90f 	b.w	80045e8 <FOC_Clear>
      MCPA_flushDataLog (&MCPA_UART_A);
 80043ca:	f006 f829 	bl	800a420 <MCPA_flushDataLog>
    FOC_Clear(bMotor);
 80043ce:	4620      	mov	r0, r4
}
 80043d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FOC_Clear(bMotor);
 80043d4:	f000 b908 	b.w	80045e8 <FOC_Clear>
 80043d8:	20000dec 	.word	0x20000dec
 80043dc:	20000000 	.word	0x20000000
 80043e0:	200009d8 	.word	0x200009d8
 80043e4:	200009bc 	.word	0x200009bc
 80043e8:	200009ac 	.word	0x200009ac
 80043ec:	20000990 	.word	0x20000990
 80043f0:	200000f0 	.word	0x200000f0
 80043f4:	20000038 	.word	0x20000038
 80043f8:	20000a94 	.word	0x20000a94

080043fc <TSK_SafetyTask>:
{
 80043fc:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 80043fe:	4b07      	ldr	r3, [pc, #28]	@ (800441c <TSK_SafetyTask+0x20>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d000      	beq.n	8004408 <TSK_SafetyTask+0xc>
}
 8004406:	bd08      	pop	{r3, pc}
    SCC_CheckOC_RL(&SCC);
 8004408:	4805      	ldr	r0, [pc, #20]	@ (8004420 <TSK_SafetyTask+0x24>)
 800440a:	f7fc fc8d 	bl	8000d28 <SCC_CheckOC_RL>
    TSK_SafetyTask_PWMOFF(M1);
 800440e:	2000      	movs	r0, #0
 8004410:	f7ff ff96 	bl	8004340 <TSK_SafetyTask_PWMOFF>
}
 8004414:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 8004418:	f002 bc18 	b.w	8006c4c <RCM_ExecUserConv>
 800441c:	20000dfc 	.word	0x20000dfc
 8004420:	200000f0 	.word	0x200000f0

08004424 <MC_RunMotorControlTasks>:
  if (0U == bMCBootCompleted)
 8004424:	4b1e      	ldr	r3, [pc, #120]	@ (80044a0 <MC_RunMotorControlTasks+0x7c>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	b1cb      	cbz	r3, 800445e <MC_RunMotorControlTasks+0x3a>
{
 800442a:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 800442c:	4c1d      	ldr	r4, [pc, #116]	@ (80044a4 <MC_RunMotorControlTasks+0x80>)
 800442e:	8823      	ldrh	r3, [r4, #0]
 8004430:	b1b3      	cbz	r3, 8004460 <MC_RunMotorControlTasks+0x3c>
      hMFTaskCounterM1--;
 8004432:	3b01      	subs	r3, #1
 8004434:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 8004436:	4a1c      	ldr	r2, [pc, #112]	@ (80044a8 <MC_RunMotorControlTasks+0x84>)
      hMFTaskCounterM1--;
 8004438:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 800443a:	8813      	ldrh	r3, [r2, #0]
 800443c:	b29b      	uxth	r3, r3
 800443e:	b11b      	cbz	r3, 8004448 <MC_RunMotorControlTasks+0x24>
      hBootCapDelayCounterM1--;
 8004440:	8813      	ldrh	r3, [r2, #0]
 8004442:	3b01      	subs	r3, #1
 8004444:	b29b      	uxth	r3, r3
 8004446:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8004448:	4a18      	ldr	r2, [pc, #96]	@ (80044ac <MC_RunMotorControlTasks+0x88>)
 800444a:	8813      	ldrh	r3, [r2, #0]
 800444c:	b29b      	uxth	r3, r3
 800444e:	b11b      	cbz	r3, 8004458 <MC_RunMotorControlTasks+0x34>
      hStopPermanencyCounterM1--;
 8004450:	8813      	ldrh	r3, [r2, #0]
 8004452:	3b01      	subs	r3, #1
 8004454:	b29b      	uxth	r3, r3
 8004456:	8013      	strh	r3, [r2, #0]
    TSK_SafetyTask();
 8004458:	f7ff ffd0 	bl	80043fc <TSK_SafetyTask>
}
 800445c:	bd70      	pop	{r4, r5, r6, pc}
 800445e:	4770      	bx	lr
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8004460:	4d13      	ldr	r5, [pc, #76]	@ (80044b0 <MC_RunMotorControlTasks+0x8c>)
      TSK_MediumFrequencyTaskM1();
 8004462:	f000 f9c9 	bl	80047f8 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8004466:	f7ff fcf1 	bl	8003e4c <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 800446a:	4629      	mov	r1, r5
 800446c:	f851 0b0c 	ldr.w	r0, [r1], #12
 8004470:	6883      	ldr	r3, [r0, #8]
 8004472:	4798      	blx	r3
 8004474:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8004476:	b130      	cbz	r0, 8004486 <MC_RunMotorControlTasks+0x62>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8004478:	4629      	mov	r1, r5
 800447a:	220a      	movs	r2, #10
 800447c:	f851 0b08 	ldr.w	r0, [r1], #8
 8004480:	6803      	ldr	r3, [r0, #0]
 8004482:	4798      	blx	r3
 8004484:	b908      	cbnz	r0, 800448a <MC_RunMotorControlTasks+0x66>
{
 8004486:	2301      	movs	r3, #1
 8004488:	e7d5      	b.n	8004436 <MC_RunMotorControlTasks+0x12>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 800448a:	4628      	mov	r0, r5
 800448c:	f000 fc50 	bl	8004d30 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8004490:	6828      	ldr	r0, [r5, #0]
 8004492:	89ea      	ldrh	r2, [r5, #14]
 8004494:	6846      	ldr	r6, [r0, #4]
 8004496:	68a9      	ldr	r1, [r5, #8]
 8004498:	230a      	movs	r3, #10
 800449a:	47b0      	blx	r6
 800449c:	e7f3      	b.n	8004486 <MC_RunMotorControlTasks+0x62>
 800449e:	bf00      	nop
 80044a0:	20000dfc 	.word	0x20000dfc
 80044a4:	20000e02 	.word	0x20000e02
 80044a8:	20000e00 	.word	0x20000e00
 80044ac:	20000dfe 	.word	0x20000dfe
 80044b0:	20000ac0 	.word	0x20000ac0

080044b4 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80044b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  SCC_Stop(&SCC);
 80044b6:	4808      	ldr	r0, [pc, #32]	@ (80044d8 <TSK_HardwareFaultTask+0x24>)
 80044b8:	f7fc fc25 	bl	8000d06 <SCC_Stop>
  OTT_Stop(&OTT);
 80044bc:	4807      	ldr	r0, [pc, #28]	@ (80044dc <TSK_HardwareFaultTask+0x28>)
 80044be:	f7fb ff3c 	bl	800033a <OTT_Stop>
   FOC_Clear(M1);
 80044c2:	2000      	movs	r0, #0
 80044c4:	f000 f890 	bl	80045e8 <FOC_Clear>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80044c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 80044cc:	4804      	ldr	r0, [pc, #16]	@ (80044e0 <TSK_HardwareFaultTask+0x2c>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	2180      	movs	r1, #128	@ 0x80
 80044d2:	f7ff bcdb 	b.w	8003e8c <MCI_FaultProcessing>
 80044d6:	bf00      	nop
 80044d8:	200000f0 	.word	0x200000f0
 80044dc:	20000038 	.word	0x20000038
 80044e0:	20000000 	.word	0x20000000

080044e4 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 80044e4:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 80044e6:	f7ff fc97 	bl	8003e18 <MC_GetSTMStateMotor1>
 80044ea:	b918      	cbnz	r0, 80044f4 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 80044ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 80044f0:	f7ff bc80 	b.w	8003df4 <MC_StartMotor1>
}
 80044f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 80044f8:	f7ff bc82 	b.w	8003e00 <MC_StopMotor1>

080044fc <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 80044fc:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80044fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004502:	4a32      	ldr	r2, [pc, #200]	@ (80045cc <mc_lock_pins+0xd0>)
 8004504:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8004506:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800450a:	61d9      	str	r1, [r3, #28]
 800450c:	b08c      	sub	sp, #48	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800450e:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8004510:	69da      	ldr	r2, [r3, #28]
 8004512:	920b      	str	r2, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8004514:	f44f 7100 	mov.w	r1, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8004518:	f44f 3281 	mov.w	r2, #66048	@ 0x10200
  (void) temp;
 800451c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800451e:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8004520:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8004522:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8004524:	69da      	ldr	r2, [r3, #28]
 8004526:	920a      	str	r2, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 8004528:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800452a:	4a29      	ldr	r2, [pc, #164]	@ (80045d0 <mc_lock_pins+0xd4>)
  (void) temp;
 800452c:	980a      	ldr	r0, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800452e:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8004530:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8004532:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8004534:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8004536:	4a27      	ldr	r2, [pc, #156]	@ (80045d4 <mc_lock_pins+0xd8>)
  temp = READ_REG(GPIOx->LCKR);
 8004538:	9109      	str	r1, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 800453a:	2401      	movs	r4, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800453c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
  (void) temp;
 8004540:	9809      	ldr	r0, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8004542:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8004544:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8004546:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8004548:	69d0      	ldr	r0, [r2, #28]
 800454a:	9008      	str	r0, [sp, #32]
  (void) temp;
 800454c:	9d08      	ldr	r5, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800454e:	f44f 3082 	mov.w	r0, #66560	@ 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8004552:	f44f 6580 	mov.w	r5, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8004556:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8004558:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800455a:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800455c:	69d8      	ldr	r0, [r3, #28]
 800455e:	9007      	str	r0, [sp, #28]
  (void) temp;
 8004560:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8004562:	481d      	ldr	r0, [pc, #116]	@ (80045d8 <mc_lock_pins+0xdc>)
 8004564:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8004566:	2502      	movs	r5, #2
 8004568:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800456a:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800456c:	69d2      	ldr	r2, [r2, #28]
 800456e:	9206      	str	r2, [sp, #24]
  (void) temp;
 8004570:	9a06      	ldr	r2, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8004572:	4a1a      	ldr	r2, [pc, #104]	@ (80045dc <mc_lock_pins+0xe0>)
 8004574:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8004576:	2680      	movs	r6, #128	@ 0x80
 8004578:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800457a:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800457c:	69da      	ldr	r2, [r3, #28]
 800457e:	9205      	str	r2, [sp, #20]
  (void) temp;
 8004580:	9a05      	ldr	r2, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8004582:	4a17      	ldr	r2, [pc, #92]	@ (80045e0 <mc_lock_pins+0xe4>)
 8004584:	4e17      	ldr	r6, [pc, #92]	@ (80045e4 <mc_lock_pins+0xe8>)
 8004586:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8004588:	2704      	movs	r7, #4
 800458a:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800458c:	61d6      	str	r6, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800458e:	69d6      	ldr	r6, [r2, #28]
 8004590:	9604      	str	r6, [sp, #16]
  (void) temp;
 8004592:	9e04      	ldr	r6, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8004594:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8004596:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8004598:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800459a:	69d6      	ldr	r6, [r2, #28]
 800459c:	9603      	str	r6, [sp, #12]
  (void) temp;
 800459e:	9e03      	ldr	r6, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80045a0:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80045a2:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80045a4:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80045a6:	69d2      	ldr	r2, [r2, #28]
 80045a8:	9202      	str	r2, [sp, #8]
  (void) temp;
 80045aa:	9a02      	ldr	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80045ac:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80045ae:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80045b0:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80045b2:	69da      	ldr	r2, [r3, #28]
 80045b4:	9201      	str	r2, [sp, #4]
  (void) temp;
 80045b6:	9a01      	ldr	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80045b8:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80045ba:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80045bc:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	9300      	str	r3, [sp, #0]
  (void) temp;
 80045c2:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
}
 80045c4:	b00c      	add	sp, #48	@ 0x30
 80045c6:	bcf0      	pop	{r4, r5, r6, r7}
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	00010100 	.word	0x00010100
 80045d0:	00010040 	.word	0x00010040
 80045d4:	48000400 	.word	0x48000400
 80045d8:	00010002 	.word	0x00010002
 80045dc:	00010080 	.word	0x00010080
 80045e0:	48000800 	.word	0x48000800
 80045e4:	00010004 	.word	0x00010004

080045e8 <FOC_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	2326      	movs	r3, #38	@ 0x26
 80045ec:	4916      	ldr	r1, [pc, #88]	@ (8004648 <FOC_Clear+0x60>)
 80045ee:	fb00 f303 	mul.w	r3, r0, r3

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 80045f2:	2400      	movs	r4, #0
 80045f4:	50cc      	str	r4, [r1, r3]
{
 80045f6:	4605      	mov	r5, r0
 80045f8:	f103 0208 	add.w	r2, r3, #8
 80045fc:	1858      	adds	r0, r3, r1
 80045fe:	3310      	adds	r3, #16
 8004600:	440a      	add	r2, r1
 8004602:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8004604:	4911      	ldr	r1, [pc, #68]	@ (800464c <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8004606:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8004608:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 800460c:	6054      	str	r4, [r2, #4]
 800460e:	6094      	str	r4, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8004610:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 8004612:	f8c3 4006 	str.w	r4, [r3, #6]
 8004616:	f8c3 400a 	str.w	r4, [r3, #10]
 800461a:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 800461e:	f006 f80d 	bl	800a63c <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8004622:	4b0b      	ldr	r3, [pc, #44]	@ (8004650 <FOC_Clear+0x68>)
 8004624:	4621      	mov	r1, r4
 8004626:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800462a:	f006 f807 	bl	800a63c <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800462e:	4b09      	ldr	r3, [pc, #36]	@ (8004654 <FOC_Clear+0x6c>)
 8004630:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004634:	f007 f9fa 	bl	800ba2c <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8004638:	4b07      	ldr	r3, [pc, #28]	@ (8004658 <FOC_Clear+0x70>)
 800463a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800463e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8004642:	f000 be09 	b.w	8005258 <PWMC_SwitchOffPWM>
 8004646:	bf00      	nop
 8004648:	20000dc4 	.word	0x20000dc4
 800464c:	20000030 	.word	0x20000030
 8004650:	2000002c 	.word	0x2000002c
 8004654:	20000034 	.word	0x20000034
 8004658:	20000dec 	.word	0x20000dec

0800465c <FOC_Init>:
{
 800465c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8004660:	4d3d      	ldr	r5, [pc, #244]	@ (8004758 <FOC_Init+0xfc>)
    PID_HandleInit(&PIDSpeedHandle_M1);
 8004662:	f8df a134 	ldr.w	sl, [pc, #308]	@ 8004798 <FOC_Init+0x13c>
    STO_PLL_Init (&STO_PLL_M1);
 8004666:	f8df 9134 	ldr.w	r9, [pc, #308]	@ 800479c <FOC_Init+0x140>
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800466a:	483c      	ldr	r0, [pc, #240]	@ (800475c <FOC_Init+0x100>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 800466c:	4e3c      	ldr	r6, [pc, #240]	@ (8004760 <FOC_Init+0x104>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800466e:	6028      	str	r0, [r5, #0]
{
 8004670:	b085      	sub	sp, #20
    R3_1_Init(&PWM_Handle_M1);
 8004672:	f006 fb4f 	bl	800ad14 <R3_1_Init>
    startTimers();
 8004676:	f000 fc3b 	bl	8004ef0 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 800467a:	4650      	mov	r0, sl
 800467c:	f005 ffca 	bl	800a614 <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 8004680:	4648      	mov	r0, r9
 8004682:	f007 fc5f 	bl	800bf44 <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8004686:	6830      	ldr	r0, [r6, #0]
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8004688:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 80047a0 <FOC_Init+0x144>
 800468c:	4f35      	ldr	r7, [pc, #212]	@ (8004764 <FOC_Init+0x108>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 800468e:	4c36      	ldr	r4, [pc, #216]	@ (8004768 <FOC_Init+0x10c>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8004690:	f8df b110 	ldr.w	fp, [pc, #272]	@ 80047a4 <FOC_Init+0x148>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8004694:	464a      	mov	r2, r9
 8004696:	4651      	mov	r1, sl
 8004698:	f007 f9b0 	bl	800b9fc <STC_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 800469c:	682b      	ldr	r3, [r5, #0]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	6831      	ldr	r1, [r6, #0]
 80046a2:	4b32      	ldr	r3, [pc, #200]	@ (800476c <FOC_Init+0x110>)
 80046a4:	4642      	mov	r2, r8
 80046a6:	4638      	mov	r0, r7
 80046a8:	f007 f880 	bl	800b7ac <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 80046ac:	4830      	ldr	r0, [pc, #192]	@ (8004770 <FOC_Init+0x114>)
 80046ae:	f005 ffb1 	bl	800a614 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 80046b2:	4830      	ldr	r0, [pc, #192]	@ (8004774 <FOC_Init+0x118>)
 80046b4:	f005 ffae 	bl	800a614 <PID_HandleInit>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80046b8:	4b2f      	ldr	r3, [pc, #188]	@ (8004778 <FOC_Init+0x11c>)
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 80046ba:	4830      	ldr	r0, [pc, #192]	@ (800477c <FOC_Init+0x120>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80046bc:	681b      	ldr	r3, [r3, #0]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 80046be:	609c      	str	r4, [r3, #8]
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80046c0:	f8c3 b00c 	str.w	fp, [r3, #12]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 80046c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004780 <FOC_Init+0x124>)
 80046c6:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 80046c8:	f006 ffda 	bl	800b680 <REMNG_Init>
    SCC.pPWMC = pwmcHandle[M1];
 80046cc:	482d      	ldr	r0, [pc, #180]	@ (8004784 <FOC_Init+0x128>)
 80046ce:	682b      	ldr	r3, [r5, #0]
    SCC.pOTT = &OTT;
 80046d0:	4d2d      	ldr	r5, [pc, #180]	@ (8004788 <FOC_Init+0x12c>)
    SCC.pVSS = &VirtualSpeedSensorM1;
 80046d2:	f8c0 8010 	str.w	r8, [r0, #16]
    SCC.pVBS = &BusVoltageSensor_M1;
 80046d6:	e9c0 3b00 	strd	r3, fp, [r0]
    SCC.pPIDIq = pPIDIq[M1];
 80046da:	4b2c      	ldr	r3, [pc, #176]	@ (800478c <FOC_Init+0x130>)
    SCC.pMCI = &Mci[M1];
 80046dc:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 80047a8 <FOC_Init+0x14c>
    SCC.pPIDIq = pPIDIq[M1];
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6183      	str	r3, [r0, #24]
    SCC.pPIDId = pPIDId[M1];
 80046e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004790 <FOC_Init+0x134>)
    SCC.pSTC = &SpeednTorqCtrlM1;
 80046e6:	f8df b0c4 	ldr.w	fp, [pc, #196]	@ 80047ac <FOC_Init+0x150>
    SCC.pPIDId = pPIDId[M1];
 80046ea:	681b      	ldr	r3, [r3, #0]
    SCC.pRevupCtrl = &RevUpControlM1;
 80046ec:	6207      	str	r7, [r0, #32]
    SCC.pPIDId = pPIDId[M1];
 80046ee:	61c3      	str	r3, [r0, #28]
    SCC.pHT = MC_NULL;
 80046f0:	2700      	movs	r7, #0
    SCC.pCLM = &CircleLimitationM1;
 80046f2:	4b28      	ldr	r3, [pc, #160]	@ (8004794 <FOC_Init+0x138>)
 80046f4:	6143      	str	r3, [r0, #20]
    SCC.pFOCVars = &FOCVars[M1];
 80046f6:	6084      	str	r4, [r0, #8]
    SCC.pSTO = &STO_PLL_M1;
 80046f8:	f8c0 9024 	str.w	r9, [r0, #36]	@ 0x24
    SCC.pOTT = &OTT;
 80046fc:	62c5      	str	r5, [r0, #44]	@ 0x2c
    SCC.pHT = MC_NULL;
 80046fe:	6307      	str	r7, [r0, #48]	@ 0x30
    SCC.pMCI = &Mci[M1];
 8004700:	f8c0 800c 	str.w	r8, [r0, #12]
    SCC.pSTC = &SpeednTorqCtrlM1;
 8004704:	f8c0 b028 	str.w	fp, [r0, #40]	@ 0x28
    SCC_Init(&SCC);
 8004708:	f7fc f9d4 	bl	8000ab4 <SCC_Init>
    OTT_Init(&OTT);
 800470c:	4628      	mov	r0, r5
    OTT.pSTC = &SpeednTorqCtrlM1;
 800470e:	e9c5 ab02 	strd	sl, fp, [r5, #8]
    OTT.pSpeedSensor = &STO_PLL_M1._Super;
 8004712:	f8c5 9000 	str.w	r9, [r5]
    OTT.pFOCVars = &FOCVars[M1];
 8004716:	606c      	str	r4, [r5, #4]
    OTT_Init(&OTT);
 8004718:	f7fb fd7e 	bl	8000218 <OTT_Init>
    FOC_Clear(M1);
 800471c:	4638      	mov	r0, r7
 800471e:	f7ff ff63 	bl	80045e8 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8004722:	2301      	movs	r3, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8004724:	6830      	ldr	r0, [r6, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8004726:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800472a:	f007 fa11 	bl	800bb50 <STC_GetDefaultIqdref>
 800472e:	8220      	strh	r0, [r4, #16]
 8004730:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8004734:	8260      	strh	r0, [r4, #18]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8004736:	6830      	ldr	r0, [r6, #0]
 8004738:	f007 fa0a 	bl	800bb50 <STC_GetDefaultIqdref>
 800473c:	f3c0 430f 	ubfx	r3, r0, #16, #16
    MCI_ExecSpeedRamp(&Mci[M1],
 8004740:	6830      	ldr	r0, [r6, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8004742:	82a3      	strh	r3, [r4, #20]
    MCI_ExecSpeedRamp(&Mci[M1],
 8004744:	f007 fa00 	bl	800bb48 <STC_GetMecSpeedRefUnitDefault>
 8004748:	463a      	mov	r2, r7
 800474a:	4601      	mov	r1, r0
 800474c:	4640      	mov	r0, r8
}
 800474e:	b005      	add	sp, #20
 8004750:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MCI_ExecSpeedRamp(&Mci[M1],
 8004754:	f7ff bb7c 	b.w	8003e50 <MCI_ExecSpeedRamp>
 8004758:	20000dec 	.word	0x20000dec
 800475c:	200007ac 	.word	0x200007ac
 8004760:	20000034 	.word	0x20000034
 8004764:	20000850 	.word	0x20000850
 8004768:	20000dc4 	.word	0x20000dc4
 800476c:	20000670 	.word	0x20000670
 8004770:	20000928 	.word	0x20000928
 8004774:	200008fc 	.word	0x200008fc
 8004778:	20000028 	.word	0x20000028
 800477c:	20000658 	.word	0x20000658
 8004780:	20000dc0 	.word	0x20000dc0
 8004784:	200000f0 	.word	0x200000f0
 8004788:	20000038 	.word	0x20000038
 800478c:	20000030 	.word	0x20000030
 8004790:	2000002c 	.word	0x2000002c
 8004794:	20000654 	.word	0x20000654
 8004798:	20000954 	.word	0x20000954
 800479c:	20000684 	.word	0x20000684
 80047a0:	200009e8 	.word	0x200009e8
 80047a4:	20000990 	.word	0x20000990
 80047a8:	20000000 	.word	0x20000000
 80047ac:	200008c8 	.word	0x200008c8

080047b0 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop

080047b4 <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80047b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b6:	4606      	mov	r6, r0
  __ASM volatile ("cpsid i" : : : "memory");
 80047b8:	b672      	cpsid	i

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference latching */
  /* to avoid MF task writing them while HF task reading them */
  __disable_irq();
  IqdTmp = FOCVars[bMotor].Iqdref;
 80047ba:	4d0d      	ldr	r5, [pc, #52]	@ (80047f0 <FOC_CalcCurrRef+0x3c>)
 80047bc:	2426      	movs	r4, #38	@ 0x26
 80047be:	fb04 5400 	mla	r4, r4, r0, r5
 80047c2:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 80047c6:	f9b4 7012 	ldrsh.w	r7, [r4, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 80047ca:	b662      	cpsie	i
  __enable_irq();

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 80047cc:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80047d0:	b13b      	cbz	r3, 80047e2 <FOC_CalcCurrRef+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 80047d2:	b672      	cpsid	i
  }

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference restoring */
  __disable_irq();
  FOCVars[bMotor].Iqdref = IqdTmp;
 80047d4:	2326      	movs	r3, #38	@ 0x26
 80047d6:	fb03 5506 	mla	r5, r3, r6, r5
 80047da:	8228      	strh	r0, [r5, #16]
 80047dc:	826f      	strh	r7, [r5, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 80047de:	b662      	cpsie	i
  /* Exit critical section */
  __enable_irq();
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80047e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80047e2:	4b04      	ldr	r3, [pc, #16]	@ (80047f4 <FOC_CalcCurrRef+0x40>)
 80047e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80047e8:	f007 f978 	bl	800badc <STC_CalcTorqueReference>
 80047ec:	83e0      	strh	r0, [r4, #30]
    IqdTmp.q = FOCVars[bMotor].hTeref;
 80047ee:	e7f0      	b.n	80047d2 <FOC_CalcCurrRef+0x1e>
 80047f0:	20000dc4 	.word	0x20000dc4
 80047f4:	20000034 	.word	0x20000034

080047f8 <TSK_MediumFrequencyTaskM1>:
{
 80047f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047fa:	b083      	sub	sp, #12
  int16_t wAux = 0;
 80047fc:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 80047fe:	4669      	mov	r1, sp
 8004800:	48b9      	ldr	r0, [pc, #740]	@ (8004ae8 <TSK_MediumFrequencyTaskM1+0x2f0>)
  int16_t wAux = 0;
 8004802:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8004806:	f007 faab 	bl	800bd60 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 800480a:	4bb8      	ldr	r3, [pc, #736]	@ (8004aec <TSK_MediumFrequencyTaskM1+0x2f4>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 800480c:	4cb8      	ldr	r4, [pc, #736]	@ (8004af0 <TSK_MediumFrequencyTaskM1+0x2f8>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 800480e:	4605      	mov	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	f005 ff87 	bl	800a724 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8004816:	4620      	mov	r0, r4
 8004818:	f7ff fb84 	bl	8003f24 <MCI_GetCurrentFaults>
 800481c:	b130      	cbz	r0, 800482c <TSK_MediumFrequencyTaskM1+0x34>
    Mci[M1].State = FAULT_NOW;
 800481e:	230a      	movs	r3, #10
 8004820:	77e3      	strb	r3, [r4, #31]
  SCC_MF(&SCC);
 8004822:	48b4      	ldr	r0, [pc, #720]	@ (8004af4 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8004824:	f7fd f992 	bl	8001b4c <SCC_MF>
}
 8004828:	b003      	add	sp, #12
 800482a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 800482c:	4620      	mov	r0, r4
 800482e:	f7ff fb77 	bl	8003f20 <MCI_GetOccurredFaults>
 8004832:	bb78      	cbnz	r0, 8004894 <TSK_MediumFrequencyTaskM1+0x9c>
      switch (Mci[M1].State)
 8004834:	7fe3      	ldrb	r3, [r4, #31]
 8004836:	2b14      	cmp	r3, #20
 8004838:	d8f3      	bhi.n	8004822 <TSK_MediumFrequencyTaskM1+0x2a>
 800483a:	a201      	add	r2, pc, #4	@ (adr r2, 8004840 <TSK_MediumFrequencyTaskM1+0x48>)
 800483c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004840:	08004a0d 	.word	0x08004a0d
 8004844:	08004823 	.word	0x08004823
 8004848:	08004823 	.word	0x08004823
 800484c:	08004823 	.word	0x08004823
 8004850:	0800498f 	.word	0x0800498f
 8004854:	08004823 	.word	0x08004823
 8004858:	0800496d 	.word	0x0800496d
 800485c:	08004823 	.word	0x08004823
 8004860:	0800494d 	.word	0x0800494d
 8004864:	08004823 	.word	0x08004823
 8004868:	08004895 	.word	0x08004895
 800486c:	08004ab3 	.word	0x08004ab3
 8004870:	08004823 	.word	0x08004823
 8004874:	08004823 	.word	0x08004823
 8004878:	08004823 	.word	0x08004823
 800487c:	08004823 	.word	0x08004823
 8004880:	08004a43 	.word	0x08004a43
 8004884:	08004a91 	.word	0x08004a91
 8004888:	08004823 	.word	0x08004823
 800488c:	080048e9 	.word	0x080048e9
 8004890:	080048a3 	.word	0x080048a3
      Mci[M1].State = FAULT_OVER;
 8004894:	230b      	movs	r3, #11
  SCC_MF(&SCC);
 8004896:	4897      	ldr	r0, [pc, #604]	@ (8004af4 <TSK_MediumFrequencyTaskM1+0x2fc>)
      Mci[M1].State = FAULT_OVER;
 8004898:	77e3      	strb	r3, [r4, #31]
  SCC_MF(&SCC);
 800489a:	f7fd f957 	bl	8001b4c <SCC_MF>
}
 800489e:	b003      	add	sp, #12
 80048a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 80048a2:	7fa3      	ldrb	r3, [r4, #30]
 80048a4:	2b05      	cmp	r3, #5
 80048a6:	f000 810b 	beq.w	8004ac0 <TSK_MediumFrequencyTaskM1+0x2c8>
            if (0 == SCC_DetectBemf(&SCC))
 80048aa:	4892      	ldr	r0, [pc, #584]	@ (8004af4 <TSK_MediumFrequencyTaskM1+0x2fc>)
 80048ac:	f7fd fe2a 	bl	8002504 <SCC_DetectBemf>
 80048b0:	4605      	mov	r5, r0
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d1b5      	bne.n	8004822 <TSK_MediumFrequencyTaskM1+0x2a>
              STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);
 80048b6:	4a90      	ldr	r2, [pc, #576]	@ (8004af8 <TSK_MediumFrequencyTaskM1+0x300>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 80048b8:	4b90      	ldr	r3, [pc, #576]	@ (8004afc <TSK_MediumFrequencyTaskM1+0x304>)
              STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);
 80048ba:	4991      	ldr	r1, [pc, #580]	@ (8004b00 <TSK_MediumFrequencyTaskM1+0x308>)
 80048bc:	6810      	ldr	r0, [r2, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
              STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);
 80048c4:	f007 f8b0 	bl	800ba28 <STC_SetSpeedSensor>
               STO_PLL_Clear(&STO_PLL_M1);
 80048c8:	4887      	ldr	r0, [pc, #540]	@ (8004ae8 <TSK_MediumFrequencyTaskM1+0x2f0>)
 80048ca:	f007 fb15 	bl	800bef8 <STO_PLL_Clear>
              FOC_Clear(M1);
 80048ce:	4628      	mov	r0, r5
 80048d0:	f7ff fe8a 	bl	80045e8 <FOC_Clear>
              SCC_Start(&SCC);
 80048d4:	4887      	ldr	r0, [pc, #540]	@ (8004af4 <TSK_MediumFrequencyTaskM1+0x2fc>)
 80048d6:	f7fc f9ed 	bl	8000cb4 <SCC_Start>
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80048da:	4b8a      	ldr	r3, [pc, #552]	@ (8004b04 <TSK_MediumFrequencyTaskM1+0x30c>)
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	f000 fcbd 	bl	800525c <PWMC_SwitchOnPWM>
              Mci[M1].State = START;
 80048e2:	2304      	movs	r3, #4
 80048e4:	77e3      	strb	r3, [r4, #31]
 80048e6:	e79c      	b.n	8004822 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80048e8:	7fa3      	ldrb	r3, [r4, #30]
 80048ea:	2b05      	cmp	r3, #5
 80048ec:	f000 80e8 	beq.w	8004ac0 <TSK_MediumFrequencyTaskM1+0x2c8>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 80048f0:	4883      	ldr	r0, [pc, #524]	@ (8004b00 <TSK_MediumFrequencyTaskM1+0x308>)
 80048f2:	a901      	add	r1, sp, #4
 80048f4:	f007 fc6e 	bl	800c1d4 <VSS_CalcAvrgMecSpeedUnit>
 80048f8:	4605      	mov	r5, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 80048fa:	4881      	ldr	r0, [pc, #516]	@ (8004b00 <TSK_MediumFrequencyTaskM1+0x308>)
 80048fc:	f007 fd06 	bl	800c30c <VSS_TransitionEnded>
              LoopClosed = LoopClosed || tempBool;
 8004900:	b90d      	cbnz	r5, 8004906 <TSK_MediumFrequencyTaskM1+0x10e>
 8004902:	2800      	cmp	r0, #0
 8004904:	d08d      	beq.n	8004822 <TSK_MediumFrequencyTaskM1+0x2a>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8004906:	4b7d      	ldr	r3, [pc, #500]	@ (8004afc <TSK_MediumFrequencyTaskM1+0x304>)
 8004908:	487f      	ldr	r0, [pc, #508]	@ (8004b08 <TSK_MediumFrequencyTaskM1+0x310>)
 800490a:	f9b3 5010 	ldrsh.w	r5, [r3, #16]
 800490e:	f005 fe9f 	bl	800a650 <PID_GetKIDivisor>
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8004912:	b201      	sxth	r1, r0
 8004914:	fb05 f101 	mul.w	r1, r5, r1
 8004918:	487b      	ldr	r0, [pc, #492]	@ (8004b08 <TSK_MediumFrequencyTaskM1+0x310>)
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 800491a:	4d77      	ldr	r5, [pc, #476]	@ (8004af8 <TSK_MediumFrequencyTaskM1+0x300>)
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 800491c:	f005 fe8e 	bl	800a63c <PID_SetIntegralTerm>
                OTT_SR(&OTT);
 8004920:	487a      	ldr	r0, [pc, #488]	@ (8004b0c <TSK_MediumFrequencyTaskM1+0x314>)
 8004922:	f7fc f805 	bl	8000930 <OTT_SR>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 8004926:	4970      	ldr	r1, [pc, #448]	@ (8004ae8 <TSK_MediumFrequencyTaskM1+0x2f0>)
 8004928:	6828      	ldr	r0, [r5, #0]
 800492a:	f007 f87d 	bl	800ba28 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 800492e:	2000      	movs	r0, #0
 8004930:	f7ff ff3e 	bl	80047b0 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 8004934:	2000      	movs	r0, #0
 8004936:	f7ff ff3d 	bl	80047b4 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 800493a:	6828      	ldr	r0, [r5, #0]
 800493c:	f007 f916 	bl	800bb6c <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8004940:	486b      	ldr	r0, [pc, #428]	@ (8004af0 <TSK_MediumFrequencyTaskM1+0x2f8>)
 8004942:	f7ff faaf 	bl	8003ea4 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8004946:	2306      	movs	r3, #6
 8004948:	77e3      	strb	r3, [r4, #31]
 800494a:	e76a      	b.n	8004822 <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 800494c:	f7ff fcd8 	bl	8004300 <TSK_StopPermanencyTimeHasElapsedM1>
 8004950:	2800      	cmp	r0, #0
 8004952:	f43f af66 	beq.w	8004822 <TSK_MediumFrequencyTaskM1+0x2a>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);    /* Sensor-less */
 8004956:	4b68      	ldr	r3, [pc, #416]	@ (8004af8 <TSK_MediumFrequencyTaskM1+0x300>)
 8004958:	4969      	ldr	r1, [pc, #420]	@ (8004b00 <TSK_MediumFrequencyTaskM1+0x308>)
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	f007 f864 	bl	800ba28 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8004960:	4867      	ldr	r0, [pc, #412]	@ (8004b00 <TSK_MediumFrequencyTaskM1+0x308>)
 8004962:	f007 fbd3 	bl	800c10c <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8004966:	2300      	movs	r3, #0
 8004968:	83e3      	strh	r3, [r4, #30]
 800496a:	e75a      	b.n	8004822 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800496c:	7fa3      	ldrb	r3, [r4, #30]
 800496e:	2b05      	cmp	r3, #5
 8004970:	f000 80a6 	beq.w	8004ac0 <TSK_MediumFrequencyTaskM1+0x2c8>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8004974:	485e      	ldr	r0, [pc, #376]	@ (8004af0 <TSK_MediumFrequencyTaskM1+0x2f8>)
 8004976:	f7ff fa95 	bl	8003ea4 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 800497a:	2000      	movs	r0, #0
 800497c:	f7ff ff1a 	bl	80047b4 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 8004980:	2d00      	cmp	r5, #0
 8004982:	f000 80d7 	beq.w	8004b34 <TSK_MediumFrequencyTaskM1+0x33c>
            OTT_MF(&OTT);
 8004986:	4861      	ldr	r0, [pc, #388]	@ (8004b0c <TSK_MediumFrequencyTaskM1+0x314>)
 8004988:	f7fb fcdc 	bl	8000344 <OTT_MF>
 800498c:	e749      	b.n	8004822 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800498e:	7fa3      	ldrb	r3, [r4, #30]
 8004990:	2b05      	cmp	r3, #5
 8004992:	f000 8095 	beq.w	8004ac0 <TSK_MediumFrequencyTaskM1+0x2c8>
            if(! RUC_Exec(&RevUpControlM1))
 8004996:	485e      	ldr	r0, [pc, #376]	@ (8004b10 <TSK_MediumFrequencyTaskM1+0x318>)
 8004998:	f006 ff92 	bl	800b8c0 <RUC_Exec>
 800499c:	2800      	cmp	r0, #0
 800499e:	f040 80cf 	bne.w	8004b40 <TSK_MediumFrequencyTaskM1+0x348>
              ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 80049a2:	4e51      	ldr	r6, [pc, #324]	@ (8004ae8 <TSK_MediumFrequencyTaskM1+0x2f0>)
            (void)VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 80049a4:	4856      	ldr	r0, [pc, #344]	@ (8004b00 <TSK_MediumFrequencyTaskM1+0x308>)
 80049a6:	f10d 0102 	add.w	r1, sp, #2
 80049aa:	f007 fc13 	bl	800c1d4 <VSS_CalcAvrgMecSpeedUnit>
              ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 80049ae:	f10d 0102 	add.w	r1, sp, #2
 80049b2:	4630      	mov	r0, r6
 80049b4:	f007 fb00 	bl	800bfb8 <STO_PLL_IsObserverConverged>
 80049b8:	4605      	mov	r5, r0
              STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 80049ba:	484d      	ldr	r0, [pc, #308]	@ (8004af0 <TSK_MediumFrequencyTaskM1+0x2f8>)
 80049bc:	f7ff fb02 	bl	8003fc4 <MCI_GetImposedMotorDirection>
 80049c0:	b241      	sxtb	r1, r0
 80049c2:	4630      	mov	r0, r6
 80049c4:	f007 fb9e 	bl	800c104 <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 80049c8:	484d      	ldr	r0, [pc, #308]	@ (8004b00 <TSK_MediumFrequencyTaskM1+0x308>)
 80049ca:	4629      	mov	r1, r5
 80049cc:	f007 fc90 	bl	800c2f0 <VSS_SetStartTransition>
            if (ObserverConverged)
 80049d0:	2d00      	cmp	r5, #0
 80049d2:	f43f af26 	beq.w	8004822 <TSK_MediumFrequencyTaskM1+0x2a>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 80049d6:	4f49      	ldr	r7, [pc, #292]	@ (8004afc <TSK_MediumFrequencyTaskM1+0x304>)
 80049d8:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 80049dc:	6878      	ldr	r0, [r7, #4]
              REMNG_Init(pREMNG[M1]);
 80049de:	4d4d      	ldr	r5, [pc, #308]	@ (8004b14 <TSK_MediumFrequencyTaskM1+0x31c>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 80049e0:	f7ff fbcc 	bl	800417c <MCM_Park>
 80049e4:	4603      	mov	r3, r0
              REMNG_Init(pREMNG[M1]);
 80049e6:	6828      	ldr	r0, [r5, #0]
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 80049e8:	9301      	str	r3, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 80049ea:	f006 fe49 	bl	800b680 <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 80049ee:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 80049f2:	6828      	ldr	r0, [r5, #0]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f006 fe93 	bl	800b720 <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 80049fa:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 80049fe:	6828      	ldr	r0, [r5, #0]
 8004a00:	2219      	movs	r2, #25
 8004a02:	f006 fe8d 	bl	800b720 <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 8004a06:	2313      	movs	r3, #19
 8004a08:	77e3      	strb	r3, [r4, #31]
 8004a0a:	e70a      	b.n	8004822 <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8004a0c:	7fa5      	ldrb	r5, [r4, #30]
 8004a0e:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
 8004a12:	2d01      	cmp	r5, #1
 8004a14:	f47f af05 	bne.w	8004822 <TSK_MediumFrequencyTaskM1+0x2a>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8004a18:	4835      	ldr	r0, [pc, #212]	@ (8004af0 <TSK_MediumFrequencyTaskM1+0x2f8>)
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8004a1a:	4e3a      	ldr	r6, [pc, #232]	@ (8004b04 <TSK_MediumFrequencyTaskM1+0x30c>)
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8004a1c:	f7ff fad2 	bl	8003fc4 <MCI_GetImposedMotorDirection>
 8004a20:	4601      	mov	r1, r0
 8004a22:	483b      	ldr	r0, [pc, #236]	@ (8004b10 <TSK_MediumFrequencyTaskM1+0x318>)
 8004a24:	f006 ff00 	bl	800b828 <RUC_Clear>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8004a28:	6830      	ldr	r0, [r6, #0]
 8004a2a:	f890 107f 	ldrb.w	r1, [r0, #127]	@ 0x7f
 8004a2e:	2900      	cmp	r1, #0
 8004a30:	d172      	bne.n	8004b18 <TSK_MediumFrequencyTaskM1+0x320>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8004a32:	f000 fc15 	bl	8005260 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 8004a36:	2311      	movs	r3, #17
            OTT_Clear(&OTT);
 8004a38:	4834      	ldr	r0, [pc, #208]	@ (8004b0c <TSK_MediumFrequencyTaskM1+0x314>)
              Mci[M1].State = OFFSET_CALIB;
 8004a3a:	77e3      	strb	r3, [r4, #31]
            OTT_Clear(&OTT);
 8004a3c:	f7fb fc66 	bl	800030c <OTT_Clear>
 8004a40:	e6ef      	b.n	8004822 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8004a42:	7fa3      	ldrb	r3, [r4, #30]
 8004a44:	2b05      	cmp	r3, #5
 8004a46:	d03b      	beq.n	8004ac0 <TSK_MediumFrequencyTaskM1+0x2c8>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8004a48:	f7ff fc4a 	bl	80042e0 <TSK_ChargeBootCapDelayHasElapsedM1>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	f43f aee8 	beq.w	8004822 <TSK_MediumFrequencyTaskM1+0x2a>
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8004a52:	4d2c      	ldr	r5, [pc, #176]	@ (8004b04 <TSK_MediumFrequencyTaskM1+0x30c>)
 8004a54:	6828      	ldr	r0, [r5, #0]
 8004a56:	f006 f80f 	bl	800aa78 <R3_1_SwitchOffPWM>
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8004a5a:	4a27      	ldr	r2, [pc, #156]	@ (8004af8 <TSK_MediumFrequencyTaskM1+0x300>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 8004a5c:	4b27      	ldr	r3, [pc, #156]	@ (8004afc <TSK_MediumFrequencyTaskM1+0x304>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8004a5e:	4928      	ldr	r1, [pc, #160]	@ (8004b00 <TSK_MediumFrequencyTaskM1+0x308>)
 8004a60:	6810      	ldr	r0, [r2, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8004a68:	f006 ffde 	bl	800ba28 <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 8004a6c:	481e      	ldr	r0, [pc, #120]	@ (8004ae8 <TSK_MediumFrequencyTaskM1+0x2f0>)
 8004a6e:	f007 fa43 	bl	800bef8 <STO_PLL_Clear>
              FOC_Clear( M1 );
 8004a72:	2000      	movs	r0, #0
 8004a74:	f7ff fdb8 	bl	80045e8 <FOC_Clear>
        SCC_Start(&SCC);
 8004a78:	481e      	ldr	r0, [pc, #120]	@ (8004af4 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8004a7a:	f7fc f91b 	bl	8000cb4 <SCC_Start>
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8004a7e:	6828      	ldr	r0, [r5, #0]
 8004a80:	f000 fbec 	bl	800525c <PWMC_SwitchOnPWM>
              Mci[M1].State = START;
 8004a84:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8004a86:	6828      	ldr	r0, [r5, #0]
              Mci[M1].State = START;
 8004a88:	77e3      	strb	r3, [r4, #31]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8004a8a:	f000 fbe7 	bl	800525c <PWMC_SwitchOnPWM>
 8004a8e:	e6c8      	b.n	8004822 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8004a90:	7fa3      	ldrb	r3, [r4, #30]
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8004a92:	4a1c      	ldr	r2, [pc, #112]	@ (8004b04 <TSK_MediumFrequencyTaskM1+0x30c>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 8004a94:	2b05      	cmp	r3, #5
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8004a96:	6810      	ldr	r0, [r2, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 8004a98:	d014      	beq.n	8004ac4 <TSK_MediumFrequencyTaskM1+0x2cc>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	f000 fbe0 	bl	8005260 <PWMC_CurrentReadingCalibr>
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	f43f aebe 	beq.w	8004822 <TSK_MediumFrequencyTaskM1+0x2a>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8004aa6:	7fa3      	ldrb	r3, [r4, #30]
 8004aa8:	2b03      	cmp	r3, #3
 8004aaa:	d053      	beq.n	8004b54 <TSK_MediumFrequencyTaskM1+0x35c>
                Mci[M1].State = WAIT_STOP_MOTOR;
 8004aac:	2314      	movs	r3, #20
 8004aae:	77e3      	strb	r3, [r4, #31]
 8004ab0:	e6b7      	b.n	8004822 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8004ab2:	7fa3      	ldrb	r3, [r4, #30]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	f47f aeb4 	bne.w	8004822 <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8004aba:	2300      	movs	r3, #0
 8004abc:	83e3      	strh	r3, [r4, #30]
 8004abe:	e6b0      	b.n	8004822 <TSK_MediumFrequencyTaskM1+0x2a>
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8004ac0:	4b10      	ldr	r3, [pc, #64]	@ (8004b04 <TSK_MediumFrequencyTaskM1+0x30c>)
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	f005 ffd8 	bl	800aa78 <R3_1_SwitchOffPWM>
  SCC_Stop(&SCC);
 8004ac8:	480a      	ldr	r0, [pc, #40]	@ (8004af4 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8004aca:	f7fc f91c 	bl	8000d06 <SCC_Stop>
  OTT_Stop(&OTT);
 8004ace:	480f      	ldr	r0, [pc, #60]	@ (8004b0c <TSK_MediumFrequencyTaskM1+0x314>)
 8004ad0:	f7fb fc33 	bl	800033a <OTT_Stop>
  FOC_Clear(motor);
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	f7ff fd87 	bl	80045e8 <FOC_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8004ada:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8004ade:	f7ff fc09 	bl	80042f4 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8004ae2:	2308      	movs	r3, #8
 8004ae4:	77e3      	strb	r3, [r4, #31]
}
 8004ae6:	e69c      	b.n	8004822 <TSK_MediumFrequencyTaskM1+0x2a>
 8004ae8:	20000684 	.word	0x20000684
 8004aec:	20000028 	.word	0x20000028
 8004af0:	20000000 	.word	0x20000000
 8004af4:	200000f0 	.word	0x200000f0
 8004af8:	20000034 	.word	0x20000034
 8004afc:	20000dc4 	.word	0x20000dc4
 8004b00:	200009e8 	.word	0x200009e8
 8004b04:	20000dec 	.word	0x20000dec
 8004b08:	20000954 	.word	0x20000954
 8004b0c:	20000038 	.word	0x20000038
 8004b10:	20000850 	.word	0x20000850
 8004b14:	20000dc0 	.word	0x20000dc0
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8004b18:	4629      	mov	r1, r5
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8004b1a:	f8a0 5060 	strh.w	r5, [r0, #96]	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8004b1e:	f000 fb9f 	bl	8005260 <PWMC_CurrentReadingCalibr>
              R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8004b22:	6830      	ldr	r0, [r6, #0]
 8004b24:	2100      	movs	r1, #0
 8004b26:	f006 f857 	bl	800abd8 <R3_1_TurnOnLowSides>
              TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8004b2a:	2014      	movs	r0, #20
 8004b2c:	f7ff fbd2 	bl	80042d4 <TSK_SetChargeBootCapDelayM1>
 8004b30:	2310      	movs	r3, #16
 8004b32:	e781      	b.n	8004a38 <TSK_MediumFrequencyTaskM1+0x240>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8004b34:	480a      	ldr	r0, [pc, #40]	@ (8004b60 <TSK_MediumFrequencyTaskM1+0x368>)
 8004b36:	462a      	mov	r2, r5
 8004b38:	2120      	movs	r1, #32
 8004b3a:	f7ff f9a7 	bl	8003e8c <MCI_FaultProcessing>
 8004b3e:	e722      	b.n	8004986 <TSK_MediumFrequencyTaskM1+0x18e>
              IqdRef.q = STC_CalcTorqueReference(pSTC[M1]);
 8004b40:	4b08      	ldr	r3, [pc, #32]	@ (8004b64 <TSK_MediumFrequencyTaskM1+0x36c>)
 8004b42:	6818      	ldr	r0, [r3, #0]
 8004b44:	f006 ffca 	bl	800badc <STC_CalcTorqueReference>
              IqdRef.d = FOCVars[M1].UserIdref;
 8004b48:	4b07      	ldr	r3, [pc, #28]	@ (8004b68 <TSK_MediumFrequencyTaskM1+0x370>)
 8004b4a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
              FOCVars[M1].Iqdref = IqdRef;
 8004b4e:	8218      	strh	r0, [r3, #16]
 8004b50:	825a      	strh	r2, [r3, #18]
 8004b52:	e726      	b.n	80049a2 <TSK_MediumFrequencyTaskM1+0x1aa>
                FOC_Clear(M1);
 8004b54:	2000      	movs	r0, #0
 8004b56:	f7ff fd47 	bl	80045e8 <FOC_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	83e3      	strh	r3, [r4, #30]
 8004b5e:	e660      	b.n	8004822 <TSK_MediumFrequencyTaskM1+0x2a>
 8004b60:	20000000 	.word	0x20000000
 8004b64:	20000034 	.word	0x20000034
 8004b68:	20000dc4 	.word	0x20000dc4

08004b6c <FOC_HighFrequencyTask>:
  * @brief  Motor control profiler HF task
  * @param  None
  * @retval uint8_t It return always 0.
  */
__weak uint8_t FOC_HighFrequencyTask(uint8_t bMotorNbr)
{
 8004b6c:	b510      	push	{r4, lr}
  ab_t Iab;

  if (SWITCH_OVER == Mci[M1].State)
 8004b6e:	4b11      	ldr	r3, [pc, #68]	@ (8004bb4 <FOC_HighFrequencyTask+0x48>)
 8004b70:	7fdb      	ldrb	r3, [r3, #31]
 8004b72:	2b13      	cmp	r3, #19
{
 8004b74:	b082      	sub	sp, #8
  if (SWITCH_OVER == Mci[M1].State)
 8004b76:	d011      	beq.n	8004b9c <FOC_HighFrequencyTask+0x30>
 8004b78:	4c0f      	ldr	r4, [pc, #60]	@ (8004bb8 <FOC_HighFrequencyTask+0x4c>)
  }
  else
  {
    /* Nothing to do */
  }
  RCM_ReadOngoingConv();
 8004b7a:	f002 f8df 	bl	8006d3c <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8004b7e:	f002 f899 	bl	8006cb4 <RCM_ExecNextConv>
  /* The generic function needs to be called here as the undelying
   * implementation changes in time depending on the Profiler's state
   * machine. Calling the generic function ensures that the correct
   * implementation is invoked */
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8004b82:	4b0e      	ldr	r3, [pc, #56]	@ (8004bbc <FOC_HighFrequencyTask+0x50>)
 8004b84:	6818      	ldr	r0, [r3, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8004b86:	a901      	add	r1, sp, #4
 8004b88:	6803      	ldr	r3, [r0, #0]
 8004b8a:	4798      	blx	r3
  FOCVars[M1].Iab = Iab;
 8004b8c:	9801      	ldr	r0, [sp, #4]
 8004b8e:	6020      	str	r0, [r4, #0]
  SCC_SetPhaseVoltage(&SCC);
 8004b90:	480b      	ldr	r0, [pc, #44]	@ (8004bc0 <FOC_HighFrequencyTask+0x54>)
 8004b92:	f7fc f9a5 	bl	8000ee0 <SCC_SetPhaseVoltage>

  return (0); /* Single motor only */
}
 8004b96:	2000      	movs	r0, #0
 8004b98:	b002      	add	sp, #8
 8004b9a:	bd10      	pop	{r4, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8004b9c:	4c09      	ldr	r4, [pc, #36]	@ (8004bc4 <FOC_HighFrequencyTask+0x58>)
 8004b9e:	6820      	ldr	r0, [r4, #0]
 8004ba0:	f006 fd98 	bl	800b6d4 <REMNG_RampCompleted>
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	d1e7      	bne.n	8004b78 <FOC_HighFrequencyTask+0xc>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 8004ba8:	6820      	ldr	r0, [r4, #0]
 8004baa:	4c03      	ldr	r4, [pc, #12]	@ (8004bb8 <FOC_HighFrequencyTask+0x4c>)
 8004bac:	f006 fd70 	bl	800b690 <REMNG_Calc>
 8004bb0:	8220      	strh	r0, [r4, #16]
 8004bb2:	e7e2      	b.n	8004b7a <FOC_HighFrequencyTask+0xe>
 8004bb4:	20000000 	.word	0x20000000
 8004bb8:	20000dc4 	.word	0x20000dc4
 8004bbc:	20000dec 	.word	0x20000dec
 8004bc0:	200000f0 	.word	0x200000f0
 8004bc4:	20000dc0 	.word	0x20000dc0

08004bc8 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8004bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 8004bcc:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8004bd0:	4b31      	ldr	r3, [pc, #196]	@ (8004c98 <RI_SetRegCommandParser+0xd0>)
{
 8004bd2:	b089      	sub	sp, #36	@ 0x24
    uint16_t size = 0U;
 8004bd4:	f04f 0900 	mov.w	r9, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8004bd8:	9306      	str	r3, [sp, #24]
    uint8_t number_of_item =0;
    pHandle->txLength = 0;

    while (rxLength > 0)
 8004bda:	454c      	cmp	r4, r9
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8004bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8004c9c <RI_SetRegCommandParser+0xd4>)
    uint16_t size = 0U;
 8004bde:	f8ad 9016 	strh.w	r9, [sp, #22]
    uint8_t * txData = pHandle->txBuffer;
 8004be2:	e9d0 c601 	ldrd	ip, r6, [r0, #4]
{
 8004be6:	4607      	mov	r7, r0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8004be8:	9307      	str	r3, [sp, #28]
    pHandle->txLength = 0;
 8004bea:	f8a0 900e 	strh.w	r9, [r0, #14]
    while (rxLength > 0)
 8004bee:	dd47      	ble.n	8004c80 <RI_SetRegCommandParser+0xb8>
 8004bf0:	eb06 0801 	add.w	r8, r6, r1
  uint8_t retVal = MCP_CMD_OK;
 8004bf4:	f8cd 900c 	str.w	r9, [sp, #12]
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 8004bf8:	f1c6 0a01 	rsb	sl, r6, #1
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8004bfc:	f10c 0502 	add.w	r5, ip, #2
      regID = *dataElementID & REG_MASK;
 8004c00:	f8bc c000 	ldrh.w	ip, [ip]
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8004c04:	fa5f f18c 	uxtb.w	r1, ip
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8004c08:	3c02      	subs	r4, #2
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8004c0a:	f001 0b07 	and.w	fp, r1, #7
 8004c0e:	f10d 0920 	add.w	r9, sp, #32
      if (motorID > NBR_OF_MOTORS)
 8004c12:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8004c16:	fa0f fe84 	sxth.w	lr, r4
 8004c1a:	f10d 0316 	add.w	r3, sp, #22
 8004c1e:	462a      	mov	r2, r5
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8004c20:	b2a4      	uxth	r4, r4
      regID = *dataElementID & REG_MASK;
 8004c22:	f02c 0007 	bic.w	r0, ip, #7
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8004c26:	eb09 0b8b 	add.w	fp, r9, fp, lsl #2
 8004c2a:	f001 0138 	and.w	r1, r1, #56	@ 0x38
      if (motorID > NBR_OF_MOTORS)
 8004c2e:	d11b      	bne.n	8004c68 <RI_SetRegCommandParser+0xa0>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8004c30:	f8cd e000 	str.w	lr, [sp]
 8004c34:	f85b bc08 	ldr.w	fp, [fp, #-8]
 8004c38:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 8004c3a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
        if ((1U == number_of_item) && (0 == rxLength))
 8004c3e:	eb06 030a 	add.w	r3, r6, sl
 8004c42:	b2db      	uxtb	r3, r3
        rxLength = (int16_t) (rxLength - size);
 8004c44:	1aa4      	subs	r4, r4, r2
        if ((1U == number_of_item) && (0 == rxLength))
 8004c46:	2b01      	cmp	r3, #1
        rxLength = (int16_t) (rxLength - size);
 8004c48:	b224      	sxth	r4, r4
        rxData = rxData+size;
 8004c4a:	eb05 0c02 	add.w	ip, r5, r2
        if ((1U == number_of_item) && (0 == rxLength))
 8004c4e:	d013      	beq.n	8004c78 <RI_SetRegCommandParser+0xb0>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 8004c50:	4546      	cmp	r6, r8
 8004c52:	d00d      	beq.n	8004c70 <RI_SetRegCommandParser+0xa8>
          {
            *txData = accessResult;
 8004c54:	f806 0b01 	strb.w	r0, [r6], #1
            txData = txData+1;
            pHandle->txLength++;
 8004c58:	89fb      	ldrh	r3, [r7, #14]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	81fb      	strh	r3, [r7, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8004c5e:	b1a0      	cbz	r0, 8004c8a <RI_SetRegCommandParser+0xc2>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8004c60:	2807      	cmp	r0, #7
 8004c62:	d001      	beq.n	8004c68 <RI_SetRegCommandParser+0xa0>
 8004c64:	280a      	cmp	r0, #10
 8004c66:	d10e      	bne.n	8004c86 <RI_SetRegCommandParser+0xbe>
        retVal = MCP_CMD_NOK;
 8004c68:	2001      	movs	r0, #1
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8004c6a:	b009      	add	sp, #36	@ 0x24
 8004c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8004c70:	2008      	movs	r0, #8
}
 8004c72:	b009      	add	sp, #36	@ 0x24
 8004c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 8004c78:	2c00      	cmp	r4, #0
 8004c7a:	d1e9      	bne.n	8004c50 <RI_SetRegCommandParser+0x88>
    if (MCP_CMD_OK == retVal)
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	d1f4      	bne.n	8004c6a <RI_SetRegCommandParser+0xa2>
      pHandle->txLength = 0;
 8004c80:	2000      	movs	r0, #0
 8004c82:	81f8      	strh	r0, [r7, #14]
 8004c84:	e7f1      	b.n	8004c6a <RI_SetRegCommandParser+0xa2>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8004c86:	2301      	movs	r3, #1
 8004c88:	9303      	str	r3, [sp, #12]
    while (rxLength > 0)
 8004c8a:	2c00      	cmp	r4, #0
 8004c8c:	dcb6      	bgt.n	8004bfc <RI_SetRegCommandParser+0x34>
 8004c8e:	9803      	ldr	r0, [sp, #12]
    if (MCP_CMD_OK == retVal)
 8004c90:	2800      	cmp	r0, #0
 8004c92:	d0f5      	beq.n	8004c80 <RI_SetRegCommandParser+0xb8>
 8004c94:	e7e9      	b.n	8004c6a <RI_SetRegCommandParser+0xa2>
 8004c96:	bf00      	nop
 8004c98:	08005339 	.word	0x08005339
 8004c9c:	0800543d 	.word	0x0800543d

08004ca0 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8004ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca4:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 8004cac:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 8004cae:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8004cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8004d28 <RI_GetRegCommandParser+0x88>)
 8004cb4:	9304      	str	r3, [sp, #16]
 8004cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8004d2c <RI_GetRegCommandParser+0x8c>)
    uint8_t * rxData = pHandle->rxBuffer;
 8004cb8:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8004cbc:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8004cbe:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 8004cc0:	f1b8 0f00 	cmp.w	r8, #0
 8004cc4:	d016      	beq.n	8004cf4 <RI_GetRegCommandParser+0x54>
 8004cc6:	4607      	mov	r7, r0
 8004cc8:	b20d      	sxth	r5, r1
    uint8_t * rxData = pHandle->rxBuffer;
 8004cca:	464c      	mov	r4, r9
    {
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength - MCP_ID_SIZE;
      rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID

      regID = *dataElementID & REG_MASK;
 8004ccc:	f834 cb02 	ldrh.w	ip, [r4], #2
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8004cd0:	fa5f f18c 	uxtb.w	r1, ip
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8004cd4:	f001 0e07 	and.w	lr, r1, #7
 8004cd8:	f10d 0a18 	add.w	sl, sp, #24
      if (motorID > NBR_OF_MOTORS)
 8004cdc:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8004ce0:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 8004ce2:	f02c 0007 	bic.w	r0, ip, #7
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8004ce6:	f10d 030e 	add.w	r3, sp, #14
 8004cea:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8004cee:	f001 0138 	and.w	r1, r1, #56	@ 0x38
      if (motorID > NBR_OF_MOTORS)
 8004cf2:	d003      	beq.n	8004cfc <RI_GetRegCommandParser+0x5c>
        retVal = MCP_CMD_NOK;
 8004cf4:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8004cf6:	b006      	add	sp, #24
 8004cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8004cfc:	9500      	str	r5, [sp, #0]
 8004cfe:	f85e ac08 	ldr.w	sl, [lr, #-8]
 8004d02:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 8004d04:	eba8 0304 	sub.w	r3, r8, r4
    while (rxLength > 0U)
 8004d08:	fa19 f383 	uxtah	r3, r9, r3
 8004d0c:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	d1f1      	bne.n	8004cf6 <RI_GetRegCommandParser+0x56>
          txData = txData+size;
 8004d12:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 8004d16:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8004d18:	1a6d      	subs	r5, r5, r1
          pHandle->txLength += size;
 8004d1a:	440a      	add	r2, r1
          txData = txData+size;
 8004d1c:	440e      	add	r6, r1
          pHandle->txLength += size;
 8004d1e:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8004d20:	b22d      	sxth	r5, r5
    while (rxLength > 0U)
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1d2      	bne.n	8004ccc <RI_GetRegCommandParser+0x2c>
 8004d26:	e7e6      	b.n	8004cf6 <RI_GetRegCommandParser+0x56>
 8004d28:	08005c01 	.word	0x08005c01
 8004d2c:	08005d35 	.word	0x08005d35

08004d30 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8004d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d32:	4604      	mov	r4, r0
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8004d34:	6846      	ldr	r6, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8004d36:	6822      	ldr	r2, [r4, #0]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8004d38:	f836 3b02 	ldrh.w	r3, [r6], #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8004d3c:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8004d3e:	8992      	ldrh	r2, [r2, #12]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8004d40:	f403 457f 	and.w	r5, r3, #65280	@ 0xff00
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8004d44:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8004d46:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8004d48:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8004d4c:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8004d50:	b291      	uxth	r1, r2
{
 8004d52:	b083      	sub	sp, #12
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8004d54:	b280      	uxth	r0, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8004d56:	fa1f fc8c 	uxth.w	ip, ip
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8004d5a:	b212      	sxth	r2, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8004d5c:	d04e      	beq.n	8004dfc <MCP_ReceivedPacket+0xcc>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8004d5e:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 8004d60:	4f52      	ldr	r7, [pc, #328]	@ (8004eac <MCP_ReceivedPacket+0x17c>)
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8004d62:	81a0      	strh	r0, [r4, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	eb03 0383 	add.w	r3, r3, r3, lsl #2

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 8004d6c:	2500      	movs	r5, #0

    switch (command)
 8004d6e:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8004d72:	6066      	str	r6, [r4, #4]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8004d74:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    pHandle->txLength = 0U;
 8004d78:	81e5      	strh	r5, [r4, #14]
    switch (command)
 8004d7a:	d82a      	bhi.n	8004dd2 <MCP_ReceivedPacket+0xa2>
 8004d7c:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
 8004d80:	d81e      	bhi.n	8004dc0 <MCP_ReceivedPacket+0x90>
 8004d82:	e8df f00c 	tbb	[pc, ip]
 8004d86:	1d5d      	.short	0x1d5d
 8004d88:	1d1d1d1d 	.word	0x1d1d1d1d
 8004d8c:	1d651d1d 	.word	0x1d651d1d
 8004d90:	1d1d1d1d 	.word	0x1d1d1d1d
 8004d94:	1d581d1d 	.word	0x1d581d1d
 8004d98:	1d1d1d1d 	.word	0x1d1d1d1d
 8004d9c:	1d501d1d 	.word	0x1d501d1d
 8004da0:	1d1d1d1d 	.word	0x1d1d1d1d
 8004da4:	1d4a1d1d 	.word	0x1d4a1d1d
 8004da8:	1d1d1d1d 	.word	0x1d1d1d1d
 8004dac:	1d6a1d1d 	.word	0x1d6a1d1d
 8004db0:	1d1d1d1d 	.word	0x1d1d1d1d
 8004db4:	1d461d1d 	.word	0x1d461d1d
 8004db8:	1d1d1d1d 	.word	0x1d1d1d1d
 8004dbc:	1d1d      	.short	0x1d1d
 8004dbe:	72          	.byte	0x72
 8004dbf:	00          	.byte	0x00
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8004dc4:	68a2      	ldr	r2, [r4, #8]
 8004dc6:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 8004dc8:	89e3      	ldrh	r3, [r4, #14]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8004dce:	b003      	add	sp, #12
 8004dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 8004dd2:	f1bc 0f68 	cmp.w	ip, #104	@ 0x68
 8004dd6:	d04e      	beq.n	8004e76 <MCP_ReceivedPacket+0x146>
 8004dd8:	d907      	bls.n	8004dea <MCP_ReceivedPacket+0xba>
 8004dda:	f1bc 0f78 	cmp.w	ip, #120	@ 0x78
 8004dde:	d1ef      	bne.n	8004dc0 <MCP_ReceivedPacket+0x90>
        HAL_NVIC_SystemReset();
 8004de0:	f003 fb10 	bl	8008404 <HAL_NVIC_SystemReset>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8004de4:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8004de6:	4628      	mov	r0, r5
        break;
 8004de8:	e7ec      	b.n	8004dc4 <MCP_ReceivedPacket+0x94>
    switch (command)
 8004dea:	f1bc 0f48 	cmp.w	ip, #72	@ 0x48
 8004dee:	d1e7      	bne.n	8004dc0 <MCP_ReceivedPacket+0x90>
        MCI_Clear_Iqdref(pMCI);
 8004df0:	4638      	mov	r0, r7
 8004df2:	f7ff f979 	bl	80040e8 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8004df6:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8004df8:	4628      	mov	r0, r5
        break;
 8004dfa:	e7e3      	b.n	8004dc4 <MCP_ReceivedPacket+0x94>
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 8004dfc:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    pHandle->txLength = 0U;
 8004e00:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8004e02:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8004e06:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8004e08:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 8004e0a:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8004e0c:	d93c      	bls.n	8004e88 <MCP_ReceivedPacket+0x158>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8004e0e:	200d      	movs	r0, #13
 8004e10:	e7d8      	b.n	8004dc4 <MCP_ReceivedPacket+0x94>
        if (IDLE == MCI_GetSTMState(pMCI))
 8004e12:	4638      	mov	r0, r7
 8004e14:	f7ff f882 	bl	8003f1c <MCI_GetSTMState>
 8004e18:	b128      	cbz	r0, 8004e26 <MCP_ReceivedPacket+0xf6>
          (void)MCI_StopMotor(pMCI);
 8004e1a:	4638      	mov	r0, r7
 8004e1c:	f7ff f89a 	bl	8003f54 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8004e20:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8004e22:	2000      	movs	r0, #0
 8004e24:	e7ce      	b.n	8004dc4 <MCP_ReceivedPacket+0x94>
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8004e26:	4638      	mov	r0, r7
 8004e28:	f7ff f87e 	bl	8003f28 <MCI_StartMotor>
 8004e2c:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8004e30:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8004e32:	b2c0      	uxtb	r0, r0
 8004e34:	e7c6      	b.n	8004dc4 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8004e36:	4620      	mov	r0, r4
 8004e38:	f7ff ff32 	bl	8004ca0 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8004e3c:	89e3      	ldrh	r3, [r4, #14]
        break;
 8004e3e:	e7c1      	b.n	8004dc4 <MCP_ReceivedPacket+0x94>
        *pHandle->txBuffer = MCP_VERSION;
 8004e40:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 8004e42:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 8004e44:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 8004e46:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 8004e48:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8004e4a:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8004e4c:	2000      	movs	r0, #0
        break;
 8004e4e:	e7b9      	b.n	8004dc4 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8004e50:	4620      	mov	r0, r4
 8004e52:	f7ff feb9 	bl	8004bc8 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8004e56:	89e3      	ldrh	r3, [r4, #14]
        break;
 8004e58:	e7b4      	b.n	8004dc4 <MCP_ReceivedPacket+0x94>
        if (RUN == MCI_GetSTMState(pMCI))
 8004e5a:	4638      	mov	r0, r7
 8004e5c:	f7ff f85e 	bl	8003f1c <MCI_GetSTMState>
 8004e60:	2806      	cmp	r0, #6
 8004e62:	d01d      	beq.n	8004ea0 <MCP_ReceivedPacket+0x170>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8004e64:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8004e66:	2000      	movs	r0, #0
 8004e68:	e7ac      	b.n	8004dc4 <MCP_ReceivedPacket+0x94>
        (void)MCI_FaultAcknowledged(pMCI);
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	f7ff f88e 	bl	8003f8c <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8004e70:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8004e72:	2000      	movs	r0, #0
        break;
 8004e74:	e7a6      	b.n	8004dc4 <MCP_ReceivedPacket+0x94>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 8004e76:	68a3      	ldr	r3, [r4, #8]
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	4631      	mov	r1, r6
 8004e7c:	f104 030e 	add.w	r3, r4, #14
 8004e80:	f7fe ffd0 	bl	8003e24 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8004e84:	89e3      	ldrh	r3, [r4, #14]
        break;
 8004e86:	e79d      	b.n	8004dc4 <MCP_ReceivedPacket+0x94>
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8004e88:	4b09      	ldr	r3, [pc, #36]	@ (8004eb0 <MCP_ReceivedPacket+0x180>)
 8004e8a:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
 8004e8e:	b15d      	cbz	r5, 8004ea8 <MCP_ReceivedPacket+0x178>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8004e90:	68a3      	ldr	r3, [r4, #8]
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	4631      	mov	r1, r6
 8004e96:	f104 030e 	add.w	r3, r4, #14
 8004e9a:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8004e9c:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8004e9e:	e791      	b.n	8004dc4 <MCP_ReceivedPacket+0x94>
          MCI_StopRamp(pMCI);
 8004ea0:	4638      	mov	r0, r7
 8004ea2:	f7ff f8bb 	bl	800401c <MCI_StopRamp>
 8004ea6:	e7dd      	b.n	8004e64 <MCP_ReceivedPacket+0x134>
 8004ea8:	462b      	mov	r3, r5
 8004eaa:	e7b0      	b.n	8004e0e <MCP_ReceivedPacket+0xde>
 8004eac:	20000000 	.word	0x20000000
 8004eb0:	20000e04 	.word	0x20000e04

08004eb4 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8004eb4:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8004eb6:	f004 f86d 	bl	8008f94 <HAL_RCC_GetHCLKFreq>
 8004eba:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee4 <MX_MotorControl_Init+0x30>)
 8004ebc:	fba3 3000 	umull	r3, r0, r3, r0
 8004ec0:	09c0      	lsrs	r0, r0, #7
 8004ec2:	f003 fab1 	bl	8008428 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8004ec6:	4b08      	ldr	r3, [pc, #32]	@ (8004ee8 <MX_MotorControl_Init+0x34>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	6819      	ldr	r1, [r3, #0]
 8004ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed0:	f003 fa4e 	bl	8008370 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8004ed4:	4805      	ldr	r0, [pc, #20]	@ (8004eec <MX_MotorControl_Init+0x38>)
 8004ed6:	f7ff f9c7 	bl	8004268 <MCboot>
  mc_lock_pins();
}
 8004eda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8004ede:	f7ff bb0d 	b.w	80044fc <mc_lock_pins>
 8004ee2:	bf00      	nop
 8004ee4:	10624dd3 	.word	0x10624dd3
 8004ee8:	20000b64 	.word	0x20000b64
 8004eec:	20002090 	.word	0x20002090

08004ef0 <startTimers>:
  *         @arg @ref LL_TIM_TS_ETRF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8004ef0:	4922      	ldr	r1, [pc, #136]	@ (8004f7c <startTimers+0x8c>)
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8004ef2:	4a23      	ldr	r2, [pc, #140]	@ (8004f80 <startTimers+0x90>)
 8004ef4:	688b      	ldr	r3, [r1, #8]
 8004ef6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004efe:	f043 0310 	orr.w	r3, r3, #16
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 8004f02:	b410      	push	{r4}
 8004f04:	608b      	str	r3, [r1, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8004f06:	688b      	ldr	r3, [r1, #8]
 8004f08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f0c:	f023 0307 	bic.w	r3, r3, #7
 8004f10:	f043 0306 	orr.w	r3, r3, #6
 8004f14:	608b      	str	r3, [r1, #8]
 8004f16:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004f18:	07db      	lsls	r3, r3, #31
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	d416      	bmi.n	8004f4c <startTimers+0x5c>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004f1e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004f20:	f043 0301 	orr.w	r3, r3, #1
 8004f24:	6593      	str	r3, [r2, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004f26:	6d93      	ldr	r3, [r2, #88]	@ 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004f28:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004f32:	9b01      	ldr	r3, [sp, #4]
 8004f34:	694b      	ldr	r3, [r1, #20]
 8004f36:	f043 0301 	orr.w	r3, r3, #1
 8004f3a:	614b      	str	r3, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8004f3c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004f3e:	f023 0301 	bic.w	r3, r3, #1
 8004f42:	6593      	str	r3, [r2, #88]	@ 0x58
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 8004f44:	b003      	add	sp, #12
 8004f46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f4a:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8004f4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004f50:	480c      	ldr	r0, [pc, #48]	@ (8004f84 <startTimers+0x94>)
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	6859      	ldr	r1, [r3, #4]
 8004f56:	4c0c      	ldr	r4, [pc, #48]	@ (8004f88 <startTimers+0x98>)
 8004f58:	4001      	ands	r1, r0
 8004f5a:	f041 0120 	orr.w	r1, r1, #32
 8004f5e:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004f60:	6959      	ldr	r1, [r3, #20]
 8004f62:	f041 0101 	orr.w	r1, r1, #1
 8004f66:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004f68:	6859      	ldr	r1, [r3, #4]
 8004f6a:	4022      	ands	r2, r4
 8004f6c:	4001      	ands	r1, r0
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	605a      	str	r2, [r3, #4]
}
 8004f72:	b003      	add	sp, #12
 8004f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40012c00 	.word	0x40012c00
 8004f80:	40021000 	.word	0x40021000
 8004f84:	fdffff8f 	.word	0xfdffff8f
 8004f88:	02000070 	.word	0x02000070

08004f8c <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8004f8c:	3201      	adds	r2, #1
{
 8004f8e:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8004f90:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004f92:	f06f 0602 	mvn.w	r6, #2
 8004f96:	0155      	lsls	r5, r2, #5
 8004f98:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8004f9a:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 8004f9c:	f893 c000 	ldrb.w	ip, [r3]
 8004fa0:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8004fa4:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8004fa8:	d80c      	bhi.n	8004fc4 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004faa:	6904      	ldr	r4, [r0, #16]
 8004fac:	07a4      	lsls	r4, r4, #30
 8004fae:	d5f5      	bpl.n	8004f9c <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8004fb0:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8004fb4:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004fb6:	6106      	str	r6, [r0, #16]
 8004fb8:	d8f0      	bhi.n	8004f9c <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8004fba:	781c      	ldrb	r4, [r3, #0]
 8004fbc:	2c0f      	cmp	r4, #15
 8004fbe:	d8ed      	bhi.n	8004f9c <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 8004fc4:	bd70      	pop	{r4, r5, r6, pc}
 8004fc6:	bf00      	nop

08004fc8 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8004fc8:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8004fca:	f8b0 4070 	ldrh.w	r4, [r0, #112]	@ 0x70
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8004fce:	f8b0 204e 	ldrh.w	r2, [r0, #78]	@ 0x4e
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8004fd2:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8004fd6:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8004fd8:	fb04 fc0c 	mul.w	ip, r4, ip
 8004fdc:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8004fe0:	fb02 f303 	mul.w	r3, r2, r3

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 8004fe4:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 8004fe8:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8004fec:	eb02 7ed2 	add.w	lr, r2, r2, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 8004ff0:	eb03 71d3 	add.w	r1, r3, r3, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8004ff4:	1c55      	adds	r5, r2, #1
{
 8004ff6:	b083      	sub	sp, #12
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8004ff8:	ea4f 0494 	mov.w	r4, r4, lsr #2
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8004ffc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8005000:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 8005004:	ea4f 0161 	mov.w	r1, r1, asr #1
    if (wY < 0)
 8005008:	db6b      	blt.n	80050e2 <PWMC_SetPhaseVoltage+0x11a>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 800500a:	1c5d      	adds	r5, r3, #1
 800500c:	db3d      	blt.n	800508a <PWMC_SetPhaseVoltage+0xc2>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800500e:	ebbe 0e01 	subs.w	lr, lr, r1
 8005012:	bf44      	itt	mi
 8005014:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8005018:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 800501c:	2b00      	cmp	r3, #0
 800501e:	bfbc      	itt	lt
 8005020:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8005024:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 8005028:	2a00      	cmp	r2, #0
 800502a:	bfb8      	it	lt
 800502c:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00

        if(true == pHandle->SingleShuntTopology)
 8005030:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8005034:	eb04 4eae 	add.w	lr, r4, lr, asr #18
        pHandle->Sector = SECTOR_2;
 8005038:	f04f 0501 	mov.w	r5, #1
        wTimePhC = wTimePhA - (wY / 131072);
 800503c:	bfb8      	it	lt
 800503e:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_2;
 8005042:	f880 507a 	strb.w	r5, [r0, #122]	@ 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 8005046:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 800504a:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 800504e:	2900      	cmp	r1, #0
 8005050:	d16e      	bne.n	8005130 <PWMC_SetPhaseVoltage+0x168>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 8005052:	fa1f fc83 	uxth.w	ip, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 8005056:	fa1f f48e 	uxth.w	r4, lr
        pHandle->highDuty = (uint16_t)wTimePhC;
 800505a:	b291      	uxth	r1, r2
            pHandle->highDuty = 2U;
 800505c:	f8a0 105c 	strh.w	r1, [r0, #92]	@ 0x5c

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8005060:	6941      	ldr	r1, [r0, #20]
            pHandle->lowDuty = 0U;
 8005062:	f8a0 c058 	strh.w	ip, [r0, #88]	@ 0x58
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8005066:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 800506a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 800506e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
            pHandle->midDuty = 1U;
 8005072:	f8a0 405a 	strh.w	r4, [r0, #90]	@ 0x5a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8005076:	f8a0 e050 	strh.w	lr, [r0, #80]	@ 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 800507a:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 800507e:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8005082:	b003      	add	sp, #12
 8005084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8005088:	4708      	bx	r1
        if ( wX <= 0 )
 800508a:	f1bc 0f00 	cmp.w	ip, #0
 800508e:	dd7b      	ble.n	8005188 <PWMC_SetPhaseVoltage+0x1c0>
          wTimePhB = wTimePhA + (wZ / 131072);
 8005090:	2b00      	cmp	r3, #0
 8005092:	bfb8      	it	lt
 8005094:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8005098:	ebac 0101 	sub.w	r1, ip, r1
          wTimePhB = wTimePhA + (wZ / 131072);
 800509c:	bfb8      	it	lt
 800509e:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 80050a2:	f1bc 0f00 	cmp.w	ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 80050a6:	eb04 4ea1 	add.w	lr, r4, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80050aa:	bfb8      	it	lt
 80050ac:	f50c 3cff 	addlt.w	ip, ip, #130560	@ 0x1fe00
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 80050b0:	f890 107d 	ldrb.w	r1, [r0, #125]	@ 0x7d
          pHandle->Sector = SECTOR_1;
 80050b4:	f04f 0200 	mov.w	r2, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 80050b8:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80050bc:	bfb8      	it	lt
 80050be:	f20c 1cff 	addwlt	ip, ip, #511	@ 0x1ff
          pHandle->Sector = SECTOR_1;
 80050c2:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 80050c6:	eba3 426c 	sub.w	r2, r3, ip, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 80050ca:	2900      	cmp	r1, #0
 80050cc:	f040 80ae 	bne.w	800522c <PWMC_SetPhaseVoltage+0x264>
 80050d0:	f890 4085 	ldrb.w	r4, [r0, #133]	@ 0x85
 80050d4:	2c00      	cmp	r4, #0
 80050d6:	f000 80b9 	beq.w	800524c <PWMC_SetPhaseVoltage+0x284>
 80050da:	f04f 0c02 	mov.w	ip, #2
 80050de:	2401      	movs	r4, #1
 80050e0:	e7bc      	b.n	800505c <PWMC_SetPhaseVoltage+0x94>
      if (wZ < 0)
 80050e2:	f1b3 3fff 	cmp.w	r3, #4294967295
        if(true == pHandle->SingleShuntTopology)
 80050e6:	f890 5085 	ldrb.w	r5, [r0, #133]	@ 0x85
      if (wZ < 0)
 80050ea:	db70      	blt.n	80051ce <PWMC_SetPhaseVoltage+0x206>
        if (wX <= 0)
 80050ec:	f1bc 0f00 	cmp.w	ip, #0
 80050f0:	dd23      	ble.n	800513a <PWMC_SetPhaseVoltage+0x172>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80050f2:	ebbe 0e0c 	subs.w	lr, lr, ip
 80050f6:	bf44      	itt	mi
 80050f8:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 80050fc:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8005100:	2a00      	cmp	r2, #0
 8005102:	bfb8      	it	lt
 8005104:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8005108:	eb04 4eae 	add.w	lr, r4, lr, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 800510c:	bfb8      	it	lt
 800510e:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_3;
 8005112:	2302      	movs	r3, #2
          wTimePhC = wTimePhA - (wY / 131072);
 8005114:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
          pHandle->Sector = SECTOR_3;
 8005118:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhB = wTimePhC + (wX / 131072);
 800511c:	eb02 436c 	add.w	r3, r2, ip, asr #17
          if(true == pHandle->SingleShuntTopology)
 8005120:	2d00      	cmp	r5, #0
 8005122:	d17e      	bne.n	8005222 <PWMC_SetPhaseVoltage+0x25a>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8005124:	fa1f fc83 	uxth.w	ip, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 8005128:	b294      	uxth	r4, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 800512a:	fa1f f18e 	uxth.w	r1, lr
 800512e:	e795      	b.n	800505c <PWMC_SetPhaseVoltage+0x94>
 8005130:	f04f 0c02 	mov.w	ip, #2
 8005134:	2400      	movs	r4, #0
 8005136:	2101      	movs	r1, #1
 8005138:	e790      	b.n	800505c <PWMC_SetPhaseVoltage+0x94>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800513a:	ebbc 0101 	subs.w	r1, ip, r1
 800513e:	bf44      	itt	mi
 8005140:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8005144:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8005148:	2b00      	cmp	r3, #0
 800514a:	bfb8      	it	lt
 800514c:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_4;
 8005150:	f04f 0203 	mov.w	r2, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 8005154:	bfb8      	it	lt
 8005156:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_4;
 800515a:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 800515e:	f1bc 0200 	subs.w	r2, ip, #0
 8005162:	bfb8      	it	lt
 8005164:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8005168:	eb04 4ea1 	add.w	lr, r4, r1, asr #18
          wTimePhB = wTimePhA + (wZ / 131072);
 800516c:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8005170:	bfb8      	it	lt
 8005172:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 8005176:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          if(true == pHandle->SingleShuntTopology)
 800517a:	2d00      	cmp	r5, #0
 800517c:	d060      	beq.n	8005240 <PWMC_SetPhaseVoltage+0x278>
 800517e:	f04f 0c00 	mov.w	ip, #0
 8005182:	2401      	movs	r4, #1
 8005184:	2102      	movs	r1, #2
 8005186:	e769      	b.n	800505c <PWMC_SetPhaseVoltage+0x94>
          wTimePhC = wTimePhA - (wY / 131072);
 8005188:	2a00      	cmp	r2, #0
 800518a:	bfb8      	it	lt
 800518c:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_6;
 8005190:	f04f 0305 	mov.w	r3, #5
          wTimePhC = wTimePhA - (wY / 131072);
 8005194:	bfb8      	it	lt
 8005196:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 800519a:	ebae 0e0c 	sub.w	lr, lr, ip
          pHandle->Sector = SECTOR_6;
 800519e:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhB = wTimePhC + (wX / 131072);
 80051a2:	f1bc 0300 	subs.w	r3, ip, #0
 80051a6:	bfb8      	it	lt
 80051a8:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80051ac:	eb04 4eae 	add.w	lr, r4, lr, asr #18
          if(true == pHandle->SingleShuntTopology)
 80051b0:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
          wTimePhC = wTimePhA - (wY / 131072);
 80051b4:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 80051b8:	bfb8      	it	lt
 80051ba:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 80051be:	eb02 4363 	add.w	r3, r2, r3, asr #17
          if(true == pHandle->SingleShuntTopology)
 80051c2:	b3c1      	cbz	r1, 8005236 <PWMC_SetPhaseVoltage+0x26e>
 80051c4:	f04f 0c01 	mov.w	ip, #1
 80051c8:	2402      	movs	r4, #2
 80051ca:	2100      	movs	r1, #0
 80051cc:	e746      	b.n	800505c <PWMC_SetPhaseVoltage+0x94>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80051ce:	ebbe 0e01 	subs.w	lr, lr, r1
 80051d2:	bf44      	itt	mi
 80051d4:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 80051d8:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80051dc:	2b00      	cmp	r3, #0
 80051de:	bfbc      	itt	lt
 80051e0:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 80051e4:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 80051e8:	2a00      	cmp	r2, #0
 80051ea:	bfb8      	it	lt
 80051ec:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80051f0:	eb04 4eae 	add.w	lr, r4, lr, asr #18
        pHandle->Sector = SECTOR_5;
 80051f4:	f04f 0c04 	mov.w	ip, #4
        wTimePhC = wTimePhA - (wY / 131072) ;
 80051f8:	bfb8      	it	lt
 80051fa:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_5;
 80051fe:	f880 c07a 	strb.w	ip, [r0, #122]	@ 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 8005202:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8005206:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 800520a:	b92d      	cbnz	r5, 8005218 <PWMC_SetPhaseVoltage+0x250>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 800520c:	fa1f fc82 	uxth.w	ip, r2
          pHandle->midDuty = (uint16_t)wTimePhA;
 8005210:	fa1f f48e 	uxth.w	r4, lr
          pHandle->highDuty = (uint16_t)wTimePhB;
 8005214:	b299      	uxth	r1, r3
 8005216:	e721      	b.n	800505c <PWMC_SetPhaseVoltage+0x94>
 8005218:	f04f 0c01 	mov.w	ip, #1
 800521c:	2400      	movs	r4, #0
 800521e:	2102      	movs	r1, #2
 8005220:	e71c      	b.n	800505c <PWMC_SetPhaseVoltage+0x94>
 8005222:	f04f 0c00 	mov.w	ip, #0
 8005226:	2402      	movs	r4, #2
 8005228:	2101      	movs	r1, #1
 800522a:	e717      	b.n	800505c <PWMC_SetPhaseVoltage+0x94>
 800522c:	f04f 0c02 	mov.w	ip, #2
 8005230:	2401      	movs	r4, #1
 8005232:	2100      	movs	r1, #0
 8005234:	e712      	b.n	800505c <PWMC_SetPhaseVoltage+0x94>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8005236:	fa1f fc8e 	uxth.w	ip, lr
            pHandle->midDuty = (uint16_t)wTimePhC;
 800523a:	b294      	uxth	r4, r2
            pHandle->highDuty = (uint16_t)wTimePhB;
 800523c:	b299      	uxth	r1, r3
 800523e:	e70d      	b.n	800505c <PWMC_SetPhaseVoltage+0x94>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8005240:	fa1f fc82 	uxth.w	ip, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 8005244:	b29c      	uxth	r4, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 8005246:	fa1f f18e 	uxth.w	r1, lr
 800524a:	e707      	b.n	800505c <PWMC_SetPhaseVoltage+0x94>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 800524c:	fa1f fc8e 	uxth.w	ip, lr
            pHandle->midDuty = (uint16_t)wTimePhB;
 8005250:	b29c      	uxth	r4, r3
            pHandle->highDuty = (uint16_t)wTimePhC;
 8005252:	b291      	uxth	r1, r2
 8005254:	e702      	b.n	800505c <PWMC_SetPhaseVoltage+0x94>
 8005256:	bf00      	nop

08005258 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8005258:	6843      	ldr	r3, [r0, #4]
 800525a:	4718      	bx	r3

0800525c <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 800525c:	6883      	ldr	r3, [r0, #8]
 800525e:	4718      	bx	r3

08005260 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8005260:	b510      	push	{r4, lr}
 8005262:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8005264:	b179      	cbz	r1, 8005286 <PWMC_CurrentReadingCalibr+0x26>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8005266:	2901      	cmp	r1, #1
 8005268:	d001      	beq.n	800526e <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 800526a:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 800526c:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 800526e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 8005272:	b16b      	cbz	r3, 8005290 <PWMC_CurrentReadingCalibr+0x30>
        pHandle->OffCalibrWaitTimeCounter--;
 8005274:	3b01      	subs	r3, #1
 8005276:	b29b      	uxth	r3, r3
 8005278:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1f4      	bne.n	800526a <PWMC_CurrentReadingCalibr+0xa>
          pHandle->pFctCurrReadingCalib(pHandle);
 8005280:	68c3      	ldr	r3, [r0, #12]
 8005282:	4798      	blx	r3
          retVal = true;
 8005284:	e004      	b.n	8005290 <PWMC_CurrentReadingCalibr+0x30>
      PWMC_SwitchOffPWM(pHandle);
 8005286:	f7ff ffe7 	bl	8005258 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 800528a:	68e3      	ldr	r3, [r4, #12]
 800528c:	4620      	mov	r0, r4
 800528e:	4798      	blx	r3
      retVal = true;
 8005290:	2001      	movs	r0, #1
}
 8005292:	bd10      	pop	{r4, pc}

08005294 <PWMC_OCP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    if (false == pHandle->BrakeActionLock)
 8005294:	f890 3083 	ldrb.w	r3, [r0, #131]	@ 0x83
 8005298:	b91b      	cbnz	r3, 80052a2 <PWMC_OCP_Handler+0xe>
    {
      if (ES_GPIO == pHandle->LowSideOutputs)
 800529a:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d004      	beq.n	80052ac <PWMC_OCP_Handler+0x18>
    }
    else
    {
      /* Nothing to do */
    }
    pHandle->OverCurrentFlag = true;
 80052a2:	2301      	movs	r3, #1
 80052a4:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 80052a8:	3078      	adds	r0, #120	@ 0x78
 80052aa:	4770      	bx	lr
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 80052ac:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 80052b0:	b410      	push	{r4}
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 80052b2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_u_port, pHandle->pwm_en_u_pin);
 80052b4:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80052b8:	6294      	str	r4, [r2, #40]	@ 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 80052ba:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 80052be:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 80052c2:	628c      	str	r4, [r1, #40]	@ 0x28
 80052c4:	629a      	str	r2, [r3, #40]	@ 0x28
    pHandle->OverCurrentFlag = true;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
}
 80052cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052d0:	3078      	adds	r0, #120	@ 0x78
 80052d2:	4770      	bx	lr

080052d4 <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80052d4:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
{
 80052d6:	4603      	mov	r3, r0
    pHandle->OverVoltageFlag = true;
 80052d8:	f04f 0c01 	mov.w	ip, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80052dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80052e0:	644a      	str	r2, [r1, #68]	@ 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 80052e2:	3078      	adds	r0, #120	@ 0x78
    pHandle->OverVoltageFlag = true;
 80052e4:	f883 c081 	strb.w	ip, [r3, #129]	@ 0x81
    pHandle->BrakeActionLock = true;
 80052e8:	f883 c083 	strb.w	ip, [r3, #131]	@ 0x83
}
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop

080052f0 <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 80052f0:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 80052f2:	f890 0081 	ldrb.w	r0, [r0, #129]	@ 0x81
 80052f6:	b1a8      	cbz	r0, 8005324 <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80052fe:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 8005300:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 8005302:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8005306:	b11a      	cbz	r2, 8005310 <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    retVal |= MC_OVER_CURR;
 800530e:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 8005310:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8005314:	b12a      	cbz	r2, 8005322 <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 8005316:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    pHandle->driverProtectionFlag = false;
 800531a:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 800531c:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 800531e:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
  {
    /* Nothing to do */
  }

  return (retVal);
}
 8005322:	4770      	bx	lr
 8005324:	2140      	movs	r1, #64	@ 0x40
 8005326:	e7ec      	b.n	8005302 <PWMC_IsFaultOccurred+0x12>

08005328 <PWMC_RLDetectionModeEnable>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctRLDetectionModeEnable(pHandle);
 8005328:	69c3      	ldr	r3, [r0, #28]
 800532a:	4718      	bx	r3

0800532c <PWMC_RLDetectionModeDisable>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctRLDetectionModeDisable(pHandle);
 800532c:	6a03      	ldr	r3, [r0, #32]
 800532e:	4718      	bx	r3

08005330 <PWMC_RLDetectionModeSetDuty>:
 {
   retVal = pHandle->pFctRLDetectionModeSetDuty(pHandle, hDuty);
 }
 return (retVal);
#else
  return (pHandle->pFctRLDetectionModeSetDuty(pHandle, hDuty));
 8005330:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005332:	4718      	bx	r3

08005334 <PWMC_RLTurnOnLowSidesAndStart>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctRLTurnOnLowSidesAndStart(pHandle);
 8005334:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005336:	4718      	bx	r3

08005338 <RI_SetRegisterGlobal>:
#include "mp_one_touch_tuning.h"
#include "mp_self_com_ctrl.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 8005338:	b410      	push	{r4}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 800533a:	3908      	subs	r1, #8
{
 800533c:	f9bd c004 	ldrsh.w	ip, [sp, #4]
  switch(typeID)
 8005340:	2920      	cmp	r1, #32
 8005342:	d812      	bhi.n	800536a <RI_SetRegisterGlobal+0x32>
 8005344:	e8df f001 	tbb	[pc, r1]
 8005348:	11111117 	.word	0x11111117
 800534c:	11111111 	.word	0x11111111
 8005350:	11111121 	.word	0x11111121
 8005354:	11111111 	.word	0x11111111
 8005358:	11111133 	.word	0x11111133
 800535c:	11111111 	.word	0x11111111
 8005360:	1111113d 	.word	0x1111113d
 8005364:	11111111 	.word	0x11111111
 8005368:	51          	.byte	0x51
 8005369:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 800536a:	2200      	movs	r2, #0
 800536c:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 800536e:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 8005370:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005374:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 8005376:	2848      	cmp	r0, #72	@ 0x48
      *size = 1;
 8005378:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_RO_REG;
 800537c:	bf14      	ite	ne
 800537e:	2005      	movne	r0, #5
 8005380:	2004      	moveq	r0, #4
}
 8005382:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 1;
 8005386:	801a      	strh	r2, [r3, #0]
}
 8005388:	4770      	bx	lr
      switch (regID)
 800538a:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 800538e:	d04e      	beq.n	800542e <RI_SetRegisterGlobal+0xf6>
 8005390:	d93e      	bls.n	8005410 <RI_SetRegisterGlobal+0xd8>
 8005392:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8005396:	d04a      	beq.n	800542e <RI_SetRegisterGlobal+0xf6>
 8005398:	f641 3258 	movw	r2, #7000	@ 0x1b58
          retVal = MCP_ERROR_UNKNOWN_REG;
 800539c:	4290      	cmp	r0, r2
 800539e:	bf0c      	ite	eq
 80053a0:	2004      	moveq	r0, #4
 80053a2:	2005      	movne	r0, #5
      *size = 2;
 80053a4:	2202      	movs	r2, #2
}
 80053a6:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 2;
 80053aa:	801a      	strh	r2, [r3, #0]
}
 80053ac:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 80053ae:	2818      	cmp	r0, #24
      *size = 4;
 80053b0:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_RO_REG;
 80053b4:	bf14      	ite	ne
 80053b6:	2005      	movne	r0, #5
 80053b8:	4610      	moveq	r0, r2
}
 80053ba:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 4;
 80053be:	801a      	strh	r2, [r3, #0]
}
 80053c0:	4770      	bx	lr
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 80053c2:	2101      	movs	r1, #1
 80053c4:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80053c6:	f992 0000 	ldrsb.w	r0, [r2]
 80053ca:	b348      	cbz	r0, 8005420 <RI_SetRegisterGlobal+0xe8>
 80053cc:	fa1f f08c 	uxth.w	r0, ip
 80053d0:	e003      	b.n	80053da <RI_SetRegisterGlobal+0xa2>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 80053d2:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80053d4:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 80053d8:	b314      	cbz	r4, 8005420 <RI_SetRegisterGlobal+0xe8>
    *size = *size + 1U;
 80053da:	f101 0c01 	add.w	ip, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80053de:	4281      	cmp	r1, r0
    *size = *size + 1U;
 80053e0:	fa1f f18c 	uxth.w	r1, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80053e4:	d3f5      	bcc.n	80053d2 <RI_SetRegisterGlobal+0x9a>
      retVal = MCP_ERROR_RO_REG;
 80053e6:	2004      	movs	r0, #4
 80053e8:	e7c2      	b.n	8005370 <RI_SetRegisterGlobal+0x38>
      *size = rawSize + 2U;
 80053ea:	8812      	ldrh	r2, [r2, #0]
 80053ec:	3202      	adds	r2, #2
 80053ee:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 80053f0:	fa1f fc8c 	uxth.w	ip, ip
 80053f4:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 80053f6:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 80053f8:	d81b      	bhi.n	8005432 <RI_SetRegisterGlobal+0xfa>
        switch (regID)
 80053fa:	28a8      	cmp	r0, #168	@ 0xa8
 80053fc:	d0f3      	beq.n	80053e6 <RI_SetRegisterGlobal+0xae>
 80053fe:	d813      	bhi.n	8005428 <RI_SetRegisterGlobal+0xf0>
 8005400:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8005404:	2828      	cmp	r0, #40	@ 0x28
 8005406:	d0ee      	beq.n	80053e6 <RI_SetRegisterGlobal+0xae>
 8005408:	2005      	movs	r0, #5
}
 800540a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_UNKNOWN_REG;
 8005414:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8005418:	bf0c      	ite	eq
 800541a:	2004      	moveq	r0, #4
 800541c:	2005      	movne	r0, #5
 800541e:	e7c1      	b.n	80053a4 <RI_SetRegisterGlobal+0x6c>
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8005420:	2300      	movs	r3, #0
 8005422:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 8005424:	2004      	movs	r0, #4
 8005426:	e7a3      	b.n	8005370 <RI_SetRegisterGlobal+0x38>
 8005428:	28e8      	cmp	r0, #232	@ 0xe8
 800542a:	d1ed      	bne.n	8005408 <RI_SetRegisterGlobal+0xd0>
 800542c:	e7db      	b.n	80053e6 <RI_SetRegisterGlobal+0xae>
  uint8_t retVal = MCP_CMD_OK;
 800542e:	2000      	movs	r0, #0
 8005430:	e7b8      	b.n	80053a4 <RI_SetRegisterGlobal+0x6c>
        *size = 0;
 8005432:	2200      	movs	r2, #0
 8005434:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8005436:	200a      	movs	r0, #10
 8005438:	e79a      	b.n	8005370 <RI_SetRegisterGlobal+0x38>
 800543a:	bf00      	nop

0800543c <RI_SetRegisterMotor1>:
{
 800543c:	b530      	push	{r4, r5, lr}
 800543e:	b083      	sub	sp, #12
  switch(typeID)
 8005440:	3908      	subs	r1, #8
{
 8005442:	f9bd c018 	ldrsh.w	ip, [sp, #24]
 8005446:	4696      	mov	lr, r2
 8005448:	461c      	mov	r4, r3
  switch(typeID)
 800544a:	2920      	cmp	r1, #32
 800544c:	d812      	bhi.n	8005474 <RI_SetRegisterMotor1+0x38>
 800544e:	e8df f001 	tbb	[pc, r1]
 8005452:	1116      	.short	0x1116
 8005454:	11111111 	.word	0x11111111
 8005458:	112f1111 	.word	0x112f1111
 800545c:	11111111 	.word	0x11111111
 8005460:	118a1111 	.word	0x118a1111
 8005464:	11111111 	.word	0x11111111
 8005468:	11511111 	.word	0x11511111
 800546c:	11111111 	.word	0x11111111
 8005470:	1111      	.short	0x1111
 8005472:	68          	.byte	0x68
 8005473:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8005474:	2300      	movs	r3, #0
 8005476:	8023      	strh	r3, [r4, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8005478:	2007      	movs	r0, #7
}
 800547a:	b003      	add	sp, #12
 800547c:	bd30      	pop	{r4, r5, pc}
      switch (regID)
 800547e:	f5b0 6f91 	cmp.w	r0, #1160	@ 0x488
 8005482:	f000 8296 	beq.w	80059b2 <RI_SetRegisterMotor1+0x576>
 8005486:	f200 8233 	bhi.w	80058f0 <RI_SetRegisterMotor1+0x4b4>
 800548a:	2888      	cmp	r0, #136	@ 0x88
 800548c:	f000 82a5 	beq.w	80059da <RI_SetRegisterMotor1+0x59e>
 8005490:	f240 81aa 	bls.w	80057e8 <RI_SetRegisterMotor1+0x3ac>
 8005494:	f5b0 6f81 	cmp.w	r0, #1032	@ 0x408
 8005498:	f000 8264 	beq.w	8005964 <RI_SetRegisterMotor1+0x528>
 800549c:	d97a      	bls.n	8005594 <RI_SetRegisterMotor1+0x158>
 800549e:	f5b0 6f89 	cmp.w	r0, #1096	@ 0x448
 80054a2:	bf0c      	ite	eq
 80054a4:	2004      	moveq	r0, #4
 80054a6:	2005      	movne	r0, #5
      *size = 1;
 80054a8:	2301      	movs	r3, #1
 80054aa:	8023      	strh	r3, [r4, #0]
}
 80054ac:	b003      	add	sp, #12
 80054ae:	bd30      	pop	{r4, r5, pc}
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 80054b0:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 80054b4:	8815      	ldrh	r5, [r2, #0]
      switch (regID)
 80054b6:	f000 833e 	beq.w	8005b36 <RI_SetRegisterMotor1+0x6fa>
 80054ba:	f200 80b1 	bhi.w	8005620 <RI_SetRegisterMotor1+0x1e4>
 80054be:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 80054c2:	f000 8372 	beq.w	8005baa <RI_SetRegisterMotor1+0x76e>
 80054c6:	d87a      	bhi.n	80055be <RI_SetRegisterMotor1+0x182>
 80054c8:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 80054cc:	f000 8368 	beq.w	8005ba0 <RI_SetRegisterMotor1+0x764>
 80054d0:	d969      	bls.n	80055a6 <RI_SetRegisterMotor1+0x16a>
 80054d2:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 80054d6:	f000 835e 	beq.w	8005b96 <RI_SetRegisterMotor1+0x75a>
 80054da:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 80054de:	f040 8190 	bne.w	8005802 <RI_SetRegisterMotor1+0x3c6>
          PID_SetKP(&PIDIdHandle_M1, (int16_t)regdata16);
 80054e2:	48ad      	ldr	r0, [pc, #692]	@ (8005798 <RI_SetRegisterMotor1+0x35c>)
 80054e4:	b229      	sxth	r1, r5
 80054e6:	f005 f89d 	bl	800a624 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 80054ea:	2000      	movs	r0, #0
      *size = 2;
 80054ec:	2302      	movs	r3, #2
 80054ee:	8023      	strh	r3, [r4, #0]
}
 80054f0:	b003      	add	sp, #12
 80054f2:	bd30      	pop	{r4, r5, pc}
  *size= 1U ; /* /0 is the min String size */
 80054f4:	2001      	movs	r0, #1
 80054f6:	8020      	strh	r0, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80054f8:	f992 3000 	ldrsb.w	r3, [r2]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 8250 	beq.w	80059a2 <RI_SetRegisterMotor1+0x566>
 8005502:	fa1f f38c 	uxth.w	r3, ip
 8005506:	e005      	b.n	8005514 <RI_SetRegisterMotor1+0xd8>
    *size = *size + 1U;
 8005508:	8020      	strh	r0, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800550a:	f91e 1f01 	ldrsb.w	r1, [lr, #1]!
 800550e:	2900      	cmp	r1, #0
 8005510:	f000 8247 	beq.w	80059a2 <RI_SetRegisterMotor1+0x566>
    *size = *size + 1U;
 8005514:	f100 0c01 	add.w	ip, r0, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8005518:	4283      	cmp	r3, r0
    *size = *size + 1U;
 800551a:	fa1f f08c 	uxth.w	r0, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800551e:	d8f3      	bhi.n	8005508 <RI_SetRegisterMotor1+0xcc>
 8005520:	e22e      	b.n	8005980 <RI_SetRegisterMotor1+0x544>
      uint16_t rawSize = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8005522:	8811      	ldrh	r1, [r2, #0]
      *size = rawSize + 2U;
 8005524:	1c8a      	adds	r2, r1, #2
 8005526:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8005528:	fa1f f38c 	uxth.w	r3, ip
 800552c:	429a      	cmp	r2, r3
      *size = rawSize + 2U;
 800552e:	8022      	strh	r2, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 8005530:	f200 823b 	bhi.w	80059aa <RI_SetRegisterMotor1+0x56e>
        switch (regID)
 8005534:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8005538:	f000 8286 	beq.w	8005a48 <RI_SetRegisterMotor1+0x60c>
 800553c:	f200 8222 	bhi.w	8005984 <RI_SetRegisterMotor1+0x548>
 8005540:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8005544:	f000 82d9 	beq.w	8005afa <RI_SetRegisterMotor1+0x6be>
 8005548:	f240 8215 	bls.w	8005976 <RI_SetRegisterMotor1+0x53a>
 800554c:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8005550:	f040 820e 	bne.w	8005970 <RI_SetRegisterMotor1+0x534>
            MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8005554:	f8be 2006 	ldrh.w	r2, [lr, #6]
 8005558:	f9be 1002 	ldrsh.w	r1, [lr, #2]
 800555c:	488f      	ldr	r0, [pc, #572]	@ (800579c <RI_SetRegisterMotor1+0x360>)
 800555e:	f7fe fc81 	bl	8003e64 <MCI_ExecTorqueRamp>
  uint8_t retVal = MCP_CMD_OK;
 8005562:	2000      	movs	r0, #0
 8005564:	e789      	b.n	800547a <RI_SetRegisterMotor1+0x3e>
      uint32_t regdata32 = *(uint32_t *)data; //cstat !MISRAC2012-Rule-11.3
 8005566:	f641 0398 	movw	r3, #6296	@ 0x1898
 800556a:	4298      	cmp	r0, r3
 800556c:	6811      	ldr	r1, [r2, #0]
      switch (regID)
 800556e:	f000 8243 	beq.w	80059f8 <RI_SetRegisterMotor1+0x5bc>
 8005572:	f200 8186 	bhi.w	8005882 <RI_SetRegisterMotor1+0x446>
 8005576:	f641 0318 	movw	r3, #6168	@ 0x1818
 800557a:	4298      	cmp	r0, r3
 800557c:	f000 8240 	beq.w	8005a00 <RI_SetRegisterMotor1+0x5c4>
 8005580:	f240 8148 	bls.w	8005814 <RI_SetRegisterMotor1+0x3d8>
 8005584:	f641 0358 	movw	r3, #6232	@ 0x1858
 8005588:	4298      	cmp	r0, r3
 800558a:	f040 81e9 	bne.w	8005960 <RI_SetRegisterMotor1+0x524>
  * @param  fBW Current regulator bandwidth espressed in rad/s.
  * @retval none
  */
static inline void OTT_SetSpeedRegulatorBandwidth(OTT_Handle_t *pHandle, float fBW)
{
  pHandle->fBW = fBW;
 800558e:	4b84      	ldr	r3, [pc, #528]	@ (80057a0 <RI_SetRegisterMotor1+0x364>)
 8005590:	6319      	str	r1, [r3, #48]	@ 0x30
}
 8005592:	e14c      	b.n	800582e <RI_SetRegisterMotor1+0x3f2>
 8005594:	28c8      	cmp	r0, #200	@ 0xc8
 8005596:	f000 81e5 	beq.w	8005964 <RI_SetRegisterMotor1+0x528>
 800559a:	f5b0 7f72 	cmp.w	r0, #968	@ 0x3c8
 800559e:	bf0c      	ite	eq
 80055a0:	2004      	moveq	r0, #4
 80055a2:	2005      	movne	r0, #5
 80055a4:	e780      	b.n	80054a8 <RI_SetRegisterMotor1+0x6c>
 80055a6:	28d0      	cmp	r0, #208	@ 0xd0
 80055a8:	f000 82f0 	beq.w	8005b8c <RI_SetRegisterMotor1+0x750>
 80055ac:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 80055b0:	f040 811f 	bne.w	80057f2 <RI_SetRegisterMotor1+0x3b6>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80055b4:	487b      	ldr	r0, [pc, #492]	@ (80057a4 <RI_SetRegisterMotor1+0x368>)
 80055b6:	b229      	sxth	r1, r5
 80055b8:	f005 f866 	bl	800a688 <PID_SetKD>
          break;
 80055bc:	e795      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
 80055be:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 80055c2:	f000 8306 	beq.w	8005bd2 <RI_SetRegisterMotor1+0x796>
 80055c6:	d917      	bls.n	80055f8 <RI_SetRegisterMotor1+0x1bc>
 80055c8:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 80055cc:	d010      	beq.n	80055f0 <RI_SetRegisterMotor1+0x1b4>
 80055ce:	f240 809f 	bls.w	8005710 <RI_SetRegisterMotor1+0x2d4>
 80055d2:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 80055d6:	f040 808f 	bne.w	80056f8 <RI_SetRegisterMotor1+0x2bc>
          currComp = MCI_GetIqdref(pMCIN);
 80055da:	4870      	ldr	r0, [pc, #448]	@ (800579c <RI_SetRegisterMotor1+0x360>)
 80055dc:	f7fe fd56 	bl	800408c <MCI_GetIqdref>
 80055e0:	9001      	str	r0, [sp, #4]
          currComp.q = (int16_t)regdata16;
 80055e2:	f8ad 5004 	strh.w	r5, [sp, #4]
          MCI_SetCurrentReferences(pMCIN,currComp);
 80055e6:	9901      	ldr	r1, [sp, #4]
 80055e8:	486c      	ldr	r0, [pc, #432]	@ (800579c <RI_SetRegisterMotor1+0x360>)
 80055ea:	f7fe fc45 	bl	8003e78 <MCI_SetCurrentReferences>
          break;
 80055ee:	e77c      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
      *size = 2;
 80055f0:	2302      	movs	r3, #2
 80055f2:	2004      	movs	r0, #4
 80055f4:	8023      	strh	r3, [r4, #0]
      break;
 80055f6:	e77b      	b.n	80054f0 <RI_SetRegisterMotor1+0xb4>
 80055f8:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 80055fc:	f000 82a6 	beq.w	8005b4c <RI_SetRegisterMotor1+0x710>
 8005600:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 8005604:	d170      	bne.n	80056e8 <RI_SetRegisterMotor1+0x2ac>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8005606:	aa01      	add	r2, sp, #4
 8005608:	f10d 0102 	add.w	r1, sp, #2
 800560c:	4866      	ldr	r0, [pc, #408]	@ (80057a8 <RI_SetRegisterMotor1+0x36c>)
 800560e:	f006 fd57 	bl	800c0c0 <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, hC1, (int16_t)regdata16);
 8005612:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8005616:	4864      	ldr	r0, [pc, #400]	@ (80057a8 <RI_SetRegisterMotor1+0x36c>)
 8005618:	b22a      	sxth	r2, r5
 800561a:	f006 fd59 	bl	800c0d0 <STO_PLL_SetObserverGains>
          break;
 800561e:	e764      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
 8005620:	f241 5390 	movw	r3, #5520	@ 0x1590
 8005624:	4298      	cmp	r0, r3
 8005626:	f000 82cf 	beq.w	8005bc8 <RI_SetRegisterMotor1+0x78c>
 800562a:	d931      	bls.n	8005690 <RI_SetRegisterMotor1+0x254>
 800562c:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 8005630:	4298      	cmp	r0, r3
 8005632:	f000 82c4 	beq.w	8005bbe <RI_SetRegisterMotor1+0x782>
 8005636:	d91d      	bls.n	8005674 <RI_SetRegisterMotor1+0x238>
 8005638:	f641 4310 	movw	r3, #7184	@ 0x1c10
 800563c:	4298      	cmp	r0, r3
 800563e:	f000 8297 	beq.w	8005b70 <RI_SetRegisterMotor1+0x734>
 8005642:	d90e      	bls.n	8005662 <RI_SetRegisterMotor1+0x226>
 8005644:	f641 4350 	movw	r3, #7248	@ 0x1c50
 8005648:	4298      	cmp	r0, r3
 800564a:	d108      	bne.n	800565e <RI_SetRegisterMotor1+0x222>
  * @param value: value of new UnderVoltage Threshold 
  * @retval 
  */
static inline void SCC_SetUnderVoltageThreshold(SCC_Handle_t *pHandle,uint16_t value)
{
  pHandle->pVBS->UnderVoltageThreshold = (uint16_t)((value*65535)/pHandle->pVBS->_Super.ConversionFactor);
 800564c:	4b57      	ldr	r3, [pc, #348]	@ (80057ac <RI_SetRegisterMotor1+0x370>)
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	ebc5 4505 	rsb	r5, r5, r5, lsl #16
 8005654:	8853      	ldrh	r3, [r2, #2]
 8005656:	fbb5 f3f3 	udiv	r3, r5, r3
 800565a:	8253      	strh	r3, [r2, #18]
}
 800565c:	e745      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
          retVal = MCP_ERROR_UNKNOWN_REG;
 800565e:	2005      	movs	r0, #5
 8005660:	e744      	b.n	80054ec <RI_SetRegisterMotor1+0xb0>
 8005662:	f641 1310 	movw	r3, #6416	@ 0x1910
 8005666:	4298      	cmp	r0, r3
 8005668:	d126      	bne.n	80056b8 <RI_SetRegisterMotor1+0x27c>
          PID_SetKPDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 800566a:	4851      	ldr	r0, [pc, #324]	@ (80057b0 <RI_SetRegisterMotor1+0x374>)
 800566c:	4629      	mov	r1, r5
 800566e:	f004 ffe9 	bl	800a644 <PID_SetKPDivisorPOW2>
          break;
 8005672:	e73a      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
 8005674:	f241 6310 	movw	r3, #5648	@ 0x1610
 8005678:	4298      	cmp	r0, r3
 800567a:	f000 8274 	beq.w	8005b66 <RI_SetRegisterMotor1+0x72a>
 800567e:	f241 6350 	movw	r3, #5712	@ 0x1650
 8005682:	4298      	cmp	r0, r3
 8005684:	d127      	bne.n	80056d6 <RI_SetRegisterMotor1+0x29a>
          PID_SetKDDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8005686:	484b      	ldr	r0, [pc, #300]	@ (80057b4 <RI_SetRegisterMotor1+0x378>)
 8005688:	4629      	mov	r1, r5
 800568a:	f005 f805 	bl	800a698 <PID_SetKDDivisorPOW2>
          break;
 800568e:	e72c      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
 8005690:	f241 4390 	movw	r3, #5264	@ 0x1490
 8005694:	4298      	cmp	r0, r3
 8005696:	f000 828d 	beq.w	8005bb4 <RI_SetRegisterMotor1+0x778>
 800569a:	d960      	bls.n	800575e <RI_SetRegisterMotor1+0x322>
 800569c:	f241 5310 	movw	r3, #5392	@ 0x1510
 80056a0:	4298      	cmp	r0, r3
 80056a2:	f000 826e 	beq.w	8005b82 <RI_SetRegisterMotor1+0x746>
 80056a6:	f241 5350 	movw	r3, #5456	@ 0x1550
 80056aa:	4298      	cmp	r0, r3
 80056ac:	d14e      	bne.n	800574c <RI_SetRegisterMotor1+0x310>
          PID_SetKIDivisorPOW2(&PIDIdHandle_M1, regdata16);
 80056ae:	483a      	ldr	r0, [pc, #232]	@ (8005798 <RI_SetRegisterMotor1+0x35c>)
 80056b0:	4629      	mov	r1, r5
 80056b2:	f004 ffd5 	bl	800a660 <PID_SetKIDivisorPOW2>
          break;
 80056b6:	e718      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
 80056b8:	f641 130f 	movw	r3, #6415	@ 0x190f
 80056bc:	4298      	cmp	r0, r3
 80056be:	d9ce      	bls.n	800565e <RI_SetRegisterMotor1+0x222>
 80056c0:	f641 2390 	movw	r3, #6800	@ 0x1a90
 80056c4:	4298      	cmp	r0, r3
 80056c6:	d093      	beq.n	80055f0 <RI_SetRegisterMotor1+0x1b4>
 80056c8:	f641 3358 	movw	r3, #7000	@ 0x1b58
          retVal = MCP_ERROR_UNKNOWN_REG;
 80056cc:	4298      	cmp	r0, r3
 80056ce:	bf0c      	ite	eq
 80056d0:	2004      	moveq	r0, #4
 80056d2:	2005      	movne	r0, #5
 80056d4:	e70a      	b.n	80054ec <RI_SetRegisterMotor1+0xb0>
 80056d6:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 80056da:	4298      	cmp	r0, r3
 80056dc:	d1bf      	bne.n	800565e <RI_SetRegisterMotor1+0x222>
          PID_SetKPDivisorPOW2(&PIDIqHandle_M1, regdata16);
 80056de:	4835      	ldr	r0, [pc, #212]	@ (80057b4 <RI_SetRegisterMotor1+0x378>)
 80056e0:	4629      	mov	r1, r5
 80056e2:	f004 ffaf 	bl	800a644 <PID_SetKPDivisorPOW2>
          break;
 80056e6:	e700      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
 80056e8:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 80056ec:	d1b7      	bne.n	800565e <RI_SetRegisterMotor1+0x222>
          PID_SetKD(&PIDIdHandle_M1, (int16_t)regdata16);
 80056ee:	482a      	ldr	r0, [pc, #168]	@ (8005798 <RI_SetRegisterMotor1+0x35c>)
 80056f0:	b229      	sxth	r1, r5
 80056f2:	f004 ffc9 	bl	800a688 <PID_SetKD>
          break;
 80056f6:	e6f8      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
 80056f8:	d8b1      	bhi.n	800565e <RI_SetRegisterMotor1+0x222>
 80056fa:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 80056fe:	f43f af77 	beq.w	80055f0 <RI_SetRegisterMotor1+0x1b4>
 8005702:	d90d      	bls.n	8005720 <RI_SetRegisterMotor1+0x2e4>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8005704:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 8005708:	bf0c      	ite	eq
 800570a:	2004      	moveq	r0, #4
 800570c:	2005      	movne	r0, #5
 800570e:	e6ed      	b.n	80054ec <RI_SetRegisterMotor1+0xb0>
 8005710:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 8005714:	d10e      	bne.n	8005734 <RI_SetRegisterMotor1+0x2f8>
          PID_SetKP (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 8005716:	4826      	ldr	r0, [pc, #152]	@ (80057b0 <RI_SetRegisterMotor1+0x374>)
 8005718:	b229      	sxth	r1, r5
 800571a:	f004 ff83 	bl	800a624 <PID_SetKP>
          break;
 800571e:	e6e4      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
 8005720:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 8005724:	f43f af64 	beq.w	80055f0 <RI_SetRegisterMotor1+0x1b4>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8005728:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 800572c:	bf0c      	ite	eq
 800572e:	2004      	moveq	r0, #4
 8005730:	2005      	movne	r0, #5
 8005732:	e6db      	b.n	80054ec <RI_SetRegisterMotor1+0xb0>
 8005734:	d393      	bcc.n	800565e <RI_SetRegisterMotor1+0x222>
 8005736:	f5b0 6ff2 	cmp.w	r0, #1936	@ 0x790
 800573a:	f43f af59 	beq.w	80055f0 <RI_SetRegisterMotor1+0x1b4>
 800573e:	d922      	bls.n	8005786 <RI_SetRegisterMotor1+0x34a>
 8005740:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8005744:	bf0c      	ite	eq
 8005746:	2004      	moveq	r0, #4
 8005748:	2005      	movne	r0, #5
 800574a:	e6cf      	b.n	80054ec <RI_SetRegisterMotor1+0xb0>
 800574c:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8005750:	4298      	cmp	r0, r3
 8005752:	d184      	bne.n	800565e <RI_SetRegisterMotor1+0x222>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8005754:	4813      	ldr	r0, [pc, #76]	@ (80057a4 <RI_SetRegisterMotor1+0x368>)
 8005756:	4629      	mov	r1, r5
 8005758:	f004 ff9e 	bl	800a698 <PID_SetKDDivisorPOW2>
          break;
 800575c:	e6c5      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
 800575e:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8005762:	f43f aec2 	beq.w	80054ea <RI_SetRegisterMotor1+0xae>
 8005766:	d927      	bls.n	80057b8 <RI_SetRegisterMotor1+0x37c>
 8005768:	f241 3350 	movw	r3, #4944	@ 0x1350
 800576c:	4298      	cmp	r0, r3
 800576e:	f43f af3f 	beq.w	80055f0 <RI_SetRegisterMotor1+0x1b4>
 8005772:	f241 4350 	movw	r3, #5200	@ 0x1450
 8005776:	4298      	cmp	r0, r3
 8005778:	f47f af71 	bne.w	800565e <RI_SetRegisterMotor1+0x222>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 800577c:	4809      	ldr	r0, [pc, #36]	@ (80057a4 <RI_SetRegisterMotor1+0x368>)
 800577e:	4629      	mov	r1, r5
 8005780:	f004 ff60 	bl	800a644 <PID_SetKPDivisorPOW2>
          break;
 8005784:	e6b1      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
 8005786:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_UNKNOWN_REG;
 800578a:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 800578e:	bf0c      	ite	eq
 8005790:	2004      	moveq	r0, #4
 8005792:	2005      	movne	r0, #5
 8005794:	e6aa      	b.n	80054ec <RI_SetRegisterMotor1+0xb0>
 8005796:	bf00      	nop
 8005798:	200008fc 	.word	0x200008fc
 800579c:	20000000 	.word	0x20000000
 80057a0:	20000038 	.word	0x20000038
 80057a4:	20000954 	.word	0x20000954
 80057a8:	20000684 	.word	0x20000684
 80057ac:	200000f0 	.word	0x200000f0
 80057b0:	200006b8 	.word	0x200006b8
 80057b4:	20000928 	.word	0x20000928
 80057b8:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 80057bc:	f43f ae95 	beq.w	80054ea <RI_SetRegisterMotor1+0xae>
 80057c0:	f63f af4d 	bhi.w	800565e <RI_SetRegisterMotor1+0x222>
 80057c4:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 80057c8:	f43f af12 	beq.w	80055f0 <RI_SetRegisterMotor1+0x1b4>
 80057cc:	f240 80a3 	bls.w	8005916 <RI_SetRegisterMotor1+0x4da>
 80057d0:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 80057d4:	f43f af0c 	beq.w	80055f0 <RI_SetRegisterMotor1+0x1b4>
 80057d8:	f240 8093 	bls.w	8005902 <RI_SetRegisterMotor1+0x4c6>
 80057dc:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 80057e0:	bf0c      	ite	eq
 80057e2:	2004      	moveq	r0, #4
 80057e4:	2005      	movne	r0, #5
 80057e6:	e681      	b.n	80054ec <RI_SetRegisterMotor1+0xb0>
 80057e8:	2848      	cmp	r0, #72	@ 0x48
 80057ea:	bf0c      	ite	eq
 80057ec:	2004      	moveq	r0, #4
 80057ee:	2005      	movne	r0, #5
 80057f0:	e65a      	b.n	80054a8 <RI_SetRegisterMotor1+0x6c>
 80057f2:	2890      	cmp	r0, #144	@ 0x90
 80057f4:	f47f af33 	bne.w	800565e <RI_SetRegisterMotor1+0x222>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80057f8:	488a      	ldr	r0, [pc, #552]	@ (8005a24 <RI_SetRegisterMotor1+0x5e8>)
 80057fa:	b229      	sxth	r1, r5
 80057fc:	f004 ff12 	bl	800a624 <PID_SetKP>
          break;
 8005800:	e673      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
 8005802:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 8005806:	f47f af2a 	bne.w	800565e <RI_SetRegisterMotor1+0x222>
          PID_SetKI(&PIDIqHandle_M1, (int16_t)regdata16);
 800580a:	4887      	ldr	r0, [pc, #540]	@ (8005a28 <RI_SetRegisterMotor1+0x5ec>)
 800580c:	b229      	sxth	r1, r5
 800580e:	f004 ff0b 	bl	800a628 <PID_SetKI>
          break;
 8005812:	e66a      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
 8005814:	2898      	cmp	r0, #152	@ 0x98
 8005816:	d10f      	bne.n	8005838 <RI_SetRegisterMotor1+0x3fc>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8005818:	4b84      	ldr	r3, [pc, #528]	@ (8005a2c <RI_SetRegisterMotor1+0x5f0>)
 800581a:	4885      	ldr	r0, [pc, #532]	@ (8005a30 <RI_SetRegisterMotor1+0x5f4>)
 800581c:	b209      	sxth	r1, r1
 800581e:	fb83 2301 	smull	r2, r3, r3, r1
 8005822:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8005826:	2200      	movs	r2, #0
 8005828:	b209      	sxth	r1, r1
 800582a:	f7fe fb11 	bl	8003e50 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 800582e:	2000      	movs	r0, #0
      *size = 4;
 8005830:	2304      	movs	r3, #4
 8005832:	8023      	strh	r3, [r4, #0]
}
 8005834:	b003      	add	sp, #12
 8005836:	bd30      	pop	{r4, r5, pc}
 8005838:	d91c      	bls.n	8005874 <RI_SetRegisterMotor1+0x438>
 800583a:	f241 7318 	movw	r3, #5912	@ 0x1718
 800583e:	4298      	cmp	r0, r3
 8005840:	d016      	beq.n	8005870 <RI_SetRegisterMotor1+0x434>
 8005842:	d90e      	bls.n	8005862 <RI_SetRegisterMotor1+0x426>
 8005844:	f241 7398 	movw	r3, #6040	@ 0x1798
 8005848:	4298      	cmp	r0, r3
 800584a:	d011      	beq.n	8005870 <RI_SetRegisterMotor1+0x434>
 800584c:	f241 7358 	movw	r3, #5976	@ 0x1758
 8005850:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 8005854:	4298      	cmp	r0, r3
 8005856:	bf0c      	ite	eq
 8005858:	2004      	moveq	r0, #4
 800585a:	2005      	movne	r0, #5
      *size = 4;
 800585c:	2304      	movs	r3, #4
 800585e:	8023      	strh	r3, [r4, #0]
      break;
 8005860:	e7e8      	b.n	8005834 <RI_SetRegisterMotor1+0x3f8>
 8005862:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 8005866:	d003      	beq.n	8005870 <RI_SetRegisterMotor1+0x434>
 8005868:	f241 63d8 	movw	r3, #5848	@ 0x16d8
 800586c:	4298      	cmp	r0, r3
 800586e:	d118      	bne.n	80058a2 <RI_SetRegisterMotor1+0x466>
          retVal = MCP_ERROR_RO_REG;
 8005870:	2004      	movs	r0, #4
 8005872:	e7dd      	b.n	8005830 <RI_SetRegisterMotor1+0x3f4>
 8005874:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8005878:	2818      	cmp	r0, #24
 800587a:	bf0c      	ite	eq
 800587c:	2004      	moveq	r0, #4
 800587e:	2005      	movne	r0, #5
 8005880:	e7d6      	b.n	8005830 <RI_SetRegisterMotor1+0x3f4>
 8005882:	f641 1318 	movw	r3, #6424	@ 0x1918
 8005886:	4298      	cmp	r0, r3
 8005888:	f000 80c7 	beq.w	8005a1a <RI_SetRegisterMotor1+0x5de>
 800588c:	d91d      	bls.n	80058ca <RI_SetRegisterMotor1+0x48e>
 800588e:	f641 5318 	movw	r3, #7448	@ 0x1d18
 8005892:	4298      	cmp	r0, r3
 8005894:	d10a      	bne.n	80058ac <RI_SetRegisterMotor1+0x470>
          SCC_SetResistorOffset(&SCC,fregdata);
 8005896:	ee00 1a10 	vmov	s0, r1
 800589a:	4866      	ldr	r0, [pc, #408]	@ (8005a34 <RI_SetRegisterMotor1+0x5f8>)
 800589c:	f7fd f867 	bl	800296e <SCC_SetResistorOffset>
          break;
 80058a0:	e7c5      	b.n	800582e <RI_SetRegisterMotor1+0x3f2>
 80058a2:	28d8      	cmp	r0, #216	@ 0xd8
 80058a4:	bf0c      	ite	eq
 80058a6:	2004      	moveq	r0, #4
 80058a8:	2005      	movne	r0, #5
 80058aa:	e7c1      	b.n	8005830 <RI_SetRegisterMotor1+0x3f4>
 80058ac:	d858      	bhi.n	8005960 <RI_SetRegisterMotor1+0x524>
 80058ae:	f641 13d8 	movw	r3, #6616	@ 0x19d8
 80058b2:	4298      	cmp	r0, r3
 80058b4:	d0dc      	beq.n	8005870 <RI_SetRegisterMotor1+0x434>
 80058b6:	d910      	bls.n	80058da <RI_SetRegisterMotor1+0x49e>
 80058b8:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80058bc:	f641 2318 	movw	r3, #6680	@ 0x1a18
 80058c0:	4298      	cmp	r0, r3
 80058c2:	bf0c      	ite	eq
 80058c4:	2004      	moveq	r0, #4
 80058c6:	2005      	movne	r0, #5
 80058c8:	e7b2      	b.n	8005830 <RI_SetRegisterMotor1+0x3f4>
 80058ca:	f641 03d8 	movw	r3, #6360	@ 0x18d8
 80058ce:	4298      	cmp	r0, r3
 80058d0:	d146      	bne.n	8005960 <RI_SetRegisterMotor1+0x524>
          SCC_SetNominalSpeed (&SCC, (int32_t) regdata32);
 80058d2:	4858      	ldr	r0, [pc, #352]	@ (8005a34 <RI_SetRegisterMotor1+0x5f8>)
 80058d4:	f7fc ffe4 	bl	80028a0 <SCC_SetNominalSpeed>
          break;
 80058d8:	e7a9      	b.n	800582e <RI_SetRegisterMotor1+0x3f2>
 80058da:	f641 1358 	movw	r3, #6488	@ 0x1958
 80058de:	4298      	cmp	r0, r3
 80058e0:	d0c6      	beq.n	8005870 <RI_SetRegisterMotor1+0x434>
 80058e2:	f641 1398 	movw	r3, #6552	@ 0x1998
 80058e6:	4298      	cmp	r0, r3
 80058e8:	bf0c      	ite	eq
 80058ea:	2004      	moveq	r0, #4
 80058ec:	2005      	movne	r0, #5
 80058ee:	e79f      	b.n	8005830 <RI_SetRegisterMotor1+0x3f4>
 80058f0:	f5b0 6fe9 	cmp.w	r0, #1864	@ 0x748
 80058f4:	d11e      	bne.n	8005934 <RI_SetRegisterMotor1+0x4f8>
          SCC_SetPBCharacterization(&SCC,regdataU8);
 80058f6:	7811      	ldrb	r1, [r2, #0]
 80058f8:	484e      	ldr	r0, [pc, #312]	@ (8005a34 <RI_SetRegisterMotor1+0x5f8>)
 80058fa:	f7fd f833 	bl	8002964 <SCC_SetPBCharacterization>
  uint8_t retVal = MCP_CMD_OK;
 80058fe:	2000      	movs	r0, #0
 8005900:	e5d2      	b.n	80054a8 <RI_SetRegisterMotor1+0x6c>
 8005902:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 8005906:	f43f ae73 	beq.w	80055f0 <RI_SetRegisterMotor1+0x1b4>
          retVal = MCP_ERROR_UNKNOWN_REG;
 800590a:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 800590e:	bf0c      	ite	eq
 8005910:	2004      	moveq	r0, #4
 8005912:	2005      	movne	r0, #5
 8005914:	e5ea      	b.n	80054ec <RI_SetRegisterMotor1+0xb0>
 8005916:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 800591a:	f43f ae69 	beq.w	80055f0 <RI_SetRegisterMotor1+0x1b4>
 800591e:	d90c      	bls.n	800593a <RI_SetRegisterMotor1+0x4fe>
 8005920:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 8005924:	f43f ae64 	beq.w	80055f0 <RI_SetRegisterMotor1+0x1b4>
 8005928:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 800592c:	bf0c      	ite	eq
 800592e:	2004      	moveq	r0, #4
 8005930:	2005      	movne	r0, #5
 8005932:	e5db      	b.n	80054ec <RI_SetRegisterMotor1+0xb0>
 8005934:	d90b      	bls.n	800594e <RI_SetRegisterMotor1+0x512>
 8005936:	2005      	movs	r0, #5
 8005938:	e5b6      	b.n	80054a8 <RI_SetRegisterMotor1+0x6c>
 800593a:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 800593e:	f43f ae57 	beq.w	80055f0 <RI_SetRegisterMotor1+0x1b4>
 8005942:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 8005946:	bf0c      	ite	eq
 8005948:	2004      	moveq	r0, #4
 800594a:	2005      	movne	r0, #5
 800594c:	e5ce      	b.n	80054ec <RI_SetRegisterMotor1+0xb0>
 800594e:	f5b0 6f99 	cmp.w	r0, #1224	@ 0x4c8
 8005952:	d007      	beq.n	8005964 <RI_SetRegisterMotor1+0x528>
 8005954:	f5b0 6fa1 	cmp.w	r0, #1288	@ 0x508
 8005958:	bf0c      	ite	eq
 800595a:	2004      	moveq	r0, #4
 800595c:	2005      	movne	r0, #5
 800595e:	e5a3      	b.n	80054a8 <RI_SetRegisterMotor1+0x6c>
 8005960:	2005      	movs	r0, #5
 8005962:	e765      	b.n	8005830 <RI_SetRegisterMotor1+0x3f4>
            retVal = MCP_ERROR_RO_REG;
 8005964:	2004      	movs	r0, #4
 8005966:	e59f      	b.n	80054a8 <RI_SetRegisterMotor1+0x6c>
 8005968:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 800596c:	2828      	cmp	r0, #40	@ 0x28
 800596e:	d007      	beq.n	8005980 <RI_SetRegisterMotor1+0x544>
 8005970:	2005      	movs	r0, #5
}
 8005972:	b003      	add	sp, #12
 8005974:	bd30      	pop	{r4, r5, pc}
 8005976:	28a8      	cmp	r0, #168	@ 0xa8
 8005978:	d002      	beq.n	8005980 <RI_SetRegisterMotor1+0x544>
 800597a:	d9f5      	bls.n	8005968 <RI_SetRegisterMotor1+0x52c>
 800597c:	28e8      	cmp	r0, #232	@ 0xe8
 800597e:	d1f7      	bne.n	8005970 <RI_SetRegisterMotor1+0x534>
      retVal = MCP_ERROR_RO_REG;
 8005980:	2004      	movs	r0, #4
 8005982:	e57a      	b.n	800547a <RI_SetRegisterMotor1+0x3e>
 8005984:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8005988:	f000 80c5 	beq.w	8005b16 <RI_SetRegisterMotor1+0x6da>
 800598c:	f5b0 6fa5 	cmp.w	r0, #1320	@ 0x528
 8005990:	d1ee      	bne.n	8005970 <RI_SetRegisterMotor1+0x534>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8005992:	4829      	ldr	r0, [pc, #164]	@ (8005a38 <RI_SetRegisterMotor1+0x5fc>)
 8005994:	f10e 0102 	add.w	r1, lr, #2
}
 8005998:	b003      	add	sp, #12
 800599a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 800599e:	f004 bd6d 	b.w	800a47c <MCPA_cfgLog>
    *tempdestString = (int8_t)0;
 80059a2:	2300      	movs	r3, #0
 80059a4:	f88e 3000 	strb.w	r3, [lr]
 80059a8:	e7ea      	b.n	8005980 <RI_SetRegisterMotor1+0x544>
        *size = 0;
 80059aa:	2300      	movs	r3, #0
 80059ac:	8023      	strh	r3, [r4, #0]
              retVal = MCP_ERROR_BAD_RAW_FORMAT;
 80059ae:	200a      	movs	r0, #10
 80059b0:	e563      	b.n	800547a <RI_SetRegisterMotor1+0x3e>
          uint8_t regdataU8 = *(uint8_t *)data;
 80059b2:	7815      	ldrb	r5, [r2, #0]
          SPD_SetElToMecRatio(&STO_PLL_M1._Super, regdataU8);
 80059b4:	4821      	ldr	r0, [pc, #132]	@ (8005a3c <RI_SetRegisterMotor1+0x600>)
 80059b6:	4629      	mov	r1, r5
 80059b8:	f006 f81e 	bl	800b9f8 <SPD_SetElToMecRatio>
          SPD_SetElToMecRatio(&VirtualSpeedSensorM1._Super, regdataU8);
 80059bc:	4820      	ldr	r0, [pc, #128]	@ (8005a40 <RI_SetRegisterMotor1+0x604>)
 80059be:	4629      	mov	r1, r5
 80059c0:	f006 f81a 	bl	800b9f8 <SPD_SetElToMecRatio>
  pHandle->fPP = (float)(bPP);
 80059c4:	ee07 5a90 	vmov	s15, r5
 80059c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005a34 <RI_SetRegisterMotor1+0x5f8>)
  pHandle->bPolesPairs = bPP;
 80059ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005a44 <RI_SetRegisterMotor1+0x608>)
 80059cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d0:	f883 5076 	strb.w	r5, [r3, #118]	@ 0x76
 80059d4:	edc2 7a12 	vstr	s15, [r2, #72]	@ 0x48
}
 80059d8:	e791      	b.n	80058fe <RI_SetRegisterMotor1+0x4c2>
          uint8_t regdata8 = *data;
 80059da:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 80059dc:	2b04      	cmp	r3, #4
 80059de:	f000 80a1 	beq.w	8005b24 <RI_SetRegisterMotor1+0x6e8>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d18b      	bne.n	80058fe <RI_SetRegisterMotor1+0x4c2>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 80059e6:	4812      	ldr	r0, [pc, #72]	@ (8005a30 <RI_SetRegisterMotor1+0x5f4>)
 80059e8:	f7fe fb22 	bl	8004030 <MCI_GetMecSpeedRefUnit>
 80059ec:	2200      	movs	r2, #0
 80059ee:	4601      	mov	r1, r0
 80059f0:	480f      	ldr	r0, [pc, #60]	@ (8005a30 <RI_SetRegisterMotor1+0x5f4>)
 80059f2:	f7fe fa2d 	bl	8003e50 <MCI_ExecSpeedRamp>
 80059f6:	e782      	b.n	80058fe <RI_SetRegisterMotor1+0x4c2>
  pHandle->fLdLqRatio = fLdLqRatio;
 80059f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005a34 <RI_SetRegisterMotor1+0x5f8>)
 80059fa:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
}
 80059fe:	e716      	b.n	800582e <RI_SetRegisterMotor1+0x3f2>
          if(SCC.sm_state==SCC_IDLE || SCC_CALIBRATION_END==SCC.sm_state)
 8005a00:	4b0c      	ldr	r3, [pc, #48]	@ (8005a34 <RI_SetRegisterMotor1+0x5f8>)
 8005a02:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005a06:	b113      	cbz	r3, 8005a0e <RI_SetRegisterMotor1+0x5d2>
 8005a08:	2b0a      	cmp	r3, #10
 8005a0a:	f47f af31 	bne.w	8005870 <RI_SetRegisterMotor1+0x434>
            SCC_SetNominalCurrent(&SCC, fregdata);
 8005a0e:	ee00 1a10 	vmov	s0, r1
 8005a12:	4808      	ldr	r0, [pc, #32]	@ (8005a34 <RI_SetRegisterMotor1+0x5f8>)
 8005a14:	f7fc ff16 	bl	8002844 <SCC_SetNominalCurrent>
          {
 8005a18:	e709      	b.n	800582e <RI_SetRegisterMotor1+0x3f2>
  pHandle->fCurrentBW = fCurrentBW;
 8005a1a:	4b06      	ldr	r3, [pc, #24]	@ (8005a34 <RI_SetRegisterMotor1+0x5f8>)
 8005a1c:	f8c3 1134 	str.w	r1, [r3, #308]	@ 0x134
}
 8005a20:	e705      	b.n	800582e <RI_SetRegisterMotor1+0x3f2>
 8005a22:	bf00      	nop
 8005a24:	20000954 	.word	0x20000954
 8005a28:	20000928 	.word	0x20000928
 8005a2c:	2aaaaaab 	.word	0x2aaaaaab
 8005a30:	20000000 	.word	0x20000000
 8005a34:	200000f0 	.word	0x200000f0
 8005a38:	20000a94 	.word	0x20000a94
 8005a3c:	20000684 	.word	0x20000684
 8005a40:	200009e8 	.word	0x200009e8
 8005a44:	20000038 	.word	0x20000038
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8005a48:	074b      	lsls	r3, r1, #29
 8005a4a:	d1b0      	bne.n	80059ae <RI_SetRegisterMotor1+0x572>
            uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 8005a4c:	b2c9      	uxtb	r1, r1
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8005a4e:	292f      	cmp	r1, #47	@ 0x2f
 8005a50:	d8ad      	bhi.n	80059ae <RI_SetRegisterMotor1+0x572>
              for (i = 0; i <nbrOfPhase; i++)
 8005a52:	08c9      	lsrs	r1, r1, #3
 8005a54:	f43f ad85 	beq.w	8005562 <RI_SetRegisterMotor1+0x126>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8005a58:	f9be 3002 	ldrsh.w	r3, [lr, #2]
 8005a5c:	4a5f      	ldr	r2, [pc, #380]	@ (8005bdc <RI_SetRegisterMotor1+0x7a0>)
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8005a5e:	f8be 5008 	ldrh.w	r5, [lr, #8]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8005a62:	fb82 4003 	smull	r4, r0, r2, r3
 8005a66:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
    retValue = false;
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8005a6a:	4b5d      	ldr	r3, [pc, #372]	@ (8005be0 <RI_SetRegisterMotor1+0x7a4>)
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8005a6c:	f9be 4006 	ldrsh.w	r4, [lr, #6]
 8005a70:	821c      	strh	r4, [r3, #16]
              for (i = 0; i <nbrOfPhase; i++)
 8005a72:	2901      	cmp	r1, #1
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8005a74:	819d      	strh	r5, [r3, #12]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8005a76:	81d8      	strh	r0, [r3, #14]
 8005a78:	f43f ad73 	beq.w	8005562 <RI_SetRegisterMotor1+0x126>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8005a7c:	f9be 400a 	ldrsh.w	r4, [lr, #10]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8005a80:	f9be 500e 	ldrsh.w	r5, [lr, #14]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8005a84:	fb82 c004 	smull	ip, r0, r2, r4
 8005a88:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 8005a8c:	2902      	cmp	r1, #2
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8005a8e:	f8be 4010 	ldrh.w	r4, [lr, #16]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8005a92:	831c      	strh	r4, [r3, #24]
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8005a94:	839d      	strh	r5, [r3, #28]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8005a96:	8358      	strh	r0, [r3, #26]
              for (i = 0; i <nbrOfPhase; i++)
 8005a98:	f43f ad63 	beq.w	8005562 <RI_SetRegisterMotor1+0x126>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8005a9c:	f9be 4012 	ldrsh.w	r4, [lr, #18]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8005aa0:	f9be 5016 	ldrsh.w	r5, [lr, #22]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8005aa4:	fb82 c004 	smull	ip, r0, r2, r4
 8005aa8:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 8005aac:	2903      	cmp	r1, #3
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8005aae:	f8be 4018 	ldrh.w	r4, [lr, #24]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8005ab2:	849c      	strh	r4, [r3, #36]	@ 0x24
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8005ab4:	851d      	strh	r5, [r3, #40]	@ 0x28
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8005ab6:	84d8      	strh	r0, [r3, #38]	@ 0x26
              for (i = 0; i <nbrOfPhase; i++)
 8005ab8:	f43f ad53 	beq.w	8005562 <RI_SetRegisterMotor1+0x126>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8005abc:	f9be 401a 	ldrsh.w	r4, [lr, #26]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8005ac0:	f9be 501e 	ldrsh.w	r5, [lr, #30]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8005ac4:	fb82 c004 	smull	ip, r0, r2, r4
 8005ac8:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 8005acc:	2905      	cmp	r1, #5
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8005ace:	f8be 4020 	ldrh.w	r4, [lr, #32]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8005ad2:	861c      	strh	r4, [r3, #48]	@ 0x30
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8005ad4:	869d      	strh	r5, [r3, #52]	@ 0x34
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8005ad6:	8658      	strh	r0, [r3, #50]	@ 0x32
              for (i = 0; i <nbrOfPhase; i++)
 8005ad8:	f47f ad43 	bne.w	8005562 <RI_SetRegisterMotor1+0x126>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8005adc:	f9be 1022 	ldrsh.w	r1, [lr, #34]	@ 0x22
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8005ae0:	f9be 0026 	ldrsh.w	r0, [lr, #38]	@ 0x26
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8005ae4:	fb82 4201 	smull	r4, r2, r2, r1
 8005ae8:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8005aec:	f8be 4028 	ldrh.w	r4, [lr, #40]	@ 0x28
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8005af0:	879c      	strh	r4, [r3, #60]	@ 0x3c
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8005af2:	f8a3 0040 	strh.w	r0, [r3, #64]	@ 0x40
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8005af6:	87da      	strh	r2, [r3, #62]	@ 0x3e
              for (i = 0; i <nbrOfPhase; i++)
 8005af8:	e533      	b.n	8005562 <RI_SetRegisterMotor1+0x126>
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8005afa:	f8de 1002 	ldr.w	r1, [lr, #2]
 8005afe:	4b37      	ldr	r3, [pc, #220]	@ (8005bdc <RI_SetRegisterMotor1+0x7a0>)
 8005b00:	f8be 2006 	ldrh.w	r2, [lr, #6]
 8005b04:	fb83 0301 	smull	r0, r3, r3, r1
 8005b08:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8005b0c:	4835      	ldr	r0, [pc, #212]	@ (8005be4 <RI_SetRegisterMotor1+0x7a8>)
 8005b0e:	b209      	sxth	r1, r1
 8005b10:	f7fe f99e 	bl	8003e50 <MCI_ExecSpeedRamp>
            break;
 8005b14:	e525      	b.n	8005562 <RI_SetRegisterMotor1+0x126>
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8005b16:	f8de 1002 	ldr.w	r1, [lr, #2]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8005b1a:	4832      	ldr	r0, [pc, #200]	@ (8005be4 <RI_SetRegisterMotor1+0x7a8>)
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8005b1c:	9101      	str	r1, [sp, #4]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8005b1e:	f7fe f9ab 	bl	8003e78 <MCI_SetCurrentReferences>
            break;
 8005b22:	e51e      	b.n	8005562 <RI_SetRegisterMotor1+0x126>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8005b24:	482f      	ldr	r0, [pc, #188]	@ (8005be4 <RI_SetRegisterMotor1+0x7a8>)
 8005b26:	f7fe fadb 	bl	80040e0 <MCI_GetTeref>
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	4601      	mov	r1, r0
 8005b2e:	482d      	ldr	r0, [pc, #180]	@ (8005be4 <RI_SetRegisterMotor1+0x7a8>)
 8005b30:	f7fe f998 	bl	8003e64 <MCI_ExecTorqueRamp>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8005b34:	e6e3      	b.n	80058fe <RI_SetRegisterMotor1+0x4c2>
          currComp = MCI_GetIqdref(pMCIN);
 8005b36:	482b      	ldr	r0, [pc, #172]	@ (8005be4 <RI_SetRegisterMotor1+0x7a8>)
 8005b38:	f7fe faa8 	bl	800408c <MCI_GetIqdref>
 8005b3c:	9001      	str	r0, [sp, #4]
          currComp.d = (int16_t)regdata16;
 8005b3e:	f8ad 5006 	strh.w	r5, [sp, #6]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8005b42:	9901      	ldr	r1, [sp, #4]
 8005b44:	4827      	ldr	r0, [pc, #156]	@ (8005be4 <RI_SetRegisterMotor1+0x7a8>)
 8005b46:	f7fe f997 	bl	8003e78 <MCI_SetCurrentReferences>
          break;
 8005b4a:	e4ce      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8005b4c:	aa01      	add	r2, sp, #4
 8005b4e:	f10d 0102 	add.w	r1, sp, #2
 8005b52:	4825      	ldr	r0, [pc, #148]	@ (8005be8 <RI_SetRegisterMotor1+0x7ac>)
 8005b54:	f006 fab4 	bl	800c0c0 <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, (int16_t)regdata16, hC2);
 8005b58:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8005b5c:	4822      	ldr	r0, [pc, #136]	@ (8005be8 <RI_SetRegisterMotor1+0x7ac>)
 8005b5e:	b229      	sxth	r1, r5
 8005b60:	f006 fab6 	bl	800c0d0 <STO_PLL_SetObserverGains>
          break;
 8005b64:	e4c1      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
          PID_SetKIDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8005b66:	4821      	ldr	r0, [pc, #132]	@ (8005bec <RI_SetRegisterMotor1+0x7b0>)
 8005b68:	4629      	mov	r1, r5
 8005b6a:	f004 fd79 	bl	800a660 <PID_SetKIDivisorPOW2>
          break;
 8005b6e:	e4bc      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
  pHandle->pVBS->OverVoltageThreshold = (uint16_t)((value*65535)/pHandle->pVBS->_Super.ConversionFactor);
 8005b70:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf0 <RI_SetRegisterMotor1+0x7b4>)
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	ebc5 4505 	rsb	r5, r5, r5, lsl #16
 8005b78:	8853      	ldrh	r3, [r2, #2]
 8005b7a:	fbb5 f3f3 	udiv	r3, r5, r3
 8005b7e:	8193      	strh	r3, [r2, #12]
}
 8005b80:	e4b3      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
          PID_SetKPDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8005b82:	481c      	ldr	r0, [pc, #112]	@ (8005bf4 <RI_SetRegisterMotor1+0x7b8>)
 8005b84:	4629      	mov	r1, r5
 8005b86:	f004 fd5d 	bl	800a644 <PID_SetKPDivisorPOW2>
          break;
 8005b8a:	e4ae      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8005b8c:	481a      	ldr	r0, [pc, #104]	@ (8005bf8 <RI_SetRegisterMotor1+0x7bc>)
 8005b8e:	b229      	sxth	r1, r5
 8005b90:	f004 fd4a 	bl	800a628 <PID_SetKI>
          break;
 8005b94:	e4a9      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
          PID_SetKD(&PIDIqHandle_M1, (int16_t)regdata16);
 8005b96:	4815      	ldr	r0, [pc, #84]	@ (8005bec <RI_SetRegisterMotor1+0x7b0>)
 8005b98:	b229      	sxth	r1, r5
 8005b9a:	f004 fd75 	bl	800a688 <PID_SetKD>
          break;
 8005b9e:	e4a4      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
          PID_SetKP(&PIDIqHandle_M1, (int16_t)regdata16);
 8005ba0:	4812      	ldr	r0, [pc, #72]	@ (8005bec <RI_SetRegisterMotor1+0x7b0>)
 8005ba2:	b229      	sxth	r1, r5
 8005ba4:	f004 fd3e 	bl	800a624 <PID_SetKP>
          break;
 8005ba8:	e49f      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
          PID_SetKI(&PIDIdHandle_M1, (int16_t)regdata16);
 8005baa:	4812      	ldr	r0, [pc, #72]	@ (8005bf4 <RI_SetRegisterMotor1+0x7b8>)
 8005bac:	b229      	sxth	r1, r5
 8005bae:	f004 fd3b 	bl	800a628 <PID_SetKI>
          break;
 8005bb2:	e49a      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8005bb4:	4810      	ldr	r0, [pc, #64]	@ (8005bf8 <RI_SetRegisterMotor1+0x7bc>)
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	f004 fd52 	bl	800a660 <PID_SetKIDivisorPOW2>
          break;
 8005bbc:	e495      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
          PID_SetKIDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 8005bbe:	480f      	ldr	r0, [pc, #60]	@ (8005bfc <RI_SetRegisterMotor1+0x7c0>)
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	f004 fd4d 	bl	800a660 <PID_SetKIDivisorPOW2>
          break;
 8005bc6:	e490      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
          PID_SetKDDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8005bc8:	480a      	ldr	r0, [pc, #40]	@ (8005bf4 <RI_SetRegisterMotor1+0x7b8>)
 8005bca:	4629      	mov	r1, r5
 8005bcc:	f004 fd64 	bl	800a698 <PID_SetKDDivisorPOW2>
          break;
 8005bd0:	e48b      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
          PID_SetKI (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 8005bd2:	480a      	ldr	r0, [pc, #40]	@ (8005bfc <RI_SetRegisterMotor1+0x7c0>)
 8005bd4:	b229      	sxth	r1, r5
 8005bd6:	f004 fd27 	bl	800a628 <PID_SetKI>
          break;
 8005bda:	e486      	b.n	80054ea <RI_SetRegisterMotor1+0xae>
 8005bdc:	2aaaaaab 	.word	0x2aaaaaab
 8005be0:	20000850 	.word	0x20000850
 8005be4:	20000000 	.word	0x20000000
 8005be8:	20000684 	.word	0x20000684
 8005bec:	20000928 	.word	0x20000928
 8005bf0:	200000f0 	.word	0x200000f0
 8005bf4:	200008fc 	.word	0x200008fc
 8005bf8:	20000954 	.word	0x20000954
 8005bfc:	200006b8 	.word	0x200006b8

08005c00 <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8005c00:	b510      	push	{r4, lr}
    switch (typeID)
 8005c02:	f1a1 0c08 	sub.w	ip, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8005c06:	f9bd e008 	ldrsh.w	lr, [sp, #8]
    switch (typeID)
 8005c0a:	f1bc 0f20 	cmp.w	ip, #32
 8005c0e:	d812      	bhi.n	8005c36 <RI_GetRegisterGlobal+0x36>
 8005c10:	e8df f00c 	tbb	[pc, ip]
 8005c14:	1111111b 	.word	0x1111111b
 8005c18:	11111111 	.word	0x11111111
 8005c1c:	11111127 	.word	0x11111127
 8005c20:	11111111 	.word	0x11111111
 8005c24:	11111122 	.word	0x11111122
 8005c28:	11111111 	.word	0x11111111
 8005c2c:	11111135 	.word	0x11111135
 8005c30:	11111111 	.word	0x11111111
 8005c34:	13          	.byte	0x13
 8005c35:	00          	.byte	0x00
 8005c36:	2007      	movs	r0, #7
}
 8005c38:	bd10      	pop	{r4, pc}
        switch (regID)
 8005c3a:	2828      	cmp	r0, #40	@ 0x28
 8005c3c:	d044      	beq.n	8005cc8 <RI_GetRegisterGlobal+0xc8>
        *size = (*rawSize) + 2U;
 8005c3e:	8812      	ldrh	r2, [r2, #0]
 8005c40:	3202      	adds	r2, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8005c42:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8005c44:	b292      	uxth	r2, r2
 8005c46:	801a      	strh	r2, [r3, #0]
}
 8005c48:	bd10      	pop	{r4, pc}
        if (freeSpace > 0)
 8005c4a:	f1be 0f00 	cmp.w	lr, #0
 8005c4e:	dd39      	ble.n	8005cc4 <RI_GetRegisterGlobal+0xc4>
 8005c50:	2201      	movs	r2, #1
            *size= 0 ; /* */
 8005c52:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 8005c54:	2005      	movs	r0, #5
}
 8005c56:	bd10      	pop	{r4, pc}
        if (freeSpace >= 4)
 8005c58:	f1be 0f03 	cmp.w	lr, #3
 8005c5c:	dd2a      	ble.n	8005cb4 <RI_GetRegisterGlobal+0xb4>
 8005c5e:	2204      	movs	r2, #4
 8005c60:	e7f7      	b.n	8005c52 <RI_GetRegisterGlobal+0x52>
        if (freeSpace >= 2)
 8005c62:	f1be 0f01 	cmp.w	lr, #1
 8005c66:	dd25      	ble.n	8005cb4 <RI_GetRegisterGlobal+0xb4>
          switch (regID)
 8005c68:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8005c6c:	d05a      	beq.n	8005d24 <RI_GetRegisterGlobal+0x124>
 8005c6e:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8005c72:	bf0c      	ite	eq
 8005c74:	2000      	moveq	r0, #0
 8005c76:	2005      	movne	r0, #5
          *size = 2;
 8005c78:	2202      	movs	r2, #2
 8005c7a:	801a      	strh	r2, [r3, #0]
}
 8005c7c:	bd10      	pop	{r4, pc}
        switch (regID)
 8005c7e:	2820      	cmp	r0, #32
 8005c80:	d02c      	beq.n	8005cdc <RI_GetRegisterGlobal+0xdc>
 8005c82:	2860      	cmp	r0, #96	@ 0x60
 8005c84:	d118      	bne.n	8005cb8 <RI_GetRegisterGlobal+0xb8>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8005c86:	4c28      	ldr	r4, [pc, #160]	@ (8005d28 <RI_GetRegisterGlobal+0x128>)
 8005c88:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8005c90:	b1a0      	cbz	r0, 8005cbc <RI_GetRegisterGlobal+0xbc>
 8005c92:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8005c96:	46a4      	mov	ip, r4
 8005c98:	e008      	b.n	8005cac <RI_GetRegisterGlobal+0xac>
    *tempdestString = *tempsrcString;
 8005c9a:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8005c9e:	8819      	ldrh	r1, [r3, #0]
 8005ca0:	3101      	adds	r1, #1
 8005ca2:	b289      	uxth	r1, r1
 8005ca4:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8005ca6:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8005caa:	b138      	cbz	r0, 8005cbc <RI_GetRegisterGlobal+0xbc>
 8005cac:	4571      	cmp	r1, lr
 8005cae:	d3f4      	bcc.n	8005c9a <RI_GetRegisterGlobal+0x9a>
    retVal = MCP_ERROR_STRING_FORMAT;
 8005cb0:	2006      	movs	r0, #6
}
 8005cb2:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8005cb4:	2008      	movs	r0, #8
}
 8005cb6:	bd10      	pop	{r4, pc}
 8005cb8:	2200      	movs	r2, #0
 8005cba:	e7ca      	b.n	8005c52 <RI_GetRegisterGlobal+0x52>
    *tempdestString = (int8_t)0;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	7013      	strb	r3, [r2, #0]
  uint8_t retVal = MCP_CMD_OK;
 8005cc0:	2000      	movs	r0, #0
}
 8005cc2:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8005cc4:	4608      	mov	r0, r1
}
 8005cc6:	bd10      	pop	{r4, pc}
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8005cc8:	fa1f fe8e 	uxth.w	lr, lr
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8005ccc:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8005cce:	f1be 0f0b 	cmp.w	lr, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8005cd2:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8005cd4:	d81a      	bhi.n	8005d0c <RI_GetRegisterGlobal+0x10c>
 8005cd6:	220c      	movs	r2, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8005cd8:	2008      	movs	r0, #8
 8005cda:	e7b4      	b.n	8005c46 <RI_GetRegisterGlobal+0x46>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8005cdc:	4c13      	ldr	r4, [pc, #76]	@ (8005d2c <RI_GetRegisterGlobal+0x12c>)
 8005cde:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	d0e8      	beq.n	8005cbc <RI_GetRegisterGlobal+0xbc>
 8005cea:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8005cee:	46a4      	mov	ip, r4
 8005cf0:	e009      	b.n	8005d06 <RI_GetRegisterGlobal+0x106>
    *tempdestString = *tempsrcString;
 8005cf2:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8005cf6:	8819      	ldrh	r1, [r3, #0]
 8005cf8:	3101      	adds	r1, #1
 8005cfa:	b289      	uxth	r1, r1
 8005cfc:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8005cfe:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8005d02:	2800      	cmp	r0, #0
 8005d04:	d0da      	beq.n	8005cbc <RI_GetRegisterGlobal+0xbc>
 8005d06:	458e      	cmp	lr, r1
 8005d08:	d8f3      	bhi.n	8005cf2 <RI_GetRegisterGlobal+0xf2>
 8005d0a:	e7d1      	b.n	8005cb0 <RI_GetRegisterGlobal+0xb0>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8005d0c:	4908      	ldr	r1, [pc, #32]	@ (8005d30 <RI_GetRegisterGlobal+0x130>)
 8005d0e:	6848      	ldr	r0, [r1, #4]
 8005d10:	680c      	ldr	r4, [r1, #0]
 8005d12:	8909      	ldrh	r1, [r1, #8]
 8005d14:	f8c2 0006 	str.w	r0, [r2, #6]
 8005d18:	f8c2 4002 	str.w	r4, [r2, #2]
 8005d1c:	8151      	strh	r1, [r2, #10]
    uint8_t retVal = MCP_CMD_OK;
 8005d1e:	2000      	movs	r0, #0
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8005d20:	220c      	movs	r2, #12
 8005d22:	e790      	b.n	8005c46 <RI_GetRegisterGlobal+0x46>
    uint8_t retVal = MCP_CMD_OK;
 8005d24:	2000      	movs	r0, #0
 8005d26:	e7a7      	b.n	8005c78 <RI_GetRegisterGlobal+0x78>
 8005d28:	0800c540 	.word	0x0800c540
 8005d2c:	0800c518 	.word	0x0800c518
 8005d30:	0800c50c 	.word	0x0800c50c

08005d34 <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8005d34:	b530      	push	{r4, r5, lr}
 8005d36:	b095      	sub	sp, #84	@ 0x54
 8005d38:	461d      	mov	r5, r3
    switch (typeID)
 8005d3a:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8005d3e:	f9bd c060 	ldrsh.w	ip, [sp, #96]	@ 0x60
 8005d42:	4614      	mov	r4, r2
    switch (typeID)
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	d812      	bhi.n	8005d6e <RI_GetRegisterMotor1+0x3a>
 8005d48:	e8df f003 	tbb	[pc, r3]
 8005d4c:	11111134 	.word	0x11111134
 8005d50:	11111111 	.word	0x11111111
 8005d54:	11111183 	.word	0x11111183
 8005d58:	11111111 	.word	0x11111111
 8005d5c:	1111114e 	.word	0x1111114e
 8005d60:	11111111 	.word	0x11111111
 8005d64:	11111179 	.word	0x11111179
 8005d68:	11111111 	.word	0x11111111
 8005d6c:	14          	.byte	0x14
 8005d6d:	00          	.byte	0x00
 8005d6e:	2007      	movs	r0, #7
  }
 8005d70:	b015      	add	sp, #84	@ 0x54
 8005d72:	bd30      	pop	{r4, r5, pc}
        rawData++;
 8005d74:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8005d78:	f104 0302 	add.w	r3, r4, #2
        switch (regID)
 8005d7c:	f000 837a 	beq.w	8006474 <RI_GetRegisterMotor1+0x740>
 8005d80:	f200 809c 	bhi.w	8005ebc <RI_GetRegisterMotor1+0x188>
 8005d84:	28e8      	cmp	r0, #232	@ 0xe8
 8005d86:	f000 836a 	beq.w	800645e <RI_GetRegisterMotor1+0x72a>
 8005d8a:	f200 8088 	bhi.w	8005e9e <RI_GetRegisterMotor1+0x16a>
 8005d8e:	2868      	cmp	r0, #104	@ 0x68
 8005d90:	f000 8381 	beq.w	8006496 <RI_GetRegisterMotor1+0x762>
 8005d94:	28a8      	cmp	r0, #168	@ 0xa8
 8005d96:	f040 835d 	bne.w	8006454 <RI_GetRegisterMotor1+0x720>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8005d9a:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8005d9e:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8005da0:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8005da4:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8005da6:	f200 8344 	bhi.w	8006432 <RI_GetRegisterMotor1+0x6fe>
 8005daa:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8005dac:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 8005dae:	802b      	strh	r3, [r5, #0]
  }
 8005db0:	b015      	add	sp, #84	@ 0x54
 8005db2:	bd30      	pop	{r4, r5, pc}
        if (freeSpace > 0)
 8005db4:	f1bc 0f00 	cmp.w	ip, #0
 8005db8:	f340 834a 	ble.w	8006450 <RI_GetRegisterMotor1+0x71c>
          switch (regID)
 8005dbc:	f5b0 6f81 	cmp.w	r0, #1032	@ 0x408
 8005dc0:	f000 83c2 	beq.w	8006548 <RI_GetRegisterMotor1+0x814>
 8005dc4:	f200 80b1 	bhi.w	8005f2a <RI_GetRegisterMotor1+0x1f6>
 8005dc8:	28c8      	cmp	r0, #200	@ 0xc8
 8005dca:	f000 83b9 	beq.w	8006540 <RI_GetRegisterMotor1+0x80c>
 8005dce:	f240 80a2 	bls.w	8005f16 <RI_GetRegisterMotor1+0x1e2>
 8005dd2:	f5b0 7f72 	cmp.w	r0, #968	@ 0x3c8
 8005dd6:	f040 8339 	bne.w	800644c <RI_GetRegisterMotor1+0x718>
 8005dda:	2001      	movs	r0, #1
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8005ddc:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8005dde:	2000      	movs	r0, #0
          *size = 1;
 8005de0:	2301      	movs	r3, #1
 8005de2:	802b      	strh	r3, [r5, #0]
  }
 8005de4:	b015      	add	sp, #84	@ 0x54
 8005de6:	bd30      	pop	{r4, r5, pc}
        if (freeSpace >= 4)
 8005de8:	f1bc 0f03 	cmp.w	ip, #3
 8005dec:	f340 82c1 	ble.w	8006372 <RI_GetRegisterMotor1+0x63e>
          switch (regID)
 8005df0:	f641 0358 	movw	r3, #6232	@ 0x1858
 8005df4:	4298      	cmp	r0, r3
 8005df6:	f000 8431 	beq.w	800665c <RI_GetRegisterMotor1+0x928>
 8005dfa:	f200 824d 	bhi.w	8006298 <RI_GetRegisterMotor1+0x564>
 8005dfe:	f241 63d8 	movw	r3, #5848	@ 0x16d8
 8005e02:	4298      	cmp	r0, r3
 8005e04:	f000 8422 	beq.w	800664c <RI_GetRegisterMotor1+0x918>
 8005e08:	f240 8236 	bls.w	8006278 <RI_GetRegisterMotor1+0x544>
 8005e0c:	f241 7398 	movw	r3, #6040	@ 0x1798
 8005e10:	4298      	cmp	r0, r3
 8005e12:	f000 83e5 	beq.w	80065e0 <RI_GetRegisterMotor1+0x8ac>
 8005e16:	f240 821e 	bls.w	8006256 <RI_GetRegisterMotor1+0x522>
 8005e1a:	f241 73d8 	movw	r3, #6104	@ 0x17d8
 8005e1e:	4298      	cmp	r0, r3
 8005e20:	f000 83ec 	beq.w	80065fc <RI_GetRegisterMotor1+0x8c8>
 8005e24:	f641 0318 	movw	r3, #6168	@ 0x1818
 8005e28:	4298      	cmp	r0, r3
 8005e2a:	f040 839c 	bne.w	8006566 <RI_GetRegisterMotor1+0x832>
  return pHandle->fLastTargetCurr;
 8005e2e:	4bab      	ldr	r3, [pc, #684]	@ (80060dc <RI_GetRegisterMotor1+0x3a8>)
              *regdataU32 = ReadVal.U32_Val;
 8005e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e32:	6023      	str	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8005e34:	2000      	movs	r0, #0
          *size = 4;
 8005e36:	2304      	movs	r3, #4
 8005e38:	802b      	strh	r3, [r5, #0]
  }
 8005e3a:	b015      	add	sp, #84	@ 0x54
 8005e3c:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8005e3e:	28a0      	cmp	r0, #160	@ 0xa0
 8005e40:	f000 82b7 	beq.w	80063b2 <RI_GetRegisterMotor1+0x67e>
 8005e44:	28e0      	cmp	r0, #224	@ 0xe0
 8005e46:	f000 8297 	beq.w	8006378 <RI_GetRegisterMotor1+0x644>
            *size= 0 ; /* */
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8005e4e:	2005      	movs	r0, #5
            break;
 8005e50:	e78e      	b.n	8005d70 <RI_GetRegisterMotor1+0x3c>
        if (freeSpace >= 2)
 8005e52:	f1bc 0f01 	cmp.w	ip, #1
 8005e56:	f340 828c 	ble.w	8006372 <RI_GetRegisterMotor1+0x63e>
          switch (regID)
 8005e5a:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 8005e5e:	f000 8438 	beq.w	80066d2 <RI_GetRegisterMotor1+0x99e>
 8005e62:	f200 8098 	bhi.w	8005f96 <RI_GetRegisterMotor1+0x262>
 8005e66:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 8005e6a:	f000 841c 	beq.w	80066a6 <RI_GetRegisterMotor1+0x972>
 8005e6e:	d87c      	bhi.n	8005f6a <RI_GetRegisterMotor1+0x236>
 8005e70:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8005e74:	f000 8412 	beq.w	800669c <RI_GetRegisterMotor1+0x968>
 8005e78:	f240 80dc 	bls.w	8006034 <RI_GetRegisterMotor1+0x300>
 8005e7c:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 8005e80:	f000 83f7 	beq.w	8006672 <RI_GetRegisterMotor1+0x93e>
 8005e84:	d95f      	bls.n	8005f46 <RI_GetRegisterMotor1+0x212>
 8005e86:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 8005e8a:	d165      	bne.n	8005f58 <RI_GetRegisterMotor1+0x224>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8005e8c:	4894      	ldr	r0, [pc, #592]	@ (80060e0 <RI_GetRegisterMotor1+0x3ac>)
 8005e8e:	aa13      	add	r2, sp, #76	@ 0x4c
 8005e90:	a912      	add	r1, sp, #72	@ 0x48
 8005e92:	f006 f915 	bl	800c0c0 <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 8005e96:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8005e9a:	8023      	strh	r3, [r4, #0]
              break;
 8005e9c:	e17d      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 8005e9e:	f5b0 7f94 	cmp.w	r0, #296	@ 0x128
 8005ea2:	f040 82d7 	bne.w	8006454 <RI_GetRegisterMotor1+0x720>
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8005ea6:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = 12;
 8005eaa:	220c      	movs	r2, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8005eac:	f1bc 0f0d 	cmp.w	ip, #13
            *rawSize = 12;
 8005eb0:	8022      	strh	r2, [r4, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8005eb2:	f200 82b2 	bhi.w	800641a <RI_GetRegisterMotor1+0x6e6>
 8005eb6:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8005eb8:	2008      	movs	r0, #8
 8005eba:	e778      	b.n	8005dae <RI_GetRegisterMotor1+0x7a>
 8005ebc:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8005ec0:	f000 82f3 	beq.w	80064aa <RI_GetRegisterMotor1+0x776>
 8005ec4:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8005ec8:	d112      	bne.n	8005ef0 <RI_GetRegisterMotor1+0x1bc>
            *rawSize = 4;
 8005eca:	2304      	movs	r3, #4
 8005ecc:	8023      	strh	r3, [r4, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8005ece:	4885      	ldr	r0, [pc, #532]	@ (80060e4 <RI_GetRegisterMotor1+0x3b0>)
 8005ed0:	f7fe f8dc 	bl	800408c <MCI_GetIqdref>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	8063      	strh	r3, [r4, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8005ed8:	4882      	ldr	r0, [pc, #520]	@ (80060e4 <RI_GetRegisterMotor1+0x3b0>)
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8005eda:	9312      	str	r3, [sp, #72]	@ 0x48
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8005edc:	f7fe f8d6 	bl	800408c <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 8005ee0:	8823      	ldrh	r3, [r4, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8005ee2:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 8005ee6:	3302      	adds	r3, #2
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8005ee8:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 8005eea:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8005eec:	2000      	movs	r0, #0
            break;
 8005eee:	e75e      	b.n	8005dae <RI_GetRegisterMotor1+0x7a>
 8005ef0:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8005ef4:	f040 82ae 	bne.w	8006454 <RI_GetRegisterMotor1+0x720>
            *rawSize = 4;
 8005ef8:	2304      	movs	r3, #4
 8005efa:	8023      	strh	r3, [r4, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8005efc:	4879      	ldr	r0, [pc, #484]	@ (80060e4 <RI_GetRegisterMotor1+0x3b0>)
 8005efe:	f7fe f887 	bl	8004010 <MCI_GetLastRampFinalTorque>
 8005f02:	8060      	strh	r0, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8005f04:	4877      	ldr	r0, [pc, #476]	@ (80060e4 <RI_GetRegisterMotor1+0x3b0>)
 8005f06:	f7fe f887 	bl	8004018 <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 8005f0a:	8823      	ldrh	r3, [r4, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8005f0c:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 8005f0e:	3302      	adds	r3, #2
 8005f10:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8005f12:	2000      	movs	r0, #0
            break;
 8005f14:	e74b      	b.n	8005dae <RI_GetRegisterMotor1+0x7a>
 8005f16:	2848      	cmp	r0, #72	@ 0x48
 8005f18:	f000 830e 	beq.w	8006538 <RI_GetRegisterMotor1+0x804>
 8005f1c:	2888      	cmp	r0, #136	@ 0x88
 8005f1e:	f040 8295 	bne.w	800644c <RI_GetRegisterMotor1+0x718>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8005f22:	4870      	ldr	r0, [pc, #448]	@ (80060e4 <RI_GetRegisterMotor1+0x3b0>)
 8005f24:	f7fe f84a 	bl	8003fbc <MCI_GetControlMode>
              break;
 8005f28:	e758      	b.n	8005ddc <RI_GetRegisterMotor1+0xa8>
 8005f2a:	f5b0 6f99 	cmp.w	r0, #1224	@ 0x4c8
 8005f2e:	f000 8314 	beq.w	800655a <RI_GetRegisterMotor1+0x826>
 8005f32:	f240 808c 	bls.w	800604e <RI_GetRegisterMotor1+0x31a>
 8005f36:	f5b0 6fa1 	cmp.w	r0, #1288	@ 0x508
 8005f3a:	f040 8287 	bne.w	800644c <RI_GetRegisterMotor1+0x718>
  * @retval bool TRUE if the if the motor has been already profiled,
  *         FALSE otherwise.
  */
static inline bool OTT_IsMotorAlreadyProfiled(OTT_Handle_t *pHandle)
{
  return pHandle->bPI_Tuned;
 8005f3e:	4b6a      	ldr	r3, [pc, #424]	@ (80060e8 <RI_GetRegisterMotor1+0x3b4>)
              *data = OTT_IsMotorAlreadyProfiled(&OTT);
 8005f40:	f893 0062 	ldrb.w	r0, [r3, #98]	@ 0x62
              break;
 8005f44:	e74a      	b.n	8005ddc <RI_GetRegisterMotor1+0xa8>
 8005f46:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8005f4a:	f040 80a9 	bne.w	80060a0 <RI_GetRegisterMotor1+0x36c>
              *regdata16 = PID_GetKI(&PIDIdHandle_M1);
 8005f4e:	4867      	ldr	r0, [pc, #412]	@ (80060ec <RI_GetRegisterMotor1+0x3b8>)
 8005f50:	f004 fb70 	bl	800a634 <PID_GetKI>
 8005f54:	8020      	strh	r0, [r4, #0]
              break;
 8005f56:	e120      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 8005f58:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 8005f5c:	f040 8404 	bne.w	8006768 <RI_GetRegisterMotor1+0xa34>
              *regdata16 = PID_GetKI (&(&STO_PLL_M1)->PIRegulator);
 8005f60:	4863      	ldr	r0, [pc, #396]	@ (80060f0 <RI_GetRegisterMotor1+0x3bc>)
 8005f62:	f004 fb67 	bl	800a634 <PID_GetKI>
 8005f66:	8020      	strh	r0, [r4, #0]
              break;
 8005f68:	e117      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 8005f6a:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 8005f6e:	f000 83a9 	beq.w	80066c4 <RI_GetRegisterMotor1+0x990>
 8005f72:	f240 80cf 	bls.w	8006114 <RI_GetRegisterMotor1+0x3e0>
 8005f76:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 8005f7a:	f000 839e 	beq.w	80066ba <RI_GetRegisterMotor1+0x986>
 8005f7e:	f240 8086 	bls.w	800608e <RI_GetRegisterMotor1+0x35a>
 8005f82:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 8005f86:	d129      	bne.n	8005fdc <RI_GetRegisterMotor1+0x2a8>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 8005f88:	4856      	ldr	r0, [pc, #344]	@ (80060e4 <RI_GetRegisterMotor1+0x3b0>)
 8005f8a:	f7fe f87f 	bl	800408c <MCI_GetIqdref>
 8005f8e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8005f92:	8023      	strh	r3, [r4, #0]
              break;
 8005f94:	e101      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 8005f96:	f241 4390 	movw	r3, #5264	@ 0x1490
 8005f9a:	4298      	cmp	r0, r3
 8005f9c:	f000 8388 	beq.w	80066b0 <RI_GetRegisterMotor1+0x97c>
 8005fa0:	f240 8087 	bls.w	80060b2 <RI_GetRegisterMotor1+0x37e>
 8005fa4:	f241 6310 	movw	r3, #5648	@ 0x1610
 8005fa8:	4298      	cmp	r0, r3
 8005faa:	f000 83a3 	beq.w	80066f4 <RI_GetRegisterMotor1+0x9c0>
 8005fae:	d930      	bls.n	8006012 <RI_GetRegisterMotor1+0x2de>
 8005fb0:	f641 1310 	movw	r3, #6416	@ 0x1910
 8005fb4:	4298      	cmp	r0, r3
 8005fb6:	f000 8398 	beq.w	80066ea <RI_GetRegisterMotor1+0x9b6>
 8005fba:	d921      	bls.n	8006000 <RI_GetRegisterMotor1+0x2cc>
 8005fbc:	f641 4310 	movw	r3, #7184	@ 0x1c10
 8005fc0:	4298      	cmp	r0, r3
 8005fc2:	d114      	bne.n	8005fee <RI_GetRegisterMotor1+0x2ba>
  return (uint16_t) round(pHandle->pVBS->OverVoltageThreshold*pHandle->pVBS->_Super.ConversionFactor/65535);
 8005fc4:	4b45      	ldr	r3, [pc, #276]	@ (80060dc <RI_GetRegisterMotor1+0x3a8>)
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	8993      	ldrh	r3, [r2, #12]
  return (uint16_t) round(pHandle->pVBS->UnderVoltageThreshold*pHandle->pVBS->_Super.ConversionFactor/65535);
 8005fca:	8852      	ldrh	r2, [r2, #2]
 8005fcc:	fb02 f303 	mul.w	r3, r2, r3
 8005fd0:	4a48      	ldr	r2, [pc, #288]	@ (80060f4 <RI_GetRegisterMotor1+0x3c0>)
 8005fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd6:	0bdb      	lsrs	r3, r3, #15
                *regdata16 = SCC_GetUnderVoltageThreshold(&SCC);
 8005fd8:	8023      	strh	r3, [r4, #0]
              break;
 8005fda:	e0de      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 8005fdc:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 8005fe0:	f040 83c2 	bne.w	8006768 <RI_GetRegisterMotor1+0xa34>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8005fe4:	483f      	ldr	r0, [pc, #252]	@ (80060e4 <RI_GetRegisterMotor1+0x3b0>)
 8005fe6:	f7fe f85f 	bl	80040a8 <MCI_GetVqd>
 8005fea:	8020      	strh	r0, [r4, #0]
              break;
 8005fec:	e0d5      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 8005fee:	f641 4350 	movw	r3, #7248	@ 0x1c50
 8005ff2:	4298      	cmp	r0, r3
 8005ff4:	f040 83b8 	bne.w	8006768 <RI_GetRegisterMotor1+0xa34>
 8005ff8:	4b38      	ldr	r3, [pc, #224]	@ (80060dc <RI_GetRegisterMotor1+0x3a8>)
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	8a53      	ldrh	r3, [r2, #18]
 8005ffe:	e7e4      	b.n	8005fca <RI_GetRegisterMotor1+0x296>
 8006000:	f241 6350 	movw	r3, #5712	@ 0x1650
 8006004:	4298      	cmp	r0, r3
 8006006:	d17b      	bne.n	8006100 <RI_GetRegisterMotor1+0x3cc>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIqHandle_M1);
 8006008:	483b      	ldr	r0, [pc, #236]	@ (80060f8 <RI_GetRegisterMotor1+0x3c4>)
 800600a:	f004 fb43 	bl	800a694 <PID_GetKDDivisorPOW2>
 800600e:	8020      	strh	r0, [r4, #0]
              break;
 8006010:	e0c3      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 8006012:	f241 5350 	movw	r3, #5456	@ 0x1550
 8006016:	4298      	cmp	r0, r3
 8006018:	f000 8362 	beq.w	80066e0 <RI_GetRegisterMotor1+0x9ac>
 800601c:	f240 80e3 	bls.w	80061e6 <RI_GetRegisterMotor1+0x4b2>
 8006020:	f241 5390 	movw	r3, #5520	@ 0x1590
 8006024:	4298      	cmp	r0, r3
 8006026:	f040 809d 	bne.w	8006164 <RI_GetRegisterMotor1+0x430>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIdHandle_M1);
 800602a:	4830      	ldr	r0, [pc, #192]	@ (80060ec <RI_GetRegisterMotor1+0x3b8>)
 800602c:	f004 fb32 	bl	800a694 <PID_GetKDDivisorPOW2>
 8006030:	8020      	strh	r0, [r4, #0]
              break;
 8006032:	e0b2      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 8006034:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8006038:	f000 8391 	beq.w	800675e <RI_GetRegisterMotor1+0xa2a>
 800603c:	d91c      	bls.n	8006078 <RI_GetRegisterMotor1+0x344>
 800603e:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 8006042:	d110      	bne.n	8006066 <RI_GetRegisterMotor1+0x332>
              *regdata16 = PID_GetKI(&PIDIqHandle_M1);
 8006044:	482c      	ldr	r0, [pc, #176]	@ (80060f8 <RI_GetRegisterMotor1+0x3c4>)
 8006046:	f004 faf5 	bl	800a634 <PID_GetKI>
 800604a:	8020      	strh	r0, [r4, #0]
              break;
 800604c:	e0a5      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 800604e:	f5b0 6f89 	cmp.w	r0, #1096	@ 0x448
 8006052:	f000 81e0 	beq.w	8006416 <RI_GetRegisterMotor1+0x6e2>
 8006056:	f5b0 6f91 	cmp.w	r0, #1160	@ 0x488
 800605a:	f040 81f7 	bne.w	800644c <RI_GetRegisterMotor1+0x718>
              *data = SPD_GetElToMecRatio(&STO_PLL_M1._Super);
 800605e:	4820      	ldr	r0, [pc, #128]	@ (80060e0 <RI_GetRegisterMotor1+0x3ac>)
 8006060:	f005 fcc8 	bl	800b9f4 <SPD_GetElToMecRatio>
              break;
 8006064:	e6ba      	b.n	8005ddc <RI_GetRegisterMotor1+0xa8>
 8006066:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 800606a:	f040 837d 	bne.w	8006768 <RI_GetRegisterMotor1+0xa34>
              *regdata16 = PID_GetKD(&PIDIqHandle_M1);
 800606e:	4822      	ldr	r0, [pc, #136]	@ (80060f8 <RI_GetRegisterMotor1+0x3c4>)
 8006070:	f004 fb0c 	bl	800a68c <PID_GetKD>
 8006074:	8020      	strh	r0, [r4, #0]
              break;
 8006076:	e090      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 8006078:	28d0      	cmp	r0, #208	@ 0xd0
 800607a:	f000 836b 	beq.w	8006754 <RI_GetRegisterMotor1+0xa20>
 800607e:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8006082:	d156      	bne.n	8006132 <RI_GetRegisterMotor1+0x3fe>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 8006084:	481d      	ldr	r0, [pc, #116]	@ (80060fc <RI_GetRegisterMotor1+0x3c8>)
 8006086:	f004 fb01 	bl	800a68c <PID_GetKD>
 800608a:	8020      	strh	r0, [r4, #0]
              break;
 800608c:	e085      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 800608e:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 8006092:	f040 809d 	bne.w	80061d0 <RI_GetRegisterMotor1+0x49c>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8006096:	4813      	ldr	r0, [pc, #76]	@ (80060e4 <RI_GetRegisterMotor1+0x3b0>)
 8006098:	f7fd ffea 	bl	8004070 <MCI_GetIqd>
 800609c:	8020      	strh	r0, [r4, #0]
              break;
 800609e:	e07c      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 80060a0:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 80060a4:	f040 8360 	bne.w	8006768 <RI_GetRegisterMotor1+0xa34>
              *regdata16 = PID_GetKD(&PIDIdHandle_M1);
 80060a8:	4810      	ldr	r0, [pc, #64]	@ (80060ec <RI_GetRegisterMotor1+0x3b8>)
 80060aa:	f004 faef 	bl	800a68c <PID_GetKD>
 80060ae:	8020      	strh	r0, [r4, #0]
              break;
 80060b0:	e073      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 80060b2:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 80060b6:	f000 8346 	beq.w	8006746 <RI_GetRegisterMotor1+0xa12>
 80060ba:	d97c      	bls.n	80061b6 <RI_GetRegisterMotor1+0x482>
 80060bc:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 80060c0:	d06b      	beq.n	800619a <RI_GetRegisterMotor1+0x466>
 80060c2:	d963      	bls.n	800618c <RI_GetRegisterMotor1+0x458>
 80060c4:	f241 3350 	movw	r3, #4944	@ 0x1350
 80060c8:	4298      	cmp	r0, r3
 80060ca:	d155      	bne.n	8006178 <RI_GetRegisterMotor1+0x444>
  return pHandle->pSCC_Params_str->hPWMFreqHz;
 80060cc:	4b03      	ldr	r3, [pc, #12]	@ (80060dc <RI_GetRegisterMotor1+0x3a8>)
 80060ce:	f8d3 3548 	ldr.w	r3, [r3, #1352]	@ 0x548
 80060d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
              *regdataU16 = SCC_GetPWMFrequencyHz(&SCC);
 80060d6:	8023      	strh	r3, [r4, #0]
              break;
 80060d8:	e05f      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 80060da:	bf00      	nop
 80060dc:	200000f0 	.word	0x200000f0
 80060e0:	20000684 	.word	0x20000684
 80060e4:	20000000 	.word	0x20000000
 80060e8:	20000038 	.word	0x20000038
 80060ec:	200008fc 	.word	0x200008fc
 80060f0:	200006b8 	.word	0x200006b8
 80060f4:	80008001 	.word	0x80008001
 80060f8:	20000928 	.word	0x20000928
 80060fc:	20000954 	.word	0x20000954
 8006100:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 8006104:	4298      	cmp	r0, r3
 8006106:	f040 832f 	bne.w	8006768 <RI_GetRegisterMotor1+0xa34>
              *regdataU16 = PID_GetKIDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 800610a:	48af      	ldr	r0, [pc, #700]	@ (80063c8 <RI_GetRegisterMotor1+0x694>)
 800610c:	f004 faa2 	bl	800a654 <PID_GetKIDivisorPOW2>
 8006110:	8020      	strh	r0, [r4, #0]
              break;
 8006112:	e042      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 8006114:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8006118:	f000 8310 	beq.w	800673c <RI_GetRegisterMotor1+0xa08>
 800611c:	d91a      	bls.n	8006154 <RI_GetRegisterMotor1+0x420>
 800611e:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 8006122:	d10e      	bne.n	8006142 <RI_GetRegisterMotor1+0x40e>
              *regdata16 = MCI_GetIab(pMCIN).b;
 8006124:	48a9      	ldr	r0, [pc, #676]	@ (80063cc <RI_GetRegisterMotor1+0x698>)
 8006126:	f7fd ff87 	bl	8004038 <MCI_GetIab>
 800612a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800612e:	8023      	strh	r3, [r4, #0]
              break;
 8006130:	e033      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 8006132:	2890      	cmp	r0, #144	@ 0x90
 8006134:	f040 8318 	bne.w	8006768 <RI_GetRegisterMotor1+0xa34>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 8006138:	48a5      	ldr	r0, [pc, #660]	@ (80063d0 <RI_GetRegisterMotor1+0x69c>)
 800613a:	f004 fa77 	bl	800a62c <PID_GetKP>
 800613e:	8020      	strh	r0, [r4, #0]
              break;
 8006140:	e02b      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 8006142:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 8006146:	f040 830f 	bne.w	8006768 <RI_GetRegisterMotor1+0xa34>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 800614a:	48a0      	ldr	r0, [pc, #640]	@ (80063cc <RI_GetRegisterMotor1+0x698>)
 800614c:	f7fd ff82 	bl	8004054 <MCI_GetIalphabeta>
 8006150:	8020      	strh	r0, [r4, #0]
              break;
 8006152:	e022      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 8006154:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8006158:	d14e      	bne.n	80061f8 <RI_GetRegisterMotor1+0x4c4>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 800615a:	489e      	ldr	r0, [pc, #632]	@ (80063d4 <RI_GetRegisterMotor1+0x6a0>)
 800615c:	f004 f86c 	bl	800a238 <VBS_GetAvBusVoltage_V>
 8006160:	8020      	strh	r0, [r4, #0]
              break;
 8006162:	e01a      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 8006164:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8006168:	4298      	cmp	r0, r3
 800616a:	f040 82fd 	bne.w	8006768 <RI_GetRegisterMotor1+0xa34>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIqHandle_M1);
 800616e:	489a      	ldr	r0, [pc, #616]	@ (80063d8 <RI_GetRegisterMotor1+0x6a4>)
 8006170:	f004 fa66 	bl	800a640 <PID_GetKPDivisorPOW2>
 8006174:	8020      	strh	r0, [r4, #0]
              break;
 8006176:	e010      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 8006178:	f241 4350 	movw	r3, #5200	@ 0x1450
 800617c:	4298      	cmp	r0, r3
 800617e:	f040 82f3 	bne.w	8006768 <RI_GetRegisterMotor1+0xa34>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 8006182:	4893      	ldr	r0, [pc, #588]	@ (80063d0 <RI_GetRegisterMotor1+0x69c>)
 8006184:	f004 fa5c 	bl	800a640 <PID_GetKPDivisorPOW2>
 8006188:	8020      	strh	r0, [r4, #0]
              break;
 800618a:	e006      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 800618c:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 8006190:	f000 8278 	beq.w	8006684 <RI_GetRegisterMotor1+0x950>
 8006194:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8006198:	d104      	bne.n	80061a4 <RI_GetRegisterMotor1+0x470>
    uint8_t retVal = MCP_CMD_OK;
 800619a:	2000      	movs	r0, #0
          *size = 2;
 800619c:	2302      	movs	r3, #2
 800619e:	802b      	strh	r3, [r5, #0]
  }
 80061a0:	b015      	add	sp, #84	@ 0x54
 80061a2:	bd30      	pop	{r4, r5, pc}
 80061a4:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 80061a8:	f040 82de 	bne.w	8006768 <RI_GetRegisterMotor1+0xa34>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).alpha;
 80061ac:	488b      	ldr	r0, [pc, #556]	@ (80063dc <RI_GetRegisterMotor1+0x6a8>)
 80061ae:	f005 ff69 	bl	800c084 <STO_PLL_GetEstimatedBemf>
 80061b2:	8020      	strh	r0, [r4, #0]
              break;
 80061b4:	e7f1      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 80061b6:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 80061ba:	f000 826a 	beq.w	8006692 <RI_GetRegisterMotor1+0x95e>
 80061be:	d937      	bls.n	8006230 <RI_GetRegisterMotor1+0x4fc>
 80061c0:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 80061c4:	d12b      	bne.n	800621e <RI_GetRegisterMotor1+0x4ea>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 80061c6:	4885      	ldr	r0, [pc, #532]	@ (80063dc <RI_GetRegisterMotor1+0x6a8>)
 80061c8:	f005 fc0a 	bl	800b9e0 <SPD_GetS16Speed>
 80061cc:	8020      	strh	r0, [r4, #0]
              break;
 80061ce:	e7e4      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 80061d0:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 80061d4:	f040 82c8 	bne.w	8006768 <RI_GetRegisterMotor1+0xa34>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 80061d8:	487c      	ldr	r0, [pc, #496]	@ (80063cc <RI_GetRegisterMotor1+0x698>)
 80061da:	f7fd ff49 	bl	8004070 <MCI_GetIqd>
 80061de:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80061e2:	8023      	strh	r3, [r4, #0]
              break;
 80061e4:	e7d9      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 80061e6:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 80061ea:	4298      	cmp	r0, r3
 80061ec:	d10d      	bne.n	800620a <RI_GetRegisterMotor1+0x4d6>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 80061ee:	4878      	ldr	r0, [pc, #480]	@ (80063d0 <RI_GetRegisterMotor1+0x69c>)
 80061f0:	f004 fa50 	bl	800a694 <PID_GetKDDivisorPOW2>
 80061f4:	8020      	strh	r0, [r4, #0]
              break;
 80061f6:	e7d0      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 80061f8:	f5b0 6fba 	cmp.w	r0, #1488	@ 0x5d0
 80061fc:	f040 82b4 	bne.w	8006768 <RI_GetRegisterMotor1+0xa34>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 8006200:	4877      	ldr	r0, [pc, #476]	@ (80063e0 <RI_GetRegisterMotor1+0x6ac>)
 8006202:	f004 f9f5 	bl	800a5f0 <NTC_GetAvTemp_C>
 8006206:	8020      	strh	r0, [r4, #0]
              break;
 8006208:	e7c7      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 800620a:	f241 5310 	movw	r3, #5392	@ 0x1510
 800620e:	4298      	cmp	r0, r3
 8006210:	f040 82aa 	bne.w	8006768 <RI_GetRegisterMotor1+0xa34>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIdHandle_M1);
 8006214:	4873      	ldr	r0, [pc, #460]	@ (80063e4 <RI_GetRegisterMotor1+0x6b0>)
 8006216:	f004 fa13 	bl	800a640 <PID_GetKPDivisorPOW2>
 800621a:	8020      	strh	r0, [r4, #0]
              break;
 800621c:	e7bd      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 800621e:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 8006222:	f040 82a1 	bne.w	8006768 <RI_GetRegisterMotor1+0xa34>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).alpha;
 8006226:	486d      	ldr	r0, [pc, #436]	@ (80063dc <RI_GetRegisterMotor1+0x6a8>)
 8006228:	f005 ff38 	bl	800c09c <STO_PLL_GetEstimatedCurrent>
 800622c:	8020      	strh	r0, [r4, #0]
              break;
 800622e:	e7b4      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 8006230:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 8006234:	d104      	bne.n	8006240 <RI_GetRegisterMotor1+0x50c>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8006236:	4865      	ldr	r0, [pc, #404]	@ (80063cc <RI_GetRegisterMotor1+0x698>)
 8006238:	f7fd ff44 	bl	80040c4 <MCI_GetValphabeta>
 800623c:	8020      	strh	r0, [r4, #0]
              break;
 800623e:	e7ac      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 8006240:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 8006244:	f040 8290 	bne.w	8006768 <RI_GetRegisterMotor1+0xa34>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8006248:	4860      	ldr	r0, [pc, #384]	@ (80063cc <RI_GetRegisterMotor1+0x698>)
 800624a:	f7fd ff3b 	bl	80040c4 <MCI_GetValphabeta>
 800624e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8006252:	8023      	strh	r3, [r4, #0]
              break;
 8006254:	e7a1      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 8006256:	f241 7318 	movw	r3, #5912	@ 0x1718
 800625a:	4298      	cmp	r0, r3
 800625c:	f000 81c7 	beq.w	80065ee <RI_GetRegisterMotor1+0x8ba>
 8006260:	f241 7358 	movw	r3, #5976	@ 0x1758
 8006264:	4298      	cmp	r0, r3
 8006266:	f040 817e 	bne.w	8006566 <RI_GetRegisterMotor1+0x832>
  return MCM_floatToIntBit(pHandle->fKe);
 800626a:	4b5f      	ldr	r3, [pc, #380]	@ (80063e8 <RI_GetRegisterMotor1+0x6b4>)
 800626c:	ed93 0a1b 	vldr	s0, [r3, #108]	@ 0x6c
 8006270:	f7fd fff4 	bl	800425c <MCM_floatToIntBit>
              *regdataU32 = SCC_GetKe(&SCC);
 8006274:	6020      	str	r0, [r4, #0]
              break;
 8006276:	e5dd      	b.n	8005e34 <RI_GetRegisterMotor1+0x100>
 8006278:	2898      	cmp	r0, #152	@ 0x98
 800627a:	f000 81de 	beq.w	800663a <RI_GetRegisterMotor1+0x906>
 800627e:	d939      	bls.n	80062f4 <RI_GetRegisterMotor1+0x5c0>
 8006280:	28d8      	cmp	r0, #216	@ 0xd8
 8006282:	f000 81cf 	beq.w	8006624 <RI_GetRegisterMotor1+0x8f0>
 8006286:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 800628a:	f040 816c 	bne.w	8006566 <RI_GetRegisterMotor1+0x832>
static inline int32_t STO_PLL_GetObservedBemfLevel(STO_PLL_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
 800628e:	4b53      	ldr	r3, [pc, #332]	@ (80063dc <RI_GetRegisterMotor1+0x6a8>)
 8006290:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
              *regdata32 = STO_PLL_GetObservedBemfLevel(&STO_PLL_M1);
 8006294:	6023      	str	r3, [r4, #0]
              break;
 8006296:	e5cd      	b.n	8005e34 <RI_GetRegisterMotor1+0x100>
 8006298:	f641 13d8 	movw	r3, #6616	@ 0x19d8
 800629c:	4298      	cmp	r0, r3
 800629e:	f43f adc6 	beq.w	8005e2e <RI_GetRegisterMotor1+0xfa>
 80062a2:	d844      	bhi.n	800632e <RI_GetRegisterMotor1+0x5fa>
 80062a4:	f641 1318 	movw	r3, #6424	@ 0x1918
 80062a8:	4298      	cmp	r0, r3
 80062aa:	f000 8194 	beq.w	80065d6 <RI_GetRegisterMotor1+0x8a2>
 80062ae:	d92f      	bls.n	8006310 <RI_GetRegisterMotor1+0x5dc>
 80062b0:	f641 1358 	movw	r3, #6488	@ 0x1958
 80062b4:	4298      	cmp	r0, r3
 80062b6:	f000 81ad 	beq.w	8006614 <RI_GetRegisterMotor1+0x8e0>
 80062ba:	f641 1398 	movw	r3, #6552	@ 0x1998
 80062be:	4298      	cmp	r0, r3
 80062c0:	f040 8151 	bne.w	8006566 <RI_GetRegisterMotor1+0x832>
  return (pHandle->fF * fFact * pHandle->fKe) / (pHandle->pOTT_Params_str->fRshunt 
 80062c4:	4b49      	ldr	r3, [pc, #292]	@ (80063ec <RI_GetRegisterMotor1+0x6b8>)
 80062c6:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80063f0 <RI_GetRegisterMotor1+0x6bc>
 80062ca:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80062ce:	edd3 7a08 	vldr	s15, [r3, #32]
 80062d2:	edd3 5a26 	vldr	s11, [r3, #152]	@ 0x98
                                                * pHandle->pOTT_Params_str->fAmplificationGain);
 80062d6:	ed92 7a13 	vldr	s14, [r2, #76]	@ 0x4c
 80062da:	ed92 6a14 	vldr	s12, [r2, #80]	@ 0x50
  return (pHandle->fF * fFact * pHandle->fKe) / (pHandle->pOTT_Params_str->fRshunt 
 80062de:	ee67 7aa5 	vmul.f32	s15, s15, s11
                                                * pHandle->pOTT_Params_str->fAmplificationGain);
 80062e2:	ee27 7a06 	vmul.f32	s14, s14, s12
  return (pHandle->fF * fFact * pHandle->fKe) / (pHandle->pOTT_Params_str->fRshunt 
 80062e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
              *regdataU32 = ReadVal.U32_Val;
 80062ea:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80062ee:	edc4 7a00 	vstr	s15, [r4]
              break;
 80062f2:	e59f      	b.n	8005e34 <RI_GetRegisterMotor1+0x100>
 80062f4:	2818      	cmp	r0, #24
 80062f6:	f000 8188 	beq.w	800660a <RI_GetRegisterMotor1+0x8d6>
 80062fa:	2858      	cmp	r0, #88	@ 0x58
 80062fc:	f040 8133 	bne.w	8006566 <RI_GetRegisterMotor1+0x832>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8006300:	4832      	ldr	r0, [pc, #200]	@ (80063cc <RI_GetRegisterMotor1+0x698>)
 8006302:	f7fd fe91 	bl	8004028 <MCI_GetAvrgMecSpeedUnit>
 8006306:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800630a:	0040      	lsls	r0, r0, #1
 800630c:	6020      	str	r0, [r4, #0]
              break;
 800630e:	e591      	b.n	8005e34 <RI_GetRegisterMotor1+0x100>
 8006310:	f641 0398 	movw	r3, #6296	@ 0x1898
 8006314:	4298      	cmp	r0, r3
 8006316:	f000 81a6 	beq.w	8006666 <RI_GetRegisterMotor1+0x932>
 800631a:	f641 03d8 	movw	r3, #6360	@ 0x18d8
 800631e:	4298      	cmp	r0, r3
 8006320:	f040 8121 	bne.w	8006566 <RI_GetRegisterMotor1+0x832>
  return pHandle->wNominalSpeed;
 8006324:	4b30      	ldr	r3, [pc, #192]	@ (80063e8 <RI_GetRegisterMotor1+0x6b4>)
 8006326:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
              *regdata32 = SCC_GetNominalSpeed(&SCC);
 800632a:	6023      	str	r3, [r4, #0]
              break;
 800632c:	e582      	b.n	8005e34 <RI_GetRegisterMotor1+0x100>
 800632e:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8006332:	4298      	cmp	r0, r3
 8006334:	f000 8146 	beq.w	80065c4 <RI_GetRegisterMotor1+0x890>
 8006338:	d90c      	bls.n	8006354 <RI_GetRegisterMotor1+0x620>
 800633a:	f641 5318 	movw	r3, #7448	@ 0x1d18
 800633e:	4298      	cmp	r0, r3
 8006340:	f040 8111 	bne.w	8006566 <RI_GetRegisterMotor1+0x832>
              ReadVal.Float_Val=SCC_GetResistorOffset(&SCC);
 8006344:	4828      	ldr	r0, [pc, #160]	@ (80063e8 <RI_GetRegisterMotor1+0x6b4>)
 8006346:	f7fc fad1 	bl	80028ec <SCC_GetResistorOffset>
 800634a:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdata32 =ReadVal.U32_Val;
 800634e:	9b01      	ldr	r3, [sp, #4]
 8006350:	6023      	str	r3, [r4, #0]
              break;
 8006352:	e56f      	b.n	8005e34 <RI_GetRegisterMotor1+0x100>
 8006354:	f641 2318 	movw	r3, #6680	@ 0x1a18
 8006358:	4298      	cmp	r0, r3
 800635a:	f000 8168 	beq.w	800662e <RI_GetRegisterMotor1+0x8fa>
 800635e:	f641 2358 	movw	r3, #6744	@ 0x1a58
 8006362:	4298      	cmp	r0, r3
 8006364:	f040 80ff 	bne.w	8006566 <RI_GetRegisterMotor1+0x832>
  return pHandle->wAccRPMs;
 8006368:	4b1f      	ldr	r3, [pc, #124]	@ (80063e8 <RI_GetRegisterMotor1+0x6b4>)
              *regdata32 = SCC_GetEstMaxAcceleration(&SCC);
 800636a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800636e:	6023      	str	r3, [r4, #0]
              break;
 8006370:	e560      	b.n	8005e34 <RI_GetRegisterMotor1+0x100>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8006372:	2008      	movs	r0, #8
  }
 8006374:	b015      	add	sp, #84	@ 0x54
 8006376:	bd30      	pop	{r4, r5, pc}
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8006378:	4b1e      	ldr	r3, [pc, #120]	@ (80063f4 <RI_GetRegisterMotor1+0x6c0>)
 800637a:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 800637c:	2301      	movs	r3, #1
 800637e:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8006380:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8006384:	f992 2024 	ldrsb.w	r2, [r2, #36]	@ 0x24
 8006388:	b17a      	cbz	r2, 80063aa <RI_GetRegisterMotor1+0x676>
 800638a:	fa1f fc8c 	uxth.w	ip, ip
 800638e:	e008      	b.n	80063a2 <RI_GetRegisterMotor1+0x66e>
    *tempdestString = *tempsrcString;
 8006390:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8006394:	882b      	ldrh	r3, [r5, #0]
 8006396:	3301      	adds	r3, #1
 8006398:	b29b      	uxth	r3, r3
 800639a:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800639c:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 80063a0:	b11a      	cbz	r2, 80063aa <RI_GetRegisterMotor1+0x676>
 80063a2:	459c      	cmp	ip, r3
 80063a4:	d8f4      	bhi.n	8006390 <RI_GetRegisterMotor1+0x65c>
    retVal = MCP_ERROR_STRING_FORMAT;
 80063a6:	2006      	movs	r0, #6
 80063a8:	e4e2      	b.n	8005d70 <RI_GetRegisterMotor1+0x3c>
    *tempdestString = (int8_t)0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	7023      	strb	r3, [r4, #0]
  uint8_t retVal = MCP_CMD_OK;
 80063ae:	2000      	movs	r0, #0
 80063b0:	e4de      	b.n	8005d70 <RI_GetRegisterMotor1+0x3c>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 80063b2:	4a11      	ldr	r2, [pc, #68]	@ (80063f8 <RI_GetRegisterMotor1+0x6c4>)
  *size= 1U ; /* /0 is the min String size */
 80063b4:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 80063b6:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 80063b8:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80063ba:	f991 2000 	ldrsb.w	r2, [r1]
 80063be:	2a00      	cmp	r2, #0
 80063c0:	d0f3      	beq.n	80063aa <RI_GetRegisterMotor1+0x676>
 80063c2:	fa1f fc8c 	uxth.w	ip, ip
 80063c6:	e023      	b.n	8006410 <RI_GetRegisterMotor1+0x6dc>
 80063c8:	200006b8 	.word	0x200006b8
 80063cc:	20000000 	.word	0x20000000
 80063d0:	20000954 	.word	0x20000954
 80063d4:	20000990 	.word	0x20000990
 80063d8:	20000928 	.word	0x20000928
 80063dc:	20000684 	.word	0x20000684
 80063e0:	200009bc 	.word	0x200009bc
 80063e4:	200008fc 	.word	0x200008fc
 80063e8:	200000f0 	.word	0x200000f0
 80063ec:	20000038 	.word	0x20000038
 80063f0:	351e15cb 	.word	0x351e15cb
 80063f4:	20000a24 	.word	0x20000a24
 80063f8:	20000a2c 	.word	0x20000a2c
    *tempdestString = *tempsrcString;
 80063fc:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8006400:	882b      	ldrh	r3, [r5, #0]
 8006402:	3301      	adds	r3, #1
 8006404:	b29b      	uxth	r3, r3
 8006406:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8006408:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 800640c:	2a00      	cmp	r2, #0
 800640e:	d0cc      	beq.n	80063aa <RI_GetRegisterMotor1+0x676>
 8006410:	459c      	cmp	ip, r3
 8006412:	d8f3      	bhi.n	80063fc <RI_GetRegisterMotor1+0x6c8>
 8006414:	e7c7      	b.n	80063a6 <RI_GetRegisterMotor1+0x672>
 8006416:	200f      	movs	r0, #15
 8006418:	e4e0      	b.n	8005ddc <RI_GetRegisterMotor1+0xa8>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 800641a:	4ab9      	ldr	r2, [pc, #740]	@ (8006700 <RI_GetRegisterMotor1+0x9cc>)
 800641c:	6850      	ldr	r0, [r2, #4]
 800641e:	6814      	ldr	r4, [r2, #0]
 8006420:	6891      	ldr	r1, [r2, #8]
 8006422:	68d2      	ldr	r2, [r2, #12]
 8006424:	60da      	str	r2, [r3, #12]
 8006426:	6058      	str	r0, [r3, #4]
 8006428:	601c      	str	r4, [r3, #0]
 800642a:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 800642c:	2000      	movs	r0, #0
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 800642e:	230e      	movs	r3, #14
 8006430:	e4bd      	b.n	8005dae <RI_GetRegisterMotor1+0x7a>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 8006432:	4ab4      	ldr	r2, [pc, #720]	@ (8006704 <RI_GetRegisterMotor1+0x9d0>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8006434:	6812      	ldr	r2, [r2, #0]
 8006436:	6850      	ldr	r0, [r2, #4]
 8006438:	6814      	ldr	r4, [r2, #0]
 800643a:	6891      	ldr	r1, [r2, #8]
 800643c:	68d2      	ldr	r2, [r2, #12]
 800643e:	60da      	str	r2, [r3, #12]
 8006440:	6058      	str	r0, [r3, #4]
 8006442:	601c      	str	r4, [r3, #0]
 8006444:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8006446:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8006448:	2312      	movs	r3, #18
 800644a:	e4b0      	b.n	8005dae <RI_GetRegisterMotor1+0x7a>
 800644c:	2005      	movs	r0, #5
 800644e:	e4c7      	b.n	8005de0 <RI_GetRegisterMotor1+0xac>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8006450:	4608      	mov	r0, r1
 8006452:	e48d      	b.n	8005d70 <RI_GetRegisterMotor1+0x3c>
        *size = (*rawSize) + 2U;
 8006454:	8823      	ldrh	r3, [r4, #0]
 8006456:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8006458:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 800645a:	b29b      	uxth	r3, r3
 800645c:	e4a7      	b.n	8005dae <RI_GetRegisterMotor1+0x7a>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800645e:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8006462:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8006464:	f1bc 0f0f 	cmp.w	ip, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8006468:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800646a:	f200 809d 	bhi.w	80065a8 <RI_GetRegisterMotor1+0x874>
 800646e:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8006470:	2008      	movs	r0, #8
 8006472:	e49c      	b.n	8005dae <RI_GetRegisterMotor1+0x7a>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8006474:	48a4      	ldr	r0, [pc, #656]	@ (8006708 <RI_GetRegisterMotor1+0x9d4>)
 8006476:	f7fd fdc7 	bl	8004008 <MCI_GetLastRampFinalSpeed>
 800647a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800647e:	0043      	lsls	r3, r0, #1
 8006480:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8006484:	48a0      	ldr	r0, [pc, #640]	@ (8006708 <RI_GetRegisterMotor1+0x9d4>)
 8006486:	f7fd fdc7 	bl	8004018 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 800648a:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 800648c:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 800648e:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8006490:	2000      	movs	r0, #0
            break;
 8006492:	2308      	movs	r3, #8
 8006494:	e48b      	b.n	8005dae <RI_GetRegisterMotor1+0x7a>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8006496:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 800649a:	223c      	movs	r2, #60	@ 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800649c:	f1bc 0f3d 	cmp.w	ip, #61	@ 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 80064a0:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80064a2:	d865      	bhi.n	8006570 <RI_GetRegisterMotor1+0x83c>
 80064a4:	233e      	movs	r3, #62	@ 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80064a6:	2008      	movs	r0, #8
 80064a8:	e481      	b.n	8005dae <RI_GetRegisterMotor1+0x7a>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80064aa:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 80064ae:	2328      	movs	r3, #40	@ 0x28
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80064b0:	f1bc 0f29 	cmp.w	ip, #41	@ 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 80064b4:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80064b6:	d958      	bls.n	800656a <RI_GetRegisterMotor1+0x836>
    retValue = false;
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 80064b8:	4b94      	ldr	r3, [pc, #592]	@ (800670c <RI_GetRegisterMotor1+0x9d8>)
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80064ba:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80064be:	f9b3 0010 	ldrsh.w	r0, [r3, #16]
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 80064c2:	8999      	ldrh	r1, [r3, #12]
                *durationms  = revUpPhase.hDurationms;
 80064c4:	8121      	strh	r1, [r4, #8]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80064c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 80064ca:	80e0      	strh	r0, [r4, #6]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80064cc:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 80064ce:	f9b3 001c 	ldrsh.w	r0, [r3, #28]
 80064d2:	f8c4 2002 	str.w	r2, [r4, #2]
 80064d6:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 80064da:	8b19      	ldrh	r1, [r3, #24]
                *durationms  = revUpPhase.hDurationms;
 80064dc:	8221      	strh	r1, [r4, #16]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80064de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 80064e2:	81e0      	strh	r0, [r4, #14]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80064e4:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 80064e6:	f9b3 0028 	ldrsh.w	r0, [r3, #40]	@ 0x28
 80064ea:	f8c4 200a 	str.w	r2, [r4, #10]
 80064ee:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 80064f2:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
                *durationms  = revUpPhase.hDurationms;
 80064f4:	8321      	strh	r1, [r4, #24]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80064f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 80064fa:	82e0      	strh	r0, [r4, #22]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80064fc:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 80064fe:	f9b3 0034 	ldrsh.w	r0, [r3, #52]	@ 0x34
 8006502:	f8c4 2012 	str.w	r2, [r4, #18]
 8006506:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	@ 0x32
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 800650a:	8e19      	ldrh	r1, [r3, #48]	@ 0x30
                *durationms  = revUpPhase.hDurationms;
 800650c:	8421      	strh	r1, [r4, #32]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 800650e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8006512:	83e0      	strh	r0, [r4, #30]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8006514:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8006516:	f9b3 0040 	ldrsh.w	r0, [r3, #64]	@ 0x40
 800651a:	f8c4 201a 	str.w	r2, [r4, #26]
 800651e:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	@ 0x3e
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8006522:	8f99      	ldrh	r1, [r3, #60]	@ 0x3c
                *durationms  = revUpPhase.hDurationms;
 8006524:	8521      	strh	r1, [r4, #40]	@ 0x28
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8006526:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800652a:	0052      	lsls	r2, r2, #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 800652c:	84e0      	strh	r0, [r4, #38]	@ 0x26
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 800652e:	f8c4 2022 	str.w	r2, [r4, #34]	@ 0x22
                *durationms  = revUpPhase.hDurationms;
 8006532:	232a      	movs	r3, #42	@ 0x2a
    uint8_t retVal = MCP_CMD_OK;
 8006534:	2000      	movs	r0, #0
 8006536:	e43a      	b.n	8005dae <RI_GetRegisterMotor1+0x7a>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8006538:	4873      	ldr	r0, [pc, #460]	@ (8006708 <RI_GetRegisterMotor1+0x9d4>)
 800653a:	f7fd fcef 	bl	8003f1c <MCI_GetSTMState>
              break;
 800653e:	e44d      	b.n	8005ddc <RI_GetRegisterMotor1+0xa8>
  return ((uint8_t)pHandle->bPhaseNbr);
 8006540:	4b72      	ldr	r3, [pc, #456]	@ (800670c <RI_GetRegisterMotor1+0x9d8>)
 8006542:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
              break;
 8006546:	e449      	b.n	8005ddc <RI_GetRegisterMotor1+0xa8>
              state = SCC_GetState(&SCC);
 8006548:	4871      	ldr	r0, [pc, #452]	@ (8006710 <RI_GetRegisterMotor1+0x9dc>)
 800654a:	f7fb fd51 	bl	8001ff0 <SCC_GetState>
  uint8_t retVal = pHandle->bState;
 800654e:	4b71      	ldr	r3, [pc, #452]	@ (8006714 <RI_GetRegisterMotor1+0x9e0>)
              state += OTT_GetState (&OTT);
 8006550:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006554:	4418      	add	r0, r3
 8006556:	b2c0      	uxtb	r0, r0
              break;
 8006558:	e440      	b.n	8005ddc <RI_GetRegisterMotor1+0xa8>
  return pHandle->pSCC_Params_str->bFOCRepRate;
 800655a:	4b6d      	ldr	r3, [pc, #436]	@ (8006710 <RI_GetRegisterMotor1+0x9dc>)
 800655c:	f8d3 3548 	ldr.w	r3, [r3, #1352]	@ 0x548
 8006560:	f893 004a 	ldrb.w	r0, [r3, #74]	@ 0x4a
              break;
 8006564:	e43a      	b.n	8005ddc <RI_GetRegisterMotor1+0xa8>
 8006566:	2005      	movs	r0, #5
 8006568:	e465      	b.n	8005e36 <RI_GetRegisterMotor1+0x102>
 800656a:	232a      	movs	r3, #42	@ 0x2a
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800656c:	2008      	movs	r0, #8
 800656e:	e41e      	b.n	8005dae <RI_GetRegisterMotor1+0x7a>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 8006570:	4a69      	ldr	r2, [pc, #420]	@ (8006718 <RI_GetRegisterMotor1+0x9e4>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
 8006578:	6814      	ldr	r4, [r2, #0]
 800657a:	6850      	ldr	r0, [r2, #4]
 800657c:	6891      	ldr	r1, [r2, #8]
 800657e:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8006582:	f8c3 c00c 	str.w	ip, [r3, #12]
 8006586:	3210      	adds	r2, #16
 8006588:	4572      	cmp	r2, lr
 800658a:	601c      	str	r4, [r3, #0]
 800658c:	6058      	str	r0, [r3, #4]
 800658e:	6099      	str	r1, [r3, #8]
 8006590:	f103 0310 	add.w	r3, r3, #16
 8006594:	d1f0      	bne.n	8006578 <RI_GetRegisterMotor1+0x844>
 8006596:	6810      	ldr	r0, [r2, #0]
 8006598:	6851      	ldr	r1, [r2, #4]
 800659a:	6892      	ldr	r2, [r2, #8]
 800659c:	609a      	str	r2, [r3, #8]
 800659e:	6018      	str	r0, [r3, #0]
 80065a0:	6059      	str	r1, [r3, #4]
    uint8_t retVal = MCP_CMD_OK;
 80065a2:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80065a4:	233e      	movs	r3, #62	@ 0x3e
 80065a6:	e402      	b.n	8005dae <RI_GetRegisterMotor1+0x7a>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 80065a8:	4a5c      	ldr	r2, [pc, #368]	@ (800671c <RI_GetRegisterMotor1+0x9e8>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 80065aa:	6812      	ldr	r2, [r2, #0]
 80065ac:	6810      	ldr	r0, [r2, #0]
 80065ae:	6851      	ldr	r1, [r2, #4]
 80065b0:	6894      	ldr	r4, [r2, #8]
 80065b2:	609c      	str	r4, [r3, #8]
 80065b4:	6018      	str	r0, [r3, #0]
 80065b6:	6059      	str	r1, [r3, #4]
 80065b8:	8992      	ldrh	r2, [r2, #12]
 80065ba:	819a      	strh	r2, [r3, #12]
    uint8_t retVal = MCP_CMD_OK;
 80065bc:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 80065be:	2310      	movs	r3, #16
 80065c0:	f7ff bbf5 	b.w	8005dae <RI_GetRegisterMotor1+0x7a>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 80065c4:	4b56      	ldr	r3, [pc, #344]	@ (8006720 <RI_GetRegisterMotor1+0x9ec>)
 80065c6:	6818      	ldr	r0, [r3, #0]
 80065c8:	f004 f8c8 	bl	800a75c <PQD_GetAvrgElMotorPowerW>
 80065cc:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 80065d0:	9b01      	ldr	r3, [sp, #4]
 80065d2:	6023      	str	r3, [r4, #0]
              break;
 80065d4:	e42e      	b.n	8005e34 <RI_GetRegisterMotor1+0x100>
  return pHandle->fCurrentBW;
 80065d6:	4b4e      	ldr	r3, [pc, #312]	@ (8006710 <RI_GetRegisterMotor1+0x9dc>)
              *regdataU32 = ReadVal.U32_Val;
 80065d8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80065dc:	6023      	str	r3, [r4, #0]
              break;
 80065de:	e429      	b.n	8005e34 <RI_GetRegisterMotor1+0x100>
  return MCM_floatToIntBit(pHandle->fBusV);
 80065e0:	4b4b      	ldr	r3, [pc, #300]	@ (8006710 <RI_GetRegisterMotor1+0x9dc>)
 80065e2:	ed93 0a18 	vldr	s0, [r3, #96]	@ 0x60
 80065e6:	f7fd fe39 	bl	800425c <MCM_floatToIntBit>
              *regdataU32 = SCC_GetVbus(&SCC);
 80065ea:	6020      	str	r0, [r4, #0]
              break;
 80065ec:	e422      	b.n	8005e34 <RI_GetRegisterMotor1+0x100>
  return MCM_floatToIntBit(pHandle->fLS);
 80065ee:	4b48      	ldr	r3, [pc, #288]	@ (8006710 <RI_GetRegisterMotor1+0x9dc>)
 80065f0:	ed93 0a1a 	vldr	s0, [r3, #104]	@ 0x68
 80065f4:	f7fd fe32 	bl	800425c <MCM_floatToIntBit>
              *regdataU32 = SCC_GetLs(&SCC);
 80065f8:	6020      	str	r0, [r4, #0]
              break;
 80065fa:	e41b      	b.n	8005e34 <RI_GetRegisterMotor1+0x100>
  return MCM_floatToIntBit(pHandle->fEstNominalSpdRPM);
 80065fc:	4b45      	ldr	r3, [pc, #276]	@ (8006714 <RI_GetRegisterMotor1+0x9e0>)
 80065fe:	ed93 0a14 	vldr	s0, [r3, #80]	@ 0x50
 8006602:	f7fd fe2b 	bl	800425c <MCM_floatToIntBit>
              *regdataU32 = OTT_GetNominalSpeed(&OTT);
 8006606:	6020      	str	r0, [r4, #0]
              break;
 8006608:	e414      	b.n	8005e34 <RI_GetRegisterMotor1+0x100>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 800660a:	483f      	ldr	r0, [pc, #252]	@ (8006708 <RI_GetRegisterMotor1+0x9d4>)
 800660c:	f7fd fcd0 	bl	8003fb0 <MCI_GetFaultState>
 8006610:	6020      	str	r0, [r4, #0]
              break;
 8006612:	e40f      	b.n	8005e34 <RI_GetRegisterMotor1+0x100>
  return (pHandle->fJ * fFact * pHandle->fKe) / (pHandle->pOTT_Params_str->fRshunt 
 8006614:	4b3f      	ldr	r3, [pc, #252]	@ (8006714 <RI_GetRegisterMotor1+0x9e0>)
 8006616:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8006724 <RI_GetRegisterMotor1+0x9f0>
 800661a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800661e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006622:	e656      	b.n	80062d2 <RI_GetRegisterMotor1+0x59e>
  return (pHandle->Est_Bemf_Level);
 8006624:	4b40      	ldr	r3, [pc, #256]	@ (8006728 <RI_GetRegisterMotor1+0x9f4>)
 8006626:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(&STO_PLL_M1);
 800662a:	6023      	str	r3, [r4, #0]
              break;
 800662c:	e402      	b.n	8005e34 <RI_GetRegisterMotor1+0x100>
  return pHandle->wMaxOLSpeed;
 800662e:	4b38      	ldr	r3, [pc, #224]	@ (8006710 <RI_GetRegisterMotor1+0x9dc>)
 8006630:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
              *regdata32 = SCC_GetEstMaxOLSpeed(&SCC);
 8006634:	6023      	str	r3, [r4, #0]
              break;
 8006636:	f7ff bbfd 	b.w	8005e34 <RI_GetRegisterMotor1+0x100>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 800663a:	4833      	ldr	r0, [pc, #204]	@ (8006708 <RI_GetRegisterMotor1+0x9d4>)
 800663c:	f7fd fcf8 	bl	8004030 <MCI_GetMecSpeedRefUnit>
 8006640:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006644:	0040      	lsls	r0, r0, #1
 8006646:	6020      	str	r0, [r4, #0]
              break;
 8006648:	f7ff bbf4 	b.w	8005e34 <RI_GetRegisterMotor1+0x100>
  return MCM_floatToIntBit(pHandle->fRS);
 800664c:	4b30      	ldr	r3, [pc, #192]	@ (8006710 <RI_GetRegisterMotor1+0x9dc>)
 800664e:	ed93 0a19 	vldr	s0, [r3, #100]	@ 0x64
 8006652:	f7fd fe03 	bl	800425c <MCM_floatToIntBit>
              *regdataU32 = SCC_GetRs(&SCC);
 8006656:	6020      	str	r0, [r4, #0]
              break;
 8006658:	f7ff bbec 	b.w	8005e34 <RI_GetRegisterMotor1+0x100>
  return pHandle->fBW;
 800665c:	4b2d      	ldr	r3, [pc, #180]	@ (8006714 <RI_GetRegisterMotor1+0x9e0>)
              *regdataU32 = ReadVal.U32_Val;
 800665e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006660:	6023      	str	r3, [r4, #0]
              break;
 8006662:	f7ff bbe7 	b.w	8005e34 <RI_GetRegisterMotor1+0x100>
  return pHandle->fLdLqRatio;
 8006666:	4b2a      	ldr	r3, [pc, #168]	@ (8006710 <RI_GetRegisterMotor1+0x9dc>)
              *regdataU32 = ReadVal.U32_Val;
 8006668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800666c:	6023      	str	r3, [r4, #0]
              break;
 800666e:	f7ff bbe1 	b.w	8005e34 <RI_GetRegisterMotor1+0x100>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8006672:	482d      	ldr	r0, [pc, #180]	@ (8006728 <RI_GetRegisterMotor1+0x9f4>)
 8006674:	aa13      	add	r2, sp, #76	@ 0x4c
 8006676:	a912      	add	r1, sp, #72	@ 0x48
 8006678:	f005 fd22 	bl	800c0c0 <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 800667c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8006680:	8023      	strh	r3, [r4, #0]
              break;
 8006682:	e58a      	b.n	800619a <RI_GetRegisterMotor1+0x466>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).beta;
 8006684:	4828      	ldr	r0, [pc, #160]	@ (8006728 <RI_GetRegisterMotor1+0x9f4>)
 8006686:	f005 fcfd 	bl	800c084 <STO_PLL_GetEstimatedBemf>
 800668a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800668e:	8023      	strh	r3, [r4, #0]
              break;
 8006690:	e583      	b.n	800619a <RI_GetRegisterMotor1+0x466>
static inline int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 8006692:	4b25      	ldr	r3, [pc, #148]	@ (8006728 <RI_GetRegisterMotor1+0x9f4>)
 8006694:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 8006698:	8023      	strh	r3, [r4, #0]
              break;
 800669a:	e57e      	b.n	800619a <RI_GetRegisterMotor1+0x466>
              *regdata16 = PID_GetKP(&PIDIdHandle_M1);
 800669c:	4823      	ldr	r0, [pc, #140]	@ (800672c <RI_GetRegisterMotor1+0x9f8>)
 800669e:	f003 ffc5 	bl	800a62c <PID_GetKP>
 80066a2:	8020      	strh	r0, [r4, #0]
              break;
 80066a4:	e579      	b.n	800619a <RI_GetRegisterMotor1+0x466>
              *regdata16 = PID_GetKP (&(&STO_PLL_M1)->PIRegulator);
 80066a6:	4822      	ldr	r0, [pc, #136]	@ (8006730 <RI_GetRegisterMotor1+0x9fc>)
 80066a8:	f003 ffc0 	bl	800a62c <PID_GetKP>
 80066ac:	8020      	strh	r0, [r4, #0]
              break;
 80066ae:	e574      	b.n	800619a <RI_GetRegisterMotor1+0x466>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 80066b0:	4820      	ldr	r0, [pc, #128]	@ (8006734 <RI_GetRegisterMotor1+0xa00>)
 80066b2:	f003 ffcf 	bl	800a654 <PID_GetKIDivisorPOW2>
 80066b6:	8020      	strh	r0, [r4, #0]
              break;
 80066b8:	e56f      	b.n	800619a <RI_GetRegisterMotor1+0x466>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 80066ba:	4813      	ldr	r0, [pc, #76]	@ (8006708 <RI_GetRegisterMotor1+0x9d4>)
 80066bc:	f7fd fce6 	bl	800408c <MCI_GetIqdref>
 80066c0:	8020      	strh	r0, [r4, #0]
              break;
 80066c2:	e56a      	b.n	800619a <RI_GetRegisterMotor1+0x466>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 80066c4:	4810      	ldr	r0, [pc, #64]	@ (8006708 <RI_GetRegisterMotor1+0x9d4>)
 80066c6:	f7fd fcc5 	bl	8004054 <MCI_GetIalphabeta>
 80066ca:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80066ce:	8023      	strh	r3, [r4, #0]
              break;
 80066d0:	e563      	b.n	800619a <RI_GetRegisterMotor1+0x466>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 80066d2:	480d      	ldr	r0, [pc, #52]	@ (8006708 <RI_GetRegisterMotor1+0x9d4>)
 80066d4:	f7fd fce8 	bl	80040a8 <MCI_GetVqd>
 80066d8:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80066dc:	8023      	strh	r3, [r4, #0]
              break;
 80066de:	e55c      	b.n	800619a <RI_GetRegisterMotor1+0x466>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIdHandle_M1);
 80066e0:	4812      	ldr	r0, [pc, #72]	@ (800672c <RI_GetRegisterMotor1+0x9f8>)
 80066e2:	f003 ffb7 	bl	800a654 <PID_GetKIDivisorPOW2>
 80066e6:	8020      	strh	r0, [r4, #0]
              break;
 80066e8:	e557      	b.n	800619a <RI_GetRegisterMotor1+0x466>
              *regdataU16 = PID_GetKPDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 80066ea:	4811      	ldr	r0, [pc, #68]	@ (8006730 <RI_GetRegisterMotor1+0x9fc>)
 80066ec:	f003 ffa8 	bl	800a640 <PID_GetKPDivisorPOW2>
 80066f0:	8020      	strh	r0, [r4, #0]
              break;
 80066f2:	e552      	b.n	800619a <RI_GetRegisterMotor1+0x466>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIqHandle_M1);
 80066f4:	4810      	ldr	r0, [pc, #64]	@ (8006738 <RI_GetRegisterMotor1+0xa04>)
 80066f6:	f003 ffad 	bl	800a654 <PID_GetKIDivisorPOW2>
 80066fa:	8020      	strh	r0, [r4, #0]
              break;
 80066fc:	e54d      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 80066fe:	bf00      	nop
 8006700:	20000a30 	.word	0x20000a30
 8006704:	20000a20 	.word	0x20000a20
 8006708:	20000000 	.word	0x20000000
 800670c:	20000850 	.word	0x20000850
 8006710:	200000f0 	.word	0x200000f0
 8006714:	20000038 	.word	0x20000038
 8006718:	20000a24 	.word	0x20000a24
 800671c:	20000a28 	.word	0x20000a28
 8006720:	20000028 	.word	0x20000028
 8006724:	351e15cb 	.word	0x351e15cb
 8006728:	20000684 	.word	0x20000684
 800672c:	200008fc 	.word	0x200008fc
 8006730:	200006b8 	.word	0x200006b8
 8006734:	20000954 	.word	0x20000954
 8006738:	20000928 	.word	0x20000928
              *regdata16 = MCI_GetIab(pMCIN).a;
 800673c:	480b      	ldr	r0, [pc, #44]	@ (800676c <RI_GetRegisterMotor1+0xa38>)
 800673e:	f7fd fc7b 	bl	8004038 <MCI_GetIab>
 8006742:	8020      	strh	r0, [r4, #0]
              break;
 8006744:	e529      	b.n	800619a <RI_GetRegisterMotor1+0x466>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).beta;
 8006746:	480a      	ldr	r0, [pc, #40]	@ (8006770 <RI_GetRegisterMotor1+0xa3c>)
 8006748:	f005 fca8 	bl	800c09c <STO_PLL_GetEstimatedCurrent>
 800674c:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8006750:	8023      	strh	r3, [r4, #0]
              break;
 8006752:	e522      	b.n	800619a <RI_GetRegisterMotor1+0x466>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 8006754:	4807      	ldr	r0, [pc, #28]	@ (8006774 <RI_GetRegisterMotor1+0xa40>)
 8006756:	f003 ff6d 	bl	800a634 <PID_GetKI>
 800675a:	8020      	strh	r0, [r4, #0]
              break;
 800675c:	e51d      	b.n	800619a <RI_GetRegisterMotor1+0x466>
              *regdata16 = PID_GetKP(&PIDIqHandle_M1);
 800675e:	4806      	ldr	r0, [pc, #24]	@ (8006778 <RI_GetRegisterMotor1+0xa44>)
 8006760:	f003 ff64 	bl	800a62c <PID_GetKP>
 8006764:	8020      	strh	r0, [r4, #0]
              break;
 8006766:	e518      	b.n	800619a <RI_GetRegisterMotor1+0x466>
 8006768:	2005      	movs	r0, #5
 800676a:	e517      	b.n	800619c <RI_GetRegisterMotor1+0x468>
 800676c:	20000000 	.word	0x20000000
 8006770:	20000684 	.word	0x20000684
 8006774:	20000954 	.word	0x20000954
 8006778:	20000928 	.word	0x20000928

0800677c <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 800677c:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8006780:	3808      	subs	r0, #8
 8006782:	b2c0      	uxtb	r0, r0
 8006784:	2810      	cmp	r0, #16
 8006786:	bf9a      	itte	ls
 8006788:	4b01      	ldrls	r3, [pc, #4]	@ (8006790 <RI_GetIDSize+0x14>)
 800678a:	5c18      	ldrbls	r0, [r3, r0]
 800678c:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 800678e:	4770      	bx	lr
 8006790:	0800c610 	.word	0x0800c610

08006794 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 8006794:	f000 0338 	and.w	r3, r0, #56	@ 0x38
 8006798:	2b10      	cmp	r3, #16
 800679a:	d003      	beq.n	80067a4 <RI_GetPtrReg+0x10>
 800679c:	4a43      	ldr	r2, [pc, #268]	@ (80068ac <RI_GetPtrReg+0x118>)
      }

      default:
      {
        *dataPtr = &nullData16;
        retVal = MCP_ERROR_UNKNOWN_REG;
 800679e:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80067a0:	600a      	str	r2, [r1, #0]
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 80067a2:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 80067a4:	f020 0007 	bic.w	r0, r0, #7
 80067a8:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 80067ac:	b283      	uxth	r3, r0
 80067ae:	d073      	beq.n	8006898 <RI_GetPtrReg+0x104>
 80067b0:	d80f      	bhi.n	80067d2 <RI_GetPtrReg+0x3e>
 80067b2:	f5b3 6f0d 	cmp.w	r3, #2256	@ 0x8d0
 80067b6:	d074      	beq.n	80068a2 <RI_GetPtrReg+0x10e>
 80067b8:	d824      	bhi.n	8006804 <RI_GetPtrReg+0x70>
 80067ba:	f5b3 6f05 	cmp.w	r3, #2128	@ 0x850
 80067be:	d058      	beq.n	8006872 <RI_GetPtrReg+0xde>
 80067c0:	d915      	bls.n	80067ee <RI_GetPtrReg+0x5a>
 80067c2:	f5b3 6f09 	cmp.w	r3, #2192	@ 0x890
 80067c6:	d1e9      	bne.n	800679c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 80067c8:	4b39      	ldr	r3, [pc, #228]	@ (80068b0 <RI_GetPtrReg+0x11c>)
 80067ca:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80067cc:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 80067ce:	3206      	adds	r2, #6
            break;
 80067d0:	e7e6      	b.n	80067a0 <RI_GetPtrReg+0xc>
 80067d2:	f5b3 6f35 	cmp.w	r3, #2896	@ 0xb50
 80067d6:	d049      	beq.n	800686c <RI_GetPtrReg+0xd8>
 80067d8:	d929      	bls.n	800682e <RI_GetPtrReg+0x9a>
 80067da:	f5b3 6f45 	cmp.w	r3, #3152	@ 0xc50
 80067de:	d041      	beq.n	8006864 <RI_GetPtrReg+0xd0>
 80067e0:	f5b3 6f49 	cmp.w	r3, #3216	@ 0xc90
 80067e4:	d119      	bne.n	800681a <RI_GetPtrReg+0x86>
 80067e6:	4a33      	ldr	r2, [pc, #204]	@ (80068b4 <RI_GetPtrReg+0x120>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80067e8:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80067ea:	2000      	movs	r0, #0
}
 80067ec:	4770      	bx	lr
 80067ee:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80067f2:	d04d      	beq.n	8006890 <RI_GetPtrReg+0xfc>
 80067f4:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 80067f8:	d1d0      	bne.n	800679c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80067fa:	4b2d      	ldr	r3, [pc, #180]	@ (80068b0 <RI_GetPtrReg+0x11c>)
 80067fc:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80067fe:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8006800:	3202      	adds	r2, #2
            break;
 8006802:	e7cd      	b.n	80067a0 <RI_GetPtrReg+0xc>
 8006804:	f5b3 6f15 	cmp.w	r3, #2384	@ 0x950
 8006808:	d038      	beq.n	800687c <RI_GetPtrReg+0xe8>
 800680a:	f5b3 6f19 	cmp.w	r3, #2448	@ 0x990
 800680e:	d119      	bne.n	8006844 <RI_GetPtrReg+0xb0>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8006810:	4b27      	ldr	r3, [pc, #156]	@ (80068b0 <RI_GetPtrReg+0x11c>)
 8006812:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8006814:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8006816:	3212      	adds	r2, #18
            break;
 8006818:	e7c2      	b.n	80067a0 <RI_GetPtrReg+0xc>
 800681a:	4824      	ldr	r0, [pc, #144]	@ (80068ac <RI_GetPtrReg+0x118>)
 800681c:	4a26      	ldr	r2, [pc, #152]	@ (80068b8 <RI_GetPtrReg+0x124>)
 800681e:	f5b3 6f39 	cmp.w	r3, #2960	@ 0xb90
 8006822:	bf16      	itet	ne
 8006824:	4602      	movne	r2, r0
 8006826:	2000      	moveq	r0, #0
 8006828:	2005      	movne	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 800682a:	600a      	str	r2, [r1, #0]
}
 800682c:	4770      	bx	lr
 800682e:	f5b3 6f25 	cmp.w	r3, #2640	@ 0xa50
 8006832:	d028      	beq.n	8006886 <RI_GetPtrReg+0xf2>
 8006834:	f5b3 6f29 	cmp.w	r3, #2704	@ 0xa90
 8006838:	d10c      	bne.n	8006854 <RI_GetPtrReg+0xc0>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 800683a:	4b1d      	ldr	r3, [pc, #116]	@ (80068b0 <RI_GetPtrReg+0x11c>)
 800683c:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800683e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8006840:	321c      	adds	r2, #28
            break;
 8006842:	e7ad      	b.n	80067a0 <RI_GetPtrReg+0xc>
 8006844:	f5b3 6f11 	cmp.w	r3, #2320	@ 0x910
 8006848:	d1a8      	bne.n	800679c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 800684a:	4b19      	ldr	r3, [pc, #100]	@ (80068b0 <RI_GetPtrReg+0x11c>)
 800684c:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800684e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8006850:	320e      	adds	r2, #14
            break;
 8006852:	e7a5      	b.n	80067a0 <RI_GetPtrReg+0xc>
 8006854:	f5b3 6f21 	cmp.w	r3, #2576	@ 0xa10
 8006858:	d1a0      	bne.n	800679c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 800685a:	4b15      	ldr	r3, [pc, #84]	@ (80068b0 <RI_GetPtrReg+0x11c>)
 800685c:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800685e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8006860:	3218      	adds	r2, #24
            break;
 8006862:	e79d      	b.n	80067a0 <RI_GetPtrReg+0xc>
 8006864:	4a15      	ldr	r2, [pc, #84]	@ (80068bc <RI_GetPtrReg+0x128>)
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8006866:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8006868:	2000      	movs	r0, #0
}
 800686a:	4770      	bx	lr
 800686c:	4a14      	ldr	r2, [pc, #80]	@ (80068c0 <RI_GetPtrReg+0x12c>)
  uint8_t retVal = MCP_CMD_OK;
 800686e:	2000      	movs	r0, #0
 8006870:	e796      	b.n	80067a0 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8006872:	4b0f      	ldr	r3, [pc, #60]	@ (80068b0 <RI_GetPtrReg+0x11c>)
 8006874:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8006876:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8006878:	3204      	adds	r2, #4
            break;
 800687a:	e791      	b.n	80067a0 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 800687c:	4b0c      	ldr	r3, [pc, #48]	@ (80068b0 <RI_GetPtrReg+0x11c>)
 800687e:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8006880:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8006882:	3210      	adds	r2, #16
            break;
 8006884:	e78c      	b.n	80067a0 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8006886:	4b0a      	ldr	r3, [pc, #40]	@ (80068b0 <RI_GetPtrReg+0x11c>)
 8006888:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800688a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 800688c:	321a      	adds	r2, #26
            break;
 800688e:	e787      	b.n	80067a0 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8006890:	4b07      	ldr	r3, [pc, #28]	@ (80068b0 <RI_GetPtrReg+0x11c>)
  uint8_t retVal = MCP_CMD_OK;
 8006892:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8006894:	685a      	ldr	r2, [r3, #4]
             break;
 8006896:	e783      	b.n	80067a0 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8006898:	4b05      	ldr	r3, [pc, #20]	@ (80068b0 <RI_GetPtrReg+0x11c>)
 800689a:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800689c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 800689e:	3216      	adds	r2, #22
            break;
 80068a0:	e77e      	b.n	80067a0 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 80068a2:	4b03      	ldr	r3, [pc, #12]	@ (80068b0 <RI_GetPtrReg+0x11c>)
 80068a4:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80068a6:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 80068a8:	320c      	adds	r2, #12
            break;
 80068aa:	e779      	b.n	80067a0 <RI_GetPtrReg+0xc>
 80068ac:	20002094 	.word	0x20002094
 80068b0:	20000000 	.word	0x20000000
 80068b4:	200006f6 	.word	0x200006f6
 80068b8:	20000690 	.word	0x20000690
 80068bc:	200006f4 	.word	0x200006f4
 80068c0:	20000688 	.word	0x20000688

080068c4 <RCM_RegisterRegConv>:
  * @param  regConv Pointer to the regular conversion parameters.
  *         Contains ADC, Channel and sampling time to be used.
  *
  */
void RCM_RegisterRegConv(RegConv_t *regConv)
{
 80068c4:	b470      	push	{r4, r5, r6}

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80068c6:	4e79      	ldr	r6, [pc, #484]	@ (8006aac <RCM_RegisterRegConv+0x1e8>)
 80068c8:	6832      	ldr	r2, [r6, #0]
 80068ca:	2a00      	cmp	r2, #0
 80068cc:	d035      	beq.n	800693a <RCM_RegisterRegConv+0x76>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80068ce:	7901      	ldrb	r1, [r0, #4]
 80068d0:	7913      	ldrb	r3, [r2, #4]
 80068d2:	4299      	cmp	r1, r3
 80068d4:	d01f      	beq.n	8006916 <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80068d6:	6874      	ldr	r4, [r6, #4]
 80068d8:	2c00      	cmp	r4, #0
 80068da:	f000 80c5 	beq.w	8006a68 <RCM_RegisterRegConv+0x1a4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80068de:	7923      	ldrb	r3, [r4, #4]
 80068e0:	428b      	cmp	r3, r1
  uint8_t handle = 255U;
 80068e2:	f04f 02ff 	mov.w	r2, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80068e6:	d030      	beq.n	800694a <RCM_RegisterRegConv+0x86>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80068e8:	68b5      	ldr	r5, [r6, #8]
 80068ea:	2d00      	cmp	r5, #0
 80068ec:	f000 80a2 	beq.w	8006a34 <RCM_RegisterRegConv+0x170>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80068f0:	792b      	ldrb	r3, [r5, #4]
 80068f2:	428b      	cmp	r3, r1
 80068f4:	d02f      	beq.n	8006956 <RCM_RegisterRegConv+0x92>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80068f6:	68f4      	ldr	r4, [r6, #12]
 80068f8:	2c00      	cmp	r4, #0
 80068fa:	f000 80a7 	beq.w	8006a4c <RCM_RegisterRegConv+0x188>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80068fe:	7923      	ldrb	r3, [r4, #4]
 8006900:	428b      	cmp	r3, r1
 8006902:	f000 80aa 	beq.w	8006a5a <RCM_RegisterRegConv+0x196>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8006906:	2a03      	cmp	r2, #3
 8006908:	bf88      	it	hi
 800690a:	22ff      	movhi	r2, #255	@ 0xff
 800690c:	f240 80b6 	bls.w	8006a7c <RCM_RegisterRegConv+0x1b8>
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
}
 8006910:	bc70      	pop	{r4, r5, r6}
  regConv->convHandle = handle;
 8006912:	7302      	strb	r2, [r0, #12]
}
 8006914:	4770      	bx	lr
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8006916:	6803      	ldr	r3, [r0, #0]
 8006918:	6812      	ldr	r2, [r2, #0]
 800691a:	4293      	cmp	r3, r2
 800691c:	d021      	beq.n	8006962 <RCM_RegisterRegConv+0x9e>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800691e:	6874      	ldr	r4, [r6, #4]
 8006920:	2c00      	cmp	r4, #0
 8006922:	d1dc      	bne.n	80068de <RCM_RegisterRegConv+0x1a>
 8006924:	68b5      	ldr	r5, [r6, #8]
      i++;
 8006926:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8006928:	2d00      	cmp	r5, #0
 800692a:	d1e1      	bne.n	80068f0 <RCM_RegisterRegConv+0x2c>
 800692c:	68f4      	ldr	r4, [r6, #12]
 800692e:	b1dc      	cbz	r4, 8006968 <RCM_RegisterRegConv+0xa4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8006930:	7925      	ldrb	r5, [r4, #4]
 8006932:	7901      	ldrb	r1, [r0, #4]
 8006934:	428d      	cmp	r5, r1
 8006936:	d115      	bne.n	8006964 <RCM_RegisterRegConv+0xa0>
 8006938:	e090      	b.n	8006a5c <RCM_RegisterRegConv+0x198>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800693a:	6874      	ldr	r4, [r6, #4]
 800693c:	2c00      	cmp	r4, #0
 800693e:	f000 80a5 	beq.w	8006a8c <RCM_RegisterRegConv+0x1c8>
 8006942:	7901      	ldrb	r1, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8006944:	7923      	ldrb	r3, [r4, #4]
 8006946:	428b      	cmp	r3, r1
 8006948:	d1ce      	bne.n	80068e8 <RCM_RegisterRegConv+0x24>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800694a:	6824      	ldr	r4, [r4, #0]
 800694c:	6803      	ldr	r3, [r0, #0]
 800694e:	42a3      	cmp	r3, r4
 8006950:	d1ca      	bne.n	80068e8 <RCM_RegisterRegConv+0x24>
      i++;
 8006952:	2201      	movs	r2, #1
 8006954:	e006      	b.n	8006964 <RCM_RegisterRegConv+0xa0>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8006956:	682c      	ldr	r4, [r5, #0]
 8006958:	6803      	ldr	r3, [r0, #0]
 800695a:	429c      	cmp	r4, r3
 800695c:	d1cb      	bne.n	80068f6 <RCM_RegisterRegConv+0x32>
      i++;
 800695e:	2202      	movs	r2, #2
 8006960:	e000      	b.n	8006964 <RCM_RegisterRegConv+0xa0>
    uint8_t i = 0;
 8006962:	2200      	movs	r2, #0
    while (i < RCM_MAX_CONV)
 8006964:	f04f 0400 	mov.w	r4, #0
 8006968:	f362 0407 	bfi	r4, r2, #0, #8
 800696c:	f362 240f 	bfi	r4, r2, #8, #8
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8006970:	4d4f      	ldr	r5, [pc, #316]	@ (8006ab0 <RCM_RegisterRegConv+0x1ec>)
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006972:	6899      	ldr	r1, [r3, #8]
      RCM_handle_array [handle] = regConv;
 8006974:	f846 0022 	str.w	r0, [r6, r2, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8006978:	2600      	movs	r6, #0
 800697a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
 800697e:	07ce      	lsls	r6, r1, #31
 8006980:	d422      	bmi.n	80069c8 <RCM_RegisterRegConv+0x104>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8006982:	6859      	ldr	r1, [r3, #4]
 8006984:	f021 0104 	bic.w	r1, r1, #4
 8006988:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800698a:	2104      	movs	r1, #4
 800698c:	6019      	str	r1, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800698e:	6859      	ldr	r1, [r3, #4]
 8006990:	f021 0120 	bic.w	r1, r1, #32
 8006994:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8006996:	2120      	movs	r1, #32
 8006998:	6019      	str	r1, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800699a:	6899      	ldr	r1, [r3, #8]
 800699c:	f021 4140 	bic.w	r1, r1, #3221225472	@ 0xc0000000
 80069a0:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80069a4:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 80069a8:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80069aa:	6899      	ldr	r1, [r3, #8]
 80069ac:	2900      	cmp	r1, #0
 80069ae:	dbfc      	blt.n	80069aa <RCM_RegisterRegConv+0xe6>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80069b0:	6819      	ldr	r1, [r3, #0]
 80069b2:	07cd      	lsls	r5, r1, #31
 80069b4:	d408      	bmi.n	80069c8 <RCM_RegisterRegConv+0x104>
  MODIFY_REG(ADCx->CR,
 80069b6:	4d3f      	ldr	r5, [pc, #252]	@ (8006ab4 <RCM_RegisterRegConv+0x1f0>)
 80069b8:	6899      	ldr	r1, [r3, #8]
 80069ba:	4029      	ands	r1, r5
 80069bc:	f041 0101 	orr.w	r1, r1, #1
 80069c0:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80069c2:	6819      	ldr	r1, [r3, #0]
 80069c4:	07c9      	lsls	r1, r1, #31
 80069c6:	d5f7      	bpl.n	80069b8 <RCM_RegisterRegConv+0xf4>
      RCM_NoInj_array[handle].enable = false;
 80069c8:	4d3b      	ldr	r5, [pc, #236]	@ (8006ab8 <RCM_RegisterRegConv+0x1f4>)
 80069ca:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80069ce:	0049      	lsls	r1, r1, #1
      RCM_NoInj_array[handle].prev = handle;
 80069d0:	1d2e      	adds	r6, r5, #4
 80069d2:	5274      	strh	r4, [r6, r1]
      RCM_NoInj_array[handle].enable = false;
 80069d4:	2400      	movs	r4, #0
 80069d6:	546c      	strb	r4, [r5, r1]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80069d8:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80069da:	f024 040f 	bic.w	r4, r4, #15
 80069de:	631c      	str	r4, [r3, #48]	@ 0x30
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80069e0:	f890 c004 	ldrb.w	ip, [r0, #4]
 80069e4:	2101      	movs	r1, #1
 80069e6:	fa01 f10c 	lsl.w	r1, r1, ip
 80069ea:	f1bc 0f09 	cmp.w	ip, #9
 80069ee:	ea41 618c 	orr.w	r1, r1, ip, lsl #26
 80069f2:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 80069f6:	d817      	bhi.n	8006a28 <RCM_RegisterRegConv+0x164>
 80069f8:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80069fc:	0dcc      	lsrs	r4, r1, #23
 80069fe:	f004 0404 	and.w	r4, r4, #4
 8006a02:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8006a06:	6885      	ldr	r5, [r0, #8]
 8006a08:	f85c 3004 	ldr.w	r3, [ip, r4]
 8006a0c:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8006a10:	2607      	movs	r6, #7
 8006a12:	408d      	lsls	r5, r1
 8006a14:	fa06 f101 	lsl.w	r1, r6, r1
 8006a18:	ea23 0101 	bic.w	r1, r3, r1
 8006a1c:	4329      	orrs	r1, r5
 8006a1e:	f84c 1004 	str.w	r1, [ip, r4]
}
 8006a22:	bc70      	pop	{r4, r5, r6}
  regConv->convHandle = handle;
 8006a24:	7302      	strb	r2, [r0, #12]
}
 8006a26:	4770      	bx	lr
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8006a28:	3c1e      	subs	r4, #30
 8006a2a:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
 8006a2e:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 8006a32:	e7e3      	b.n	80069fc <RCM_RegisterRegConv+0x138>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8006a34:	2a04      	cmp	r2, #4
 8006a36:	d92e      	bls.n	8006a96 <RCM_RegisterRegConv+0x1d2>
 8006a38:	68f2      	ldr	r2, [r6, #12]
 8006a3a:	b372      	cbz	r2, 8006a9a <RCM_RegisterRegConv+0x1d6>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8006a3c:	7913      	ldrb	r3, [r2, #4]
 8006a3e:	4299      	cmp	r1, r3
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8006a40:	6803      	ldr	r3, [r0, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8006a42:	d02f      	beq.n	8006aa4 <RCM_RegisterRegConv+0x1e0>
      i++;
 8006a44:	2202      	movs	r2, #2
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8006a46:	f240 2402 	movw	r4, #514	@ 0x202
 8006a4a:	e791      	b.n	8006970 <RCM_RegisterRegConv+0xac>
 8006a4c:	2a04      	cmp	r2, #4
 8006a4e:	d917      	bls.n	8006a80 <RCM_RegisterRegConv+0x1bc>
 8006a50:	6803      	ldr	r3, [r0, #0]
 8006a52:	2203      	movs	r2, #3
 8006a54:	f240 3403 	movw	r4, #771	@ 0x303
 8006a58:	e78a      	b.n	8006970 <RCM_RegisterRegConv+0xac>
 8006a5a:	6803      	ldr	r3, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8006a5c:	6821      	ldr	r1, [r4, #0]
 8006a5e:	4299      	cmp	r1, r3
 8006a60:	f47f af51 	bne.w	8006906 <RCM_RegisterRegConv+0x42>
      i++;
 8006a64:	2203      	movs	r2, #3
 8006a66:	e77d      	b.n	8006964 <RCM_RegisterRegConv+0xa0>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8006a68:	68b5      	ldr	r5, [r6, #8]
      i++;
 8006a6a:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8006a6c:	2d00      	cmp	r5, #0
 8006a6e:	f47f af3f 	bne.w	80068f0 <RCM_RegisterRegConv+0x2c>
 8006a72:	68f4      	ldr	r4, [r6, #12]
 8006a74:	b124      	cbz	r4, 8006a80 <RCM_RegisterRegConv+0x1bc>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8006a76:	7923      	ldrb	r3, [r4, #4]
 8006a78:	428b      	cmp	r3, r1
 8006a7a:	d0ee      	beq.n	8006a5a <RCM_RegisterRegConv+0x196>
 8006a7c:	f04f 0400 	mov.w	r4, #0
 8006a80:	f362 0407 	bfi	r4, r2, #0, #8
 8006a84:	6803      	ldr	r3, [r0, #0]
 8006a86:	f362 240f 	bfi	r4, r2, #8, #8
 8006a8a:	e771      	b.n	8006970 <RCM_RegisterRegConv+0xac>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8006a8c:	68b5      	ldr	r5, [r6, #8]
 8006a8e:	b135      	cbz	r5, 8006a9e <RCM_RegisterRegConv+0x1da>
 8006a90:	7901      	ldrb	r1, [r0, #4]
    uint8_t i = 0;
 8006a92:	4622      	mov	r2, r4
 8006a94:	e72c      	b.n	80068f0 <RCM_RegisterRegConv+0x2c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8006a96:	462a      	mov	r2, r5
 8006a98:	e7eb      	b.n	8006a72 <RCM_RegisterRegConv+0x1ae>
 8006a9a:	6803      	ldr	r3, [r0, #0]
 8006a9c:	e7d2      	b.n	8006a44 <RCM_RegisterRegConv+0x180>
 8006a9e:	6803      	ldr	r3, [r0, #0]
    uint8_t i = 0;
 8006aa0:	462a      	mov	r2, r5
 8006aa2:	e743      	b.n	800692c <RCM_RegisterRegConv+0x68>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8006aa4:	6812      	ldr	r2, [r2, #0]
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d0dc      	beq.n	8006a64 <RCM_RegisterRegConv+0x1a0>
 8006aaa:	e7cb      	b.n	8006a44 <RCM_RegisterRegConv+0x180>
 8006aac:	200020dc 	.word	0x200020dc
 8006ab0:	200020bc 	.word	0x200020bc
 8006ab4:	7fffffc0 	.word	0x7fffffc0
 8006ab8:	200020a4 	.word	0x200020a4

08006abc <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 8006abc:	b510      	push	{r4, lr}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 8006abe:	7b03      	ldrb	r3, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8006ac0:	4a5e      	ldr	r2, [pc, #376]	@ (8006c3c <RCM_ExecRegularConv+0x180>)
 8006ac2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8006ac6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006aca:	f812 0011 	ldrb.w	r0, [r2, r1, lsl #1]
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d139      	bne.n	8006b46 <RCM_ExecRegularConv+0x8a>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8006ad2:	7811      	ldrb	r1, [r2, #0]
 8006ad4:	b991      	cbnz	r1, 8006afc <RCM_ExecRegularConv+0x40>
  uint8_t LastEnable = RCM_MAX_CONV;
 8006ad6:	2004      	movs	r0, #4
      if (true == RCM_NoInj_array [i].enable)
 8006ad8:	7991      	ldrb	r1, [r2, #6]
 8006ada:	2900      	cmp	r1, #0
 8006adc:	d175      	bne.n	8006bca <RCM_ExecRegularConv+0x10e>
 8006ade:	7b11      	ldrb	r1, [r2, #12]
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	d177      	bne.n	8006bd4 <RCM_ExecRegularConv+0x118>
 8006ae4:	7c91      	ldrb	r1, [r2, #18]
 8006ae6:	2900      	cmp	r1, #0
 8006ae8:	f000 809a 	beq.w	8006c20 <RCM_ExecRegularConv+0x164>
      {
        if (RCM_NoInj_array[i].next > handle)
 8006aec:	7dd1      	ldrb	r1, [r2, #23]
 8006aee:	4299      	cmp	r1, r3
 8006af0:	f240 80a0 	bls.w	8006c34 <RCM_ExecRegularConv+0x178>
 8006af4:	f04f 0e03 	mov.w	lr, #3
      if (true == RCM_NoInj_array [i].enable)
 8006af8:	4670      	mov	r0, lr
 8006afa:	e003      	b.n	8006b04 <RCM_ExecRegularConv+0x48>
        if (RCM_NoInj_array[i].next > handle)
 8006afc:	7951      	ldrb	r1, [r2, #5]
 8006afe:	428b      	cmp	r3, r1
 8006b00:	d2ea      	bcs.n	8006ad8 <RCM_ExecRegularConv+0x1c>
  uint8_t i=0;
 8006b02:	4686      	mov	lr, r0
        /* We found a previous reg conv to link with */
        {
          formerNext = RCM_NoInj_array [i].next;
          RCM_NoInj_array[handle].next = formerNext;
 8006b04:	eb0c 0403 	add.w	r4, ip, r3
 8006b08:	eb02 0444 	add.w	r4, r2, r4, lsl #1
          RCM_NoInj_array[handle].prev = i;
          RCM_NoInj_array[i].next = handle;
 8006b0c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 8006b10:	7161      	strb	r1, [r4, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8006b12:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array[handle].prev = i;
 8006b16:	f884 e004 	strb.w	lr, [r4, #4]
          RCM_NoInj_array[formerNext].prev = handle;
 8006b1a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8006b1e:	4c48      	ldr	r4, [pc, #288]	@ (8006c40 <RCM_ExecRegularConv+0x184>)
          RCM_NoInj_array[formerNext].prev = handle;
 8006b20:	710b      	strb	r3, [r1, #4]
          RCM_NoInj_array[i].next = handle;
 8006b22:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8006b26:	7821      	ldrb	r1, [r4, #0]
          RCM_NoInj_array[i].next = handle;
 8006b28:	7143      	strb	r3, [r0, #5]
    RCM_NoInj_array[handle].enable = true;
 8006b2a:	eb0c 0003 	add.w	r0, ip, r3
 8006b2e:	f04f 0e01 	mov.w	lr, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8006b32:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    RCM_NoInj_array[handle].enable = true;
 8006b36:	f822 e010 	strh.w	lr, [r2, r0, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8006b3a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006b3e:	7849      	ldrb	r1, [r1, #1]
 8006b40:	4571      	cmp	r1, lr
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 8006b42:	bf18      	it	ne
 8006b44:	7023      	strbne	r3, [r4, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 8006b46:	493f      	ldr	r1, [pc, #252]	@ (8006c44 <RCM_ExecRegularConv+0x188>)
 8006b48:	f891 10a0 	ldrb.w	r1, [r1, #160]	@ 0xa0
 8006b4c:	2900      	cmp	r1, #0
 8006b4e:	d137      	bne.n	8006bc0 <RCM_ExecRegularConv+0x104>
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8006b50:	493d      	ldr	r1, [pc, #244]	@ (8006c48 <RCM_ExecRegularConv+0x18c>)
 8006b52:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8006b56:	790c      	ldrb	r4, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8006b58:	6808      	ldr	r0, [r1, #0]
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8006b5a:	2101      	movs	r1, #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8006b5c:	2c09      	cmp	r4, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8006b5e:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8006b62:	fa01 f104 	lsl.w	r1, r1, r4
 8006b66:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 8006b6a:	bf84      	itt	hi
 8006b6c:	f1ae 0e1e 	subhi.w	lr, lr, #30
 8006b70:	ea41 510e 	orrhi.w	r1, r1, lr, lsl #20
  MODIFY_REG(*preg,
 8006b74:	6b04      	ldr	r4, [r0, #48]	@ 0x30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8006b76:	bf94      	ite	ls
 8006b78:	ea41 510e 	orrls.w	r1, r1, lr, lsl #20
 8006b7c:	f041 7100 	orrhi.w	r1, r1, #33554432	@ 0x2000000
 8006b80:	0d09      	lsrs	r1, r1, #20
 8006b82:	f401 61f8 	and.w	r1, r1, #1984	@ 0x7c0
 8006b86:	f424 64f8 	bic.w	r4, r4, #1984	@ 0x7c0
 8006b8a:	4321      	orrs	r1, r4
 8006b8c:	6301      	str	r1, [r0, #48]	@ 0x30
* param  ADCx ADC instance
* retval Value between Min_Data=0x0000 and Max_Data=0xFFF0
*/
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12L(const ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_REG(ADCx->DR) & 0x0000FFF0UL);
 8006b8e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8006b90:	6881      	ldr	r1, [r0, #8]
 8006b92:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8006b96:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8006b9a:	f041 0104 	orr.w	r1, r1, #4
 8006b9e:	6081      	str	r1, [r0, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8006ba0:	6801      	ldr	r1, [r0, #0]
 8006ba2:	0749      	lsls	r1, r1, #29
 8006ba4:	d5fc      	bpl.n	8006ba0 <RCM_ExecRegularConv+0xe4>
 8006ba6:	6c00      	ldr	r0, [r0, #64]	@ 0x40
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8006ba8:	eb0c 0103 	add.w	r1, ip, r3
 8006bac:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006bb0:	f020 000f 	bic.w	r0, r0, #15
 8006bb4:	8048      	strh	r0, [r1, #2]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8006bb6:	4822      	ldr	r0, [pc, #136]	@ (8006c40 <RCM_ExecRegularConv+0x184>)
 8006bb8:	794c      	ldrb	r4, [r1, #5]
 8006bba:	7004      	strb	r4, [r0, #0]
    RCM_NoInj_array[handle].status = valid;
 8006bbc:	2002      	movs	r0, #2
 8006bbe:	7048      	strb	r0, [r1, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8006bc0:	449c      	add	ip, r3
 8006bc2:	eb02 024c 	add.w	r2, r2, ip, lsl #1
  return (retVal);
}
 8006bc6:	8850      	ldrh	r0, [r2, #2]
 8006bc8:	bd10      	pop	{r4, pc}
        if (RCM_NoInj_array[i].next > handle)
 8006bca:	7ad1      	ldrb	r1, [r2, #11]
 8006bcc:	428b      	cmp	r3, r1
 8006bce:	d31d      	bcc.n	8006c0c <RCM_ExecRegularConv+0x150>
      if (true == RCM_NoInj_array [i].enable)
 8006bd0:	7b11      	ldrb	r1, [r2, #12]
 8006bd2:	b1f9      	cbz	r1, 8006c14 <RCM_ExecRegularConv+0x158>
        if (RCM_NoInj_array[i].next > handle)
 8006bd4:	7c51      	ldrb	r1, [r2, #17]
 8006bd6:	4299      	cmp	r1, r3
 8006bd8:	d828      	bhi.n	8006c2c <RCM_ExecRegularConv+0x170>
      if (true == RCM_NoInj_array [i].enable)
 8006bda:	7c91      	ldrb	r1, [r2, #18]
 8006bdc:	2900      	cmp	r1, #0
 8006bde:	d185      	bne.n	8006aec <RCM_ExecRegularConv+0x30>
 8006be0:	2102      	movs	r1, #2
         formerNext = RCM_NoInj_array[LastEnable].next;
 8006be2:	4608      	mov	r0, r1
 8006be4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 8006be8:	eb0c 0403 	add.w	r4, ip, r3
 8006bec:	eb02 0444 	add.w	r4, r2, r4, lsl #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 8006bf0:	eb02 0040 	add.w	r0, r2, r0, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8006bf4:	7121      	strb	r1, [r4, #4]
         formerNext = RCM_NoInj_array[LastEnable].next;
 8006bf6:	7941      	ldrb	r1, [r0, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8006bf8:	7161      	strb	r1, [r4, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8006bfa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006bfe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8006c02:	4c0f      	ldr	r4, [pc, #60]	@ (8006c40 <RCM_ExecRegularConv+0x184>)
         RCM_NoInj_array[formerNext].prev = handle;
 8006c04:	710b      	strb	r3, [r1, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 8006c06:	7143      	strb	r3, [r0, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8006c08:	7821      	ldrb	r1, [r4, #0]
 8006c0a:	e78e      	b.n	8006b2a <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 8006c0c:	f04f 0e01 	mov.w	lr, #1
      if (true == RCM_NoInj_array [i].enable)
 8006c10:	4670      	mov	r0, lr
 8006c12:	e777      	b.n	8006b04 <RCM_ExecRegularConv+0x48>
 8006c14:	7c91      	ldrb	r1, [r2, #18]
 8006c16:	2900      	cmp	r1, #0
 8006c18:	f47f af68 	bne.w	8006aec <RCM_ExecRegularConv+0x30>
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	e7e0      	b.n	8006be2 <RCM_ExecRegularConv+0x126>
       if (LastEnable != RCM_MAX_CONV )
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d0de      	beq.n	8006be2 <RCM_ExecRegularConv+0x126>
         RCM_currentHandle = handle;
 8006c24:	4c06      	ldr	r4, [pc, #24]	@ (8006c40 <RCM_ExecRegularConv+0x184>)
 8006c26:	4619      	mov	r1, r3
 8006c28:	7023      	strb	r3, [r4, #0]
    while (i < RCM_MAX_CONV)
 8006c2a:	e77e      	b.n	8006b2a <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 8006c2c:	f04f 0e02 	mov.w	lr, #2
      if (true == RCM_NoInj_array [i].enable)
 8006c30:	4670      	mov	r0, lr
 8006c32:	e767      	b.n	8006b04 <RCM_ExecRegularConv+0x48>
 8006c34:	2003      	movs	r0, #3
 8006c36:	4601      	mov	r1, r0
 8006c38:	e7d4      	b.n	8006be4 <RCM_ExecRegularConv+0x128>
 8006c3a:	bf00      	nop
 8006c3c:	200020a4 	.word	0x200020a4
 8006c40:	200020a0 	.word	0x200020a0
 8006c44:	200007ac 	.word	0x200007ac
 8006c48:	200020dc 	.word	0x200020dc

08006c4c <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 8006c4c:	4b14      	ldr	r3, [pc, #80]	@ (8006ca0 <RCM_ExecUserConv+0x54>)
{
 8006c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvHandle != NULL)
 8006c52:	681c      	ldr	r4, [r3, #0]
 8006c54:	b124      	cbz	r4, 8006c60 <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8006c56:	4d13      	ldr	r5, [pc, #76]	@ (8006ca4 <RCM_ExecUserConv+0x58>)
    handle = RCM_UserConvHandle->convHandle;
 8006c58:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8006c5a:	782b      	ldrb	r3, [r5, #0]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d001      	beq.n	8006c64 <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 8006c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8006c64:	4620      	mov	r0, r4
 8006c66:	f7ff ff29 	bl	8006abc <RCM_ExecRegularConv>
 8006c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8006ca8 <RCM_ExecUserConv+0x5c>)
 8006c6c:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 8006c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8006cac <RCM_ExecUserConv+0x60>)
 8006c70:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8006c74:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8006c78:	4601      	mov	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 8006c7a:	785b      	ldrb	r3, [r3, #1]
 8006c7c:	b10b      	cbz	r3, 8006c82 <RCM_ExecUserConv+0x36>
        RCM_UserConvState = RCM_USERCONV_EOC;
 8006c7e:	2302      	movs	r3, #2
 8006c80:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 8006c82:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb0 <RCM_ExecUserConv+0x64>)
 8006c84:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
 8006c88:	2f00      	cmp	r7, #0
 8006c8a:	d0e9      	beq.n	8006c60 <RCM_ExecUserConv+0x14>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8006c8c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c90:	4620      	mov	r0, r4
 8006c92:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8006c94:	2300      	movs	r3, #0
 8006c96:	702b      	strb	r3, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8006c98:	463b      	mov	r3, r7
}
 8006c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8006c9e:	4718      	bx	r3
 8006ca0:	20002098 	.word	0x20002098
 8006ca4:	2000209c 	.word	0x2000209c
 8006ca8:	2000209e 	.word	0x2000209e
 8006cac:	200020a4 	.word	0x200020a4
 8006cb0:	200020bc 	.word	0x200020bc

08006cb4 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8006cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8006d30 <RCM_ExecNextConv+0x7c>)
 8006cb6:	491f      	ldr	r1, [pc, #124]	@ (8006d34 <RCM_ExecNextConv+0x80>)
 8006cb8:	781a      	ldrb	r2, [r3, #0]
 8006cba:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8006cbe:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8006cc2:	b3a3      	cbz	r3, 8006d2e <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8006cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8006d38 <RCM_ExecNextConv+0x84>)
{
 8006cc6:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8006cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ccc:	6818      	ldr	r0, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8006cce:	2404      	movs	r4, #4
 8006cd0:	6004      	str	r4, [r0, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8006cd2:	f893 c004 	ldrb.w	ip, [r3, #4]
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8006cdc:	f1bc 0f09 	cmp.w	ip, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8006ce0:	fa03 f30c 	lsl.w	r3, r3, ip
 8006ce4:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
 8006ce8:	bf84      	itt	hi
 8006cea:	3c1e      	subhi	r4, #30
 8006cec:	ea43 5304 	orrhi.w	r3, r3, r4, lsl #20
 8006cf0:	ea4f 0e42 	mov.w	lr, r2, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8006cf4:	bf98      	it	ls
 8006cf6:	ea43 5304 	orrls.w	r3, r3, r4, lsl #20

    (void)LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8006cfa:	4496      	add	lr, r2
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8006cfc:	bf88      	it	hi
 8006cfe:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
  MODIFY_REG(*preg,
 8006d02:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8006d04:	0d1b      	lsrs	r3, r3, #20
 8006d06:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8006d0a:	f422 62f8 	bic.w	r2, r2, #1984	@ 0x7c0
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	6303      	str	r3, [r0, #48]	@ 0x30
 8006d12:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8006d14:	6883      	ldr	r3, [r0, #8]
 8006d16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8006d1a:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 8006d1e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006d22:	2401      	movs	r4, #1
 8006d24:	f043 0304 	orr.w	r3, r3, #4
 8006d28:	6083      	str	r3, [r0, #8]
 8006d2a:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 8006d2c:	bd10      	pop	{r4, pc}
 8006d2e:	4770      	bx	lr
 8006d30:	200020a0 	.word	0x200020a0
 8006d34:	200020a4 	.word	0x200020a4
 8006d38:	200020dc 	.word	0x200020dc

08006d3c <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8006d3c:	b430      	push	{r4, r5}
  uint32_t result;
  RCM_status_t status;

  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8006d3e:	4812      	ldr	r0, [pc, #72]	@ (8006d88 <RCM_ReadOngoingConv+0x4c>)
 8006d40:	4a12      	ldr	r2, [pc, #72]	@ (8006d8c <RCM_ReadOngoingConv+0x50>)
 8006d42:	7803      	ldrb	r3, [r0, #0]
 8006d44:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8006d48:	f812 4011 	ldrb.w	r4, [r2, r1, lsl #1]
 8006d4c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006d50:	b16c      	cbz	r4, 8006d6e <RCM_ReadOngoingConv+0x32>
  {
    status = RCM_NoInj_array[RCM_currentHandle].status;
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8006d52:	4c0f      	ldr	r4, [pc, #60]	@ (8006d90 <RCM_ReadOngoingConv+0x54>)
 8006d54:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8006d58:	6824      	ldr	r4, [r4, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8006d5a:	6825      	ldr	r5, [r4, #0]
 8006d5c:	076d      	lsls	r5, r5, #29
 8006d5e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006d62:	d406      	bmi.n	8006d72 <RCM_ReadOngoingConv+0x36>
      RCM_NoInj_array[RCM_currentHandle].status = valid;
      /* Restore back DMA configuration */
    }

    /* Prepare next conversion */
    RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8006d64:	449c      	add	ip, r3
 8006d66:	eb02 024c 	add.w	r2, r2, ip, lsl #1
 8006d6a:	7953      	ldrb	r3, [r2, #5]
 8006d6c:	7003      	strb	r3, [r0, #0]
    }
    else
    {
      /* Nothing to do */
    }
}
 8006d6e:	bc30      	pop	{r4, r5}
 8006d70:	4770      	bx	lr
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8006d72:	784d      	ldrb	r5, [r1, #1]
 8006d74:	f015 0ffd 	tst.w	r5, #253	@ 0xfd
 8006d78:	d0f4      	beq.n	8006d64 <RCM_ReadOngoingConv+0x28>
 8006d7a:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 8006d7c:	f024 040f 	bic.w	r4, r4, #15
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);
 8006d80:	804c      	strh	r4, [r1, #2]
      RCM_NoInj_array[RCM_currentHandle].status = valid;
 8006d82:	2402      	movs	r4, #2
 8006d84:	704c      	strb	r4, [r1, #1]
 8006d86:	e7ed      	b.n	8006d64 <RCM_ReadOngoingConv+0x28>
 8006d88:	200020a0 	.word	0x200020a0
 8006d8c:	200020a4 	.word	0x200020a4
 8006d90:	200020dc 	.word	0x200020dc

08006d94 <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8006d94:	4b43      	ldr	r3, [pc, #268]	@ (8006ea4 <USART2_IRQHandler+0x110>)
 8006d96:	69da      	ldr	r2, [r3, #28]
 8006d98:	0652      	lsls	r2, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
//cstat !MISRAC2012-Rule-8.4
void USART2_IRQHandler(void)
{
 8006d9a:	b510      	push	{r4, lr}
 8006d9c:	d509      	bpl.n	8006db2 <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8006d9e:	4942      	ldr	r1, [pc, #264]	@ (8006ea8 <USART2_IRQHandler+0x114>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel(DMA_TX_A, DMACH_TX_A);
    LL_USART_ClearFlag_TC(USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT(&aspepOverUartA);
 8006da0:	4842      	ldr	r0, [pc, #264]	@ (8006eac <USART2_IRQHandler+0x118>)
 8006da2:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8006da4:	2440      	movs	r4, #64	@ 0x40
 8006da6:	f022 0201 	bic.w	r2, r2, #1
 8006daa:	61ca      	str	r2, [r1, #28]
 8006dac:	621c      	str	r4, [r3, #32]
 8006dae:	f7fc fbf3 	bl	8003598 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8006db2:	4b3c      	ldr	r3, [pc, #240]	@ (8006ea4 <USART2_IRQHandler+0x110>)
 8006db4:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8006db6:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8006db8:	69d9      	ldr	r1, [r3, #28]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8006dba:	689c      	ldr	r4, [r3, #8]
 8006dbc:	07e4      	lsls	r4, r4, #31
 8006dbe:	d526      	bpl.n	8006e0e <USART2_IRQHandler+0x7a>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8006dc0:	f002 0202 	and.w	r2, r2, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8006dc4:	f000 0008 	and.w	r0, r0, #8
  feFlag = LL_USART_IsActiveFlag_FE(USARTA);
  neFlag = LL_USART_IsActiveFlag_NE(USARTA);
  errorMask = LL_USART_IsEnabledIT_ERROR(USARTA);

  flags = ((oreFlag | feFlag | neFlag) & errorMask);
  if (0U == flags)
 8006dc8:	4302      	orrs	r2, r0
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8006dca:	f001 0104 	and.w	r1, r1, #4
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	d01d      	beq.n	8006e0e <USART2_IRQHandler+0x7a>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error*/
    WRITE_REG(USARTA->ICR, USART_ICR_FECF | USART_ICR_ORECF | USART_ICR_NECF);
 8006dd2:	220e      	movs	r2, #14
 8006dd4:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006dda:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8006dde:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8006de2:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de6:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8006dea:	e840 3100 	strex	r1, r3, [r0]
 8006dee:	2900      	cmp	r1, #0
 8006df0:	d1f3      	bne.n	8006dda <USART2_IRQHandler+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006df6:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8006dfe:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8006e06:	e840 3100 	strex	r1, r3, [r0]
 8006e0a:	2900      	cmp	r1, #0
 8006e0c:	d1f3      	bne.n	8006df6 <USART2_IRQHandler+0x62>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8006e0e:	4b25      	ldr	r3, [pc, #148]	@ (8006ea4 <USART2_IRQHandler+0x110>)
 8006e10:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8006e12:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8006e14:	06d2      	lsls	r2, r2, #27
 8006e16:	d543      	bpl.n	8006ea0 <USART2_IRQHandler+0x10c>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8006e18:	06db      	lsls	r3, r3, #27
 8006e1a:	d541      	bpl.n	8006ea0 <USART2_IRQHandler+0x10c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006e20:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8006e24:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8006e28:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8006e30:	e840 3100 	strex	r1, r3, [r0]
 8006e34:	2900      	cmp	r1, #0
 8006e36:	d1f3      	bne.n	8006e20 <USART2_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e38:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006e3c:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8006e40:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8006e44:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e48:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8006e4c:	e840 3100 	strex	r1, r3, [r0]
 8006e50:	2900      	cmp	r1, #0
 8006e52:	d1f3      	bne.n	8006e3c <USART2_IRQHandler+0xa8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006e58:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8006e60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e64:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8006e68:	e840 3100 	strex	r1, r3, [r0]
 8006e6c:	2900      	cmp	r1, #0
 8006e6e:	d1f3      	bne.n	8006e58 <USART2_IRQHandler+0xc4>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8006e70:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea4 <USART2_IRQHandler+0x110>)
 8006e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e74:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006e78:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8006e7c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8006e80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8006e88:	e840 3100 	strex	r1, r3, [r0]
 8006e8c:	2900      	cmp	r1, #0
 8006e8e:	d1f3      	bne.n	8006e78 <USART2_IRQHandler+0xe4>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8006e90:	4b05      	ldr	r3, [pc, #20]	@ (8006ea8 <USART2_IRQHandler+0x114>)
    LL_USART_DisableDMAReq_RX(USARTA);
    (void)LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX(USARTA);
    /* Clear pending DMA TC to process only new received packet */
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWReset(&aspepOverUartA);
 8006e92:	4806      	ldr	r0, [pc, #24]	@ (8006eac <USART2_IRQHandler+0x118>)
 8006e94:	2202      	movs	r2, #2
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8006e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e9a:	605a      	str	r2, [r3, #4]
    ASPEP_HWReset(&aspepOverUartA);
 8006e9c:	f7fc bd76 	b.w	800398c <ASPEP_HWReset>
}
 8006ea0:	bd10      	pop	{r4, pc}
 8006ea2:	bf00      	nop
 8006ea4:	40004400 	.word	0x40004400
 8006ea8:	40020000 	.word	0x40020000
 8006eac:	20000ad0 	.word	0x20000ad0

08006eb0 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8006eb0:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */

  TSK_HardwareFaultTask();
 8006eb2:	f7fd faff 	bl	80044b4 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 8006eb6:	e7fe      	b.n	8006eb6 <HardFault_Handler+0x6>

08006eb8 <SysTick_Handler>:

 /* USER CODE END HardFault_IRQn 1 */
}

void SysTick_Handler(void)
{
 8006eb8:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8006eba:	4c0d      	ldr	r4, [pc, #52]	@ (8006ef0 <SysTick_Handler+0x38>)
 8006ebc:	7823      	ldrb	r3, [r4, #0]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d00f      	beq.n	8006ee2 <SysTick_Handler+0x2a>
  else
  {
    /* Nothing to do */
  }

  SystickDividerCounter ++;
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	b2db      	uxtb	r3, r3
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 8006ec6:	4a0b      	ldr	r2, [pc, #44]	@ (8006ef4 <SysTick_Handler+0x3c>)
 8006ec8:	7023      	strb	r3, [r4, #0]
 8006eca:	6813      	ldr	r3, [r2, #0]
 8006ecc:	079b      	lsls	r3, r3, #30
 8006ece:	d504      	bpl.n	8006eda <SysTick_Handler+0x22>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8006ed0:	2302      	movs	r3, #2
  /* Buffer is ready by the HW layer to be processed */
  /* NO DMA interrupt */
  if (LL_DMA_IsActiveFlag_TC(DMA_RX_A, DMACH_RX_A))
  {
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT(&aspepOverUartA);
 8006ed2:	4809      	ldr	r0, [pc, #36]	@ (8006ef8 <SysTick_Handler+0x40>)
 8006ed4:	6053      	str	r3, [r2, #4]
 8006ed6:	f7fc fd0b 	bl	80038f0 <ASPEP_HWDataReceivedIT>
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */

  /* USER CODE END SysTick_IRQn 2 */
}
 8006eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8006ede:	f7fd baa1 	b.w	8004424 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8006ee2:	f000 fab3 	bl	800744c <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8006ee6:	f001 fabb 	bl	8008460 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e7eb      	b.n	8006ec6 <SysTick_Handler+0xe>
 8006eee:	bf00      	nop
 8006ef0:	20000b58 	.word	0x20000b58
 8006ef4:	40020000 	.word	0x40020000
 8006ef8:	20000ad0 	.word	0x20000ad0

08006efc <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8006efc:	4b04      	ldr	r3, [pc, #16]	@ (8006f10 <EXTI15_10_IRQHandler+0x14>)
 8006efe:	695a      	ldr	r2, [r3, #20]

  */
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN START_STOP_BTN */
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13))
 8006f00:	0492      	lsls	r2, r2, #18
 8006f02:	d400      	bmi.n	8006f06 <EXTI15_10_IRQHandler+0xa>
  else
  {
    /* Nothing to do */
  }

}
 8006f04:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006f06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006f0a:	615a      	str	r2, [r3, #20]
    (void)UI_HandleStartStopButton_cb();
 8006f0c:	f7fd baea 	b.w	80044e4 <UI_HandleStartStopButton_cb>
 8006f10:	40010400 	.word	0x40010400

08006f14 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f14:	4b0e      	ldr	r3, [pc, #56]	@ (8006f50 <HAL_MspInit+0x3c>)
{
 8006f16:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006f1a:	f042 0201 	orr.w	r2, r2, #1
 8006f1e:	661a      	str	r2, [r3, #96]	@ 0x60
 8006f20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 8006f22:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f24:	f002 0201 	and.w	r2, r2, #1
 8006f28:	9200      	str	r2, [sp, #0]
 8006f2a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006f2c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006f2e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006f32:	659a      	str	r2, [r3, #88]	@ 0x58
 8006f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f3a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8006f3c:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8006f3e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8006f40:	f001 fa04 	bl	800834c <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006f44:	b003      	add	sp, #12
 8006f46:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8006f4a:	f001 bc99 	b.w	8008880 <HAL_PWREx_DisableUCPDDeadBattery>
 8006f4e:	bf00      	nop
 8006f50:	40021000 	.word	0x40021000

08006f54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006f54:	b510      	push	{r4, lr}
 8006f56:	4604      	mov	r4, r0
 8006f58:	b09e      	sub	sp, #120	@ 0x78
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f5a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006f5c:	2254      	movs	r2, #84	@ 0x54
 8006f5e:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f60:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8006f64:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8006f68:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006f6a:	f005 f9d3 	bl	800c314 <memset>
  if(hadc->Instance==ADC1)
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f74:	d001      	beq.n	8006f7a <HAL_ADC_MspInit+0x26>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8006f76:	b01e      	add	sp, #120	@ 0x78
 8006f78:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8006f7a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8006f7e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006f82:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8006f84:	9209      	str	r2, [sp, #36]	@ 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8006f86:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006f88:	f002 f836 	bl	8008ff8 <HAL_RCCEx_PeriphCLKConfig>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d131      	bne.n	8006ff4 <HAL_ADC_MspInit+0xa0>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8006f90:	4b1a      	ldr	r3, [pc, #104]	@ (8006ffc <HAL_ADC_MspInit+0xa8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f92:	481b      	ldr	r0, [pc, #108]	@ (8007000 <HAL_ADC_MspInit+0xac>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8006f94:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f96:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f9a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006f9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f9e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006fa2:	9201      	str	r2, [sp, #4]
 8006fa4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fa8:	f042 0204 	orr.w	r2, r2, #4
 8006fac:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006fae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fb0:	f002 0204 	and.w	r2, r2, #4
 8006fb4:	9202      	str	r2, [sp, #8]
 8006fb6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fb8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fba:	f042 0201 	orr.w	r2, r2, #1
 8006fbe:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fc8:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006fca:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 8006fcc:	2207      	movs	r2, #7
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fd4:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fd6:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006fd8:	f001 fad8 	bl	800858c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8006fdc:	2203      	movs	r2, #3
 8006fde:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fe0:	a904      	add	r1, sp, #16
 8006fe2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8006fe6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fea:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fec:	f001 face 	bl	800858c <HAL_GPIO_Init>
}
 8006ff0:	b01e      	add	sp, #120	@ 0x78
 8006ff2:	bd10      	pop	{r4, pc}
      Error_Handler();
 8006ff4:	f7fc fefc 	bl	8003df0 <Error_Handler>
 8006ff8:	e7ca      	b.n	8006f90 <HAL_ADC_MspInit+0x3c>
 8006ffa:	bf00      	nop
 8006ffc:	40021000 	.word	0x40021000
 8007000:	48000800 	.word	0x48000800

08007004 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8007004:	4b0a      	ldr	r3, [pc, #40]	@ (8007030 <HAL_CORDIC_MspInit+0x2c>)
 8007006:	6802      	ldr	r2, [r0, #0]
 8007008:	429a      	cmp	r2, r3
 800700a:	d000      	beq.n	800700e <HAL_CORDIC_MspInit+0xa>
 800700c:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800700e:	f8d3 2448 	ldr.w	r2, [r3, #1096]	@ 0x448
 8007012:	f042 0208 	orr.w	r2, r2, #8
 8007016:	f8c3 2448 	str.w	r2, [r3, #1096]	@ 0x448
 800701a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
{
 800701e:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8007020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007022:	f003 0308 	and.w	r3, r3, #8
 8007026:	9301      	str	r3, [sp, #4]
 8007028:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 800702a:	b002      	add	sp, #8
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	40020c00 	.word	0x40020c00
 8007034:	00000000 	.word	0x00000000

08007038 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007038:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_pwm->Instance==TIM1)
 800703a:	4a1b      	ldr	r2, [pc, #108]	@ (80070a8 <HAL_TIM_PWM_MspInit+0x70>)
 800703c:	6801      	ldr	r1, [r0, #0]
{
 800703e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007040:	2300      	movs	r3, #0
  if(htim_pwm->Instance==TIM1)
 8007042:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007044:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007048:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800704c:	9306      	str	r3, [sp, #24]
  if(htim_pwm->Instance==TIM1)
 800704e:	d001      	beq.n	8007054 <HAL_TIM_PWM_MspInit+0x1c>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8007050:	b008      	add	sp, #32
 8007052:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007054:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007058:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 800705c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80070a0 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007060:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007062:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007066:	661a      	str	r2, [r3, #96]	@ 0x60
 8007068:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800706a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800706e:	9200      	str	r2, [sp, #0]
 8007070:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007072:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007074:	f042 0201 	orr.w	r2, r2, #1
 8007078:	64da      	str	r2, [r3, #76]	@ 0x4c
 800707a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007082:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8007084:	2306      	movs	r3, #6
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8007086:	a902      	add	r1, sp, #8
 8007088:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 800708c:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007090:	9c01      	ldr	r4, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007092:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8007094:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8007096:	f001 fa79 	bl	800858c <HAL_GPIO_Init>
}
 800709a:	b008      	add	sp, #32
 800709c:	bd10      	pop	{r4, pc}
 800709e:	bf00      	nop
 80070a0:	00000040 	.word	0x00000040
 80070a4:	00000012 	.word	0x00000012
 80070a8:	40012c00 	.word	0x40012c00

080070ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80070ac:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80070ae:	4a27      	ldr	r2, [pc, #156]	@ (800714c <HAL_TIM_MspPostInit+0xa0>)
 80070b0:	6801      	ldr	r1, [r0, #0]
{
 80070b2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070b4:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80070b6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80070bc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80070c0:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 80070c2:	d001      	beq.n	80070c8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80070c4:	b008      	add	sp, #32
 80070c6:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80070cc:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80070d0:	2406      	movs	r4, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070d4:	f042 0201 	orr.w	r2, r2, #1
 80070d8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80070da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070dc:	f002 0201 	and.w	r2, r2, #1
 80070e0:	9200      	str	r2, [sp, #0]
 80070e2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070e6:	f042 0202 	orr.w	r2, r2, #2
 80070ea:	64da      	str	r2, [r3, #76]	@ 0x4c
 80070ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80070ee:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070f0:	f003 0302 	and.w	r3, r3, #2
 80070f4:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80070f6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80070f8:	2280      	movs	r2, #128	@ 0x80
 80070fa:	2601      	movs	r6, #1
 80070fc:	2702      	movs	r7, #2
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80070fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8007102:	2302      	movs	r3, #2
 8007104:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007108:	e9cd 6704 	strd	r6, r7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800710c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 800710e:	f001 fa3d 	bl	800858c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007112:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8007114:	2203      	movs	r2, #3
 8007116:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007118:	480d      	ldr	r0, [pc, #52]	@ (8007150 <HAL_TIM_MspPostInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800711a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800711c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007120:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007124:	f001 fa32 	bl	800858c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8007128:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800712c:	2302      	movs	r3, #2
 800712e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007132:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8007134:	2202      	movs	r2, #2
 8007136:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007138:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800713c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8007140:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007142:	f001 fa23 	bl	800858c <HAL_GPIO_Init>
}
 8007146:	b008      	add	sp, #32
 8007148:	bdd0      	pop	{r4, r6, r7, pc}
 800714a:	bf00      	nop
 800714c:	40012c00 	.word	0x40012c00
 8007150:	48000400 	.word	0x48000400

08007154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007154:	b570      	push	{r4, r5, r6, lr}
 8007156:	4604      	mov	r4, r0
 8007158:	b09c      	sub	sp, #112	@ 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800715a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800715c:	2254      	movs	r2, #84	@ 0x54
 800715e:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007160:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8007164:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8007168:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800716a:	f005 f8d3 	bl	800c314 <memset>
  if(huart->Instance==USART2)
 800716e:	4b32      	ldr	r3, [pc, #200]	@ (8007238 <HAL_UART_MspInit+0xe4>)
 8007170:	6822      	ldr	r2, [r4, #0]
 8007172:	429a      	cmp	r2, r3
 8007174:	d001      	beq.n	800717a <HAL_UART_MspInit+0x26>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8007176:	b01c      	add	sp, #112	@ 0x70
 8007178:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800717a:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800717c:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800717e:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007180:	f001 ff3a 	bl	8008ff8 <HAL_RCCEx_PeriphCLKConfig>
 8007184:	2800      	cmp	r0, #0
 8007186:	d14d      	bne.n	8007224 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007188:	4b2c      	ldr	r3, [pc, #176]	@ (800723c <HAL_UART_MspInit+0xe8>)
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800718a:	4e2d      	ldr	r6, [pc, #180]	@ (8007240 <HAL_UART_MspInit+0xec>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800718c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800718e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007192:	659a      	str	r2, [r3, #88]	@ 0x58
 8007194:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007196:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800719a:	9200      	str	r2, [sp, #0]
 800719c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800719e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80071a0:	f042 0201 	orr.w	r2, r2, #1
 80071a4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80071a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80071ae:	220c      	movs	r2, #12
 80071b0:	2302      	movs	r3, #2
 80071b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071b6:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071b8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80071ba:	2300      	movs	r3, #0
 80071bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071c0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80071c2:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80071c8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071ca:	f001 f9df 	bl	800858c <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80071ce:	491d      	ldr	r1, [pc, #116]	@ (8007244 <HAL_UART_MspInit+0xf0>)
 80071d0:	221a      	movs	r2, #26
 80071d2:	2300      	movs	r3, #0
 80071d4:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80071d8:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80071da:	2280      	movs	r2, #128	@ 0x80
 80071dc:	e9c6 3302 	strd	r3, r3, [r6, #8]
 80071e0:	e9c6 2304 	strd	r2, r3, [r6, #16]
 80071e4:	e9c6 3306 	strd	r3, r3, [r6, #24]
 80071e8:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80071ea:	f001 f93d 	bl	8008468 <HAL_DMA_Init>
 80071ee:	b9f8      	cbnz	r0, 8007230 <HAL_UART_MspInit+0xdc>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80071f0:	4d15      	ldr	r5, [pc, #84]	@ (8007248 <HAL_UART_MspInit+0xf4>)
 80071f2:	4916      	ldr	r1, [pc, #88]	@ (800724c <HAL_UART_MspInit+0xf8>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80071f4:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80071f8:	221b      	movs	r2, #27
 80071fa:	2300      	movs	r3, #0
 80071fc:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007200:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8007202:	2110      	movs	r1, #16
 8007204:	2280      	movs	r2, #128	@ 0x80
 8007206:	e9c5 1302 	strd	r1, r3, [r5, #8]
 800720a:	e9c5 3305 	strd	r3, r3, [r5, #20]
 800720e:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8007212:	62b4      	str	r4, [r6, #40]	@ 0x28
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8007214:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007216:	f001 f927 	bl	8008468 <HAL_DMA_Init>
 800721a:	b930      	cbnz	r0, 800722a <HAL_UART_MspInit+0xd6>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800721c:	67e5      	str	r5, [r4, #124]	@ 0x7c
 800721e:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8007220:	b01c      	add	sp, #112	@ 0x70
 8007222:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8007224:	f7fc fde4 	bl	8003df0 <Error_Handler>
 8007228:	e7ae      	b.n	8007188 <HAL_UART_MspInit+0x34>
      Error_Handler();
 800722a:	f7fc fde1 	bl	8003df0 <Error_Handler>
 800722e:	e7f5      	b.n	800721c <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8007230:	f7fc fdde 	bl	8003df0 <Error_Handler>
 8007234:	e7dc      	b.n	80071f0 <HAL_UART_MspInit+0x9c>
 8007236:	bf00      	nop
 8007238:	40004400 	.word	0x40004400
 800723c:	40021000 	.word	0x40021000
 8007240:	20000bec 	.word	0x20000bec
 8007244:	40020008 	.word	0x40020008
 8007248:	20000b8c 	.word	0x20000b8c
 800724c:	4002001c 	.word	0x4002001c

08007250 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8007250:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8007254:	2240      	movs	r2, #64	@ 0x40
 8007256:	601a      	str	r2, [r3, #0]

    /* Clear Flags M1 */
    LL_ADC_ClearFlag_JEOS(ADC1);

  /* Highfrequency task */
  (void)TSK_HighFrequencyTask();
 8007258:	f7fd b85c 	b.w	8004314 <TSK_HighFrequencyTask>

0800725c <TIM1_UP_TIM16_IRQHandler>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800725c:	4b03      	ldr	r3, [pc, #12]	@ (800726c <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  (void)R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 800725e:	4804      	ldr	r0, [pc, #16]	@ (8007270 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8007260:	f06f 0201 	mvn.w	r2, #1
 8007264:	611a      	str	r2, [r3, #16]
 8007266:	f003 bfd5 	b.w	800b214 <R3_1_TIMx_UP_IRQHandler>
 800726a:	bf00      	nop
 800726c:	40012c00 	.word	0x40012c00
 8007270:	200007ac 	.word	0x200007ac

08007274 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8007274:	b508      	push	{r3, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8007276:	4b0c      	ldr	r3, [pc, #48]	@ (80072a8 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8007278:	691a      	ldr	r2, [r3, #16]
 800727a:	0612      	lsls	r2, r2, #24
 800727c:	d505      	bpl.n	800728a <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800727e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OCP_Handler(&PWM_Handle_M1._Super);
 8007282:	480a      	ldr	r0, [pc, #40]	@ (80072ac <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8007284:	611a      	str	r2, [r3, #16]
 8007286:	f7fe f805 	bl	8005294 <PWMC_OCP_Handler>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800728a:	4907      	ldr	r1, [pc, #28]	@ (80072a8 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 800728c:	690b      	ldr	r3, [r1, #16]
 800728e:	05db      	lsls	r3, r3, #23
 8007290:	d505      	bpl.n	800729e <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8007292:	f46f 7380 	mvn.w	r3, #256	@ 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 8007296:	4805      	ldr	r0, [pc, #20]	@ (80072ac <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8007298:	610b      	str	r3, [r1, #16]
 800729a:	f7fe f81b 	bl	80052d4 <PWMC_OVP_Handler>
  MC_RunMotorControlTasks();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 800729e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_RunMotorControlTasks();
 80072a2:	f7fd b8bf 	b.w	8004424 <MC_RunMotorControlTasks>
 80072a6:	bf00      	nop
 80072a8:	40012c00 	.word	0x40012c00
 80072ac:	200007ac 	.word	0x200007ac

080072b0 <UASPEP_INIT>:
  * @brief  Initialization of the Hardware used for data transmission and reception.
  *
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_INIT(void *pHWHandle)
{
 80072b0:	b430      	push	{r4, r5}
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80072b2:	6802      	ldr	r2, [r0, #0]
 80072b4:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	e851 3f00 	ldrex	r3, [r1]
 80072bc:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c0:	e841 3400 	strex	r4, r3, [r1]
 80072c4:	2c00      	cmp	r4, #0
 80072c6:	d1f7      	bne.n	80072b8 <UASPEP_INIT+0x8>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 80072c8:	68c1      	ldr	r1, [r0, #12]
 80072ca:	4d19      	ldr	r5, [pc, #100]	@ (8007330 <UASPEP_INIT+0x80>)
 80072cc:	6843      	ldr	r3, [r0, #4]
 80072ce:	5c6c      	ldrb	r4, [r5, r1]
 80072d0:	4423      	add	r3, r4
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 80072d2:	f102 0124 	add.w	r1, r2, #36	@ 0x24
 80072d6:	6099      	str	r1, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80072d8:	2340      	movs	r3, #64	@ 0x40
 80072da:	6213      	str	r3, [r2, #32]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80072dc:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e0:	e851 3f00 	ldrex	r3, [r1]
 80072e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e8:	e841 3400 	strex	r4, r3, [r1]
 80072ec:	2c00      	cmp	r4, #0
 80072ee:	d1f7      	bne.n	80072e0 <UASPEP_INIT+0x30>
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80072f0:	2340      	movs	r3, #64	@ 0x40
 80072f2:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f4:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80072f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fc:	e842 3100 	strex	r1, r3, [r2]
 8007300:	2900      	cmp	r1, #0
 8007302:	d1f7      	bne.n	80072f4 <UASPEP_INIT+0x44>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8007304:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	e851 3f00 	ldrex	r3, [r1]
 800730c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007310:	e841 3400 	strex	r4, r3, [r1]
 8007314:	2c00      	cmp	r4, #0
 8007316:	d1f7      	bne.n	8007308 <UASPEP_INIT+0x58>
 8007318:	6901      	ldr	r1, [r0, #16]
 800731a:	6883      	ldr	r3, [r0, #8]
 800731c:	5c69      	ldrb	r1, [r5, r1]
 800731e:	440b      	add	r3, r1
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8007320:	f102 0028 	add.w	r0, r2, #40	@ 0x28
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8007324:	2140      	movs	r1, #64	@ 0x40
 8007326:	6098      	str	r0, [r3, #8]
}
 8007328:	bc30      	pop	{r4, r5}
 800732a:	6211      	str	r1, [r2, #32]
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	0800c624 	.word	0x0800c624

08007334 <UASPEP_CFG_TRANSMISSION>:
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8007334:	6903      	ldr	r3, [r0, #16]
 8007336:	6880      	ldr	r0, [r0, #8]
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
void UASPEP_CFG_TRANSMISSION(void *pHWHandle, void *data, uint16_t length)
{
 8007338:	b410      	push	{r4}
 800733a:	4c0b      	ldr	r4, [pc, #44]	@ (8007368 <UASPEP_CFG_TRANSMISSION+0x34>)
 800733c:	5ce3      	ldrb	r3, [r4, r3]
 800733e:	58c4      	ldr	r4, [r0, r3]
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8007340:	07e4      	lsls	r4, r4, #31
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8007342:	eb00 0c03 	add.w	ip, r0, r3
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8007346:	d40c      	bmi.n	8007362 <UASPEP_CFG_TRANSMISSION+0x2e>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8007348:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800734c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007350:	0c09      	lsrs	r1, r1, #16
 8007352:	0409      	lsls	r1, r1, #16
 8007354:	430a      	orrs	r2, r1
 8007356:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800735a:	58c2      	ldr	r2, [r0, r3]
 800735c:	f042 0201 	orr.w	r2, r2, #1
 8007360:	50c2      	str	r2, [r0, r3]
  }
  else
  {
    /* Nothing to do */
  }
}
 8007362:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	0800c624 	.word	0x0800c624

0800736c <UASPEP_CFG_RECEPTION>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_CFG_RECEPTION(void *pHWHandle, void* buffer, uint16_t length)
{
 800736c:	b430      	push	{r4, r5}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800736e:	68c3      	ldr	r3, [r0, #12]
 8007370:	4d0b      	ldr	r5, [pc, #44]	@ (80073a0 <UASPEP_CFG_RECEPTION+0x34>)
 8007372:	6844      	ldr	r4, [r0, #4]
 8007374:	5ce8      	ldrb	r0, [r5, r3]
 8007376:	5823      	ldr	r3, [r4, r0]
 8007378:	eb04 0c00 	add.w	ip, r4, r0
 800737c:	f023 0301 	bic.w	r3, r3, #1
 8007380:	5023      	str	r3, [r4, r0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8007382:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8007386:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800738a:	0c1b      	lsrs	r3, r3, #16
 800738c:	041b      	lsls	r3, r3, #16
 800738e:	4313      	orrs	r3, r2
 8007390:	f8cc 3004 	str.w	r3, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8007394:	5823      	ldr	r3, [r4, r0]
 8007396:	f043 0301 	orr.w	r3, r3, #1
 800739a:	5023      	str	r3, [r4, r0]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 800739c:	bc30      	pop	{r4, r5}
 800739e:	4770      	bx	lr
 80073a0:	0800c624 	.word	0x0800c624

080073a4 <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 80073a4:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80073a6:	2310      	movs	r3, #16
 80073a8:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073aa:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80073ae:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	e842 3100 	strex	r1, r3, [r2]
 80073b6:	2900      	cmp	r1, #0
 80073b8:	d1f7      	bne.n	80073aa <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 80073ba:	4770      	bx	lr

080073bc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80073bc:	4a03      	ldr	r2, [pc, #12]	@ (80073cc <SystemInit+0x10>)
 80073be:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80073c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80073c6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80073ca:	4770      	bx	lr
 80073cc:	e000ed00 	.word	0xe000ed00

080073d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80073d0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80073d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007410 <HAL_InitTick+0x40>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	b90b      	cbnz	r3, 80073dc <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80073d8:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80073da:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80073dc:	490d      	ldr	r1, [pc, #52]	@ (8007414 <HAL_InitTick+0x44>)
 80073de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80073e2:	4605      	mov	r5, r0
 80073e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e8:	6808      	ldr	r0, [r1, #0]
 80073ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80073ee:	f001 f81b 	bl	8008428 <HAL_SYSTICK_Config>
 80073f2:	4604      	mov	r4, r0
 80073f4:	2800      	cmp	r0, #0
 80073f6:	d1ef      	bne.n	80073d8 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80073f8:	2d0f      	cmp	r5, #15
 80073fa:	d8ed      	bhi.n	80073d8 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80073fc:	4602      	mov	r2, r0
 80073fe:	4629      	mov	r1, r5
 8007400:	f04f 30ff 	mov.w	r0, #4294967295
 8007404:	f000 ffb4 	bl	8008370 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007408:	4b03      	ldr	r3, [pc, #12]	@ (8007418 <HAL_InitTick+0x48>)
 800740a:	4620      	mov	r0, r4
 800740c:	601d      	str	r5, [r3, #0]
}
 800740e:	bd38      	pop	{r3, r4, r5, pc}
 8007410:	20000b60 	.word	0x20000b60
 8007414:	20000b5c 	.word	0x20000b5c
 8007418:	20000b64 	.word	0x20000b64

0800741c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800741c:	4a0a      	ldr	r2, [pc, #40]	@ (8007448 <HAL_Init+0x2c>)
 800741e:	6813      	ldr	r3, [r2, #0]
 8007420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
{
 8007424:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007426:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007428:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800742a:	f000 ff8f 	bl	800834c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800742e:	2004      	movs	r0, #4
 8007430:	f7ff ffce 	bl	80073d0 <HAL_InitTick>
 8007434:	b110      	cbz	r0, 800743c <HAL_Init+0x20>
    status = HAL_ERROR;
 8007436:	2401      	movs	r4, #1
}
 8007438:	4620      	mov	r0, r4
 800743a:	bd10      	pop	{r4, pc}
 800743c:	4604      	mov	r4, r0
    HAL_MspInit();
 800743e:	f7ff fd69 	bl	8006f14 <HAL_MspInit>
}
 8007442:	4620      	mov	r0, r4
 8007444:	bd10      	pop	{r4, pc}
 8007446:	bf00      	nop
 8007448:	40022000 	.word	0x40022000

0800744c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800744c:	4a03      	ldr	r2, [pc, #12]	@ (800745c <HAL_IncTick+0x10>)
 800744e:	4904      	ldr	r1, [pc, #16]	@ (8007460 <HAL_IncTick+0x14>)
 8007450:	6813      	ldr	r3, [r2, #0]
 8007452:	6809      	ldr	r1, [r1, #0]
 8007454:	440b      	add	r3, r1
 8007456:	6013      	str	r3, [r2, #0]
}
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	200020ec 	.word	0x200020ec
 8007460:	20000b60 	.word	0x20000b60

08007464 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007464:	4b01      	ldr	r3, [pc, #4]	@ (800746c <HAL_GetTick+0x8>)
 8007466:	6818      	ldr	r0, [r3, #0]
}
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	200020ec 	.word	0x200020ec

08007470 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007470:	b530      	push	{r4, r5, lr}
 8007472:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8007474:	2300      	movs	r3, #0
 8007476:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8007478:	2800      	cmp	r0, #0
 800747a:	d05c      	beq.n	8007536 <HAL_ADC_Init+0xc6>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800747c:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 800747e:	4604      	mov	r4, r0
 8007480:	2d00      	cmp	r5, #0
 8007482:	f000 80cc 	beq.w	800761e <HAL_ADC_Init+0x1ae>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007486:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007488:	6893      	ldr	r3, [r2, #8]
 800748a:	009d      	lsls	r5, r3, #2
 800748c:	d505      	bpl.n	800749a <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800748e:	6893      	ldr	r3, [r2, #8]
 8007490:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8007494:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007498:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800749a:	6893      	ldr	r3, [r2, #8]
 800749c:	00d8      	lsls	r0, r3, #3
 800749e:	d419      	bmi.n	80074d4 <HAL_ADC_Init+0x64>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80074a0:	4b78      	ldr	r3, [pc, #480]	@ (8007684 <HAL_ADC_Init+0x214>)
 80074a2:	4879      	ldr	r0, [pc, #484]	@ (8007688 <HAL_ADC_Init+0x218>)
 80074a4:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80074a6:	6891      	ldr	r1, [r2, #8]
 80074a8:	099b      	lsrs	r3, r3, #6
 80074aa:	fba0 0303 	umull	r0, r3, r0, r3
 80074ae:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 80074b2:	099b      	lsrs	r3, r3, #6
 80074b4:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80074b8:	3301      	adds	r3, #1
 80074ba:	005b      	lsls	r3, r3, #1
 80074bc:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80074c0:	6091      	str	r1, [r2, #8]
 80074c2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80074c4:	9b01      	ldr	r3, [sp, #4]
 80074c6:	b12b      	cbz	r3, 80074d4 <HAL_ADC_Init+0x64>
    {
      wait_loop_index--;
 80074c8:	9b01      	ldr	r3, [sp, #4]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80074ce:	9b01      	ldr	r3, [sp, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1f9      	bne.n	80074c8 <HAL_ADC_Init+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80074d4:	6893      	ldr	r3, [r2, #8]
 80074d6:	00d9      	lsls	r1, r3, #3
 80074d8:	d430      	bmi.n	800753c <HAL_ADC_Init+0xcc>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074da:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80074dc:	f043 0310 	orr.w	r3, r3, #16
 80074e0:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074e2:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80074e4:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074e6:	4303      	orrs	r3, r0
 80074e8:	6623      	str	r3, [r4, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80074ea:	6893      	ldr	r3, [r2, #8]
 80074ec:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80074f0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80074f2:	d11c      	bne.n	800752e <HAL_ADC_Init+0xbe>
 80074f4:	06db      	lsls	r3, r3, #27
 80074f6:	d41a      	bmi.n	800752e <HAL_ADC_Init+0xbe>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80074f8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80074fa:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80074fe:	f043 0302 	orr.w	r3, r3, #2
 8007502:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007504:	6893      	ldr	r3, [r2, #8]
 8007506:	07dd      	lsls	r5, r3, #31
 8007508:	d432      	bmi.n	8007570 <HAL_ADC_Init+0x100>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800750a:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 800750e:	d017      	beq.n	8007540 <HAL_ADC_Init+0xd0>
 8007510:	4b5e      	ldr	r3, [pc, #376]	@ (800768c <HAL_ADC_Init+0x21c>)
 8007512:	429a      	cmp	r2, r3
 8007514:	d014      	beq.n	8007540 <HAL_ADC_Init+0xd0>
 8007516:	495e      	ldr	r1, [pc, #376]	@ (8007690 <HAL_ADC_Init+0x220>)
 8007518:	4b5e      	ldr	r3, [pc, #376]	@ (8007694 <HAL_ADC_Init+0x224>)
 800751a:	6889      	ldr	r1, [r1, #8]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	430b      	orrs	r3, r1
 8007520:	495d      	ldr	r1, [pc, #372]	@ (8007698 <HAL_ADC_Init+0x228>)
 8007522:	6889      	ldr	r1, [r1, #8]
 8007524:	430b      	orrs	r3, r1
 8007526:	07d9      	lsls	r1, r3, #31
 8007528:	d422      	bmi.n	8007570 <HAL_ADC_Init+0x100>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800752a:	495c      	ldr	r1, [pc, #368]	@ (800769c <HAL_ADC_Init+0x22c>)
 800752c:	e01a      	b.n	8007564 <HAL_ADC_Init+0xf4>
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800752e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8007530:	f043 0310 	orr.w	r3, r3, #16
 8007534:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8007536:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8007538:	b003      	add	sp, #12
 800753a:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800753c:	2000      	movs	r0, #0
 800753e:	e7d4      	b.n	80074ea <HAL_ADC_Init+0x7a>
 8007540:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8007544:	4b51      	ldr	r3, [pc, #324]	@ (800768c <HAL_ADC_Init+0x21c>)
 8007546:	688d      	ldr	r5, [r1, #8]
 8007548:	6899      	ldr	r1, [r3, #8]
 800754a:	07c9      	lsls	r1, r1, #31
 800754c:	d410      	bmi.n	8007570 <HAL_ADC_Init+0x100>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800754e:	07ed      	lsls	r5, r5, #31
 8007550:	d40e      	bmi.n	8007570 <HAL_ADC_Init+0x100>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007552:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8007556:	f000 8092 	beq.w	800767e <HAL_ADC_Init+0x20e>
 800755a:	4950      	ldr	r1, [pc, #320]	@ (800769c <HAL_ADC_Init+0x22c>)
 800755c:	4d50      	ldr	r5, [pc, #320]	@ (80076a0 <HAL_ADC_Init+0x230>)
 800755e:	429a      	cmp	r2, r3
 8007560:	bf08      	it	eq
 8007562:	4629      	moveq	r1, r5
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007564:	688b      	ldr	r3, [r1, #8]
 8007566:	6865      	ldr	r5, [r4, #4]
 8007568:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800756c:	432b      	orrs	r3, r5
 800756e:	608b      	str	r3, [r1, #8]
                 hadc->Init.DataAlign                                                   |
 8007570:	68e5      	ldr	r5, [r4, #12]
 8007572:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007574:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                 hadc->Init.DataAlign                                                   |
 8007578:	432b      	orrs	r3, r5
 800757a:	68a5      	ldr	r5, [r4, #8]
 800757c:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800757e:	7f65      	ldrb	r5, [r4, #29]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007580:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 8007582:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007586:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800758a:	d04e      	beq.n	800762a <HAL_ADC_Init+0x1ba>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800758c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800758e:	b121      	cbz	r1, 800759a <HAL_ADC_Init+0x12a>
                   | hadc->Init.ExternalTrigConvEdge
 8007590:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007592:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8007596:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007598:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800759a:	68d5      	ldr	r5, [r2, #12]
 800759c:	4941      	ldr	r1, [pc, #260]	@ (80076a4 <HAL_ADC_Init+0x234>)
 800759e:	4029      	ands	r1, r5
 80075a0:	4319      	orrs	r1, r3
 80075a2:	60d1      	str	r1, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80075a4:	6913      	ldr	r3, [r2, #16]
 80075a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075a8:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80075ac:	430b      	orrs	r3, r1
 80075ae:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80075b0:	6893      	ldr	r3, [r2, #8]
 80075b2:	071b      	lsls	r3, r3, #28
 80075b4:	d424      	bmi.n	8007600 <HAL_ADC_Init+0x190>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80075b6:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80075b8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80075bc:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80075be:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80075c2:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80075c4:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80075c8:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80075cc:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 80075ce:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80075d0:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80075d2:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 80075d4:	2900      	cmp	r1, #0
 80075d6:	d035      	beq.n	8007644 <HAL_ADC_Init+0x1d4>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80075d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075dc:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80075de:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80075e2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80075e6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80075ea:	430b      	orrs	r3, r1
 80075ec:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 80075f0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d031      	beq.n	800765c <HAL_ADC_Init+0x1ec>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80075f8:	6913      	ldr	r3, [r2, #16]
 80075fa:	f023 0301 	bic.w	r3, r3, #1
 80075fe:	6113      	str	r3, [r2, #16]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007600:	6963      	ldr	r3, [r4, #20]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d016      	beq.n	8007634 <HAL_ADC_Init+0x1c4>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007606:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007608:	f023 030f 	bic.w	r3, r3, #15
 800760c:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800760e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8007610:	f023 0303 	bic.w	r3, r3, #3
 8007614:	f043 0301 	orr.w	r3, r3, #1
 8007618:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 800761a:	b003      	add	sp, #12
 800761c:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 800761e:	f7ff fc99 	bl	8006f54 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8007622:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 8007624:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 8007628:	e72d      	b.n	8007486 <HAL_ADC_Init+0x16>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800762a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800762c:	3901      	subs	r1, #1
 800762e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8007632:	e7ab      	b.n	800758c <HAL_ADC_Init+0x11c>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007634:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8007636:	6a23      	ldr	r3, [r4, #32]
 8007638:	f021 010f 	bic.w	r1, r1, #15
 800763c:	3b01      	subs	r3, #1
 800763e:	430b      	orrs	r3, r1
 8007640:	6313      	str	r3, [r2, #48]	@ 0x30
 8007642:	e7e4      	b.n	800760e <HAL_ADC_Init+0x19e>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007644:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007648:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800764a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 800764e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8007652:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007656:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800765a:	e7c9      	b.n	80075f0 <HAL_ADC_Init+0x180>
        MODIFY_REG(hadc->Instance->CFGR2,
 800765c:	6911      	ldr	r1, [r2, #16]
 800765e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007660:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8007662:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 8007666:	f021 0104 	bic.w	r1, r1, #4
 800766a:	432b      	orrs	r3, r5
 800766c:	430b      	orrs	r3, r1
 800766e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8007670:	430b      	orrs	r3, r1
 8007672:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8007674:	430b      	orrs	r3, r1
 8007676:	f043 0301 	orr.w	r3, r3, #1
 800767a:	6113      	str	r3, [r2, #16]
 800767c:	e7c0      	b.n	8007600 <HAL_ADC_Init+0x190>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800767e:	4908      	ldr	r1, [pc, #32]	@ (80076a0 <HAL_ADC_Init+0x230>)
 8007680:	e770      	b.n	8007564 <HAL_ADC_Init+0xf4>
 8007682:	bf00      	nop
 8007684:	20000b5c 	.word	0x20000b5c
 8007688:	053e2d63 	.word	0x053e2d63
 800768c:	50000100 	.word	0x50000100
 8007690:	50000400 	.word	0x50000400
 8007694:	50000500 	.word	0x50000500
 8007698:	50000600 	.word	0x50000600
 800769c:	50000700 	.word	0x50000700
 80076a0:	50000300 	.word	0x50000300
 80076a4:	fff04007 	.word	0xfff04007

080076a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80076a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80076ac:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
{
 80076b0:	b082      	sub	sp, #8
 80076b2:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80076b4:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 80076b6:	f04f 0000 	mov.w	r0, #0
 80076ba:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80076bc:	f000 811e 	beq.w	80078fc <HAL_ADC_ConfigChannel+0x254>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80076c0:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80076c2:	2001      	movs	r0, #1
 80076c4:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80076c8:	6894      	ldr	r4, [r2, #8]
 80076ca:	0764      	lsls	r4, r4, #29
 80076cc:	d467      	bmi.n	800779e <HAL_ADC_ConfigChannel+0xf6>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80076ce:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80076d0:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 80076d4:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80076d8:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 80076dc:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80076de:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 80076e2:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80076e6:	f854 500e 	ldr.w	r5, [r4, lr]
 80076ea:	261f      	movs	r6, #31
 80076ec:	fa00 f00c 	lsl.w	r0, r0, ip
 80076f0:	fa06 fc0c 	lsl.w	ip, r6, ip
 80076f4:	ea25 0c0c 	bic.w	ip, r5, ip
 80076f8:	ea40 000c 	orr.w	r0, r0, ip
 80076fc:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007700:	6890      	ldr	r0, [r2, #8]
 8007702:	0747      	lsls	r7, r0, #29
 8007704:	d555      	bpl.n	80077b2 <HAL_ADC_ConfigChannel+0x10a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007706:	6890      	ldr	r0, [r2, #8]
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007708:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800770a:	6894      	ldr	r4, [r2, #8]
 800770c:	07e5      	lsls	r5, r4, #31
 800770e:	d412      	bmi.n	8007736 <HAL_ADC_ConfigChannel+0x8e>
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007710:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8007712:	4cba      	ldr	r4, [pc, #744]	@ (80079fc <HAL_ADC_ConfigChannel+0x354>)
 8007714:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 8007718:	f006 0718 	and.w	r7, r6, #24
 800771c:	40fc      	lsrs	r4, r7
 800771e:	f3c0 0712 	ubfx	r7, r0, #0, #19
 8007722:	4004      	ands	r4, r0
 8007724:	ea25 0507 	bic.w	r5, r5, r7
 8007728:	432c      	orrs	r4, r5
 800772a:	f8c2 40b0 	str.w	r4, [r2, #176]	@ 0xb0

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800772e:	4cb4      	ldr	r4, [pc, #720]	@ (8007a00 <HAL_ADC_ConfigChannel+0x358>)
 8007730:	42a6      	cmp	r6, r4
 8007732:	f000 8090 	beq.w	8007856 <HAL_ADC_ConfigChannel+0x1ae>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007736:	49b3      	ldr	r1, [pc, #716]	@ (8007a04 <HAL_ADC_ConfigChannel+0x35c>)
 8007738:	4208      	tst	r0, r1
 800773a:	d02e      	beq.n	800779a <HAL_ADC_ConfigChannel+0xf2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800773c:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8007740:	f000 80da 	beq.w	80078f8 <HAL_ADC_ConfigChannel+0x250>
 8007744:	4db0      	ldr	r5, [pc, #704]	@ (8007a08 <HAL_ADC_ConfigChannel+0x360>)
 8007746:	49b1      	ldr	r1, [pc, #708]	@ (8007a0c <HAL_ADC_ConfigChannel+0x364>)
 8007748:	4cb1      	ldr	r4, [pc, #708]	@ (8007a10 <HAL_ADC_ConfigChannel+0x368>)
 800774a:	42aa      	cmp	r2, r5
 800774c:	bf08      	it	eq
 800774e:	4621      	moveq	r1, r4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007750:	4cb0      	ldr	r4, [pc, #704]	@ (8007a14 <HAL_ADC_ConfigChannel+0x36c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8007752:	6889      	ldr	r1, [r1, #8]
 8007754:	42a0      	cmp	r0, r4
 8007756:	f001 75e0 	and.w	r5, r1, #29360128	@ 0x1c00000
 800775a:	f000 80d3 	beq.w	8007904 <HAL_ADC_ConfigChannel+0x25c>
 800775e:	4cae      	ldr	r4, [pc, #696]	@ (8007a18 <HAL_ADC_ConfigChannel+0x370>)
 8007760:	42a0      	cmp	r0, r4
 8007762:	f000 80cf 	beq.w	8007904 <HAL_ADC_ConfigChannel+0x25c>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007766:	4cad      	ldr	r4, [pc, #692]	@ (8007a1c <HAL_ADC_ConfigChannel+0x374>)
 8007768:	42a0      	cmp	r0, r4
 800776a:	f000 80f4 	beq.w	8007956 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800776e:	4cac      	ldr	r4, [pc, #688]	@ (8007a20 <HAL_ADC_ConfigChannel+0x378>)
 8007770:	42a0      	cmp	r0, r4
 8007772:	d112      	bne.n	800779a <HAL_ADC_ConfigChannel+0xf2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007774:	0249      	lsls	r1, r1, #9
 8007776:	d410      	bmi.n	800779a <HAL_ADC_ConfigChannel+0xf2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007778:	49a3      	ldr	r1, [pc, #652]	@ (8007a08 <HAL_ADC_ConfigChannel+0x360>)
 800777a:	428a      	cmp	r2, r1
 800777c:	d00d      	beq.n	800779a <HAL_ADC_ConfigChannel+0xf2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800777e:	48a4      	ldr	r0, [pc, #656]	@ (8007a10 <HAL_ADC_ConfigChannel+0x368>)
 8007780:	f501 61c0 	add.w	r1, r1, #1536	@ 0x600
 8007784:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8007788:	bf08      	it	eq
 800778a:	4601      	moveq	r1, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800778c:	688a      	ldr	r2, [r1, #8]
 800778e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8007792:	432a      	orrs	r2, r5
 8007794:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8007798:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800779a:	2000      	movs	r0, #0
 800779c:	e003      	b.n	80077a6 <HAL_ADC_ConfigChannel+0xfe>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800779e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80077a0:	f042 0220 	orr.w	r2, r2, #32
 80077a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80077ac:	b002      	add	sp, #8
 80077ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80077b2:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80077b4:	6808      	ldr	r0, [r1, #0]
 80077b6:	0726      	lsls	r6, r4, #28
 80077b8:	d4a7      	bmi.n	800770a <HAL_ADC_ConfigChannel+0x62>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80077ba:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 80077bc:	f3c0 5604 	ubfx	r6, r0, #20, #5
 80077c0:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80077c2:	0dc0      	lsrs	r0, r0, #23
  MODIFY_REG(*preg,
 80077c4:	40b4      	lsls	r4, r6
 80077c6:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80077ca:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 80077ce:	ea6f 0404 	mvn.w	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80077d2:	f102 0714 	add.w	r7, r2, #20
 80077d6:	f000 812d 	beq.w	8007a34 <HAL_ADC_ConfigChannel+0x38c>
  MODIFY_REG(*preg,
 80077da:	40b5      	lsls	r5, r6
 80077dc:	583e      	ldr	r6, [r7, r0]
 80077de:	4034      	ands	r4, r6
 80077e0:	432c      	orrs	r4, r5
 80077e2:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80077e4:	6950      	ldr	r0, [r2, #20]
 80077e6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80077ea:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80077ec:	e9d1 7504 	ldrd	r7, r5, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80077f0:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80077f2:	68d6      	ldr	r6, [r2, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80077f4:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80077f6:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80077fa:	4684      	mov	ip, r0
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80077fc:	f000 80d6 	beq.w	80079ac <HAL_ADC_ConfigChannel+0x304>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8007800:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8007804:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 8007806:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 800780a:	40b5      	lsls	r5, r6
 800780c:	4e85      	ldr	r6, [pc, #532]	@ (8007a24 <HAL_ADC_ConfigChannel+0x37c>)
 800780e:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8007812:	ea0c 0606 	and.w	r6, ip, r6
 8007816:	4306      	orrs	r6, r0
 8007818:	4335      	orrs	r5, r6
 800781a:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
 800781e:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007822:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8007824:	698e      	ldr	r6, [r1, #24]
 8007826:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800782a:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 800782e:	4330      	orrs	r0, r6
 8007830:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007834:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007836:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8007838:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 800783c:	f1a5 0501 	sub.w	r5, r5, #1
 8007840:	fab5 f585 	clz	r5, r5
 8007844:	096d      	lsrs	r5, r5, #5
 8007846:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 800784a:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 800784e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007852:	6808      	ldr	r0, [r1, #0]
}
 8007854:	e759      	b.n	800770a <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007856:	2f00      	cmp	r7, #0
 8007858:	f000 8092 	beq.w	8007980 <HAL_ADC_ConfigChannel+0x2d8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800785c:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8007860:	2c00      	cmp	r4, #0
 8007862:	f000 80ef 	beq.w	8007a44 <HAL_ADC_ConfigChannel+0x39c>
  return __builtin_clz(value);
 8007866:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800786a:	3401      	adds	r4, #1
 800786c:	f004 041f 	and.w	r4, r4, #31
 8007870:	2c09      	cmp	r4, #9
 8007872:	f240 80e7 	bls.w	8007a44 <HAL_ADC_ConfigChannel+0x39c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007876:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800787a:	2c00      	cmp	r4, #0
 800787c:	f000 8186 	beq.w	8007b8c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8007880:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007884:	3401      	adds	r4, #1
 8007886:	06a4      	lsls	r4, r4, #26
 8007888:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800788c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8007890:	2d00      	cmp	r5, #0
 8007892:	f000 8180 	beq.w	8007b96 <HAL_ADC_ConfigChannel+0x4ee>
  return __builtin_clz(value);
 8007896:	fab5 f585 	clz	r5, r5
 800789a:	3501      	adds	r5, #1
 800789c:	f005 051f 	and.w	r5, r5, #31
 80078a0:	2601      	movs	r6, #1
 80078a2:	fa06 f505 	lsl.w	r5, r6, r5
 80078a6:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078a8:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80078ac:	2800      	cmp	r0, #0
 80078ae:	f000 8170 	beq.w	8007b92 <HAL_ADC_ConfigChannel+0x4ea>
  return __builtin_clz(value);
 80078b2:	fab0 f080 	clz	r0, r0
 80078b6:	1c45      	adds	r5, r0, #1
 80078b8:	f005 051f 	and.w	r5, r5, #31
 80078bc:	2003      	movs	r0, #3
 80078be:	f06f 061d 	mvn.w	r6, #29
 80078c2:	fb10 6005 	smlabb	r0, r0, r5, r6
 80078c6:	0500      	lsls	r0, r0, #20
 80078c8:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80078cc:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80078ce:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 80078d0:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80078d2:	f005 0504 	and.w	r5, r5, #4
 80078d6:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 80078da:	f3c0 5004 	ubfx	r0, r0, #20, #5
 80078de:	fa04 f700 	lsl.w	r7, r4, r0
 80078e2:	f04f 0c07 	mov.w	ip, #7
 80078e6:	5974      	ldr	r4, [r6, r5]
 80078e8:	fa0c f000 	lsl.w	r0, ip, r0
 80078ec:	ea24 0000 	bic.w	r0, r4, r0
 80078f0:	4338      	orrs	r0, r7
 80078f2:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80078f4:	6808      	ldr	r0, [r1, #0]
}
 80078f6:	e71e      	b.n	8007736 <HAL_ADC_ConfigChannel+0x8e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80078f8:	4945      	ldr	r1, [pc, #276]	@ (8007a10 <HAL_ADC_ConfigChannel+0x368>)
 80078fa:	e729      	b.n	8007750 <HAL_ADC_ConfigChannel+0xa8>
  __HAL_LOCK(hadc);
 80078fc:	2002      	movs	r0, #2
}
 80078fe:	b002      	add	sp, #8
 8007900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007904:	020c      	lsls	r4, r1, #8
 8007906:	f53f af48 	bmi.w	800779a <HAL_ADC_ConfigChannel+0xf2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800790a:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 800790e:	d04b      	beq.n	80079a8 <HAL_ADC_ConfigChannel+0x300>
 8007910:	4945      	ldr	r1, [pc, #276]	@ (8007a28 <HAL_ADC_ConfigChannel+0x380>)
 8007912:	428a      	cmp	r2, r1
 8007914:	f47f af41 	bne.w	800779a <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007918:	483c      	ldr	r0, [pc, #240]	@ (8007a0c <HAL_ADC_ConfigChannel+0x364>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800791a:	4a44      	ldr	r2, [pc, #272]	@ (8007a2c <HAL_ADC_ConfigChannel+0x384>)
 800791c:	4c44      	ldr	r4, [pc, #272]	@ (8007a30 <HAL_ADC_ConfigChannel+0x388>)
 800791e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8007920:	6881      	ldr	r1, [r0, #8]
 8007922:	0992      	lsrs	r2, r2, #6
 8007924:	fba4 4202 	umull	r4, r2, r4, r2
 8007928:	0992      	lsrs	r2, r2, #6
 800792a:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 800792e:	3201      	adds	r2, #1
 8007930:	4329      	orrs	r1, r5
 8007932:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007936:	0092      	lsls	r2, r2, #2
 8007938:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800793c:	6081      	str	r1, [r0, #8]
 800793e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8007940:	9a01      	ldr	r2, [sp, #4]
 8007942:	2a00      	cmp	r2, #0
 8007944:	f43f af29 	beq.w	800779a <HAL_ADC_ConfigChannel+0xf2>
            wait_loop_index--;
 8007948:	9a01      	ldr	r2, [sp, #4]
 800794a:	3a01      	subs	r2, #1
 800794c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800794e:	9a01      	ldr	r2, [sp, #4]
 8007950:	2a00      	cmp	r2, #0
 8007952:	d1f9      	bne.n	8007948 <HAL_ADC_ConfigChannel+0x2a0>
 8007954:	e721      	b.n	800779a <HAL_ADC_ConfigChannel+0xf2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007956:	01c8      	lsls	r0, r1, #7
 8007958:	f53f af1f 	bmi.w	800779a <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800795c:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8007960:	f000 810a 	beq.w	8007b78 <HAL_ADC_ConfigChannel+0x4d0>
 8007964:	4c28      	ldr	r4, [pc, #160]	@ (8007a08 <HAL_ADC_ConfigChannel+0x360>)
 8007966:	4929      	ldr	r1, [pc, #164]	@ (8007a0c <HAL_ADC_ConfigChannel+0x364>)
 8007968:	4829      	ldr	r0, [pc, #164]	@ (8007a10 <HAL_ADC_ConfigChannel+0x368>)
 800796a:	42a2      	cmp	r2, r4
 800796c:	bf08      	it	eq
 800796e:	4601      	moveq	r1, r0
 8007970:	688a      	ldr	r2, [r1, #8]
 8007972:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8007976:	432a      	orrs	r2, r5
 8007978:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800797c:	608a      	str	r2, [r1, #8]
}
 800797e:	e70c      	b.n	800779a <HAL_ADC_ConfigChannel+0xf2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007980:	0e80      	lsrs	r0, r0, #26
 8007982:	3001      	adds	r0, #1
 8007984:	f000 051f 	and.w	r5, r0, #31
 8007988:	2401      	movs	r4, #1
 800798a:	0680      	lsls	r0, r0, #26
 800798c:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8007990:	40ac      	lsls	r4, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007992:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007994:	ea44 0400 	orr.w	r4, r4, r0
 8007998:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800799c:	d977      	bls.n	8007a8e <HAL_ADC_ConfigChannel+0x3e6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800799e:	381e      	subs	r0, #30
 80079a0:	0500      	lsls	r0, r0, #20
 80079a2:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 80079a6:	e791      	b.n	80078cc <HAL_ADC_ConfigChannel+0x224>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80079a8:	4819      	ldr	r0, [pc, #100]	@ (8007a10 <HAL_ADC_ConfigChannel+0x368>)
 80079aa:	e7b6      	b.n	800791a <HAL_ADC_ConfigChannel+0x272>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80079ac:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 80079ae:	6e15      	ldr	r5, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80079b0:	f3c0 0612 	ubfx	r6, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80079b4:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80079b8:	2e00      	cmp	r6, #0
 80079ba:	d16a      	bne.n	8007a92 <HAL_ADC_ConfigChannel+0x3ea>
 80079bc:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80079c0:	4285      	cmp	r5, r0
 80079c2:	f000 8097 	beq.w	8007af4 <HAL_ADC_ConfigChannel+0x44c>
 80079c6:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 80079c8:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80079ca:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80079ce:	4285      	cmp	r5, r0
 80079d0:	f000 80a2 	beq.w	8007b18 <HAL_ADC_ConfigChannel+0x470>
 80079d4:	68a5      	ldr	r5, [r4, #8]
 80079d6:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80079d8:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80079dc:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80079e0:	4285      	cmp	r5, r0
 80079e2:	f000 80ae 	beq.w	8007b42 <HAL_ADC_ConfigChannel+0x49a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80079e6:	68e5      	ldr	r5, [r4, #12]
 80079e8:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80079ea:	f104 060c 	add.w	r6, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80079ee:	f3c5 6484 	ubfx	r4, r5, #26, #5
 80079f2:	42a0      	cmp	r0, r4
 80079f4:	f000 80ba 	beq.w	8007b6c <HAL_ADC_ConfigChannel+0x4c4>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80079f8:	4660      	mov	r0, ip
 80079fa:	e686      	b.n	800770a <HAL_ADC_ConfigChannel+0x62>
 80079fc:	0007ffff 	.word	0x0007ffff
 8007a00:	407f0000 	.word	0x407f0000
 8007a04:	80080000 	.word	0x80080000
 8007a08:	50000100 	.word	0x50000100
 8007a0c:	50000700 	.word	0x50000700
 8007a10:	50000300 	.word	0x50000300
 8007a14:	c3210000 	.word	0xc3210000
 8007a18:	90c00010 	.word	0x90c00010
 8007a1c:	c7520000 	.word	0xc7520000
 8007a20:	cb840000 	.word	0xcb840000
 8007a24:	03fff000 	.word	0x03fff000
 8007a28:	50000600 	.word	0x50000600
 8007a2c:	20000b5c 	.word	0x20000b5c
 8007a30:	053e2d63 	.word	0x053e2d63
  MODIFY_REG(*preg,
 8007a34:	583d      	ldr	r5, [r7, r0]
 8007a36:	402c      	ands	r4, r5
 8007a38:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007a3a:	6950      	ldr	r0, [r2, #20]
 8007a3c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8007a40:	6150      	str	r0, [r2, #20]
}
 8007a42:	e6d3      	b.n	80077ec <HAL_ADC_ConfigChannel+0x144>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a44:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8007a48:	2c00      	cmp	r4, #0
 8007a4a:	f000 8099 	beq.w	8007b80 <HAL_ADC_ConfigChannel+0x4d8>
  return __builtin_clz(value);
 8007a4e:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007a52:	3401      	adds	r4, #1
 8007a54:	06a4      	lsls	r4, r4, #26
 8007a56:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a5a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8007a5e:	2d00      	cmp	r5, #0
 8007a60:	f000 808c 	beq.w	8007b7c <HAL_ADC_ConfigChannel+0x4d4>
  return __builtin_clz(value);
 8007a64:	fab5 f585 	clz	r5, r5
 8007a68:	3501      	adds	r5, #1
 8007a6a:	f005 051f 	and.w	r5, r5, #31
 8007a6e:	2601      	movs	r6, #1
 8007a70:	fa06 f505 	lsl.w	r5, r6, r5
 8007a74:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a76:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	f000 8083 	beq.w	8007b86 <HAL_ADC_ConfigChannel+0x4de>
  return __builtin_clz(value);
 8007a80:	fab0 f080 	clz	r0, r0
 8007a84:	3001      	adds	r0, #1
 8007a86:	f000 001f 	and.w	r0, r0, #31
 8007a8a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007a8e:	0500      	lsls	r0, r0, #20
 8007a90:	e71c      	b.n	80078cc <HAL_ADC_ConfigChannel+0x224>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a92:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 8007a96:	b11e      	cbz	r6, 8007aa0 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 8007a98:	fab6 f686 	clz	r6, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007a9c:	42b5      	cmp	r5, r6
 8007a9e:	d029      	beq.n	8007af4 <HAL_ADC_ConfigChannel+0x44c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007aa0:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8007aa2:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007aa4:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007aa8:	fa9c f6ac 	rbit	r6, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007aac:	f104 0708 	add.w	r7, r4, #8
 8007ab0:	46be      	mov	lr, r7
  if (value == 0U)
 8007ab2:	b11e      	cbz	r6, 8007abc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8007ab4:	fab6 f686 	clz	r6, r6
 8007ab8:	42ae      	cmp	r6, r5
 8007aba:	d02f      	beq.n	8007b1c <HAL_ADC_ConfigChannel+0x474>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007abc:	68a5      	ldr	r5, [r4, #8]
 8007abe:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007ac0:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ac4:	fa9c feac 	rbit	lr, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007ac8:	f104 060c 	add.w	r6, r4, #12
 8007acc:	46b0      	mov	r8, r6
  if (value == 0U)
 8007ace:	f1be 0f00 	cmp.w	lr, #0
 8007ad2:	d003      	beq.n	8007adc <HAL_ADC_ConfigChannel+0x434>
  return __builtin_clz(value);
 8007ad4:	fabe fe8e 	clz	lr, lr
 8007ad8:	45ae      	cmp	lr, r5
 8007ada:	d034      	beq.n	8007b46 <HAL_ADC_ConfigChannel+0x49e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007adc:	68e5      	ldr	r5, [r4, #12]
 8007ade:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007ae0:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ae4:	fa9c f5ac 	rbit	r5, ip
  if (value == 0U)
 8007ae8:	2d00      	cmp	r5, #0
 8007aea:	f43f ae0e 	beq.w	800770a <HAL_ADC_ConfigChannel+0x62>
  return __builtin_clz(value);
 8007aee:	fab5 f085 	clz	r0, r5
 8007af2:	e77e      	b.n	80079f2 <HAL_ADC_ConfigChannel+0x34a>
  MODIFY_REG(*preg,
 8007af4:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8007af6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007afa:	6610      	str	r0, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007afc:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007b00:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8007b02:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8007b04:	f3cc 0612 	ubfx	r6, ip, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007b08:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007b0c:	4660      	mov	r0, ip
 8007b0e:	2e00      	cmp	r6, #0
 8007b10:	d1ca      	bne.n	8007aa8 <HAL_ADC_ConfigChannel+0x400>
 8007b12:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8007b16:	e75a      	b.n	80079ce <HAL_ADC_ConfigChannel+0x326>
 8007b18:	f104 0e08 	add.w	lr, r4, #8
  MODIFY_REG(*preg,
 8007b1c:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8007b1e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007b22:	6650      	str	r0, [r2, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007b24:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007b28:	68a0      	ldr	r0, [r4, #8]
 8007b2a:	68a5      	ldr	r5, [r4, #8]
 8007b2c:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007b30:	4677      	mov	r7, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007b32:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007b36:	4660      	mov	r0, ip
 8007b38:	2e00      	cmp	r6, #0
 8007b3a:	d1c3      	bne.n	8007ac4 <HAL_ADC_ConfigChannel+0x41c>
 8007b3c:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8007b40:	e74e      	b.n	80079e0 <HAL_ADC_ConfigChannel+0x338>
 8007b42:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 8007b46:	6838      	ldr	r0, [r7, #0]
 8007b48:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007b4c:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007b4e:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007b52:	68e0      	ldr	r0, [r4, #12]
 8007b54:	68e4      	ldr	r4, [r4, #12]
 8007b56:	f3cc 0512 	ubfx	r5, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007b5a:	4646      	mov	r6, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007b5c:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007b60:	4660      	mov	r0, ip
 8007b62:	2d00      	cmp	r5, #0
 8007b64:	d1be      	bne.n	8007ae4 <HAL_ADC_ConfigChannel+0x43c>
 8007b66:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8007b6a:	e742      	b.n	80079f2 <HAL_ADC_ConfigChannel+0x34a>
  MODIFY_REG(*preg,
 8007b6c:	6830      	ldr	r0, [r6, #0]
 8007b6e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007b72:	6030      	str	r0, [r6, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007b74:	6808      	ldr	r0, [r1, #0]
}
 8007b76:	e5c8      	b.n	800770a <HAL_ADC_ConfigChannel+0x62>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007b78:	4908      	ldr	r1, [pc, #32]	@ (8007b9c <HAL_ADC_ConfigChannel+0x4f4>)
 8007b7a:	e6f9      	b.n	8007970 <HAL_ADC_ConfigChannel+0x2c8>
 8007b7c:	2502      	movs	r5, #2
 8007b7e:	e779      	b.n	8007a74 <HAL_ADC_ConfigChannel+0x3cc>
 8007b80:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8007b84:	e769      	b.n	8007a5a <HAL_ADC_ConfigChannel+0x3b2>
 8007b86:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8007b8a:	e69f      	b.n	80078cc <HAL_ADC_ConfigChannel+0x224>
 8007b8c:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8007b90:	e67c      	b.n	800788c <HAL_ADC_ConfigChannel+0x1e4>
 8007b92:	4803      	ldr	r0, [pc, #12]	@ (8007ba0 <HAL_ADC_ConfigChannel+0x4f8>)
 8007b94:	e69a      	b.n	80078cc <HAL_ADC_ConfigChannel+0x224>
 8007b96:	2502      	movs	r5, #2
 8007b98:	e685      	b.n	80078a6 <HAL_ADC_ConfigChannel+0x1fe>
 8007b9a:	bf00      	nop
 8007b9c:	50000300 	.word	0x50000300
 8007ba0:	fe500000 	.word	0xfe500000

08007ba4 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8007ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007ba8:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
{
 8007bac:	4602      	mov	r2, r0
 8007bae:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8007bb0:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8007bb2:	2b01      	cmp	r3, #1
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007bb4:	6955      	ldr	r5, [r2, #20]
  __IO uint32_t wait_loop_index = 0;
 8007bb6:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8007bb8:	f000 818b 	beq.w	8007ed2 <HAL_ADCEx_InjectedConfigChannel+0x32e>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8007bc2:	e9d1 4000 	ldrd	r4, r0, [r1]

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8007bc6:	6813      	ldr	r3, [r2, #0]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8007bc8:	2d00      	cmp	r5, #0
 8007bca:	f000 8083 	beq.w	8007cd4 <HAL_ADCEx_InjectedConfigChannel+0x130>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8007bce:	6a0d      	ldr	r5, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8007bd0:	2d01      	cmp	r5, #1
 8007bd2:	d07f      	beq.n	8007cd4 <HAL_ADCEx_InjectedConfigChannel+0x130>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8007bd4:	6e97      	ldr	r7, [r2, #104]	@ 0x68
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8007bd6:	f000 001f 	and.w	r0, r0, #31
 8007bda:	f3c4 6684 	ubfx	r6, r4, #26, #5
 8007bde:	4086      	lsls	r6, r0
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8007be0:	2f00      	cmp	r7, #0
 8007be2:	f040 812e 	bne.w	8007e42 <HAL_ADCEx_InjectedConfigChannel+0x29e>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007be6:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8007be8:	3d01      	subs	r5, #1
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007bea:	2800      	cmp	r0, #0
 8007bec:	f000 8236 	beq.w	800805c <HAL_ADCEx_InjectedConfigChannel+0x4b8>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8007bf0:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8007bf2:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
 8007bf6:	4328      	orrs	r0, r5
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8007bf8:	4338      	orrs	r0, r7
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8007bfa:	4330      	orrs	r0, r6
 8007bfc:	e9c2 0519 	strd	r0, r5, [r2, #100]	@ 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007c00:	6898      	ldr	r0, [r3, #8]
 8007c02:	0700      	lsls	r0, r0, #28
 8007c04:	d410      	bmi.n	8007c28 <HAL_ADCEx_InjectedConfigChannel+0x84>
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8007c06:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8007c0a:	f891 5025 	ldrb.w	r5, [r1, #37]	@ 0x25
      MODIFY_REG(hadc->Instance->CFGR,
 8007c0e:	0540      	lsls	r0, r0, #21
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8007c10:	2d00      	cmp	r5, #0
 8007c12:	f040 810b 	bne.w	8007e2c <HAL_ADCEx_InjectedConfigChannel+0x288>
      MODIFY_REG(hadc->Instance->CFGR,
 8007c16:	68dd      	ldr	r5, [r3, #12]
 8007c18:	f891 6024 	ldrb.w	r6, [r1, #36]	@ 0x24
 8007c1c:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 8007c20:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 8007c24:	4328      	orrs	r0, r5
 8007c26:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007c28:	6898      	ldr	r0, [r3, #8]
 8007c2a:	f010 0004 	ands.w	r0, r0, #4
 8007c2e:	d067      	beq.n	8007d00 <HAL_ADCEx_InjectedConfigChannel+0x15c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007c30:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c32:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007c34:	689d      	ldr	r5, [r3, #8]
 8007c36:	07ee      	lsls	r6, r5, #31
 8007c38:	d414      	bmi.n	8007c64 <HAL_ADCEx_InjectedConfigChannel+0xc0>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8007c3a:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8007c3c:	4db1      	ldr	r5, [pc, #708]	@ (8007f04 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8007c3e:	f8d3 60b0 	ldr.w	r6, [r3, #176]	@ 0xb0
 8007c42:	f007 0c18 	and.w	ip, r7, #24
 8007c46:	fa25 f50c 	lsr.w	r5, r5, ip
 8007c4a:	f3c4 0e12 	ubfx	lr, r4, #0, #19
 8007c4e:	4025      	ands	r5, r4
 8007c50:	ea26 0c0e 	bic.w	ip, r6, lr
 8007c54:	ea45 050c 	orr.w	r5, r5, ip
 8007c58:	f8c3 50b0 	str.w	r5, [r3, #176]	@ 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007c5c:	4daa      	ldr	r5, [pc, #680]	@ (8007f08 <HAL_ADCEx_InjectedConfigChannel+0x364>)
 8007c5e:	42af      	cmp	r7, r5
 8007c60:	f000 810a 	beq.w	8007e78 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8007c64:	49a9      	ldr	r1, [pc, #676]	@ (8007f0c <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8007c66:	420c      	tst	r4, r1
 8007c68:	d02e      	beq.n	8007cc8 <HAL_ADCEx_InjectedConfigChannel+0x124>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c6e:	f000 812e 	beq.w	8007ece <HAL_ADCEx_InjectedConfigChannel+0x32a>
 8007c72:	4ea7      	ldr	r6, [pc, #668]	@ (8007f10 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 8007c74:	49a7      	ldr	r1, [pc, #668]	@ (8007f14 <HAL_ADCEx_InjectedConfigChannel+0x370>)
 8007c76:	4da8      	ldr	r5, [pc, #672]	@ (8007f18 <HAL_ADCEx_InjectedConfigChannel+0x374>)
 8007c78:	42b3      	cmp	r3, r6
 8007c7a:	bf08      	it	eq
 8007c7c:	4629      	moveq	r1, r5

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8007c7e:	4da7      	ldr	r5, [pc, #668]	@ (8007f1c <HAL_ADCEx_InjectedConfigChannel+0x378>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8007c80:	6889      	ldr	r1, [r1, #8]
 8007c82:	42ac      	cmp	r4, r5
 8007c84:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8007c88:	f000 80a6 	beq.w	8007dd8 <HAL_ADCEx_InjectedConfigChannel+0x234>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007c8c:	4da4      	ldr	r5, [pc, #656]	@ (8007f20 <HAL_ADCEx_InjectedConfigChannel+0x37c>)
 8007c8e:	42ac      	cmp	r4, r5
 8007c90:	f000 80a2 	beq.w	8007dd8 <HAL_ADCEx_InjectedConfigChannel+0x234>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8007c94:	4da3      	ldr	r5, [pc, #652]	@ (8007f24 <HAL_ADCEx_InjectedConfigChannel+0x380>)
 8007c96:	42ac      	cmp	r4, r5
 8007c98:	f000 811f 	beq.w	8007eda <HAL_ADCEx_InjectedConfigChannel+0x336>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8007c9c:	4da2      	ldr	r5, [pc, #648]	@ (8007f28 <HAL_ADCEx_InjectedConfigChannel+0x384>)
 8007c9e:	42ac      	cmp	r4, r5
 8007ca0:	d112      	bne.n	8007cc8 <HAL_ADCEx_InjectedConfigChannel+0x124>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007ca2:	0249      	lsls	r1, r1, #9
 8007ca4:	d410      	bmi.n	8007cc8 <HAL_ADCEx_InjectedConfigChannel+0x124>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8007ca6:	499a      	ldr	r1, [pc, #616]	@ (8007f10 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 8007ca8:	428b      	cmp	r3, r1
 8007caa:	d00d      	beq.n	8007cc8 <HAL_ADCEx_InjectedConfigChannel+0x124>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007cac:	4c9a      	ldr	r4, [pc, #616]	@ (8007f18 <HAL_ADCEx_InjectedConfigChannel+0x374>)
 8007cae:	f501 61c0 	add.w	r1, r1, #1536	@ 0x600
 8007cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007cb6:	bf08      	it	eq
 8007cb8:	4621      	moveq	r1, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8007cba:	688b      	ldr	r3, [r1, #8]
 8007cbc:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8007cc0:	4333      	orrs	r3, r6
 8007cc2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007cc6:	608b      	str	r3, [r1, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007cc8:	2300      	movs	r3, #0
 8007cca:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8007cce:	b003      	add	sp, #12
 8007cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8007cd4:	2809      	cmp	r0, #9
 8007cd6:	d193      	bne.n	8007c00 <HAL_ADCEx_InjectedConfigChannel+0x5c>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007cd8:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8007cda:	0c65      	lsrs	r5, r4, #17
 8007cdc:	f405 5578 	and.w	r5, r5, #15872	@ 0x3e00
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007ce0:	b120      	cbz	r0, 8007cec <HAL_ADCEx_InjectedConfigChannel+0x148>
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8007ce2:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8007ce4:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8007ce8:	4330      	orrs	r0, r6
 8007cea:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8007cec:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007cee:	4e8f      	ldr	r6, [pc, #572]	@ (8007f2c <HAL_ADCEx_InjectedConfigChannel+0x388>)
 8007cf0:	4030      	ands	r0, r6
 8007cf2:	4328      	orrs	r0, r5
 8007cf4:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007cf6:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8007cf8:	6655      	str	r5, [r2, #100]	@ 0x64
 8007cfa:	0700      	lsls	r0, r0, #28
 8007cfc:	d494      	bmi.n	8007c28 <HAL_ADCEx_InjectedConfigChannel+0x84>
 8007cfe:	e782      	b.n	8007c06 <HAL_ADCEx_InjectedConfigChannel+0x62>
 8007d00:	689d      	ldr	r5, [r3, #8]
 8007d02:	072f      	lsls	r7, r5, #28
 8007d04:	d496      	bmi.n	8007c34 <HAL_ADCEx_InjectedConfigChannel+0x90>
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8007d06:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8007d08:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8007d0c:	2d00      	cmp	r5, #0
 8007d0e:	f040 80aa 	bne.w	8007e66 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8007d12:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8007d14:	68d8      	ldr	r0, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8007d16:	f000 81a3 	beq.w	8008060 <HAL_ADCEx_InjectedConfigChannel+0x4bc>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8007d1a:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8007d1e:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d20:	2000      	movs	r0, #0
    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8007d22:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8007d26:	2d01      	cmp	r5, #1
 8007d28:	f000 818d 	beq.w	8008046 <HAL_ADCEx_InjectedConfigChannel+0x4a2>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8007d2c:	691d      	ldr	r5, [r3, #16]
 8007d2e:	f025 0502 	bic.w	r5, r5, #2
 8007d32:	611d      	str	r5, [r3, #16]
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007d34:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(*preg,
 8007d36:	f3c4 5704 	ubfx	r7, r4, #20, #5
 8007d3a:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8007d3c:	0de4      	lsrs	r4, r4, #23
  MODIFY_REG(*preg,
 8007d3e:	40bd      	lsls	r5, r7
 8007d40:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8007d44:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8007d48:	ea6f 0505 	mvn.w	r5, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8007d4c:	f103 0c14 	add.w	ip, r3, #20
 8007d50:	f000 816f 	beq.w	8008032 <HAL_ADCEx_InjectedConfigChannel+0x48e>
  MODIFY_REG(*preg,
 8007d54:	40be      	lsls	r6, r7
 8007d56:	f85c 7004 	ldr.w	r7, [ip, r4]
 8007d5a:	403d      	ands	r5, r7
 8007d5c:	4335      	orrs	r5, r6
 8007d5e:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007d62:	695c      	ldr	r4, [r3, #20]
 8007d64:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8007d68:	615c      	str	r4, [r3, #20]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8007d6a:	f8d1 c010 	ldr.w	ip, [r1, #16]
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8007d6e:	680c      	ldr	r4, [r1, #0]
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8007d70:	694e      	ldr	r6, [r1, #20]
 8007d72:	68df      	ldr	r7, [r3, #12]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8007d74:	f1bc 0f04 	cmp.w	ip, #4
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8007d78:	46a6      	mov	lr, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007d7a:	f103 0560 	add.w	r5, r3, #96	@ 0x60
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8007d7e:	f000 8118 	beq.w	8007fb2 <HAL_ADCEx_InjectedConfigChannel+0x40e>
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8007d82:	f3c7 07c1 	ubfx	r7, r7, #3, #2
 8007d86:	007f      	lsls	r7, r7, #1
  MODIFY_REG(*preg,
 8007d88:	f855 e02c 	ldr.w	lr, [r5, ip, lsl #2]
 8007d8c:	40be      	lsls	r6, r7
 8007d8e:	4f68      	ldr	r7, [pc, #416]	@ (8007f30 <HAL_ADCEx_InjectedConfigChannel+0x38c>)
 8007d90:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8007d94:	ea0e 0707 	and.w	r7, lr, r7
 8007d98:	4327      	orrs	r7, r4
 8007d9a:	433e      	orrs	r6, r7
 8007d9c:	f046 4600 	orr.w	r6, r6, #2147483648	@ 0x80000000
 8007da0:	f845 602c 	str.w	r6, [r5, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007da4:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8007da6:	698e      	ldr	r6, [r1, #24]
 8007da8:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8007dac:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 8007db0:	4334      	orrs	r4, r6
 8007db2:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007db6:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8007db8:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 8007dba:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8007dbe:	f1a6 0601 	sub.w	r6, r6, #1
 8007dc2:	fab6 f686 	clz	r6, r6
 8007dc6:	0976      	lsrs	r6, r6, #5
 8007dc8:	f024 7400 	bic.w	r4, r4, #33554432	@ 0x2000000
 8007dcc:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 8007dd0:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8007dd4:	680c      	ldr	r4, [r1, #0]
}
 8007dd6:	e72d      	b.n	8007c34 <HAL_ADCEx_InjectedConfigChannel+0x90>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007dd8:	020d      	lsls	r5, r1, #8
 8007dda:	f53f af75 	bmi.w	8007cc8 <HAL_ADCEx_InjectedConfigChannel+0x124>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007de2:	f000 8189 	beq.w	80080f8 <HAL_ADCEx_InjectedConfigChannel+0x554>
 8007de6:	4953      	ldr	r1, [pc, #332]	@ (8007f34 <HAL_ADCEx_InjectedConfigChannel+0x390>)
 8007de8:	428b      	cmp	r3, r1
 8007dea:	f47f af6d 	bne.w	8007cc8 <HAL_ADCEx_InjectedConfigChannel+0x124>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007dee:	4c49      	ldr	r4, [pc, #292]	@ (8007f14 <HAL_ADCEx_InjectedConfigChannel+0x370>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8007df0:	68a1      	ldr	r1, [r4, #8]
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8007df2:	4b51      	ldr	r3, [pc, #324]	@ (8007f38 <HAL_ADCEx_InjectedConfigChannel+0x394>)
 8007df4:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8007df8:	4331      	orrs	r1, r6
 8007dfa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	60a1      	str	r1, [r4, #8]
 8007e02:	494e      	ldr	r1, [pc, #312]	@ (8007f3c <HAL_ADCEx_InjectedConfigChannel+0x398>)
 8007e04:	099b      	lsrs	r3, r3, #6
 8007e06:	fba1 1303 	umull	r1, r3, r1, r3
 8007e0a:	099b      	lsrs	r3, r3, #6
 8007e0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8007e14:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8007e16:	9b01      	ldr	r3, [sp, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f43f af55 	beq.w	8007cc8 <HAL_ADCEx_InjectedConfigChannel+0x124>
          wait_loop_index--;
 8007e1e:	9b01      	ldr	r3, [sp, #4]
 8007e20:	3b01      	subs	r3, #1
 8007e22:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8007e24:	9b01      	ldr	r3, [sp, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1f9      	bne.n	8007e1e <HAL_ADCEx_InjectedConfigChannel+0x27a>
 8007e2a:	e74d      	b.n	8007cc8 <HAL_ADCEx_InjectedConfigChannel+0x124>
      MODIFY_REG(hadc->Instance->CFGR,
 8007e2c:	68dd      	ldr	r5, [r3, #12]
 8007e2e:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 8007e32:	4328      	orrs	r0, r5
 8007e34:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007e36:	6898      	ldr	r0, [r3, #8]
 8007e38:	f010 0004 	ands.w	r0, r0, #4
 8007e3c:	f43f af60 	beq.w	8007d00 <HAL_ADCEx_InjectedConfigChannel+0x15c>
 8007e40:	e6f6      	b.n	8007c30 <HAL_ADCEx_InjectedConfigChannel+0x8c>
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8007e42:	6e55      	ldr	r5, [r2, #100]	@ 0x64
    hadc->InjectionConfig.ChannelCount--;
 8007e44:	3f01      	subs	r7, #1
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8007e46:	4335      	orrs	r5, r6
    hadc->InjectionConfig.ChannelCount--;
 8007e48:	6697      	str	r7, [r2, #104]	@ 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8007e4a:	6655      	str	r5, [r2, #100]	@ 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8007e4c:	2f00      	cmp	r7, #0
 8007e4e:	f47f aed7 	bne.w	8007c00 <HAL_ADCEx_InjectedConfigChannel+0x5c>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8007e52:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007e54:	4e35      	ldr	r6, [pc, #212]	@ (8007f2c <HAL_ADCEx_InjectedConfigChannel+0x388>)
 8007e56:	4030      	ands	r0, r6
 8007e58:	4328      	orrs	r0, r5
 8007e5a:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007e5c:	6898      	ldr	r0, [r3, #8]
 8007e5e:	0700      	lsls	r0, r0, #28
 8007e60:	f53f aee2 	bmi.w	8007c28 <HAL_ADCEx_InjectedConfigChannel+0x84>
 8007e64:	e6cf      	b.n	8007c06 <HAL_ADCEx_InjectedConfigChannel+0x62>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8007e66:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 8007e68:	2d00      	cmp	r5, #0
 8007e6a:	f43f af52 	beq.w	8007d12 <HAL_ADCEx_InjectedConfigChannel+0x16e>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8007e6e:	2801      	cmp	r0, #1
 8007e70:	f000 8118 	beq.w	80080a4 <HAL_ADCEx_InjectedConfigChannel+0x500>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8007e74:	68d8      	ldr	r0, [r3, #12]
 8007e76:	e750      	b.n	8007d1a <HAL_ADCEx_InjectedConfigChannel+0x176>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007e78:	f1be 0f00 	cmp.w	lr, #0
 8007e7c:	d160      	bne.n	8007f40 <HAL_ADCEx_InjectedConfigChannel+0x39c>
 8007e7e:	0ea4      	lsrs	r4, r4, #26
 8007e80:	3401      	adds	r4, #1
 8007e82:	f004 061f 	and.w	r6, r4, #31
 8007e86:	2501      	movs	r5, #1
 8007e88:	06a4      	lsls	r4, r4, #26
 8007e8a:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8007e8e:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007e90:	2e09      	cmp	r6, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007e92:	ea45 0504 	orr.w	r5, r5, r4
 8007e96:	eb06 0446 	add.w	r4, r6, r6, lsl #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007e9a:	f200 80e5 	bhi.w	8008068 <HAL_ADCEx_InjectedConfigChannel+0x4c4>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007e9e:	0524      	lsls	r4, r4, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007ea0:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8007ea2:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 8007ea4:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8007ea6:	f006 0604 	and.w	r6, r6, #4
 8007eaa:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8007eae:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8007eb2:	fa05 fc04 	lsl.w	ip, r5, r4
 8007eb6:	f04f 0e07 	mov.w	lr, #7
 8007eba:	59bd      	ldr	r5, [r7, r6]
 8007ebc:	fa0e f404 	lsl.w	r4, lr, r4
 8007ec0:	ea25 0404 	bic.w	r4, r5, r4
 8007ec4:	ea44 040c 	orr.w	r4, r4, ip
 8007ec8:	51bc      	str	r4, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8007eca:	680c      	ldr	r4, [r1, #0]
}
 8007ecc:	e6ca      	b.n	8007c64 <HAL_ADCEx_InjectedConfigChannel+0xc0>
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007ece:	4912      	ldr	r1, [pc, #72]	@ (8007f18 <HAL_ADCEx_InjectedConfigChannel+0x374>)
 8007ed0:	e6d5      	b.n	8007c7e <HAL_ADCEx_InjectedConfigChannel+0xda>
  __HAL_LOCK(hadc);
 8007ed2:	2002      	movs	r0, #2
}
 8007ed4:	b003      	add	sp, #12
 8007ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007eda:	01cc      	lsls	r4, r1, #7
 8007edc:	f53f aef4 	bmi.w	8007cc8 <HAL_ADCEx_InjectedConfigChannel+0x124>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ee4:	f000 8106 	beq.w	80080f4 <HAL_ADCEx_InjectedConfigChannel+0x550>
 8007ee8:	4d09      	ldr	r5, [pc, #36]	@ (8007f10 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 8007eea:	490a      	ldr	r1, [pc, #40]	@ (8007f14 <HAL_ADCEx_InjectedConfigChannel+0x370>)
 8007eec:	4c0a      	ldr	r4, [pc, #40]	@ (8007f18 <HAL_ADCEx_InjectedConfigChannel+0x374>)
 8007eee:	42ab      	cmp	r3, r5
 8007ef0:	bf08      	it	eq
 8007ef2:	4621      	moveq	r1, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8007ef4:	688b      	ldr	r3, [r1, #8]
 8007ef6:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8007efa:	4333      	orrs	r3, r6
 8007efc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f00:	608b      	str	r3, [r1, #8]
}
 8007f02:	e6e1      	b.n	8007cc8 <HAL_ADCEx_InjectedConfigChannel+0x124>
 8007f04:	0007ffff 	.word	0x0007ffff
 8007f08:	407f0000 	.word	0x407f0000
 8007f0c:	80080000 	.word	0x80080000
 8007f10:	50000100 	.word	0x50000100
 8007f14:	50000700 	.word	0x50000700
 8007f18:	50000300 	.word	0x50000300
 8007f1c:	c3210000 	.word	0xc3210000
 8007f20:	90c00010 	.word	0x90c00010
 8007f24:	c7520000 	.word	0xc7520000
 8007f28:	cb840000 	.word	0xcb840000
 8007f2c:	04104000 	.word	0x04104000
 8007f30:	03fff000 	.word	0x03fff000
 8007f34:	50000600 	.word	0x50000600
 8007f38:	20000b5c 	.word	0x20000b5c
 8007f3c:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f40:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8007f44:	2d00      	cmp	r5, #0
 8007f46:	f000 80b2 	beq.w	80080ae <HAL_ADCEx_InjectedConfigChannel+0x50a>
  return __builtin_clz(value);
 8007f4a:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007f4e:	3501      	adds	r5, #1
 8007f50:	f005 051f 	and.w	r5, r5, #31
 8007f54:	2d09      	cmp	r5, #9
 8007f56:	f240 80aa 	bls.w	80080ae <HAL_ADCEx_InjectedConfigChannel+0x50a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f5a:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8007f5e:	2d00      	cmp	r5, #0
 8007f60:	f000 8115 	beq.w	800818e <HAL_ADCEx_InjectedConfigChannel+0x5ea>
  return __builtin_clz(value);
 8007f64:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007f68:	3501      	adds	r5, #1
 8007f6a:	06ad      	lsls	r5, r5, #26
 8007f6c:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f70:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8007f74:	2e00      	cmp	r6, #0
 8007f76:	f000 8108 	beq.w	800818a <HAL_ADCEx_InjectedConfigChannel+0x5e6>
  return __builtin_clz(value);
 8007f7a:	fab6 f686 	clz	r6, r6
 8007f7e:	3601      	adds	r6, #1
 8007f80:	f006 061f 	and.w	r6, r6, #31
 8007f84:	2701      	movs	r7, #1
 8007f86:	fa07 f606 	lsl.w	r6, r7, r6
 8007f8a:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f8c:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8007f90:	2c00      	cmp	r4, #0
 8007f92:	f000 80ff 	beq.w	8008194 <HAL_ADCEx_InjectedConfigChannel+0x5f0>
  return __builtin_clz(value);
 8007f96:	fab4 f484 	clz	r4, r4
 8007f9a:	1c66      	adds	r6, r4, #1
 8007f9c:	f006 061f 	and.w	r6, r6, #31
 8007fa0:	2403      	movs	r4, #3
 8007fa2:	f06f 071d 	mvn.w	r7, #29
 8007fa6:	fb14 7406 	smlabb	r4, r4, r6, r7
 8007faa:	0524      	lsls	r4, r4, #20
 8007fac:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8007fb0:	e776      	b.n	8007ea0 <HAL_ADCEx_InjectedConfigChannel+0x2fc>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007fb2:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
 8007fb4:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8007fb6:	f3c4 0712 	ubfx	r7, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007fba:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8007fbe:	2f00      	cmp	r7, #0
 8007fc0:	d057      	beq.n	8008072 <HAL_ADCEx_InjectedConfigChannel+0x4ce>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fc2:	fa94 f7a4 	rbit	r7, r4
  if (value == 0U)
 8007fc6:	b127      	cbz	r7, 8007fd2 <HAL_ADCEx_InjectedConfigChannel+0x42e>
  return __builtin_clz(value);
 8007fc8:	fab7 f787 	clz	r7, r7
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007fcc:	42be      	cmp	r6, r7
 8007fce:	f000 80c3 	beq.w	8008158 <HAL_ADCEx_InjectedConfigChannel+0x5b4>
 8007fd2:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8007fd4:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007fd6:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fda:	fa9e f7ae 	rbit	r7, lr
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007fde:	f105 0c08 	add.w	ip, r5, #8
 8007fe2:	46e0      	mov	r8, ip
  if (value == 0U)
 8007fe4:	b127      	cbz	r7, 8007ff0 <HAL_ADCEx_InjectedConfigChannel+0x44c>
  return __builtin_clz(value);
 8007fe6:	fab7 f787 	clz	r7, r7
 8007fea:	42b7      	cmp	r7, r6
 8007fec:	f000 8088 	beq.w	8008100 <HAL_ADCEx_InjectedConfigChannel+0x55c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007ff0:	68ae      	ldr	r6, [r5, #8]
 8007ff2:	68ae      	ldr	r6, [r5, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007ff4:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ff8:	fa9e f8ae 	rbit	r8, lr
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007ffc:	f105 070c 	add.w	r7, r5, #12
 8008000:	46b9      	mov	r9, r7
  if (value == 0U)
 8008002:	f1b8 0f00 	cmp.w	r8, #0
 8008006:	d004      	beq.n	8008012 <HAL_ADCEx_InjectedConfigChannel+0x46e>
  return __builtin_clz(value);
 8008008:	fab8 f888 	clz	r8, r8
 800800c:	45b0      	cmp	r8, r6
 800800e:	f000 808d 	beq.w	800812c <HAL_ADCEx_InjectedConfigChannel+0x588>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008012:	68ee      	ldr	r6, [r5, #12]
 8008014:	68ed      	ldr	r5, [r5, #12]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008016:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800801a:	fa9e f6ae 	rbit	r6, lr
  if (value == 0U)
 800801e:	2e00      	cmp	r6, #0
 8008020:	f43f ae08 	beq.w	8007c34 <HAL_ADCEx_InjectedConfigChannel+0x90>
  return __builtin_clz(value);
 8008024:	fab6 f486 	clz	r4, r6
 8008028:	42ac      	cmp	r4, r5
 800802a:	f000 80a8 	beq.w	800817e <HAL_ADCEx_InjectedConfigChannel+0x5da>
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 800802e:	4674      	mov	r4, lr
 8008030:	e600      	b.n	8007c34 <HAL_ADCEx_InjectedConfigChannel+0x90>
  MODIFY_REG(*preg,
 8008032:	f85c 6004 	ldr.w	r6, [ip, r4]
 8008036:	4035      	ands	r5, r6
 8008038:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800803c:	695c      	ldr	r4, [r3, #20]
 800803e:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8008042:	615c      	str	r4, [r3, #20]
}
 8008044:	e691      	b.n	8007d6a <HAL_ADCEx_InjectedConfigChannel+0x1c6>
      MODIFY_REG(hadc->Instance->CFGR2,
 8008046:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	@ 0x34
 800804a:	691e      	ldr	r6, [r3, #16]
 800804c:	433d      	orrs	r5, r7
 800804e:	f426 76ff 	bic.w	r6, r6, #510	@ 0x1fe
 8008052:	4335      	orrs	r5, r6
 8008054:	f045 0502 	orr.w	r5, r5, #2
 8008058:	611d      	str	r5, [r3, #16]
 800805a:	e66b      	b.n	8007d34 <HAL_ADCEx_InjectedConfigChannel+0x190>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 800805c:	4628      	mov	r0, r5
 800805e:	e5cc      	b.n	8007bfa <HAL_ADCEx_InjectedConfigChannel+0x56>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8008060:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8008064:	60d8      	str	r0, [r3, #12]
 8008066:	e65b      	b.n	8007d20 <HAL_ADCEx_InjectedConfigChannel+0x17c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008068:	3c1e      	subs	r4, #30
 800806a:	0524      	lsls	r4, r4, #20
 800806c:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8008070:	e716      	b.n	8007ea0 <HAL_ADCEx_InjectedConfigChannel+0x2fc>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8008072:	f3c4 6484 	ubfx	r4, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008076:	42a6      	cmp	r6, r4
 8008078:	d06e      	beq.n	8008158 <HAL_ADCEx_InjectedConfigChannel+0x5b4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800807a:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 800807c:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800807e:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8008082:	42a6      	cmp	r6, r4
 8008084:	d03a      	beq.n	80080fc <HAL_ADCEx_InjectedConfigChannel+0x558>
 8008086:	68ae      	ldr	r6, [r5, #8]
 8008088:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800808a:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800808e:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8008092:	42a6      	cmp	r6, r4
 8008094:	d048      	beq.n	8008128 <HAL_ADCEx_InjectedConfigChannel+0x584>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008096:	68ee      	ldr	r6, [r5, #12]
 8008098:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800809a:	f105 070c 	add.w	r7, r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800809e:	f3c6 6584 	ubfx	r5, r6, #26, #5
 80080a2:	e7c1      	b.n	8008028 <HAL_ADCEx_InjectedConfigChannel+0x484>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80080a4:	6dd5      	ldr	r5, [r2, #92]	@ 0x5c
 80080a6:	f045 0520 	orr.w	r5, r5, #32
 80080aa:	65d5      	str	r5, [r2, #92]	@ 0x5c
        tmp_hal_status = HAL_ERROR;
 80080ac:	e639      	b.n	8007d22 <HAL_ADCEx_InjectedConfigChannel+0x17e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080ae:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80080b2:	2d00      	cmp	r5, #0
 80080b4:	d075      	beq.n	80081a2 <HAL_ADCEx_InjectedConfigChannel+0x5fe>
  return __builtin_clz(value);
 80080b6:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80080ba:	3501      	adds	r5, #1
 80080bc:	06ad      	lsls	r5, r5, #26
 80080be:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080c2:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 80080c6:	2e00      	cmp	r6, #0
 80080c8:	d069      	beq.n	800819e <HAL_ADCEx_InjectedConfigChannel+0x5fa>
  return __builtin_clz(value);
 80080ca:	fab6 f686 	clz	r6, r6
 80080ce:	3601      	adds	r6, #1
 80080d0:	f006 061f 	and.w	r6, r6, #31
 80080d4:	2701      	movs	r7, #1
 80080d6:	fa07 f606 	lsl.w	r6, r7, r6
 80080da:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080dc:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 80080e0:	2c00      	cmp	r4, #0
 80080e2:	d059      	beq.n	8008198 <HAL_ADCEx_InjectedConfigChannel+0x5f4>
  return __builtin_clz(value);
 80080e4:	fab4 f484 	clz	r4, r4
 80080e8:	3401      	adds	r4, #1
 80080ea:	f004 041f 	and.w	r4, r4, #31
 80080ee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80080f2:	e6d4      	b.n	8007e9e <HAL_ADCEx_InjectedConfigChannel+0x2fa>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80080f4:	492c      	ldr	r1, [pc, #176]	@ (80081a8 <HAL_ADCEx_InjectedConfigChannel+0x604>)
 80080f6:	e6fd      	b.n	8007ef4 <HAL_ADCEx_InjectedConfigChannel+0x350>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80080f8:	4c2b      	ldr	r4, [pc, #172]	@ (80081a8 <HAL_ADCEx_InjectedConfigChannel+0x604>)
 80080fa:	e679      	b.n	8007df0 <HAL_ADCEx_InjectedConfigChannel+0x24c>
 80080fc:	f105 0808 	add.w	r8, r5, #8
  MODIFY_REG(*preg,
 8008100:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8008102:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008106:	665c      	str	r4, [r3, #100]	@ 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8008108:	f8d1 e000 	ldr.w	lr, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800810c:	68ac      	ldr	r4, [r5, #8]
 800810e:	68ae      	ldr	r6, [r5, #8]
 8008110:	f3ce 0712 	ubfx	r7, lr, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008114:	46c4      	mov	ip, r8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008116:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800811a:	4674      	mov	r4, lr
 800811c:	2f00      	cmp	r7, #0
 800811e:	f47f af6b 	bne.w	8007ff8 <HAL_ADCEx_InjectedConfigChannel+0x454>
 8008122:	f3ce 6484 	ubfx	r4, lr, #26, #5
 8008126:	e7b4      	b.n	8008092 <HAL_ADCEx_InjectedConfigChannel+0x4ee>
 8008128:	f105 090c 	add.w	r9, r5, #12
  MODIFY_REG(*preg,
 800812c:	f8dc 4000 	ldr.w	r4, [ip]
 8008130:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008134:	f8cc 4000 	str.w	r4, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8008138:	f8d1 e000 	ldr.w	lr, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800813c:	68ec      	ldr	r4, [r5, #12]
 800813e:	68ed      	ldr	r5, [r5, #12]
 8008140:	f3ce 0612 	ubfx	r6, lr, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008144:	464f      	mov	r7, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008146:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800814a:	4674      	mov	r4, lr
 800814c:	2e00      	cmp	r6, #0
 800814e:	f47f af64 	bne.w	800801a <HAL_ADCEx_InjectedConfigChannel+0x476>
 8008152:	f3ce 6484 	ubfx	r4, lr, #26, #5
 8008156:	e767      	b.n	8008028 <HAL_ADCEx_InjectedConfigChannel+0x484>
  MODIFY_REG(*preg,
 8008158:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 800815a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800815e:	661c      	str	r4, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8008160:	f8d1 e000 	ldr.w	lr, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008164:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8008166:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8008168:	f3ce 0712 	ubfx	r7, lr, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800816c:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8008170:	4674      	mov	r4, lr
 8008172:	2f00      	cmp	r7, #0
 8008174:	f47f af31 	bne.w	8007fda <HAL_ADCEx_InjectedConfigChannel+0x436>
 8008178:	f3ce 6484 	ubfx	r4, lr, #26, #5
 800817c:	e781      	b.n	8008082 <HAL_ADCEx_InjectedConfigChannel+0x4de>
  MODIFY_REG(*preg,
 800817e:	683c      	ldr	r4, [r7, #0]
 8008180:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008184:	603c      	str	r4, [r7, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8008186:	680c      	ldr	r4, [r1, #0]
}
 8008188:	e554      	b.n	8007c34 <HAL_ADCEx_InjectedConfigChannel+0x90>
 800818a:	2602      	movs	r6, #2
 800818c:	e6fd      	b.n	8007f8a <HAL_ADCEx_InjectedConfigChannel+0x3e6>
 800818e:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 8008192:	e6ed      	b.n	8007f70 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 8008194:	4c05      	ldr	r4, [pc, #20]	@ (80081ac <HAL_ADCEx_InjectedConfigChannel+0x608>)
 8008196:	e683      	b.n	8007ea0 <HAL_ADCEx_InjectedConfigChannel+0x2fc>
 8008198:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 800819c:	e680      	b.n	8007ea0 <HAL_ADCEx_InjectedConfigChannel+0x2fc>
 800819e:	2602      	movs	r6, #2
 80081a0:	e79b      	b.n	80080da <HAL_ADCEx_InjectedConfigChannel+0x536>
 80081a2:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 80081a6:	e78c      	b.n	80080c2 <HAL_ADCEx_InjectedConfigChannel+0x51e>
 80081a8:	50000300 	.word	0x50000300
 80081ac:	fe500000 	.word	0xfe500000

080081b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80081b0:	b470      	push	{r4, r5, r6}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80081b2:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80081b6:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 80081b8:	2a01      	cmp	r2, #1
{
 80081ba:	b09d      	sub	sp, #116	@ 0x74
  __HAL_LOCK(hadc);
 80081bc:	d057      	beq.n	800826e <HAL_ADCEx_MultiModeConfigChannel+0xbe>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80081be:	6802      	ldr	r2, [r0, #0]
 80081c0:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80081c2:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 80081c4:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80081c6:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80081ca:	9418      	str	r4, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 80081cc:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80081d0:	9419      	str	r4, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80081d2:	d00b      	beq.n	80081ec <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 80081d4:	4d4a      	ldr	r5, [pc, #296]	@ (8008300 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80081d6:	42aa      	cmp	r2, r5
 80081d8:	d047      	beq.n	800826a <HAL_ADCEx_MultiModeConfigChannel+0xba>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80081da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80081dc:	f883 4058 	strb.w	r4, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80081e0:	f042 0220 	orr.w	r2, r2, #32
 80081e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80081e6:	b01d      	add	sp, #116	@ 0x74
 80081e8:	bc70      	pop	{r4, r5, r6}
 80081ea:	4770      	bx	lr
 80081ec:	4845      	ldr	r0, [pc, #276]	@ (8008304 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80081ee:	6880      	ldr	r0, [r0, #8]
 80081f0:	0740      	lsls	r0, r0, #29
 80081f2:	d50b      	bpl.n	800820c <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 80081f4:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80081f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80081f8:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 80081fc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80081fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 8008200:	2200      	movs	r2, #0
 8008202:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 8008206:	b01d      	add	sp, #116	@ 0x74
 8008208:	bc70      	pop	{r4, r5, r6}
 800820a:	4770      	bx	lr
 800820c:	6890      	ldr	r0, [r2, #8]
 800820e:	0740      	lsls	r0, r0, #29
 8008210:	d4f1      	bmi.n	80081f6 <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008212:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8008216:	d02e      	beq.n	8008276 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
 8008218:	483a      	ldr	r0, [pc, #232]	@ (8008304 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800821a:	4282      	cmp	r2, r0
 800821c:	d02b      	beq.n	8008276 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800821e:	2e00      	cmp	r6, #0
 8008220:	d05a      	beq.n	80082d8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008222:	4839      	ldr	r0, [pc, #228]	@ (8008308 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8008224:	684c      	ldr	r4, [r1, #4]
 8008226:	6882      	ldr	r2, [r0, #8]
 8008228:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800822c:	4322      	orrs	r2, r4
 800822e:	f893 4038 	ldrb.w	r4, [r3, #56]	@ 0x38
 8008232:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8008236:	6082      	str	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008238:	4a31      	ldr	r2, [pc, #196]	@ (8008300 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800823a:	4c34      	ldr	r4, [pc, #208]	@ (800830c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800823c:	6895      	ldr	r5, [r2, #8]
 800823e:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8008242:	6892      	ldr	r2, [r2, #8]
 8008244:	68a4      	ldr	r4, [r4, #8]
 8008246:	07e4      	lsls	r4, r4, #31
 8008248:	d40d      	bmi.n	8008266 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800824a:	432a      	orrs	r2, r5
 800824c:	43d2      	mvns	r2, r2
 800824e:	f002 0201 	and.w	r2, r2, #1
 8008252:	b142      	cbz	r2, 8008266 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
        MODIFY_REG(tmpADC_Common->CCR,
 8008254:	6884      	ldr	r4, [r0, #8]
 8008256:	688a      	ldr	r2, [r1, #8]
 8008258:	f424 6171 	bic.w	r1, r4, #3856	@ 0xf10
 800825c:	4332      	orrs	r2, r6
 800825e:	f021 010f 	bic.w	r1, r1, #15
 8008262:	430a      	orrs	r2, r1
 8008264:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008266:	2000      	movs	r0, #0
 8008268:	e7ca      	b.n	8008200 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 800826a:	4829      	ldr	r0, [pc, #164]	@ (8008310 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 800826c:	e7bf      	b.n	80081ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 800826e:	2002      	movs	r0, #2
}
 8008270:	b01d      	add	sp, #116	@ 0x74
 8008272:	bc70      	pop	{r4, r5, r6}
 8008274:	4770      	bx	lr
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008276:	b1b6      	cbz	r6, 80082a6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008278:	4826      	ldr	r0, [pc, #152]	@ (8008314 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 800827a:	684c      	ldr	r4, [r1, #4]
 800827c:	6882      	ldr	r2, [r0, #8]
 800827e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8008282:	4322      	orrs	r2, r4
 8008284:	f893 4038 	ldrb.w	r4, [r3, #56]	@ 0x38
 8008288:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 800828c:	6082      	str	r2, [r0, #8]
 800828e:	481d      	ldr	r0, [pc, #116]	@ (8008304 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8008290:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008294:	6892      	ldr	r2, [r2, #8]
 8008296:	6880      	ldr	r0, [r0, #8]
 8008298:	07c0      	lsls	r0, r0, #31
 800829a:	d4e4      	bmi.n	8008266 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800829c:	43d2      	mvns	r2, r2
 800829e:	481d      	ldr	r0, [pc, #116]	@ (8008314 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 80082a0:	f002 0201 	and.w	r2, r2, #1
 80082a4:	e7d5      	b.n	8008252 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80082a6:	491b      	ldr	r1, [pc, #108]	@ (8008314 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 80082a8:	688a      	ldr	r2, [r1, #8]
 80082aa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80082ae:	608a      	str	r2, [r1, #8]
 80082b0:	4914      	ldr	r1, [pc, #80]	@ (8008304 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80082b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80082b6:	6892      	ldr	r2, [r2, #8]
 80082b8:	6889      	ldr	r1, [r1, #8]
 80082ba:	07cd      	lsls	r5, r1, #31
 80082bc:	d4d3      	bmi.n	8008266 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80082be:	43d2      	mvns	r2, r2
 80082c0:	4914      	ldr	r1, [pc, #80]	@ (8008314 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 80082c2:	f002 0201 	and.w	r2, r2, #1
 80082c6:	2a00      	cmp	r2, #0
 80082c8:	d0cd      	beq.n	8008266 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80082ca:	688a      	ldr	r2, [r1, #8]
 80082cc:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 80082d0:	f022 020f 	bic.w	r2, r2, #15
 80082d4:	608a      	str	r2, [r1, #8]
 80082d6:	e7c6      	b.n	8008266 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80082d8:	490b      	ldr	r1, [pc, #44]	@ (8008308 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80082da:	4c09      	ldr	r4, [pc, #36]	@ (8008300 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80082dc:	688a      	ldr	r2, [r1, #8]
 80082de:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80082e2:	608a      	str	r2, [r1, #8]
 80082e4:	68a4      	ldr	r4, [r4, #8]
 80082e6:	f8d0 2408 	ldr.w	r2, [r0, #1032]	@ 0x408
 80082ea:	f500 60a0 	add.w	r0, r0, #1280	@ 0x500
 80082ee:	6880      	ldr	r0, [r0, #8]
 80082f0:	07c5      	lsls	r5, r0, #31
 80082f2:	d4b8      	bmi.n	8008266 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80082f4:	4322      	orrs	r2, r4
 80082f6:	43d2      	mvns	r2, r2
 80082f8:	f002 0201 	and.w	r2, r2, #1
 80082fc:	e7e3      	b.n	80082c6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80082fe:	bf00      	nop
 8008300:	50000400 	.word	0x50000400
 8008304:	50000100 	.word	0x50000100
 8008308:	50000700 	.word	0x50000700
 800830c:	50000600 	.word	0x50000600
 8008310:	50000500 	.word	0x50000500
 8008314:	50000300 	.word	0x50000300

08008318 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8008318:	b1b0      	cbz	r0, 8008348 <HAL_CORDIC_Init+0x30>
{
 800831a:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800831c:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8008320:	4604      	mov	r4, r0
 8008322:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008326:	b153      	cbz	r3, 800833e <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8008328:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800832a:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800832c:	6260      	str	r0, [r4, #36]	@ 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 800832e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  hcordic->pInBuff = NULL;
 8008332:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToOrder = 0U;
 8008336:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800833a:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 800833c:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 800833e:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8008342:	f7fe fe5f 	bl	8007004 <HAL_CORDIC_MspInit>
 8008346:	e7ef      	b.n	8008328 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8008348:	2001      	movs	r0, #1
}
 800834a:	4770      	bx	lr

0800834c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800834c:	4907      	ldr	r1, [pc, #28]	@ (800836c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800834e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008350:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008352:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008356:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800835a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800835c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800835e:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8008366:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	e000ed00 	.word	0xe000ed00

08008370 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008370:	4b1b      	ldr	r3, [pc, #108]	@ (80083e0 <HAL_NVIC_SetPriority+0x70>)
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008378:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800837a:	f1c3 0e07 	rsb	lr, r3, #7
 800837e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008382:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008386:	bf28      	it	cs
 8008388:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800838c:	f1bc 0f06 	cmp.w	ip, #6
 8008390:	d91c      	bls.n	80083cc <HAL_NVIC_SetPriority+0x5c>
 8008392:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008396:	f04f 33ff 	mov.w	r3, #4294967295
 800839a:	fa03 f30c 	lsl.w	r3, r3, ip
 800839e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083a2:	f04f 33ff 	mov.w	r3, #4294967295
 80083a6:	fa03 f30e 	lsl.w	r3, r3, lr
 80083aa:	ea21 0303 	bic.w	r3, r1, r3
 80083ae:	fa03 f30c 	lsl.w	r3, r3, ip
 80083b2:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083b4:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80083b6:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083b8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80083ba:	db0a      	blt.n	80083d2 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083bc:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80083c0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80083c4:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80083c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80083cc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80083ce:	4694      	mov	ip, r2
 80083d0:	e7e7      	b.n	80083a2 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083d2:	4a04      	ldr	r2, [pc, #16]	@ (80083e4 <HAL_NVIC_SetPriority+0x74>)
 80083d4:	f000 000f 	and.w	r0, r0, #15
 80083d8:	4402      	add	r2, r0
 80083da:	7613      	strb	r3, [r2, #24]
 80083dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80083e0:	e000ed00 	.word	0xe000ed00
 80083e4:	e000ecfc 	.word	0xe000ecfc

080083e8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80083e8:	2800      	cmp	r0, #0
 80083ea:	db07      	blt.n	80083fc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083ec:	4a04      	ldr	r2, [pc, #16]	@ (8008400 <HAL_NVIC_EnableIRQ+0x18>)
 80083ee:	0941      	lsrs	r1, r0, #5
 80083f0:	2301      	movs	r3, #1
 80083f2:	f000 001f 	and.w	r0, r0, #31
 80083f6:	4083      	lsls	r3, r0
 80083f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	e000e100 	.word	0xe000e100

08008404 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8008404:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008408:	4905      	ldr	r1, [pc, #20]	@ (8008420 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800840a:	4b06      	ldr	r3, [pc, #24]	@ (8008424 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800840c:	68ca      	ldr	r2, [r1, #12]
 800840e:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008412:	4313      	orrs	r3, r2
 8008414:	60cb      	str	r3, [r1, #12]
 8008416:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800841a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800841c:	e7fd      	b.n	800841a <HAL_NVIC_SystemReset+0x16>
 800841e:	bf00      	nop
 8008420:	e000ed00 	.word	0xe000ed00
 8008424:	05fa0004 	.word	0x05fa0004

08008428 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008428:	3801      	subs	r0, #1
 800842a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800842e:	d301      	bcc.n	8008434 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008430:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008432:	4770      	bx	lr
{
 8008434:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008436:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800843a:	4c07      	ldr	r4, [pc, #28]	@ (8008458 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800843c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800843e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8008442:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008446:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008448:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800844a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800844c:	619a      	str	r2, [r3, #24]
}
 800844e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008452:	6119      	str	r1, [r3, #16]
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	e000ed00 	.word	0xe000ed00

0800845c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop

08008460 <HAL_SYSTICK_IRQHandler>:
{
 8008460:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8008462:	f7ff fffb 	bl	800845c <HAL_SYSTICK_Callback>
}
 8008466:	bd08      	pop	{r3, pc}

08008468 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008468:	2800      	cmp	r0, #0
 800846a:	d076      	beq.n	800855a <HAL_DMA_Init+0xf2>
{
 800846c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800846e:	4a3c      	ldr	r2, [pc, #240]	@ (8008560 <HAL_DMA_Init+0xf8>)
 8008470:	6804      	ldr	r4, [r0, #0]
 8008472:	4294      	cmp	r4, r2
 8008474:	4603      	mov	r3, r0
 8008476:	d95c      	bls.n	8008532 <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008478:	493a      	ldr	r1, [pc, #232]	@ (8008564 <HAL_DMA_Init+0xfc>)
 800847a:	4a3b      	ldr	r2, [pc, #236]	@ (8008568 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 800847c:	483b      	ldr	r0, [pc, #236]	@ (800856c <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800847e:	4421      	add	r1, r4
 8008480:	fba2 2101 	umull	r2, r1, r2, r1
 8008484:	0909      	lsrs	r1, r1, #4
 8008486:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008488:	2202      	movs	r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800848a:	689d      	ldr	r5, [r3, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 800848c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 8008490:	68da      	ldr	r2, [r3, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008492:	4e35      	ldr	r6, [pc, #212]	@ (8008568 <HAL_DMA_Init+0x100>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008494:	4f36      	ldr	r7, [pc, #216]	@ (8008570 <HAL_DMA_Init+0x108>)
 8008496:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800849a:	6918      	ldr	r0, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 800849c:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800849e:	4302      	orrs	r2, r0
 80084a0:	6958      	ldr	r0, [r3, #20]
 80084a2:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084a4:	6998      	ldr	r0, [r3, #24]
 80084a6:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CCR;
 80084a8:	6820      	ldr	r0, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80084aa:	f420 4cff 	bic.w	ip, r0, #32640	@ 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084ae:	69d8      	ldr	r0, [r3, #28]
 80084b0:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80084b2:	b2e0      	uxtb	r0, r4
 80084b4:	3808      	subs	r0, #8
 80084b6:	fba6 6000 	umull	r6, r0, r6, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80084ba:	6a1e      	ldr	r6, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80084bc:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80084c0:	4332      	orrs	r2, r6
  tmp |=  hdma->Init.Direction        |
 80084c2:	ea42 020c 	orr.w	r2, r2, ip
  hdma->Instance->CCR = tmp;
 80084c6:	6022      	str	r2, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80084c8:	4e25      	ldr	r6, [pc, #148]	@ (8008560 <HAL_DMA_Init+0xf8>)
 80084ca:	4a2a      	ldr	r2, [pc, #168]	@ (8008574 <HAL_DMA_Init+0x10c>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80084cc:	f3c0 1004 	ubfx	r0, r0, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80084d0:	42b4      	cmp	r4, r6
 80084d2:	bf98      	it	ls
 80084d4:	463a      	movls	r2, r7
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80084d6:	f206 4679 	addw	r6, r6, #1145	@ 0x479
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80084da:	2401      	movs	r4, #1
 80084dc:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80084e0:	64de      	str	r6, [r3, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80084e2:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80084e6:	eb01 0602 	add.w	r6, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80084ea:	6518      	str	r0, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80084ec:	649e      	str	r6, [r3, #72]	@ 0x48
 80084ee:	ea4f 0191 	mov.w	r1, r1, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80084f2:	d027      	beq.n	8008544 <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80084f4:	685e      	ldr	r6, [r3, #4]
 80084f6:	b2f5      	uxtb	r5, r6
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80084f8:	3e01      	subs	r6, #1
 80084fa:	2e03      	cmp	r6, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80084fc:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008500:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008504:	d824      	bhi.n	8008550 <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008506:	4a1c      	ldr	r2, [pc, #112]	@ (8008578 <HAL_DMA_Init+0x110>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008508:	481c      	ldr	r0, [pc, #112]	@ (800857c <HAL_DMA_Init+0x114>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800850a:	442a      	add	r2, r5
 800850c:	0092      	lsls	r2, r2, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800850e:	3d01      	subs	r5, #1
 8008510:	40ac      	lsls	r4, r5
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008512:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008514:	e9c3 2015 	strd	r2, r0, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008518:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800851a:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800851c:	4a18      	ldr	r2, [pc, #96]	@ (8008580 <HAL_DMA_Init+0x118>)
 800851e:	6454      	str	r4, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008520:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8008522:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008524:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8008526:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 800852a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 800852e:	bcf0      	pop	{r4, r5, r6, r7}
 8008530:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008532:	4914      	ldr	r1, [pc, #80]	@ (8008584 <HAL_DMA_Init+0x11c>)
 8008534:	4a0c      	ldr	r2, [pc, #48]	@ (8008568 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 8008536:	4814      	ldr	r0, [pc, #80]	@ (8008588 <HAL_DMA_Init+0x120>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008538:	4421      	add	r1, r4
 800853a:	fba2 2101 	umull	r2, r1, r2, r1
 800853e:	0909      	lsrs	r1, r1, #4
 8008540:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8008542:	e7a1      	b.n	8008488 <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008544:	2400      	movs	r4, #0
 8008546:	605c      	str	r4, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008548:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800854c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    hdma->DMAmuxRequestGen = 0U;
 8008550:	2200      	movs	r2, #0
 8008552:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008556:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008558:	e7e2      	b.n	8008520 <HAL_DMA_Init+0xb8>
    return HAL_ERROR;
 800855a:	2001      	movs	r0, #1
}
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	40020407 	.word	0x40020407
 8008564:	bffdfbf8 	.word	0xbffdfbf8
 8008568:	cccccccd 	.word	0xcccccccd
 800856c:	40020400 	.word	0x40020400
 8008570:	40020800 	.word	0x40020800
 8008574:	40020820 	.word	0x40020820
 8008578:	1000823f 	.word	0x1000823f
 800857c:	40020940 	.word	0x40020940
 8008580:	40020900 	.word	0x40020900
 8008584:	bffdfff8 	.word	0xbffdfff8
 8008588:	40020000 	.word	0x40020000

0800858c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800858c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008590:	680c      	ldr	r4, [r1, #0]
{
 8008592:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008594:	2c00      	cmp	r4, #0
 8008596:	f000 8089 	beq.w	80086ac <HAL_GPIO_Init+0x120>
  uint32_t position = 0x00U;
 800859a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800859c:	f04f 0b01 	mov.w	fp, #1
 80085a0:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 80085a4:	ea1e 0a04 	ands.w	sl, lr, r4
 80085a8:	d07b      	beq.n	80086a2 <HAL_GPIO_Init+0x116>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80085aa:	684d      	ldr	r5, [r1, #4]
 80085ac:	f005 0203 	and.w	r2, r5, #3
 80085b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80085b4:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80085b6:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80085ba:	fa06 f70c 	lsl.w	r7, r6, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80085be:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80085c2:	ea6f 0707 	mvn.w	r7, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80085c6:	d974      	bls.n	80086b2 <HAL_GPIO_Init+0x126>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80085c8:	2a03      	cmp	r2, #3
 80085ca:	f040 80b0 	bne.w	800872e <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085ce:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 80085d2:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80085d6:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085da:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80085dc:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80085e0:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80085e2:	d05e      	beq.n	80086a2 <HAL_GPIO_Init+0x116>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085e4:	4f66      	ldr	r7, [pc, #408]	@ (8008780 <HAL_GPIO_Init+0x1f4>)
 80085e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80085e8:	f042 0201 	orr.w	r2, r2, #1
 80085ec:	663a      	str	r2, [r7, #96]	@ 0x60
 80085ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80085f0:	f002 0201 	and.w	r2, r2, #1
 80085f4:	9203      	str	r2, [sp, #12]
 80085f6:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80085f8:	f023 0203 	bic.w	r2, r3, #3
 80085fc:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8008600:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008604:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8008608:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800860a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800860e:	260f      	movs	r6, #15
 8008610:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008614:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008618:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800861c:	d01d      	beq.n	800865a <HAL_GPIO_Init+0xce>
 800861e:	4e59      	ldr	r6, [pc, #356]	@ (8008784 <HAL_GPIO_Init+0x1f8>)
 8008620:	42b0      	cmp	r0, r6
 8008622:	f000 8097 	beq.w	8008754 <HAL_GPIO_Init+0x1c8>
 8008626:	4e58      	ldr	r6, [pc, #352]	@ (8008788 <HAL_GPIO_Init+0x1fc>)
 8008628:	42b0      	cmp	r0, r6
 800862a:	f000 809a 	beq.w	8008762 <HAL_GPIO_Init+0x1d6>
 800862e:	f8df e160 	ldr.w	lr, [pc, #352]	@ 8008790 <HAL_GPIO_Init+0x204>
 8008632:	4570      	cmp	r0, lr
 8008634:	f000 8087 	beq.w	8008746 <HAL_GPIO_Init+0x1ba>
 8008638:	f8df e158 	ldr.w	lr, [pc, #344]	@ 8008794 <HAL_GPIO_Init+0x208>
 800863c:	4570      	cmp	r0, lr
 800863e:	f000 8097 	beq.w	8008770 <HAL_GPIO_Init+0x1e4>
 8008642:	f8df e154 	ldr.w	lr, [pc, #340]	@ 8008798 <HAL_GPIO_Init+0x20c>
 8008646:	4570      	cmp	r0, lr
 8008648:	bf0c      	ite	eq
 800864a:	f04f 0e05 	moveq.w	lr, #5
 800864e:	f04f 0e06 	movne.w	lr, #6
 8008652:	fa0e fc0c 	lsl.w	ip, lr, ip
 8008656:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 800865a:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800865c:	4a4b      	ldr	r2, [pc, #300]	@ (800878c <HAL_GPIO_Init+0x200>)
 800865e:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008660:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8008662:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8008666:	4e49      	ldr	r6, [pc, #292]	@ (800878c <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8008668:	bf54      	ite	pl
 800866a:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800866c:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 8008670:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8008672:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008674:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8008676:	4e45      	ldr	r6, [pc, #276]	@ (800878c <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8008678:	bf54      	ite	pl
 800867a:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800867c:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 8008680:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8008682:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008684:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8008686:	4e41      	ldr	r6, [pc, #260]	@ (800878c <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8008688:	bf54      	ite	pl
 800868a:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800868c:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 8008690:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008692:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008694:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8008696:	4d3d      	ldr	r5, [pc, #244]	@ (800878c <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8008698:	bf54      	ite	pl
 800869a:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800869c:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 80086a0:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 80086a2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80086a4:	fa34 f203 	lsrs.w	r2, r4, r3
 80086a8:	f47f af7a 	bne.w	80085a0 <HAL_GPIO_Init+0x14>
  }
}
 80086ac:	b005      	add	sp, #20
 80086ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80086b2:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80086b6:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80086b8:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80086bc:	fa06 f80c 	lsl.w	r8, r6, ip
 80086c0:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 80086c4:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 80086c8:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80086cc:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80086ce:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086d2:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 80086d6:	fa0e fe03 	lsl.w	lr, lr, r3
 80086da:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 80086de:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 80086e2:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80086e6:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80086ea:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80086ee:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80086f2:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80086f4:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80086f8:	f47f af69 	bne.w	80085ce <HAL_GPIO_Init+0x42>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80086fc:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 80086fe:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008702:	f003 0e07 	and.w	lr, r3, #7
 8008706:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800870a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800870e:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 8008712:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008716:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008718:	260f      	movs	r6, #15
 800871a:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800871e:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008720:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008724:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8008728:	f8c8 e020 	str.w	lr, [r8, #32]
 800872c:	e74f      	b.n	80085ce <HAL_GPIO_Init+0x42>
        temp = GPIOx->PUPDR;
 800872e:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008732:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008734:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008738:	fa06 fe0c 	lsl.w	lr, r6, ip
 800873c:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8008740:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008744:	e743      	b.n	80085ce <HAL_GPIO_Init+0x42>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008746:	f04f 0e03 	mov.w	lr, #3
 800874a:	fa0e fc0c 	lsl.w	ip, lr, ip
 800874e:	ea47 070c 	orr.w	r7, r7, ip
 8008752:	e782      	b.n	800865a <HAL_GPIO_Init+0xce>
 8008754:	f04f 0e01 	mov.w	lr, #1
 8008758:	fa0e fc0c 	lsl.w	ip, lr, ip
 800875c:	ea47 070c 	orr.w	r7, r7, ip
 8008760:	e77b      	b.n	800865a <HAL_GPIO_Init+0xce>
 8008762:	f04f 0e02 	mov.w	lr, #2
 8008766:	fa0e fc0c 	lsl.w	ip, lr, ip
 800876a:	ea47 070c 	orr.w	r7, r7, ip
 800876e:	e774      	b.n	800865a <HAL_GPIO_Init+0xce>
 8008770:	f04f 0e04 	mov.w	lr, #4
 8008774:	fa0e fc0c 	lsl.w	ip, lr, ip
 8008778:	ea47 070c 	orr.w	r7, r7, ip
 800877c:	e76d      	b.n	800865a <HAL_GPIO_Init+0xce>
 800877e:	bf00      	nop
 8008780:	40021000 	.word	0x40021000
 8008784:	48000400 	.word	0x48000400
 8008788:	48000800 	.word	0x48000800
 800878c:	40010400 	.word	0x40010400
 8008790:	48000c00 	.word	0x48000c00
 8008794:	48001000 	.word	0x48001000
 8008798:	48001400 	.word	0x48001400

0800879c <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800879c:	4a35      	ldr	r2, [pc, #212]	@ (8008874 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 800879e:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80087a0:	b960      	cbnz	r0, 80087bc <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80087a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80087a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087aa:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80087ae:	d01b      	beq.n	80087e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80087b8:	2000      	movs	r0, #0
}
 80087ba:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80087bc:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80087c0:	d006      	beq.n	80087d0 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80087c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80087c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80087ca:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80087cc:	2000      	movs	r0, #0
}
 80087ce:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80087d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80087d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087d8:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80087dc:	d029      	beq.n	8008832 <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087e2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80087e6:	e7f1      	b.n	80087cc <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80087f0:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80087f2:	4821      	ldr	r0, [pc, #132]	@ (8008878 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80087f4:	4921      	ldr	r1, [pc, #132]	@ (800887c <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80087f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80087fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80087fe:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008800:	6803      	ldr	r3, [r0, #0]
 8008802:	2032      	movs	r0, #50	@ 0x32
 8008804:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008808:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800880a:	fba1 1303 	umull	r1, r3, r1, r3
 800880e:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008810:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008812:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008816:	d506      	bpl.n	8008826 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8008818:	e000      	b.n	800881c <HAL_PWREx_ControlVoltageScaling+0x80>
 800881a:	b123      	cbz	r3, 8008826 <HAL_PWREx_ControlVoltageScaling+0x8a>
 800881c:	6951      	ldr	r1, [r2, #20]
 800881e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8008820:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008824:	d4f9      	bmi.n	800881a <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008826:	4b13      	ldr	r3, [pc, #76]	@ (8008874 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	055b      	lsls	r3, r3, #21
 800882c:	d5ce      	bpl.n	80087cc <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 800882e:	2003      	movs	r0, #3
 8008830:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008832:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008836:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800883a:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800883c:	480e      	ldr	r0, [pc, #56]	@ (8008878 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800883e:	490f      	ldr	r1, [pc, #60]	@ (800887c <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008840:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008844:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008848:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800884a:	6803      	ldr	r3, [r0, #0]
 800884c:	2032      	movs	r0, #50	@ 0x32
 800884e:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008852:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008854:	fba1 1303 	umull	r1, r3, r1, r3
 8008858:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800885a:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800885c:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008860:	d5e1      	bpl.n	8008826 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8008862:	e001      	b.n	8008868 <HAL_PWREx_ControlVoltageScaling+0xcc>
 8008864:	2b00      	cmp	r3, #0
 8008866:	d0de      	beq.n	8008826 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8008868:	6951      	ldr	r1, [r2, #20]
 800886a:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800886c:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008870:	d5d9      	bpl.n	8008826 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8008872:	e7f7      	b.n	8008864 <HAL_PWREx_ControlVoltageScaling+0xc8>
 8008874:	40007000 	.word	0x40007000
 8008878:	20000b5c 	.word	0x20000b5c
 800887c:	431bde83 	.word	0x431bde83

08008880 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008880:	4a02      	ldr	r2, [pc, #8]	@ (800888c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8008882:	6893      	ldr	r3, [r2, #8]
 8008884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008888:	6093      	str	r3, [r2, #8]
}
 800888a:	4770      	bx	lr
 800888c:	40007000 	.word	0x40007000

08008890 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008890:	2800      	cmp	r0, #0
 8008892:	f000 81bd 	beq.w	8008c10 <HAL_RCC_OscConfig+0x380>
{
 8008896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800889a:	6803      	ldr	r3, [r0, #0]
 800889c:	07d9      	lsls	r1, r3, #31
{
 800889e:	b082      	sub	sp, #8
 80088a0:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088a2:	d512      	bpl.n	80088ca <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088a4:	49a6      	ldr	r1, [pc, #664]	@ (8008b40 <HAL_RCC_OscConfig+0x2b0>)
 80088a6:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80088a8:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088aa:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80088ae:	2a0c      	cmp	r2, #12
 80088b0:	f000 80d0 	beq.w	8008a54 <HAL_RCC_OscConfig+0x1c4>
 80088b4:	2a08      	cmp	r2, #8
 80088b6:	f040 80d2 	bne.w	8008a5e <HAL_RCC_OscConfig+0x1ce>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088ba:	4aa1      	ldr	r2, [pc, #644]	@ (8008b40 <HAL_RCC_OscConfig+0x2b0>)
 80088bc:	6812      	ldr	r2, [r2, #0]
 80088be:	0392      	lsls	r2, r2, #14
 80088c0:	d503      	bpl.n	80088ca <HAL_RCC_OscConfig+0x3a>
 80088c2:	6862      	ldr	r2, [r4, #4]
 80088c4:	2a00      	cmp	r2, #0
 80088c6:	f000 8137 	beq.w	8008b38 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088ca:	079a      	lsls	r2, r3, #30
 80088cc:	d522      	bpl.n	8008914 <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088ce:	4a9c      	ldr	r2, [pc, #624]	@ (8008b40 <HAL_RCC_OscConfig+0x2b0>)
 80088d0:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80088d2:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088d4:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80088d8:	2b0c      	cmp	r3, #12
 80088da:	f000 80f8 	beq.w	8008ace <HAL_RCC_OscConfig+0x23e>
 80088de:	2b04      	cmp	r3, #4
 80088e0:	f040 80fa 	bne.w	8008ad8 <HAL_RCC_OscConfig+0x248>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088e4:	4b96      	ldr	r3, [pc, #600]	@ (8008b40 <HAL_RCC_OscConfig+0x2b0>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	055b      	lsls	r3, r3, #21
 80088ea:	d503      	bpl.n	80088f4 <HAL_RCC_OscConfig+0x64>
 80088ec:	68e3      	ldr	r3, [r4, #12]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	f000 8122 	beq.w	8008b38 <HAL_RCC_OscConfig+0x2a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088f4:	4a92      	ldr	r2, [pc, #584]	@ (8008b40 <HAL_RCC_OscConfig+0x2b0>)
 80088f6:	6920      	ldr	r0, [r4, #16]
 80088f8:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80088fa:	4992      	ldr	r1, [pc, #584]	@ (8008b44 <HAL_RCC_OscConfig+0x2b4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088fc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008900:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8008904:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008906:	6808      	ldr	r0, [r1, #0]
 8008908:	f7fe fd62 	bl	80073d0 <HAL_InitTick>
 800890c:	2800      	cmp	r0, #0
 800890e:	f040 8113 	bne.w	8008b38 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	071a      	lsls	r2, r3, #28
 8008916:	d519      	bpl.n	800894c <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008918:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800891a:	4d89      	ldr	r5, [pc, #548]	@ (8008b40 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800891c:	2b00      	cmp	r3, #0
 800891e:	f000 80c2 	beq.w	8008aa6 <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_LSI_ENABLE();
 8008922:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8008926:	f043 0301 	orr.w	r3, r3, #1
 800892a:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800892e:	f7fe fd99 	bl	8007464 <HAL_GetTick>
 8008932:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008934:	e005      	b.n	8008942 <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008936:	f7fe fd95 	bl	8007464 <HAL_GetTick>
 800893a:	1b80      	subs	r0, r0, r6
 800893c:	2802      	cmp	r0, #2
 800893e:	f200 8117 	bhi.w	8008b70 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008942:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8008946:	079b      	lsls	r3, r3, #30
 8008948:	d5f5      	bpl.n	8008936 <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	075d      	lsls	r5, r3, #29
 800894e:	d541      	bpl.n	80089d4 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008950:	4b7b      	ldr	r3, [pc, #492]	@ (8008b40 <HAL_RCC_OscConfig+0x2b0>)
 8008952:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008954:	00d0      	lsls	r0, r2, #3
 8008956:	f100 810f 	bmi.w	8008b78 <HAL_RCC_OscConfig+0x2e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800895a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800895c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8008960:	659a      	str	r2, [r3, #88]	@ 0x58
 8008962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008968:	9301      	str	r3, [sp, #4]
 800896a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800896c:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800896e:	4e76      	ldr	r6, [pc, #472]	@ (8008b48 <HAL_RCC_OscConfig+0x2b8>)
 8008970:	6833      	ldr	r3, [r6, #0]
 8008972:	05d9      	lsls	r1, r3, #23
 8008974:	f140 812e 	bpl.w	8008bd4 <HAL_RCC_OscConfig+0x344>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008978:	68a3      	ldr	r3, [r4, #8]
 800897a:	2b01      	cmp	r3, #1
 800897c:	f000 80fe 	beq.w	8008b7c <HAL_RCC_OscConfig+0x2ec>
 8008980:	2b05      	cmp	r3, #5
 8008982:	f000 8184 	beq.w	8008c8e <HAL_RCC_OscConfig+0x3fe>
 8008986:	4e6e      	ldr	r6, [pc, #440]	@ (8008b40 <HAL_RCC_OscConfig+0x2b0>)
 8008988:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 800898c:	f022 0201 	bic.w	r2, r2, #1
 8008990:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 8008994:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8008998:	f022 0204 	bic.w	r2, r2, #4
 800899c:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f040 80f2 	bne.w	8008b8a <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089a6:	f7fe fd5d 	bl	8007464 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089aa:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80089ae:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80089b0:	e005      	b.n	80089be <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089b2:	f7fe fd57 	bl	8007464 <HAL_GetTick>
 80089b6:	1bc0      	subs	r0, r0, r7
 80089b8:	4540      	cmp	r0, r8
 80089ba:	f200 80d9 	bhi.w	8008b70 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80089be:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 80089c2:	0799      	lsls	r1, r3, #30
 80089c4:	d4f5      	bmi.n	80089b2 <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80089c6:	b125      	cbz	r5, 80089d2 <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089c8:	4a5d      	ldr	r2, [pc, #372]	@ (8008b40 <HAL_RCC_OscConfig+0x2b0>)
 80089ca:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80089cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80089d2:	6823      	ldr	r3, [r4, #0]
 80089d4:	069a      	lsls	r2, r3, #26
 80089d6:	d518      	bpl.n	8008a0a <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80089d8:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80089da:	4d59      	ldr	r5, [pc, #356]	@ (8008b40 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f000 80e5 	beq.w	8008bac <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_HSI48_ENABLE();
 80089e2:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80089e6:	f043 0301 	orr.w	r3, r3, #1
 80089ea:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089ee:	f7fe fd39 	bl	8007464 <HAL_GetTick>
 80089f2:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80089f4:	e005      	b.n	8008a02 <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089f6:	f7fe fd35 	bl	8007464 <HAL_GetTick>
 80089fa:	1b80      	subs	r0, r0, r6
 80089fc:	2802      	cmp	r0, #2
 80089fe:	f200 80b7 	bhi.w	8008b70 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008a02:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8008a06:	079b      	lsls	r3, r3, #30
 8008a08:	d5f5      	bpl.n	80089f6 <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008a0a:	69e3      	ldr	r3, [r4, #28]
 8008a0c:	b1f3      	cbz	r3, 8008a4c <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a0e:	4d4c      	ldr	r5, [pc, #304]	@ (8008b40 <HAL_RCC_OscConfig+0x2b0>)
 8008a10:	68aa      	ldr	r2, [r5, #8]
 8008a12:	f002 020c 	and.w	r2, r2, #12
 8008a16:	2a0c      	cmp	r2, #12
 8008a18:	f000 8147 	beq.w	8008caa <HAL_RCC_OscConfig+0x41a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008a1c:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a1e:	682b      	ldr	r3, [r5, #0]
 8008a20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a24:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008a26:	f000 80f5 	beq.w	8008c14 <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a2a:	f7fe fd1b 	bl	8007464 <HAL_GetTick>
 8008a2e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a30:	e005      	b.n	8008a3e <HAL_RCC_OscConfig+0x1ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a32:	f7fe fd17 	bl	8007464 <HAL_GetTick>
 8008a36:	1b00      	subs	r0, r0, r4
 8008a38:	2802      	cmp	r0, #2
 8008a3a:	f200 8099 	bhi.w	8008b70 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a3e:	682b      	ldr	r3, [r5, #0]
 8008a40:	019b      	lsls	r3, r3, #6
 8008a42:	d4f6      	bmi.n	8008a32 <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008a44:	68ea      	ldr	r2, [r5, #12]
 8008a46:	4b41      	ldr	r3, [pc, #260]	@ (8008b4c <HAL_RCC_OscConfig+0x2bc>)
 8008a48:	4013      	ands	r3, r2
 8008a4a:	60eb      	str	r3, [r5, #12]
      }
    }
  }
  }

  return HAL_OK;
 8008a4c:	2000      	movs	r0, #0
}
 8008a4e:	b002      	add	sp, #8
 8008a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a54:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008a58:	2903      	cmp	r1, #3
 8008a5a:	f43f af2e 	beq.w	80088ba <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a5e:	6863      	ldr	r3, [r4, #4]
 8008a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a64:	d055      	beq.n	8008b12 <HAL_RCC_OscConfig+0x282>
 8008a66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a6a:	f000 80c4 	beq.w	8008bf6 <HAL_RCC_OscConfig+0x366>
 8008a6e:	4d34      	ldr	r5, [pc, #208]	@ (8008b40 <HAL_RCC_OscConfig+0x2b0>)
 8008a70:	682a      	ldr	r2, [r5, #0]
 8008a72:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008a76:	602a      	str	r2, [r5, #0]
 8008a78:	682a      	ldr	r2, [r5, #0]
 8008a7a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008a7e:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d14b      	bne.n	8008b1c <HAL_RCC_OscConfig+0x28c>
        tickstart = HAL_GetTick();
 8008a84:	f7fe fcee 	bl	8007464 <HAL_GetTick>
 8008a88:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008a8a:	e004      	b.n	8008a96 <HAL_RCC_OscConfig+0x206>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a8c:	f7fe fcea 	bl	8007464 <HAL_GetTick>
 8008a90:	1b80      	subs	r0, r0, r6
 8008a92:	2864      	cmp	r0, #100	@ 0x64
 8008a94:	d86c      	bhi.n	8008b70 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008a96:	682b      	ldr	r3, [r5, #0]
 8008a98:	0399      	lsls	r1, r3, #14
 8008a9a:	d4f7      	bmi.n	8008a8c <HAL_RCC_OscConfig+0x1fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a9c:	6823      	ldr	r3, [r4, #0]
 8008a9e:	079a      	lsls	r2, r3, #30
 8008aa0:	f57f af38 	bpl.w	8008914 <HAL_RCC_OscConfig+0x84>
 8008aa4:	e713      	b.n	80088ce <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 8008aa6:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8008aaa:	f023 0301 	bic.w	r3, r3, #1
 8008aae:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8008ab2:	f7fe fcd7 	bl	8007464 <HAL_GetTick>
 8008ab6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008ab8:	e004      	b.n	8008ac4 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008aba:	f7fe fcd3 	bl	8007464 <HAL_GetTick>
 8008abe:	1b80      	subs	r0, r0, r6
 8008ac0:	2802      	cmp	r0, #2
 8008ac2:	d855      	bhi.n	8008b70 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008ac4:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8008ac8:	079f      	lsls	r7, r3, #30
 8008aca:	d4f6      	bmi.n	8008aba <HAL_RCC_OscConfig+0x22a>
 8008acc:	e73d      	b.n	800894a <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ace:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008ad2:	2a02      	cmp	r2, #2
 8008ad4:	f43f af06 	beq.w	80088e4 <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008ad8:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8008ada:	4d19      	ldr	r5, [pc, #100]	@ (8008b40 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d037      	beq.n	8008b50 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8008ae0:	682b      	ldr	r3, [r5, #0]
 8008ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ae6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008ae8:	f7fe fcbc 	bl	8007464 <HAL_GetTick>
 8008aec:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008aee:	e004      	b.n	8008afa <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008af0:	f7fe fcb8 	bl	8007464 <HAL_GetTick>
 8008af4:	1b80      	subs	r0, r0, r6
 8008af6:	2802      	cmp	r0, #2
 8008af8:	d83a      	bhi.n	8008b70 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008afa:	682b      	ldr	r3, [r5, #0]
 8008afc:	055f      	lsls	r7, r3, #21
 8008afe:	d5f7      	bpl.n	8008af0 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b00:	686b      	ldr	r3, [r5, #4]
 8008b02:	6922      	ldr	r2, [r4, #16]
 8008b04:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008b08:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008b0c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b0e:	6823      	ldr	r3, [r4, #0]
 8008b10:	e700      	b.n	8008914 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b12:	4a0b      	ldr	r2, [pc, #44]	@ (8008b40 <HAL_RCC_OscConfig+0x2b0>)
 8008b14:	6813      	ldr	r3, [r2, #0]
 8008b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b1a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008b1c:	f7fe fca2 	bl	8007464 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b20:	4e07      	ldr	r6, [pc, #28]	@ (8008b40 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8008b22:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b24:	e004      	b.n	8008b30 <HAL_RCC_OscConfig+0x2a0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b26:	f7fe fc9d 	bl	8007464 <HAL_GetTick>
 8008b2a:	1b40      	subs	r0, r0, r5
 8008b2c:	2864      	cmp	r0, #100	@ 0x64
 8008b2e:	d81f      	bhi.n	8008b70 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b30:	6833      	ldr	r3, [r6, #0]
 8008b32:	039f      	lsls	r7, r3, #14
 8008b34:	d5f7      	bpl.n	8008b26 <HAL_RCC_OscConfig+0x296>
 8008b36:	e7b1      	b.n	8008a9c <HAL_RCC_OscConfig+0x20c>
    return HAL_ERROR;
 8008b38:	2001      	movs	r0, #1
}
 8008b3a:	b002      	add	sp, #8
 8008b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b40:	40021000 	.word	0x40021000
 8008b44:	20000b64 	.word	0x20000b64
 8008b48:	40007000 	.word	0x40007000
 8008b4c:	feeefffc 	.word	0xfeeefffc
        __HAL_RCC_HSI_DISABLE();
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b56:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008b58:	f7fe fc84 	bl	8007464 <HAL_GetTick>
 8008b5c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008b5e:	682b      	ldr	r3, [r5, #0]
 8008b60:	0559      	lsls	r1, r3, #21
 8008b62:	f57f aed6 	bpl.w	8008912 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b66:	f7fe fc7d 	bl	8007464 <HAL_GetTick>
 8008b6a:	1b80      	subs	r0, r0, r6
 8008b6c:	2802      	cmp	r0, #2
 8008b6e:	d9f6      	bls.n	8008b5e <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8008b70:	2003      	movs	r0, #3
}
 8008b72:	b002      	add	sp, #8
 8008b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8008b78:	2500      	movs	r5, #0
 8008b7a:	e6f8      	b.n	800896e <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b7c:	4a65      	ldr	r2, [pc, #404]	@ (8008d14 <HAL_RCC_OscConfig+0x484>)
 8008b7e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008b82:	f043 0301 	orr.w	r3, r3, #1
 8008b86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8008b8a:	f7fe fc6b 	bl	8007464 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b8e:	4f61      	ldr	r7, [pc, #388]	@ (8008d14 <HAL_RCC_OscConfig+0x484>)
      tickstart = HAL_GetTick();
 8008b90:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b92:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b96:	e004      	b.n	8008ba2 <HAL_RCC_OscConfig+0x312>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b98:	f7fe fc64 	bl	8007464 <HAL_GetTick>
 8008b9c:	1b80      	subs	r0, r0, r6
 8008b9e:	4540      	cmp	r0, r8
 8008ba0:	d8e6      	bhi.n	8008b70 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ba2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008ba6:	079b      	lsls	r3, r3, #30
 8008ba8:	d5f6      	bpl.n	8008b98 <HAL_RCC_OscConfig+0x308>
 8008baa:	e70c      	b.n	80089c6 <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 8008bac:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8008bb0:	f023 0301 	bic.w	r3, r3, #1
 8008bb4:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8008bb8:	f7fe fc54 	bl	8007464 <HAL_GetTick>
 8008bbc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008bbe:	e004      	b.n	8008bca <HAL_RCC_OscConfig+0x33a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008bc0:	f7fe fc50 	bl	8007464 <HAL_GetTick>
 8008bc4:	1b80      	subs	r0, r0, r6
 8008bc6:	2802      	cmp	r0, #2
 8008bc8:	d8d2      	bhi.n	8008b70 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008bca:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8008bce:	079f      	lsls	r7, r3, #30
 8008bd0:	d4f6      	bmi.n	8008bc0 <HAL_RCC_OscConfig+0x330>
 8008bd2:	e71a      	b.n	8008a0a <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008bd4:	6833      	ldr	r3, [r6, #0]
 8008bd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bda:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8008bdc:	f7fe fc42 	bl	8007464 <HAL_GetTick>
 8008be0:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008be2:	6833      	ldr	r3, [r6, #0]
 8008be4:	05da      	lsls	r2, r3, #23
 8008be6:	f53f aec7 	bmi.w	8008978 <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bea:	f7fe fc3b 	bl	8007464 <HAL_GetTick>
 8008bee:	1bc0      	subs	r0, r0, r7
 8008bf0:	2802      	cmp	r0, #2
 8008bf2:	d9f6      	bls.n	8008be2 <HAL_RCC_OscConfig+0x352>
 8008bf4:	e7bc      	b.n	8008b70 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bf6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008bfa:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008c04:	601a      	str	r2, [r3, #0]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008c0c:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c0e:	e785      	b.n	8008b1c <HAL_RCC_OscConfig+0x28c>
    return HAL_ERROR;
 8008c10:	2001      	movs	r0, #1
}
 8008c12:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8008c14:	f7fe fc26 	bl	8007464 <HAL_GetTick>
 8008c18:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c1a:	e004      	b.n	8008c26 <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c1c:	f7fe fc22 	bl	8007464 <HAL_GetTick>
 8008c20:	1b80      	subs	r0, r0, r6
 8008c22:	2802      	cmp	r0, #2
 8008c24:	d8a4      	bhi.n	8008b70 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c26:	682b      	ldr	r3, [r5, #0]
 8008c28:	0199      	lsls	r1, r3, #6
 8008c2a:	d4f7      	bmi.n	8008c1c <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c2c:	68e9      	ldr	r1, [r5, #12]
 8008c2e:	4b3a      	ldr	r3, [pc, #232]	@ (8008d18 <HAL_RCC_OscConfig+0x488>)
 8008c30:	6a22      	ldr	r2, [r4, #32]
 8008c32:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c34:	4e37      	ldr	r6, [pc, #220]	@ (8008d14 <HAL_RCC_OscConfig+0x484>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c36:	400b      	ands	r3, r1
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 8008c3e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008c42:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8008c46:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 8008c4a:	3801      	subs	r0, #1
 8008c4c:	0849      	lsrs	r1, r1, #1
 8008c4e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8008c52:	3901      	subs	r1, #1
 8008c54:	0852      	lsrs	r2, r2, #1
 8008c56:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8008c5a:	3a01      	subs	r2, #1
 8008c5c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8008c60:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8008c62:	682b      	ldr	r3, [r5, #0]
 8008c64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c68:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008c6a:	68eb      	ldr	r3, [r5, #12]
 8008c6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c70:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8008c72:	f7fe fbf7 	bl	8007464 <HAL_GetTick>
 8008c76:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c78:	e005      	b.n	8008c86 <HAL_RCC_OscConfig+0x3f6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c7a:	f7fe fbf3 	bl	8007464 <HAL_GetTick>
 8008c7e:	1b00      	subs	r0, r0, r4
 8008c80:	2802      	cmp	r0, #2
 8008c82:	f63f af75 	bhi.w	8008b70 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c86:	6833      	ldr	r3, [r6, #0]
 8008c88:	019a      	lsls	r2, r3, #6
 8008c8a:	d5f6      	bpl.n	8008c7a <HAL_RCC_OscConfig+0x3ea>
 8008c8c:	e6de      	b.n	8008a4c <HAL_RCC_OscConfig+0x1bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c8e:	4b21      	ldr	r3, [pc, #132]	@ (8008d14 <HAL_RCC_OscConfig+0x484>)
 8008c90:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8008c94:	f042 0204 	orr.w	r2, r2, #4
 8008c98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8008c9c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8008ca0:	f042 0201 	orr.w	r2, r2, #1
 8008ca4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008ca8:	e76f      	b.n	8008b8a <HAL_RCC_OscConfig+0x2fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	f43f af44 	beq.w	8008b38 <HAL_RCC_OscConfig+0x2a8>
      temp_pllckcfg = RCC->PLLCFGR;
 8008cb0:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cb2:	6a22      	ldr	r2, [r4, #32]
 8008cb4:	f003 0103 	and.w	r1, r3, #3
 8008cb8:	4291      	cmp	r1, r2
 8008cba:	f47f af3d 	bne.w	8008b38 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008cbe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008cc0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008cc4:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cc6:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8008cca:	f47f af35 	bne.w	8008b38 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008cce:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8008cd0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008cd4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8008cd8:	f47f af2e 	bne.w	8008b38 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008cdc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008cde:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ce2:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8008ce6:	f47f af27 	bne.w	8008b38 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008cea:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8008cec:	0852      	lsrs	r2, r2, #1
 8008cee:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8008cf2:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008cf4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8008cf8:	f47f af1e 	bne.w	8008b38 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008cfc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8008cfe:	0852      	lsrs	r2, r2, #1
 8008d00:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8008d04:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008d06:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8008d0a:	bf14      	ite	ne
 8008d0c:	2001      	movne	r0, #1
 8008d0e:	2000      	moveq	r0, #0
 8008d10:	e69d      	b.n	8008a4e <HAL_RCC_OscConfig+0x1be>
 8008d12:	bf00      	nop
 8008d14:	40021000 	.word	0x40021000
 8008d18:	019f800c 	.word	0x019f800c

08008d1c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008d1c:	4b18      	ldr	r3, [pc, #96]	@ (8008d80 <HAL_RCC_GetSysClockFreq+0x64>)
 8008d1e:	689a      	ldr	r2, [r3, #8]
 8008d20:	f002 020c 	and.w	r2, r2, #12
 8008d24:	2a04      	cmp	r2, #4
 8008d26:	d026      	beq.n	8008d76 <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008d28:	689a      	ldr	r2, [r3, #8]
 8008d2a:	f002 020c 	and.w	r2, r2, #12
 8008d2e:	2a08      	cmp	r2, #8
 8008d30:	d023      	beq.n	8008d7a <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008d32:	689a      	ldr	r2, [r3, #8]
 8008d34:	f002 020c 	and.w	r2, r2, #12
 8008d38:	2a0c      	cmp	r2, #12
 8008d3a:	d001      	beq.n	8008d40 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8008d3c:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8008d3e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008d40:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008d42:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d44:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008d46:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8008d4a:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008d4c:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d50:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d54:	bf0c      	ite	eq
 8008d56:	4b0b      	ldreq	r3, [pc, #44]	@ (8008d84 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d58:	4b0b      	ldrne	r3, [pc, #44]	@ (8008d88 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008d5a:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d60:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008d64:	4b06      	ldr	r3, [pc, #24]	@ (8008d80 <HAL_RCC_GetSysClockFreq+0x64>)
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8008d70:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8008d74:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8008d76:	4804      	ldr	r0, [pc, #16]	@ (8008d88 <HAL_RCC_GetSysClockFreq+0x6c>)
 8008d78:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8008d7a:	4802      	ldr	r0, [pc, #8]	@ (8008d84 <HAL_RCC_GetSysClockFreq+0x68>)
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	40021000 	.word	0x40021000
 8008d84:	016e3600 	.word	0x016e3600
 8008d88:	00f42400 	.word	0x00f42400

08008d8c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	f000 80ee 	beq.w	8008f6e <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d92:	4a78      	ldr	r2, [pc, #480]	@ (8008f74 <HAL_RCC_ClockConfig+0x1e8>)
{
 8008d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d98:	6813      	ldr	r3, [r2, #0]
 8008d9a:	f003 030f 	and.w	r3, r3, #15
 8008d9e:	428b      	cmp	r3, r1
 8008da0:	460d      	mov	r5, r1
 8008da2:	4604      	mov	r4, r0
 8008da4:	d20c      	bcs.n	8008dc0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008da6:	6813      	ldr	r3, [r2, #0]
 8008da8:	f023 030f 	bic.w	r3, r3, #15
 8008dac:	430b      	orrs	r3, r1
 8008dae:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008db0:	6813      	ldr	r3, [r2, #0]
 8008db2:	f003 030f 	and.w	r3, r3, #15
 8008db6:	428b      	cmp	r3, r1
 8008db8:	d002      	beq.n	8008dc0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8008dba:	2001      	movs	r0, #1
}
 8008dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	07df      	lsls	r7, r3, #31
 8008dc4:	d569      	bpl.n	8008e9a <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008dc6:	6867      	ldr	r7, [r4, #4]
 8008dc8:	2f03      	cmp	r7, #3
 8008dca:	f000 80a0 	beq.w	8008f0e <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008dce:	4b6a      	ldr	r3, [pc, #424]	@ (8008f78 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dd0:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008dd2:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dd4:	f000 8097 	beq.w	8008f06 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008dd8:	055b      	lsls	r3, r3, #21
 8008dda:	d5ee      	bpl.n	8008dba <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008ddc:	f7ff ff9e 	bl	8008d1c <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8008de0:	4b66      	ldr	r3, [pc, #408]	@ (8008f7c <HAL_RCC_ClockConfig+0x1f0>)
 8008de2:	4298      	cmp	r0, r3
 8008de4:	f240 80c0 	bls.w	8008f68 <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008de8:	4a63      	ldr	r2, [pc, #396]	@ (8008f78 <HAL_RCC_ClockConfig+0x1ec>)
 8008dea:	6893      	ldr	r3, [r2, #8]
 8008dec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008df0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008df4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008df6:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008dfa:	4e5f      	ldr	r6, [pc, #380]	@ (8008f78 <HAL_RCC_ClockConfig+0x1ec>)
 8008dfc:	68b3      	ldr	r3, [r6, #8]
 8008dfe:	f023 0303 	bic.w	r3, r3, #3
 8008e02:	433b      	orrs	r3, r7
 8008e04:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8008e06:	f7fe fb2d 	bl	8007464 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e0a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8008e0e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e10:	e004      	b.n	8008e1c <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e12:	f7fe fb27 	bl	8007464 <HAL_GetTick>
 8008e16:	1bc0      	subs	r0, r0, r7
 8008e18:	4540      	cmp	r0, r8
 8008e1a:	d871      	bhi.n	8008f00 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e1c:	68b3      	ldr	r3, [r6, #8]
 8008e1e:	6862      	ldr	r2, [r4, #4]
 8008e20:	f003 030c 	and.w	r3, r3, #12
 8008e24:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008e28:	d1f3      	bne.n	8008e12 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e2a:	6823      	ldr	r3, [r4, #0]
 8008e2c:	079f      	lsls	r7, r3, #30
 8008e2e:	d436      	bmi.n	8008e9e <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8008e30:	f1b9 0f00 	cmp.w	r9, #0
 8008e34:	d003      	beq.n	8008e3e <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008e36:	68b3      	ldr	r3, [r6, #8]
 8008e38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e3c:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e3e:	4e4d      	ldr	r6, [pc, #308]	@ (8008f74 <HAL_RCC_ClockConfig+0x1e8>)
 8008e40:	6833      	ldr	r3, [r6, #0]
 8008e42:	f003 030f 	and.w	r3, r3, #15
 8008e46:	42ab      	cmp	r3, r5
 8008e48:	d846      	bhi.n	8008ed8 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e4a:	6823      	ldr	r3, [r4, #0]
 8008e4c:	075a      	lsls	r2, r3, #29
 8008e4e:	d506      	bpl.n	8008e5e <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e50:	4949      	ldr	r1, [pc, #292]	@ (8008f78 <HAL_RCC_ClockConfig+0x1ec>)
 8008e52:	68e0      	ldr	r0, [r4, #12]
 8008e54:	688a      	ldr	r2, [r1, #8]
 8008e56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008e5a:	4302      	orrs	r2, r0
 8008e5c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e5e:	071b      	lsls	r3, r3, #28
 8008e60:	d507      	bpl.n	8008e72 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e62:	4a45      	ldr	r2, [pc, #276]	@ (8008f78 <HAL_RCC_ClockConfig+0x1ec>)
 8008e64:	6921      	ldr	r1, [r4, #16]
 8008e66:	6893      	ldr	r3, [r2, #8]
 8008e68:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8008e6c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008e70:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008e72:	f7ff ff53 	bl	8008d1c <HAL_RCC_GetSysClockFreq>
 8008e76:	4a40      	ldr	r2, [pc, #256]	@ (8008f78 <HAL_RCC_ClockConfig+0x1ec>)
 8008e78:	4c41      	ldr	r4, [pc, #260]	@ (8008f80 <HAL_RCC_ClockConfig+0x1f4>)
 8008e7a:	6892      	ldr	r2, [r2, #8]
 8008e7c:	4941      	ldr	r1, [pc, #260]	@ (8008f84 <HAL_RCC_ClockConfig+0x1f8>)
 8008e7e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8008e82:	4603      	mov	r3, r0
 8008e84:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8008e86:	4840      	ldr	r0, [pc, #256]	@ (8008f88 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008e88:	f002 021f 	and.w	r2, r2, #31
 8008e8c:	40d3      	lsrs	r3, r2
 8008e8e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8008e90:	6800      	ldr	r0, [r0, #0]
}
 8008e92:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8008e96:	f7fe ba9b 	b.w	80073d0 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e9a:	079e      	lsls	r6, r3, #30
 8008e9c:	d5cf      	bpl.n	8008e3e <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e9e:	0758      	lsls	r0, r3, #29
 8008ea0:	d504      	bpl.n	8008eac <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ea2:	4935      	ldr	r1, [pc, #212]	@ (8008f78 <HAL_RCC_ClockConfig+0x1ec>)
 8008ea4:	688a      	ldr	r2, [r1, #8]
 8008ea6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8008eaa:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008eac:	0719      	lsls	r1, r3, #28
 8008eae:	d506      	bpl.n	8008ebe <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008eb0:	4a31      	ldr	r2, [pc, #196]	@ (8008f78 <HAL_RCC_ClockConfig+0x1ec>)
 8008eb2:	6893      	ldr	r3, [r2, #8]
 8008eb4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008eb8:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008ebc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ebe:	4a2e      	ldr	r2, [pc, #184]	@ (8008f78 <HAL_RCC_ClockConfig+0x1ec>)
 8008ec0:	68a1      	ldr	r1, [r4, #8]
 8008ec2:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ec4:	4e2b      	ldr	r6, [pc, #172]	@ (8008f74 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ec6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008eca:	430b      	orrs	r3, r1
 8008ecc:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ece:	6833      	ldr	r3, [r6, #0]
 8008ed0:	f003 030f 	and.w	r3, r3, #15
 8008ed4:	42ab      	cmp	r3, r5
 8008ed6:	d9b8      	bls.n	8008e4a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ed8:	6833      	ldr	r3, [r6, #0]
 8008eda:	f023 030f 	bic.w	r3, r3, #15
 8008ede:	432b      	orrs	r3, r5
 8008ee0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8008ee2:	f7fe fabf 	bl	8007464 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ee6:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8008eea:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eec:	6833      	ldr	r3, [r6, #0]
 8008eee:	f003 030f 	and.w	r3, r3, #15
 8008ef2:	42ab      	cmp	r3, r5
 8008ef4:	d0a9      	beq.n	8008e4a <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ef6:	f7fe fab5 	bl	8007464 <HAL_GetTick>
 8008efa:	1bc0      	subs	r0, r0, r7
 8008efc:	4540      	cmp	r0, r8
 8008efe:	d9f5      	bls.n	8008eec <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8008f00:	2003      	movs	r0, #3
}
 8008f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f06:	039a      	lsls	r2, r3, #14
 8008f08:	f53f af68 	bmi.w	8008ddc <HAL_RCC_ClockConfig+0x50>
 8008f0c:	e755      	b.n	8008dba <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f0e:	4a1a      	ldr	r2, [pc, #104]	@ (8008f78 <HAL_RCC_ClockConfig+0x1ec>)
 8008f10:	6811      	ldr	r1, [r2, #0]
 8008f12:	0188      	lsls	r0, r1, #6
 8008f14:	f57f af51 	bpl.w	8008dba <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008f18:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f1a:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f1c:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 8008f1e:	4e17      	ldr	r6, [pc, #92]	@ (8008f7c <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008f20:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8008f24:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f26:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f2a:	bf0c      	ite	eq
 8008f2c:	4817      	ldreq	r0, [pc, #92]	@ (8008f8c <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f2e:	4818      	ldrne	r0, [pc, #96]	@ (8008f90 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f30:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f32:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008f36:	4810      	ldr	r0, [pc, #64]	@ (8008f78 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f38:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8008f3c:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008f40:	68c1      	ldr	r1, [r0, #12]
 8008f42:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8008f46:	3101      	adds	r1, #1
 8008f48:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8008f4a:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8008f4e:	42b2      	cmp	r2, r6
 8008f50:	d90a      	bls.n	8008f68 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008f52:	6882      	ldr	r2, [r0, #8]
 8008f54:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 8008f58:	f43f af46 	beq.w	8008de8 <HAL_RCC_ClockConfig+0x5c>
 8008f5c:	0799      	lsls	r1, r3, #30
 8008f5e:	d503      	bpl.n	8008f68 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008f60:	68a3      	ldr	r3, [r4, #8]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f43f af40 	beq.w	8008de8 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008f68:	f04f 0900 	mov.w	r9, #0
 8008f6c:	e745      	b.n	8008dfa <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8008f6e:	2001      	movs	r0, #1
}
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	40022000 	.word	0x40022000
 8008f78:	40021000 	.word	0x40021000
 8008f7c:	04c4b400 	.word	0x04c4b400
 8008f80:	0800c634 	.word	0x0800c634
 8008f84:	20000b5c 	.word	0x20000b5c
 8008f88:	20000b64 	.word	0x20000b64
 8008f8c:	016e3600 	.word	0x016e3600
 8008f90:	00f42400 	.word	0x00f42400

08008f94 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8008f94:	4b01      	ldr	r3, [pc, #4]	@ (8008f9c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8008f96:	6818      	ldr	r0, [r3, #0]
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	20000b5c 	.word	0x20000b5c

08008fa0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008fa0:	4b05      	ldr	r3, [pc, #20]	@ (8008fb8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8008fa2:	4a06      	ldr	r2, [pc, #24]	@ (8008fbc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008fa4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8008fa6:	4906      	ldr	r1, [pc, #24]	@ (8008fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008fa8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008fac:	6808      	ldr	r0, [r1, #0]
 8008fae:	5cd3      	ldrb	r3, [r2, r3]
 8008fb0:	f003 031f 	and.w	r3, r3, #31
}
 8008fb4:	40d8      	lsrs	r0, r3
 8008fb6:	4770      	bx	lr
 8008fb8:	40021000 	.word	0x40021000
 8008fbc:	0800c62c 	.word	0x0800c62c
 8008fc0:	20000b5c 	.word	0x20000b5c

08008fc4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008fc4:	4b05      	ldr	r3, [pc, #20]	@ (8008fdc <HAL_RCC_GetPCLK2Freq+0x18>)
 8008fc6:	4a06      	ldr	r2, [pc, #24]	@ (8008fe0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008fc8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8008fca:	4906      	ldr	r1, [pc, #24]	@ (8008fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008fcc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8008fd0:	6808      	ldr	r0, [r1, #0]
 8008fd2:	5cd3      	ldrb	r3, [r2, r3]
 8008fd4:	f003 031f 	and.w	r3, r3, #31
}
 8008fd8:	40d8      	lsrs	r0, r3
 8008fda:	4770      	bx	lr
 8008fdc:	40021000 	.word	0x40021000
 8008fe0:	0800c62c 	.word	0x0800c62c
 8008fe4:	20000b5c 	.word	0x20000b5c

08008fe8 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8008fe8:	4a02      	ldr	r2, [pc, #8]	@ (8008ff4 <HAL_RCC_EnableCSS+0xc>)
 8008fea:	6813      	ldr	r3, [r2, #0]
 8008fec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ff0:	6013      	str	r3, [r2, #0]
}
 8008ff2:	4770      	bx	lr
 8008ff4:	40021000 	.word	0x40021000

08008ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008ffc:	6803      	ldr	r3, [r0, #0]
{
 8008ffe:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009000:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 8009004:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009006:	d052      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009008:	4bac      	ldr	r3, [pc, #688]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800900a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800900c:	00d5      	lsls	r5, r2, #3
 800900e:	f140 813a 	bpl.w	8009286 <HAL_RCCEx_PeriphCLKConfig+0x28e>
    FlagStatus       pwrclkchanged = RESET;
 8009012:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009014:	4daa      	ldr	r5, [pc, #680]	@ (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8009016:	682b      	ldr	r3, [r5, #0]
 8009018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800901c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800901e:	f7fe fa21 	bl	8007464 <HAL_GetTick>
 8009022:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009024:	e005      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009026:	f7fe fa1d 	bl	8007464 <HAL_GetTick>
 800902a:	1b83      	subs	r3, r0, r6
 800902c:	2b02      	cmp	r3, #2
 800902e:	f200 8135 	bhi.w	800929c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009032:	682b      	ldr	r3, [r5, #0]
 8009034:	05d8      	lsls	r0, r3, #23
 8009036:	d5f6      	bpl.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009038:	4da0      	ldr	r5, [pc, #640]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800903a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800903c:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009040:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8009044:	d026      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8009046:	4293      	cmp	r3, r2
 8009048:	d024      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800904a:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800904e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8009052:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009056:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800905a:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800905e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009062:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009066:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800906a:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 800906c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009070:	d510      	bpl.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009072:	f7fe f9f7 	bl	8007464 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009076:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800907a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800907c:	e005      	b.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x92>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800907e:	f7fe f9f1 	bl	8007464 <HAL_GetTick>
 8009082:	1b80      	subs	r0, r0, r6
 8009084:	4540      	cmp	r0, r8
 8009086:	f200 8109 	bhi.w	800929c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800908a:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800908e:	079b      	lsls	r3, r3, #30
 8009090:	d5f5      	bpl.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009092:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8009094:	4989      	ldr	r1, [pc, #548]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009096:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 800909a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800909e:	4313      	orrs	r3, r2
 80090a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80090a4:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80090a6:	2000      	movs	r0, #0
    if(pwrclkchanged == SET)
 80090a8:	2f00      	cmp	r7, #0
 80090aa:	f040 80fc 	bne.w	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80090ae:	07dd      	lsls	r5, r3, #31
 80090b0:	d508      	bpl.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80090b2:	4982      	ldr	r1, [pc, #520]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80090b4:	6865      	ldr	r5, [r4, #4]
 80090b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80090ba:	f022 0203 	bic.w	r2, r2, #3
 80090be:	432a      	orrs	r2, r5
 80090c0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80090c4:	0799      	lsls	r1, r3, #30
 80090c6:	d508      	bpl.n	80090da <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80090c8:	497c      	ldr	r1, [pc, #496]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80090ca:	68a5      	ldr	r5, [r4, #8]
 80090cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80090d0:	f022 020c 	bic.w	r2, r2, #12
 80090d4:	432a      	orrs	r2, r5
 80090d6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80090da:	075a      	lsls	r2, r3, #29
 80090dc:	d508      	bpl.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80090de:	4977      	ldr	r1, [pc, #476]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80090e0:	68e5      	ldr	r5, [r4, #12]
 80090e2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80090e6:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80090ea:	432a      	orrs	r2, r5
 80090ec:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80090f0:	071f      	lsls	r7, r3, #28
 80090f2:	d508      	bpl.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80090f4:	4971      	ldr	r1, [pc, #452]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80090f6:	6925      	ldr	r5, [r4, #16]
 80090f8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80090fc:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8009100:	432a      	orrs	r2, r5
 8009102:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009106:	06de      	lsls	r6, r3, #27
 8009108:	d508      	bpl.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800910a:	496c      	ldr	r1, [pc, #432]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800910c:	6965      	ldr	r5, [r4, #20]
 800910e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009112:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8009116:	432a      	orrs	r2, r5
 8009118:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800911c:	069d      	lsls	r5, r3, #26
 800911e:	d508      	bpl.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009120:	4966      	ldr	r1, [pc, #408]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009122:	69a5      	ldr	r5, [r4, #24]
 8009124:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009128:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800912c:	432a      	orrs	r2, r5
 800912e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009132:	0659      	lsls	r1, r3, #25
 8009134:	d508      	bpl.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009136:	4961      	ldr	r1, [pc, #388]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009138:	69e5      	ldr	r5, [r4, #28]
 800913a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800913e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8009142:	432a      	orrs	r2, r5
 8009144:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009148:	061a      	lsls	r2, r3, #24
 800914a:	d508      	bpl.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800914c:	495b      	ldr	r1, [pc, #364]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800914e:	6a25      	ldr	r5, [r4, #32]
 8009150:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009154:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009158:	432a      	orrs	r2, r5
 800915a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800915e:	05df      	lsls	r7, r3, #23
 8009160:	d508      	bpl.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009162:	4956      	ldr	r1, [pc, #344]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009164:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009166:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800916a:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800916e:	432a      	orrs	r2, r5
 8009170:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009174:	039e      	lsls	r6, r3, #14
 8009176:	d508      	bpl.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009178:	4950      	ldr	r1, [pc, #320]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800917a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 800917c:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 8009180:	f022 0203 	bic.w	r2, r2, #3
 8009184:	432a      	orrs	r2, r5
 8009186:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800918a:	059d      	lsls	r5, r3, #22
 800918c:	d508      	bpl.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800918e:	494b      	ldr	r1, [pc, #300]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009190:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8009192:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009196:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800919a:	432a      	orrs	r2, r5
 800919c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80091a0:	0559      	lsls	r1, r3, #21
 80091a2:	d50b      	bpl.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80091a4:	4945      	ldr	r1, [pc, #276]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80091a6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80091a8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80091ac:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80091b0:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80091b2:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80091b6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80091ba:	d07a      	beq.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80091bc:	051a      	lsls	r2, r3, #20
 80091be:	d50b      	bpl.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80091c0:	493e      	ldr	r1, [pc, #248]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80091c2:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 80091c4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80091c8:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80091cc:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80091ce:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80091d2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80091d6:	d075      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80091d8:	04df      	lsls	r7, r3, #19
 80091da:	d50b      	bpl.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80091dc:	4937      	ldr	r1, [pc, #220]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80091de:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80091e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80091e4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80091e8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80091ea:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80091ee:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80091f2:	d06c      	beq.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80091f4:	049e      	lsls	r6, r3, #18
 80091f6:	d50b      	bpl.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80091f8:	4930      	ldr	r1, [pc, #192]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80091fa:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 80091fc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009200:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8009204:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009206:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800920a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800920e:	d063      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009210:	045d      	lsls	r5, r3, #17
 8009212:	d50b      	bpl.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009214:	4929      	ldr	r1, [pc, #164]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009216:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8009218:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800921c:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8009220:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009222:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009226:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800922a:	d05a      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800922c:	0419      	lsls	r1, r3, #16
 800922e:	d50b      	bpl.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009230:	4922      	ldr	r1, [pc, #136]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009232:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 8009234:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009238:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800923c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800923e:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009242:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009246:	d051      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009248:	03da      	lsls	r2, r3, #15
 800924a:	d50b      	bpl.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800924c:	491b      	ldr	r1, [pc, #108]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800924e:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8009250:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009254:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8009258:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800925a:	f1b5 4f80 	cmp.w	r5, #1073741824	@ 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800925e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009262:	d048      	beq.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009264:	035b      	lsls	r3, r3, #13
 8009266:	d50b      	bpl.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009268:	4a14      	ldr	r2, [pc, #80]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800926a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800926c:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8009270:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009274:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009276:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800927a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800927e:	d03f      	beq.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x308>
  }

#endif /* QUADSPI */

  return status;
}
 8009280:	b002      	add	sp, #8
 8009282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8009286:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009288:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800928c:	659a      	str	r2, [r3, #88]	@ 0x58
 800928e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009294:	9301      	str	r3, [sp, #4]
 8009296:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009298:	2701      	movs	r7, #1
 800929a:	e6bb      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800929c:	6823      	ldr	r3, [r4, #0]
        status = ret;
 800929e:	2003      	movs	r0, #3
    if(pwrclkchanged == SET)
 80092a0:	2f00      	cmp	r7, #0
 80092a2:	f43f af04 	beq.w	80090ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80092a6:	4905      	ldr	r1, [pc, #20]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80092a8:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80092aa:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80092ae:	658a      	str	r2, [r1, #88]	@ 0x58
 80092b0:	e6fd      	b.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092b2:	68ca      	ldr	r2, [r1, #12]
 80092b4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80092b8:	60ca      	str	r2, [r1, #12]
 80092ba:	e77f      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 80092bc:	40021000 	.word	0x40021000
 80092c0:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092c4:	68ca      	ldr	r2, [r1, #12]
 80092c6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80092ca:	60ca      	str	r2, [r1, #12]
 80092cc:	e784      	b.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092ce:	68ca      	ldr	r2, [r1, #12]
 80092d0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80092d4:	60ca      	str	r2, [r1, #12]
 80092d6:	e78d      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092d8:	68ca      	ldr	r2, [r1, #12]
 80092da:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80092de:	60ca      	str	r2, [r1, #12]
 80092e0:	e796      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x218>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092e2:	68ca      	ldr	r2, [r1, #12]
 80092e4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80092e8:	60ca      	str	r2, [r1, #12]
 80092ea:	e79f      	b.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80092ec:	68ca      	ldr	r2, [r1, #12]
 80092ee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80092f2:	60ca      	str	r2, [r1, #12]
 80092f4:	e7a8      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80092f6:	68ca      	ldr	r2, [r1, #12]
 80092f8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80092fc:	60ca      	str	r2, [r1, #12]
 80092fe:	e7b1      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009300:	68d3      	ldr	r3, [r2, #12]
 8009302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009306:	60d3      	str	r3, [r2, #12]
}
 8009308:	b002      	add	sp, #8
 800930a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800930e:	bf00      	nop

08009310 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009310:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009312:	6a02      	ldr	r2, [r0, #32]
 8009314:	f022 0201 	bic.w	r2, r2, #1
 8009318:	6202      	str	r2, [r0, #32]
{
 800931a:	b470      	push	{r4, r5, r6}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800931c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800931e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009320:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009322:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009326:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800932a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800932c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800932e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8009332:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009334:	4d15      	ldr	r5, [pc, #84]	@ (800938c <TIM_OC1_SetConfig+0x7c>)
 8009336:	42a8      	cmp	r0, r5
 8009338:	d013      	beq.n	8009362 <TIM_OC1_SetConfig+0x52>
 800933a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800933e:	42a8      	cmp	r0, r5
 8009340:	d00f      	beq.n	8009362 <TIM_OC1_SetConfig+0x52>
 8009342:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8009346:	42a8      	cmp	r0, r5
 8009348:	d00b      	beq.n	8009362 <TIM_OC1_SetConfig+0x52>
 800934a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800934e:	42a8      	cmp	r0, r5
 8009350:	d007      	beq.n	8009362 <TIM_OC1_SetConfig+0x52>
 8009352:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009356:	42a8      	cmp	r0, r5
 8009358:	d003      	beq.n	8009362 <TIM_OC1_SetConfig+0x52>
 800935a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800935e:	42a8      	cmp	r0, r5
 8009360:	d10d      	bne.n	800937e <TIM_OC1_SetConfig+0x6e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009362:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8009364:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8009368:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800936a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800936e:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8009372:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8009376:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800937a:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800937e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8009380:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009382:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8009384:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8009386:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8009388:	6203      	str	r3, [r0, #32]
}
 800938a:	4770      	bx	lr
 800938c:	40012c00 	.word	0x40012c00

08009390 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009390:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009392:	6a02      	ldr	r2, [r0, #32]
 8009394:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009398:	6202      	str	r2, [r0, #32]
{
 800939a:	b470      	push	{r4, r5, r6}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800939c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800939e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093a0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80093a2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80093a6:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80093aa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093ac:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80093ae:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093b2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80093b6:	4d16      	ldr	r5, [pc, #88]	@ (8009410 <TIM_OC3_SetConfig+0x80>)
 80093b8:	42a8      	cmp	r0, r5
 80093ba:	d013      	beq.n	80093e4 <TIM_OC3_SetConfig+0x54>
 80093bc:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80093c0:	42a8      	cmp	r0, r5
 80093c2:	d00f      	beq.n	80093e4 <TIM_OC3_SetConfig+0x54>
 80093c4:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 80093c8:	42a8      	cmp	r0, r5
 80093ca:	d00b      	beq.n	80093e4 <TIM_OC3_SetConfig+0x54>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093cc:	f5a5 5580 	sub.w	r5, r5, #4096	@ 0x1000
 80093d0:	42a8      	cmp	r0, r5
 80093d2:	d00e      	beq.n	80093f2 <TIM_OC3_SetConfig+0x62>
 80093d4:	4d0f      	ldr	r5, [pc, #60]	@ (8009414 <TIM_OC3_SetConfig+0x84>)
 80093d6:	42a8      	cmp	r0, r5
 80093d8:	d00b      	beq.n	80093f2 <TIM_OC3_SetConfig+0x62>
 80093da:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80093de:	42a8      	cmp	r0, r5
 80093e0:	d10f      	bne.n	8009402 <TIM_OC3_SetConfig+0x72>
 80093e2:	e006      	b.n	80093f2 <TIM_OC3_SetConfig+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093e4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80093e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80093ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80093f2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093f6:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80093fa:	ea46 0c05 	orr.w	ip, r6, r5
 80093fe:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009402:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8009404:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8009406:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8009408:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 800940a:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 800940c:	6203      	str	r3, [r0, #32]
}
 800940e:	4770      	bx	lr
 8009410:	40012c00 	.word	0x40012c00
 8009414:	40014400 	.word	0x40014400

08009418 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009418:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800941a:	6a02      	ldr	r2, [r0, #32]
 800941c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009420:	6202      	str	r2, [r0, #32]
{
 8009422:	b470      	push	{r4, r5, r6}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009424:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009426:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009428:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800942a:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800942e:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009432:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009436:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8009438:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800943c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009440:	4d16      	ldr	r5, [pc, #88]	@ (800949c <TIM_OC4_SetConfig+0x84>)
 8009442:	42a8      	cmp	r0, r5
 8009444:	d013      	beq.n	800946e <TIM_OC4_SetConfig+0x56>
 8009446:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800944a:	42a8      	cmp	r0, r5
 800944c:	d00f      	beq.n	800946e <TIM_OC4_SetConfig+0x56>
 800944e:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 8009452:	42a8      	cmp	r0, r5
 8009454:	d00b      	beq.n	800946e <TIM_OC4_SetConfig+0x56>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009456:	f5a5 5580 	sub.w	r5, r5, #4096	@ 0x1000
 800945a:	42a8      	cmp	r0, r5
 800945c:	d00e      	beq.n	800947c <TIM_OC4_SetConfig+0x64>
 800945e:	4d10      	ldr	r5, [pc, #64]	@ (80094a0 <TIM_OC4_SetConfig+0x88>)
 8009460:	42a8      	cmp	r0, r5
 8009462:	d00b      	beq.n	800947c <TIM_OC4_SetConfig+0x64>
 8009464:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009468:	42a8      	cmp	r0, r5
 800946a:	d10f      	bne.n	800948c <TIM_OC4_SetConfig+0x74>
 800946c:	e006      	b.n	800947c <TIM_OC4_SetConfig+0x64>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800946e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8009470:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009474:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8009478:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800947c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009480:	f424 4440 	bic.w	r4, r4, #49152	@ 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009484:	ea46 0c05 	orr.w	ip, r6, r5
 8009488:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800948c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800948e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8009490:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8009492:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8009494:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8009496:	6203      	str	r3, [r0, #32]
}
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	40012c00 	.word	0x40012c00
 80094a0:	40014400 	.word	0x40014400

080094a4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80094a4:	2800      	cmp	r0, #0
 80094a6:	f000 8099 	beq.w	80095dc <HAL_TIM_PWM_Init+0x138>
{
 80094aa:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80094ac:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80094b0:	4604      	mov	r4, r0
 80094b2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d07d      	beq.n	80095b6 <HAL_TIM_PWM_Init+0x112>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094ba:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094bc:	4948      	ldr	r1, [pc, #288]	@ (80095e0 <HAL_TIM_PWM_Init+0x13c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80094be:	2202      	movs	r2, #2
 80094c0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094c4:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 80094c6:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094c8:	d061      	beq.n	800958e <HAL_TIM_PWM_Init+0xea>
 80094ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094ce:	d029      	beq.n	8009524 <HAL_TIM_PWM_Init+0x80>
 80094d0:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 80094d4:	428b      	cmp	r3, r1
 80094d6:	d025      	beq.n	8009524 <HAL_TIM_PWM_Init+0x80>
 80094d8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80094dc:	428b      	cmp	r3, r1
 80094de:	d021      	beq.n	8009524 <HAL_TIM_PWM_Init+0x80>
 80094e0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80094e4:	428b      	cmp	r3, r1
 80094e6:	d01d      	beq.n	8009524 <HAL_TIM_PWM_Init+0x80>
 80094e8:	f501 3194 	add.w	r1, r1, #75776	@ 0x12800
 80094ec:	428b      	cmp	r3, r1
 80094ee:	d04e      	beq.n	800958e <HAL_TIM_PWM_Init+0xea>
 80094f0:	f501 51e0 	add.w	r1, r1, #7168	@ 0x1c00
 80094f4:	428b      	cmp	r3, r1
 80094f6:	d04a      	beq.n	800958e <HAL_TIM_PWM_Init+0xea>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094f8:	f5a1 5180 	sub.w	r1, r1, #4096	@ 0x1000
 80094fc:	428b      	cmp	r3, r1
 80094fe:	d05f      	beq.n	80095c0 <HAL_TIM_PWM_Init+0x11c>
 8009500:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009504:	428b      	cmp	r3, r1
 8009506:	d05b      	beq.n	80095c0 <HAL_TIM_PWM_Init+0x11c>
 8009508:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800950c:	428b      	cmp	r3, r1
 800950e:	d057      	beq.n	80095c0 <HAL_TIM_PWM_Init+0x11c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009510:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 8009512:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009514:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009516:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800951a:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 800951c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800951e:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009520:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009522:	e010      	b.n	8009546 <HAL_TIM_PWM_Init+0xa2>
    tmpcr1 |= Structure->CounterMode;
 8009524:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009526:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009528:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800952c:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800952e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009532:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009534:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009536:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800953a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800953c:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 800953e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8009540:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009542:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009544:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8009546:	2201      	movs	r2, #1
 8009548:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800954a:	691a      	ldr	r2, [r3, #16]
 800954c:	07d2      	lsls	r2, r2, #31
 800954e:	d503      	bpl.n	8009558 <HAL_TIM_PWM_Init+0xb4>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009550:	691a      	ldr	r2, [r3, #16]
 8009552:	f022 0201 	bic.w	r2, r2, #1
 8009556:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009558:	2301      	movs	r3, #1
 800955a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800955e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8009562:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8009566:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800956a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800956e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009572:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009576:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800957a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800957e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8009582:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009586:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800958a:	2000      	movs	r0, #0
}
 800958c:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800958e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009590:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009592:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8009596:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8009598:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800959c:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800959e:	69a1      	ldr	r1, [r4, #24]
 80095a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80095a4:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80095a6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095a8:	68e2      	ldr	r2, [r4, #12]
 80095aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80095ac:	6862      	ldr	r2, [r4, #4]
 80095ae:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80095b0:	6962      	ldr	r2, [r4, #20]
 80095b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80095b4:	e7c7      	b.n	8009546 <HAL_TIM_PWM_Init+0xa2>
    htim->Lock = HAL_UNLOCKED;
 80095b6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80095ba:	f7fd fd3d 	bl	8007038 <HAL_TIM_PWM_MspInit>
 80095be:	e77c      	b.n	80094ba <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095c0:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095c2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80095c4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095c8:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095ce:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095d0:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 80095d2:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80095d4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095d6:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80095d8:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095da:	e7e9      	b.n	80095b0 <HAL_TIM_PWM_Init+0x10c>
    return HAL_ERROR;
 80095dc:	2001      	movs	r0, #1
}
 80095de:	4770      	bx	lr
 80095e0:	40012c00 	.word	0x40012c00

080095e4 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 80095e4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095e6:	6a02      	ldr	r2, [r0, #32]
 80095e8:	f022 0210 	bic.w	r2, r2, #16
 80095ec:	6202      	str	r2, [r0, #32]
{
 80095ee:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 80095f0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80095f2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095f6:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80095fa:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095fe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009602:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8009604:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009608:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800960c:	4d16      	ldr	r5, [pc, #88]	@ (8009668 <TIM_OC2_SetConfig+0x84>)
 800960e:	42a8      	cmp	r0, r5
 8009610:	d013      	beq.n	800963a <TIM_OC2_SetConfig+0x56>
 8009612:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8009616:	42a8      	cmp	r0, r5
 8009618:	d00f      	beq.n	800963a <TIM_OC2_SetConfig+0x56>
 800961a:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 800961e:	42a8      	cmp	r0, r5
 8009620:	d00b      	beq.n	800963a <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009622:	f5a5 5580 	sub.w	r5, r5, #4096	@ 0x1000
 8009626:	42a8      	cmp	r0, r5
 8009628:	d00e      	beq.n	8009648 <TIM_OC2_SetConfig+0x64>
 800962a:	4d10      	ldr	r5, [pc, #64]	@ (800966c <TIM_OC2_SetConfig+0x88>)
 800962c:	42a8      	cmp	r0, r5
 800962e:	d00b      	beq.n	8009648 <TIM_OC2_SetConfig+0x64>
 8009630:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009634:	42a8      	cmp	r0, r5
 8009636:	d10f      	bne.n	8009658 <TIM_OC2_SetConfig+0x74>
 8009638:	e006      	b.n	8009648 <TIM_OC2_SetConfig+0x64>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800963a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800963c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009640:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8009644:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009648:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800964c:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009650:	ea46 0c05 	orr.w	ip, r6, r5
 8009654:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8009658:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800965a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800965c:	6182      	str	r2, [r0, #24]
}
 800965e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8009660:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8009662:	6203      	str	r3, [r0, #32]
}
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	40012c00 	.word	0x40012c00
 800966c:	40014400 	.word	0x40014400

08009670 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8009670:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8009674:	2b01      	cmp	r3, #1
 8009676:	f000 80e4 	beq.w	8009842 <HAL_TIM_PWM_ConfigChannel+0x1d2>
 800967a:	2301      	movs	r3, #1
{
 800967c:	b570      	push	{r4, r5, r6, lr}
 800967e:	4604      	mov	r4, r0
 8009680:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8009682:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8009686:	2a14      	cmp	r2, #20
 8009688:	d80c      	bhi.n	80096a4 <HAL_TIM_PWM_ConfigChannel+0x34>
 800968a:	e8df f002 	tbb	[pc, r2]
 800968e:	0b53      	.short	0x0b53
 8009690:	0b670b0b 	.word	0x0b670b0b
 8009694:	0b780b0b 	.word	0x0b780b0b
 8009698:	0b880b0b 	.word	0x0b880b0b
 800969c:	0b990b0b 	.word	0x0b990b0b
 80096a0:	0b0b      	.short	0x0b0b
 80096a2:	10          	.byte	0x10
 80096a3:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80096a4:	2300      	movs	r3, #0
 80096a6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 80096aa:	2001      	movs	r0, #1
}
 80096ac:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80096ae:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096b0:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 80096b2:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80096b4:	6a19      	ldr	r1, [r3, #32]
 80096b6:	f421 1180 	bic.w	r1, r1, #1048576	@ 0x100000
 80096ba:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80096bc:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80096be:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80096c0:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80096c4:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096c8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80096cc:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80096ce:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80096d2:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096d6:	4e5c      	ldr	r6, [pc, #368]	@ (8009848 <HAL_TIM_PWM_ConfigChannel+0x1d8>)
 80096d8:	42b3      	cmp	r3, r6
 80096da:	d013      	beq.n	8009704 <HAL_TIM_PWM_ConfigChannel+0x94>
 80096dc:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 80096e0:	42b3      	cmp	r3, r6
 80096e2:	d00f      	beq.n	8009704 <HAL_TIM_PWM_ConfigChannel+0x94>
 80096e4:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 80096e8:	42b3      	cmp	r3, r6
 80096ea:	d00b      	beq.n	8009704 <HAL_TIM_PWM_ConfigChannel+0x94>
 80096ec:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80096f0:	42b3      	cmp	r3, r6
 80096f2:	d007      	beq.n	8009704 <HAL_TIM_PWM_ConfigChannel+0x94>
 80096f4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80096f8:	42b3      	cmp	r3, r6
 80096fa:	d003      	beq.n	8009704 <HAL_TIM_PWM_ConfigChannel+0x94>
 80096fc:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8009700:	42b3      	cmp	r3, r6
 8009702:	d104      	bne.n	800970e <HAL_TIM_PWM_ConfigChannel+0x9e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009704:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009706:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800970a:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800970e:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009710:	6519      	str	r1, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009712:	6869      	ldr	r1, [r5, #4]
 8009714:	64d9      	str	r1, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009716:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009718:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800971a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800971c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009720:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009722:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009724:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009728:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800972a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800972c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009730:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009732:	e00e      	b.n	8009752 <HAL_TIM_PWM_ConfigChannel+0xe2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009734:	6800      	ldr	r0, [r0, #0]
 8009736:	f7ff fdeb 	bl	8009310 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800973a:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800973c:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800973e:	f043 0308 	orr.w	r3, r3, #8
 8009742:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009744:	6983      	ldr	r3, [r0, #24]
 8009746:	f023 0304 	bic.w	r3, r3, #4
 800974a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800974c:	6983      	ldr	r3, [r0, #24]
 800974e:	4313      	orrs	r3, r2
 8009750:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8009752:	2300      	movs	r3, #0
 8009754:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8009758:	2000      	movs	r0, #0
}
 800975a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800975c:	6800      	ldr	r0, [r0, #0]
 800975e:	f7ff ff41 	bl	80095e4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009762:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009764:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009766:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800976a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800976c:	6983      	ldr	r3, [r0, #24]
 800976e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009772:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009774:	6983      	ldr	r3, [r0, #24]
 8009776:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800977a:	6183      	str	r3, [r0, #24]
      break;
 800977c:	e7e9      	b.n	8009752 <HAL_TIM_PWM_ConfigChannel+0xe2>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800977e:	6800      	ldr	r0, [r0, #0]
 8009780:	f7ff fe06 	bl	8009390 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009784:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009786:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009788:	f043 0308 	orr.w	r3, r3, #8
 800978c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800978e:	69c3      	ldr	r3, [r0, #28]
 8009790:	f023 0304 	bic.w	r3, r3, #4
 8009794:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009796:	69c3      	ldr	r3, [r0, #28]
 8009798:	4313      	orrs	r3, r2
 800979a:	61c3      	str	r3, [r0, #28]
      break;
 800979c:	e7d9      	b.n	8009752 <HAL_TIM_PWM_ConfigChannel+0xe2>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800979e:	6800      	ldr	r0, [r0, #0]
 80097a0:	f7ff fe3a 	bl	8009418 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80097a4:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80097a6:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80097a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80097ac:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80097ae:	69c3      	ldr	r3, [r0, #28]
 80097b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80097b4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80097b6:	69c3      	ldr	r3, [r0, #28]
 80097b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80097bc:	61c3      	str	r3, [r0, #28]
      break;
 80097be:	e7c8      	b.n	8009752 <HAL_TIM_PWM_ConfigChannel+0xe2>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80097c0:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80097c2:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 80097c4:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80097c6:	6a19      	ldr	r1, [r3, #32]
 80097c8:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80097cc:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80097ce:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80097d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80097d2:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80097d6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 80097da:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80097dc:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80097de:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80097e2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097e6:	4e18      	ldr	r6, [pc, #96]	@ (8009848 <HAL_TIM_PWM_ConfigChannel+0x1d8>)
 80097e8:	42b3      	cmp	r3, r6
 80097ea:	d013      	beq.n	8009814 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 80097ec:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 80097f0:	42b3      	cmp	r3, r6
 80097f2:	d00f      	beq.n	8009814 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 80097f4:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 80097f8:	42b3      	cmp	r3, r6
 80097fa:	d00b      	beq.n	8009814 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 80097fc:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8009800:	42b3      	cmp	r3, r6
 8009802:	d007      	beq.n	8009814 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 8009804:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8009808:	42b3      	cmp	r3, r6
 800980a:	d003      	beq.n	8009814 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 800980c:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8009810:	42b3      	cmp	r3, r6
 8009812:	d104      	bne.n	800981e <HAL_TIM_PWM_ConfigChannel+0x1ae>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009814:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009816:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800981a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 800981e:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8009820:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8009822:	6869      	ldr	r1, [r5, #4]
 8009824:	6499      	str	r1, [r3, #72]	@ 0x48
  TIMx->CCER = tmpccer;
 8009826:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009828:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800982a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800982c:	f042 0208 	orr.w	r2, r2, #8
 8009830:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009832:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009834:	f022 0204 	bic.w	r2, r2, #4
 8009838:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800983a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800983c:	430a      	orrs	r2, r1
 800983e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009840:	e787      	b.n	8009752 <HAL_TIM_PWM_ConfigChannel+0xe2>
  __HAL_LOCK(htim);
 8009842:	2002      	movs	r0, #2
}
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	40012c00 	.word	0x40012c00

0800984c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800984c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8009850:	2b01      	cmp	r3, #1
 8009852:	d04e      	beq.n	80098f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
{
 8009854:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009856:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009858:	4d27      	ldr	r5, [pc, #156]	@ (80098f8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->State = HAL_TIM_STATE_BUSY;
 800985a:	2302      	movs	r3, #2
 800985c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009860:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8009862:	6853      	ldr	r3, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009864:	680c      	ldr	r4, [r1, #0]
 8009866:	4684      	mov	ip, r0
  tmpsmcr = htim->Instance->SMCR;
 8009868:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800986a:	d02c      	beq.n	80098c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800986c:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8009870:	42aa      	cmp	r2, r5
 8009872:	d033      	beq.n	80098dc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009874:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 8009878:	42aa      	cmp	r2, r5
 800987a:	d024      	beq.n	80098c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  tmpcr2 &= ~TIM_CR2_MMS;
 800987c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009884:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009886:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800988a:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800988c:	d00e      	beq.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800988e:	4b1b      	ldr	r3, [pc, #108]	@ (80098fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009890:	429a      	cmp	r2, r3
 8009892:	d00b      	beq.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009894:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009898:	429a      	cmp	r2, r3
 800989a:	d007      	beq.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800989c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d003      	beq.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80098a4:	f503 339a 	add.w	r3, r3, #78848	@ 0x13400
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d104      	bne.n	80098b6 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098ac:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098ae:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098b2:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098b4:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80098b6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80098b8:	2301      	movs	r3, #1
 80098ba:	f88c 303d 	strb.w	r3, [ip, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80098be:	f88c 003c 	strb.w	r0, [ip, #60]	@ 0x3c

  return HAL_OK;
}
 80098c2:	bc30      	pop	{r4, r5}
 80098c4:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80098c6:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80098c8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80098cc:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 80098ce:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80098d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098d6:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 80098d8:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098da:	e7e7      	b.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0x60>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80098dc:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80098de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80098e2:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 80098e4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80098e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098ec:	431c      	orrs	r4, r3
  htim->Instance->CR2 = tmpcr2;
 80098ee:	6054      	str	r4, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098f0:	e7dc      	b.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0x60>
  __HAL_LOCK(htim);
 80098f2:	2002      	movs	r0, #2
}
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	40012c00 	.word	0x40012c00
 80098fc:	40000400 	.word	0x40000400

08009900 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009900:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8009904:	2b01      	cmp	r3, #1
 8009906:	d048      	beq.n	800999a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
{
 8009908:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800990a:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 800990e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009912:	4602      	mov	r2, r0
 8009914:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009916:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009918:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800991a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800991e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009920:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009924:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009926:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009928:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800992c:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800992e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009930:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009934:	6b08      	ldr	r0, [r1, #48]	@ 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009936:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009938:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800993c:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800993e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009940:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009944:	69c8      	ldr	r0, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009946:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800994a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800994e:	4c14      	ldr	r4, [pc, #80]	@ (80099a0 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009950:	4303      	orrs	r3, r0
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009952:	6810      	ldr	r0, [r2, #0]
 8009954:	42a0      	cmp	r0, r4
 8009956:	d007      	beq.n	8009968 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8009958:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 800995c:	42a0      	cmp	r0, r4
 800995e:	d003      	beq.n	8009968 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8009960:	f504 54e0 	add.w	r4, r4, #7168	@ 0x1c00
 8009964:	42a0      	cmp	r0, r4
 8009966:	d110      	bne.n	800998a <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009968:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800996a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800996e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009972:	6a0c      	ldr	r4, [r1, #32]
 8009974:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009978:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800997a:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800997c:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800997e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009982:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009984:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009988:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 800998a:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800998c:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 800998e:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8009992:	4608      	mov	r0, r1
}
 8009994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009998:	4770      	bx	lr
  __HAL_LOCK(htim);
 800999a:	2002      	movs	r0, #2
}
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	40012c00 	.word	0x40012c00

080099a4 <HAL_TIMEx_ConfigBreakInput>:
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 80099a4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d076      	beq.n	8009a9a <HAL_TIMEx_ConfigBreakInput+0xf6>

  switch (sBreakInputConfig->Source)
 80099ac:	6813      	ldr	r3, [r2, #0]
 80099ae:	2b20      	cmp	r3, #32
{
 80099b0:	b530      	push	{r4, r5, lr}
 80099b2:	4686      	mov	lr, r0
  switch (sBreakInputConfig->Source)
 80099b4:	d824      	bhi.n	8009a00 <HAL_TIMEx_ConfigBreakInput+0x5c>
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d054      	beq.n	8009a64 <HAL_TIMEx_ConfigBreakInput+0xc0>
 80099ba:	1e58      	subs	r0, r3, #1
 80099bc:	281f      	cmp	r0, #31
 80099be:	d811      	bhi.n	80099e4 <HAL_TIMEx_ConfigBreakInput+0x40>
 80099c0:	e8df f000 	tbb	[pc, r0]
 80099c4:	59106d73 	.word	0x59106d73
 80099c8:	5f101010 	.word	0x5f101010
 80099cc:	10101010 	.word	0x10101010
 80099d0:	65101010 	.word	0x65101010
 80099d4:	10101010 	.word	0x10101010
 80099d8:	10101010 	.word	0x10101010
 80099dc:	10101010 	.word	0x10101010
 80099e0:	54101010 	.word	0x54101010
    default:
    {
      bkin_enable_mask = 0U;
      bkin_polarity_mask = 0U;
      bkin_enable_bitpos = 0U;
      bkin_polarity_bitpos = 0U;
 80099e4:	f04f 0c00 	mov.w	ip, #0
      bkin_enable_bitpos = 0U;
 80099e8:	4664      	mov	r4, ip
      bkin_polarity_mask = 0U;
 80099ea:	4660      	mov	r0, ip
      bkin_enable_mask = 0U;
 80099ec:	4663      	mov	r3, ip
      break;
    }
  }

  switch (BreakInput)
 80099ee:	2901      	cmp	r1, #1
 80099f0:	d011      	beq.n	8009a16 <HAL_TIMEx_ConfigBreakInput+0x72>
 80099f2:	2902      	cmp	r1, #2
 80099f4:	d01f      	beq.n	8009a36 <HAL_TIMEx_ConfigBreakInput+0x92>
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 80099f6:	2300      	movs	r3, #0
 80099f8:	f88e 303c 	strb.w	r3, [lr, #60]	@ 0x3c
  switch (BreakInput)
 80099fc:	2001      	movs	r0, #1

  return status;
}
 80099fe:	bd30      	pop	{r4, r5, pc}
  switch (sBreakInputConfig->Source)
 8009a00:	2b40      	cmp	r3, #64	@ 0x40
      bkin_polarity_bitpos = 0U;
 8009a02:	f04f 0c00 	mov.w	ip, #0
  switch (sBreakInputConfig->Source)
 8009a06:	d02a      	beq.n	8009a5e <HAL_TIMEx_ConfigBreakInput+0xba>
 8009a08:	2b80      	cmp	r3, #128	@ 0x80
 8009a0a:	d154      	bne.n	8009ab6 <HAL_TIMEx_ConfigBreakInput+0x112>
  switch (BreakInput)
 8009a0c:	2901      	cmp	r1, #1
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 8009a0e:	f04f 0407 	mov.w	r4, #7
      bkin_polarity_mask = 0U;
 8009a12:	4660      	mov	r0, ip
  switch (BreakInput)
 8009a14:	d1ed      	bne.n	80099f2 <HAL_TIMEx_ConfigBreakInput+0x4e>
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009a16:	6851      	ldr	r1, [r2, #4]
      tmporx = htim->Instance->AF1;
 8009a18:	f8de 5000 	ldr.w	r5, [lr]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009a1c:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009a1e:	40a1      	lsls	r1, r4
      tmporx = htim->Instance->AF1;
 8009a20:	6e2c      	ldr	r4, [r5, #96]	@ 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009a22:	4061      	eors	r1, r4
 8009a24:	400b      	ands	r3, r1
 8009a26:	4063      	eors	r3, r4
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009a28:	fa02 f20c 	lsl.w	r2, r2, ip
 8009a2c:	405a      	eors	r2, r3
 8009a2e:	4002      	ands	r2, r0
 8009a30:	4053      	eors	r3, r2
      htim->Instance->AF1 = tmporx;
 8009a32:	662b      	str	r3, [r5, #96]	@ 0x60
      break;
 8009a34:	e00e      	b.n	8009a54 <HAL_TIMEx_ConfigBreakInput+0xb0>
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009a36:	6851      	ldr	r1, [r2, #4]
      tmporx = htim->Instance->AF2;
 8009a38:	f8de 5000 	ldr.w	r5, [lr]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009a3c:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009a3e:	40a1      	lsls	r1, r4
      tmporx = htim->Instance->AF2;
 8009a40:	6e6c      	ldr	r4, [r5, #100]	@ 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009a42:	4061      	eors	r1, r4
 8009a44:	400b      	ands	r3, r1
 8009a46:	4063      	eors	r3, r4
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009a48:	fa02 f20c 	lsl.w	r2, r2, ip
 8009a4c:	405a      	eors	r2, r3
 8009a4e:	4002      	ands	r2, r0
 8009a50:	4053      	eors	r3, r2
      htim->Instance->AF2 = tmporx;
 8009a52:	666b      	str	r3, [r5, #100]	@ 0x64
  __HAL_UNLOCK(htim);
 8009a54:	2300      	movs	r3, #0
 8009a56:	f88e 303c 	strb.w	r3, [lr, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8009a5a:	2000      	movs	r0, #0
}
 8009a5c:	bd30      	pop	{r4, r5, pc}
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 8009a5e:	2406      	movs	r4, #6
      bkin_polarity_mask = 0U;
 8009a60:	4660      	mov	r0, ip
 8009a62:	e7c4      	b.n	80099ee <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = 0U;
 8009a64:	469c      	mov	ip, r3
      bkin_enable_bitpos = 0U;
 8009a66:	461c      	mov	r4, r3
      bkin_polarity_mask = 0U;
 8009a68:	4618      	mov	r0, r3
 8009a6a:	e7c0      	b.n	80099ee <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = 0U;
 8009a6c:	f04f 0c00 	mov.w	ip, #0
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 8009a70:	2405      	movs	r4, #5
      bkin_polarity_mask = 0U;
 8009a72:	4660      	mov	r0, ip
      break;
 8009a74:	e7bb      	b.n	80099ee <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8009a76:	f04f 0c0b 	mov.w	ip, #11
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8009a7a:	2402      	movs	r4, #2
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8009a7c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
      break;
 8009a80:	e7b5      	b.n	80099ee <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8009a82:	f04f 0c0c 	mov.w	ip, #12
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8009a86:	2403      	movs	r4, #3
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8009a88:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
      break;
 8009a8c:	e7af      	b.n	80099ee <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 8009a8e:	f04f 0c0d 	mov.w	ip, #13
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8009a92:	2404      	movs	r4, #4
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8009a94:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
      break;
 8009a98:	e7a9      	b.n	80099ee <HAL_TIMEx_ConfigBreakInput+0x4a>
  __HAL_LOCK(htim);
 8009a9a:	2002      	movs	r0, #2
}
 8009a9c:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 8009a9e:	f04f 0c0a 	mov.w	ip, #10
 8009aa2:	2401      	movs	r4, #1
 8009aa4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009aa8:	e7a1      	b.n	80099ee <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8009aaa:	f04f 0c09 	mov.w	ip, #9
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8009aae:	2400      	movs	r4, #0
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8009ab0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009ab4:	e79b      	b.n	80099ee <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_enable_bitpos = 0U;
 8009ab6:	4664      	mov	r4, ip
      bkin_polarity_mask = 0U;
 8009ab8:	4660      	mov	r0, ip
      bkin_enable_mask = 0U;
 8009aba:	4663      	mov	r3, ip
 8009abc:	e797      	b.n	80099ee <HAL_TIMEx_ConfigBreakInput+0x4a>
 8009abe:	bf00      	nop

08009ac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ac0:	b570      	push	{r4, r5, r6, lr}
 8009ac2:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ac4:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ac6:	6882      	ldr	r2, [r0, #8]
 8009ac8:	6900      	ldr	r0, [r0, #16]
 8009aca:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009acc:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ace:	4302      	orrs	r2, r0
 8009ad0:	430a      	orrs	r2, r1
 8009ad2:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ad4:	49a0      	ldr	r1, [pc, #640]	@ (8009d58 <UART_SetConfig+0x298>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ad6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ad8:	4029      	ands	r1, r5
 8009ada:	430a      	orrs	r2, r1
 8009adc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ae2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ae4:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8009ae8:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009aea:	499c      	ldr	r1, [pc, #624]	@ (8009d5c <UART_SetConfig+0x29c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009aec:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009aee:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009af0:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009af2:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009af4:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 8009af8:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009afc:	f000 80d1 	beq.w	8009ca2 <UART_SetConfig+0x1e2>
    tmpreg |= huart->Init.OneBitSampling;
 8009b00:	6a26      	ldr	r6, [r4, #32]
 8009b02:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b04:	430a      	orrs	r2, r1
 8009b06:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b0a:	f022 020f 	bic.w	r2, r2, #15
 8009b0e:	432a      	orrs	r2, r5
 8009b10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b12:	4a93      	ldr	r2, [pc, #588]	@ (8009d60 <UART_SetConfig+0x2a0>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d039      	beq.n	8009b8c <UART_SetConfig+0xcc>
 8009b18:	4a92      	ldr	r2, [pc, #584]	@ (8009d64 <UART_SetConfig+0x2a4>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d012      	beq.n	8009b44 <UART_SetConfig+0x84>
 8009b1e:	4a92      	ldr	r2, [pc, #584]	@ (8009d68 <UART_SetConfig+0x2a8>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	f000 80a6 	beq.w	8009c72 <UART_SetConfig+0x1b2>
 8009b26:	4a91      	ldr	r2, [pc, #580]	@ (8009d6c <UART_SetConfig+0x2ac>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d043      	beq.n	8009bb4 <UART_SetConfig+0xf4>
 8009b2c:	4a90      	ldr	r2, [pc, #576]	@ (8009d70 <UART_SetConfig+0x2b0>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	f000 808f 	beq.w	8009c52 <UART_SetConfig+0x192>

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 8009b34:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b36:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8009b38:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 8009b3c:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8009b40:	66a2      	str	r2, [r4, #104]	@ 0x68

  return ret;
}
 8009b42:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b44:	4b8b      	ldr	r3, [pc, #556]	@ (8009d74 <UART_SetConfig+0x2b4>)
 8009b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b4a:	f003 030c 	and.w	r3, r3, #12
 8009b4e:	2b0c      	cmp	r3, #12
 8009b50:	d8f0      	bhi.n	8009b34 <UART_SetConfig+0x74>
 8009b52:	a201      	add	r2, pc, #4	@ (adr r2, 8009b58 <UART_SetConfig+0x98>)
 8009b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b58:	08009c67 	.word	0x08009c67
 8009b5c:	08009b35 	.word	0x08009b35
 8009b60:	08009b35 	.word	0x08009b35
 8009b64:	08009b35 	.word	0x08009b35
 8009b68:	08009bcd 	.word	0x08009bcd
 8009b6c:	08009b35 	.word	0x08009b35
 8009b70:	08009b35 	.word	0x08009b35
 8009b74:	08009b35 	.word	0x08009b35
 8009b78:	08009c15 	.word	0x08009c15
 8009b7c:	08009b35 	.word	0x08009b35
 8009b80:	08009b35 	.word	0x08009b35
 8009b84:	08009b35 	.word	0x08009b35
 8009b88:	08009be5 	.word	0x08009be5
 8009b8c:	4b79      	ldr	r3, [pc, #484]	@ (8009d74 <UART_SetConfig+0x2b4>)
 8009b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b92:	f003 0303 	and.w	r3, r3, #3
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d03c      	beq.n	8009c14 <UART_SetConfig+0x154>
 8009b9a:	2b03      	cmp	r3, #3
 8009b9c:	d022      	beq.n	8009be4 <UART_SetConfig+0x124>
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d014      	beq.n	8009bcc <UART_SetConfig+0x10c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ba2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009ba6:	f000 80ce 	beq.w	8009d46 <UART_SetConfig+0x286>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009baa:	f7ff fa0b 	bl	8008fc4 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8009bae:	b9a8      	cbnz	r0, 8009bdc <UART_SetConfig+0x11c>
        ret = HAL_ERROR;
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	e7c0      	b.n	8009b36 <UART_SetConfig+0x76>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009bb4:	4b6f      	ldr	r3, [pc, #444]	@ (8009d74 <UART_SetConfig+0x2b4>)
 8009bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009bbe:	2b80      	cmp	r3, #128	@ 0x80
 8009bc0:	d028      	beq.n	8009c14 <UART_SetConfig+0x154>
 8009bc2:	d863      	bhi.n	8009c8c <UART_SetConfig+0x1cc>
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d04e      	beq.n	8009c66 <UART_SetConfig+0x1a6>
 8009bc8:	2b40      	cmp	r3, #64	@ 0x40
 8009bca:	d1b3      	bne.n	8009b34 <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bcc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009bd0:	f000 80be 	beq.w	8009d50 <UART_SetConfig+0x290>
        pclk = HAL_RCC_GetSysClockFreq();
 8009bd4:	f7ff f8a2 	bl	8008d1c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	d0e9      	beq.n	8009bb0 <UART_SetConfig+0xf0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bdc:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009bde:	e006      	b.n	8009bee <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009be0:	2b30      	cmp	r3, #48	@ 0x30
 8009be2:	d1a7      	bne.n	8009b34 <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009be4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009be8:	d018      	beq.n	8009c1c <UART_SetConfig+0x15c>
        pclk = (uint32_t) LSE_VALUE;
 8009bea:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bee:	6863      	ldr	r3, [r4, #4]
 8009bf0:	4a61      	ldr	r2, [pc, #388]	@ (8009d78 <UART_SetConfig+0x2b8>)
 8009bf2:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 8009bf6:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bfa:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bfe:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8009c02:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c06:	f1a0 0310 	sub.w	r3, r0, #16
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d892      	bhi.n	8009b34 <UART_SetConfig+0x74>
          huart->Instance->BRR = usartdiv;
 8009c0e:	6823      	ldr	r3, [r4, #0]
 8009c10:	60d8      	str	r0, [r3, #12]
 8009c12:	e7cd      	b.n	8009bb0 <UART_SetConfig+0xf0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c14:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8009c18:	4858      	ldr	r0, [pc, #352]	@ (8009d7c <UART_SetConfig+0x2bc>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c1a:	d1e8      	bne.n	8009bee <UART_SetConfig+0x12e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c1c:	6862      	ldr	r2, [r4, #4]
 8009c1e:	4b56      	ldr	r3, [pc, #344]	@ (8009d78 <UART_SetConfig+0x2b8>)
 8009c20:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8009c24:	fbb0 f0f1 	udiv	r0, r0, r1
 8009c28:	0853      	lsrs	r3, r2, #1
 8009c2a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c2e:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c32:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c36:	f1a3 0210 	sub.w	r2, r3, #16
 8009c3a:	428a      	cmp	r2, r1
 8009c3c:	f63f af7a 	bhi.w	8009b34 <UART_SetConfig+0x74>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c40:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8009c44:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c46:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c48:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	60cb      	str	r3, [r1, #12]
 8009c50:	e7ae      	b.n	8009bb0 <UART_SetConfig+0xf0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c52:	4b48      	ldr	r3, [pc, #288]	@ (8009d74 <UART_SetConfig+0x2b4>)
 8009c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c60:	d0d8      	beq.n	8009c14 <UART_SetConfig+0x154>
 8009c62:	d81a      	bhi.n	8009c9a <UART_SetConfig+0x1da>
 8009c64:	b9ab      	cbnz	r3, 8009c92 <UART_SetConfig+0x1d2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c66:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009c6a:	d065      	beq.n	8009d38 <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c6c:	f7ff f998 	bl	8008fa0 <HAL_RCC_GetPCLK1Freq>
        break;
 8009c70:	e79d      	b.n	8009bae <UART_SetConfig+0xee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c72:	4b40      	ldr	r3, [pc, #256]	@ (8009d74 <UART_SetConfig+0x2b4>)
 8009c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009c7c:	2b20      	cmp	r3, #32
 8009c7e:	d0c9      	beq.n	8009c14 <UART_SetConfig+0x154>
 8009c80:	d8ae      	bhi.n	8009be0 <UART_SetConfig+0x120>
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d0ef      	beq.n	8009c66 <UART_SetConfig+0x1a6>
 8009c86:	2b10      	cmp	r3, #16
 8009c88:	d0a0      	beq.n	8009bcc <UART_SetConfig+0x10c>
 8009c8a:	e753      	b.n	8009b34 <UART_SetConfig+0x74>
 8009c8c:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c8e:	d0a9      	beq.n	8009be4 <UART_SetConfig+0x124>
 8009c90:	e750      	b.n	8009b34 <UART_SetConfig+0x74>
 8009c92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c96:	d099      	beq.n	8009bcc <UART_SetConfig+0x10c>
 8009c98:	e74c      	b.n	8009b34 <UART_SetConfig+0x74>
 8009c9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c9e:	d0a1      	beq.n	8009be4 <UART_SetConfig+0x124>
 8009ca0:	e748      	b.n	8009b34 <UART_SetConfig+0x74>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ca2:	4311      	orrs	r1, r2
 8009ca4:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ca8:	4932      	ldr	r1, [pc, #200]	@ (8009d74 <UART_SetConfig+0x2b4>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009caa:	f022 020f 	bic.w	r2, r2, #15
 8009cae:	432a      	orrs	r2, r5
 8009cb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009cb2:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8009cb6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009cba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cbe:	d045      	beq.n	8009d4c <UART_SetConfig+0x28c>
 8009cc0:	d833      	bhi.n	8009d2a <UART_SetConfig+0x26a>
 8009cc2:	b37b      	cbz	r3, 8009d24 <UART_SetConfig+0x264>
 8009cc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cc8:	f47f af34 	bne.w	8009b34 <UART_SetConfig+0x74>
        pclk = HAL_RCC_GetSysClockFreq();
 8009ccc:	f7ff f826 	bl	8008d1c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	f43f af6d 	beq.w	8009bb0 <UART_SetConfig+0xf0>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009cd6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009cd8:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009cda:	4b27      	ldr	r3, [pc, #156]	@ (8009d78 <UART_SetConfig+0x2b8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009cdc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009ce0:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8009ce4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ce8:	4299      	cmp	r1, r3
 8009cea:	f63f af23 	bhi.w	8009b34 <UART_SetConfig+0x74>
 8009cee:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8009cf2:	f63f af1f 	bhi.w	8009b34 <UART_SetConfig+0x74>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	f7f9 f94f 	bl	8002f9c <__aeabi_uldivmod>
 8009cfe:	0872      	lsrs	r2, r6, #1
 8009d00:	0203      	lsls	r3, r0, #8
 8009d02:	0209      	lsls	r1, r1, #8
 8009d04:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8009d08:	1898      	adds	r0, r3, r2
 8009d0a:	f141 0100 	adc.w	r1, r1, #0
 8009d0e:	4632      	mov	r2, r6
 8009d10:	2300      	movs	r3, #0
 8009d12:	f7f9 f943 	bl	8002f9c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d16:	4b1a      	ldr	r3, [pc, #104]	@ (8009d80 <UART_SetConfig+0x2c0>)
 8009d18:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	f63f af09 	bhi.w	8009b34 <UART_SetConfig+0x74>
 8009d22:	e774      	b.n	8009c0e <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d24:	f7ff f93c 	bl	8008fa0 <HAL_RCC_GetPCLK1Freq>
        break;
 8009d28:	e7d2      	b.n	8009cd0 <UART_SetConfig+0x210>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d2e:	f47f af01 	bne.w	8009b34 <UART_SetConfig+0x74>
        pclk = (uint32_t) LSE_VALUE;
 8009d32:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009d36:	e7cf      	b.n	8009cd8 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d38:	f7ff f932 	bl	8008fa0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	f43f af37 	beq.w	8009bb0 <UART_SetConfig+0xf0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d42:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009d44:	e76a      	b.n	8009c1c <UART_SetConfig+0x15c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d46:	f7ff f93d 	bl	8008fc4 <HAL_RCC_GetPCLK2Freq>
        break;
 8009d4a:	e7f7      	b.n	8009d3c <UART_SetConfig+0x27c>
        pclk = (uint32_t) HSI_VALUE;
 8009d4c:	480b      	ldr	r0, [pc, #44]	@ (8009d7c <UART_SetConfig+0x2bc>)
 8009d4e:	e7c3      	b.n	8009cd8 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 8009d50:	f7fe ffe4 	bl	8008d1c <HAL_RCC_GetSysClockFreq>
        break;
 8009d54:	e7f2      	b.n	8009d3c <UART_SetConfig+0x27c>
 8009d56:	bf00      	nop
 8009d58:	cfff69f3 	.word	0xcfff69f3
 8009d5c:	40008000 	.word	0x40008000
 8009d60:	40013800 	.word	0x40013800
 8009d64:	40004400 	.word	0x40004400
 8009d68:	40004800 	.word	0x40004800
 8009d6c:	40004c00 	.word	0x40004c00
 8009d70:	40005000 	.word	0x40005000
 8009d74:	40021000 	.word	0x40021000
 8009d78:	0800c644 	.word	0x0800c644
 8009d7c:	00f42400 	.word	0x00f42400
 8009d80:	000ffcff 	.word	0x000ffcff

08009d84 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d84:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009d86:	071a      	lsls	r2, r3, #28
{
 8009d88:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d8a:	d506      	bpl.n	8009d9a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d8c:	6801      	ldr	r1, [r0, #0]
 8009d8e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8009d90:	684a      	ldr	r2, [r1, #4]
 8009d92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009d96:	4322      	orrs	r2, r4
 8009d98:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d9a:	07dc      	lsls	r4, r3, #31
 8009d9c:	d506      	bpl.n	8009dac <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d9e:	6801      	ldr	r1, [r0, #0]
 8009da0:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8009da2:	684a      	ldr	r2, [r1, #4]
 8009da4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8009da8:	4322      	orrs	r2, r4
 8009daa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009dac:	0799      	lsls	r1, r3, #30
 8009dae:	d506      	bpl.n	8009dbe <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009db0:	6801      	ldr	r1, [r0, #0]
 8009db2:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8009db4:	684a      	ldr	r2, [r1, #4]
 8009db6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009dba:	4322      	orrs	r2, r4
 8009dbc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009dbe:	075a      	lsls	r2, r3, #29
 8009dc0:	d506      	bpl.n	8009dd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009dc2:	6801      	ldr	r1, [r0, #0]
 8009dc4:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8009dc6:	684a      	ldr	r2, [r1, #4]
 8009dc8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009dcc:	4322      	orrs	r2, r4
 8009dce:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009dd0:	06dc      	lsls	r4, r3, #27
 8009dd2:	d506      	bpl.n	8009de2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009dd4:	6801      	ldr	r1, [r0, #0]
 8009dd6:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8009dd8:	688a      	ldr	r2, [r1, #8]
 8009dda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009dde:	4322      	orrs	r2, r4
 8009de0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009de2:	0699      	lsls	r1, r3, #26
 8009de4:	d506      	bpl.n	8009df4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009de6:	6801      	ldr	r1, [r0, #0]
 8009de8:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8009dea:	688a      	ldr	r2, [r1, #8]
 8009dec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009df0:	4322      	orrs	r2, r4
 8009df2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009df4:	065a      	lsls	r2, r3, #25
 8009df6:	d509      	bpl.n	8009e0c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009df8:	6801      	ldr	r1, [r0, #0]
 8009dfa:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8009dfc:	684a      	ldr	r2, [r1, #4]
 8009dfe:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8009e02:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e04:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e08:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e0a:	d00b      	beq.n	8009e24 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e0c:	061b      	lsls	r3, r3, #24
 8009e0e:	d506      	bpl.n	8009e1e <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e10:	6802      	ldr	r2, [r0, #0]
 8009e12:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8009e14:	6853      	ldr	r3, [r2, #4]
 8009e16:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8009e1a:	430b      	orrs	r3, r1
 8009e1c:	6053      	str	r3, [r2, #4]
  }
}
 8009e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e22:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e24:	684a      	ldr	r2, [r1, #4]
 8009e26:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8009e28:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8009e2c:	4322      	orrs	r2, r4
 8009e2e:	604a      	str	r2, [r1, #4]
 8009e30:	e7ec      	b.n	8009e0c <UART_AdvFeatureConfig+0x88>
 8009e32:	bf00      	nop

08009e34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e34:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e36:	2300      	movs	r3, #0
{
 8009e38:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e3a:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e3e:	f7fd fb11 	bl	8007464 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e42:	6822      	ldr	r2, [r4, #0]
 8009e44:	6813      	ldr	r3, [r2, #0]
 8009e46:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8009e48:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e4a:	d40f      	bmi.n	8009e6c <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e4c:	6813      	ldr	r3, [r2, #0]
 8009e4e:	0759      	lsls	r1, r3, #29
 8009e50:	d431      	bmi.n	8009eb6 <UART_CheckIdleState+0x82>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e52:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009e54:	2220      	movs	r2, #32
 8009e56:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 8009e5a:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8009e5c:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e60:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e62:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8009e64:	2300      	movs	r3, #0
 8009e66:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8009e6a:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e6c:	69d3      	ldr	r3, [r2, #28]
 8009e6e:	0298      	lsls	r0, r3, #10
 8009e70:	d4ec      	bmi.n	8009e4c <UART_CheckIdleState+0x18>
 8009e72:	e00c      	b.n	8009e8e <UART_CheckIdleState+0x5a>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e74:	6819      	ldr	r1, [r3, #0]
 8009e76:	0749      	lsls	r1, r1, #29
 8009e78:	461a      	mov	r2, r3
 8009e7a:	d505      	bpl.n	8009e88 <UART_CheckIdleState+0x54>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e7c:	69d9      	ldr	r1, [r3, #28]
 8009e7e:	0708      	lsls	r0, r1, #28
 8009e80:	d44a      	bmi.n	8009f18 <UART_CheckIdleState+0xe4>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e82:	69d9      	ldr	r1, [r3, #28]
 8009e84:	0509      	lsls	r1, r1, #20
 8009e86:	d475      	bmi.n	8009f74 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e88:	69db      	ldr	r3, [r3, #28]
 8009e8a:	0298      	lsls	r0, r3, #10
 8009e8c:	d4de      	bmi.n	8009e4c <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e8e:	f7fd fae9 	bl	8007464 <HAL_GetTick>
 8009e92:	1b43      	subs	r3, r0, r5
 8009e94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e98:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e9a:	d3eb      	bcc.n	8009e74 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009ea0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea4:	e843 2100 	strex	r1, r2, [r3]
 8009ea8:	2900      	cmp	r1, #0
 8009eaa:	d1f7      	bne.n	8009e9c <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8009eac:	2320      	movs	r3, #32
 8009eae:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8009eb2:	2003      	movs	r0, #3
 8009eb4:	e7d6      	b.n	8009e64 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009eb6:	69d3      	ldr	r3, [r2, #28]
 8009eb8:	025b      	lsls	r3, r3, #9
 8009eba:	d4ca      	bmi.n	8009e52 <UART_CheckIdleState+0x1e>
 8009ebc:	e00d      	b.n	8009eda <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	0750      	lsls	r0, r2, #29
 8009ec2:	d507      	bpl.n	8009ed4 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009ec4:	69da      	ldr	r2, [r3, #28]
 8009ec6:	0711      	lsls	r1, r2, #28
 8009ec8:	f100 8082 	bmi.w	8009fd0 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ecc:	69da      	ldr	r2, [r3, #28]
 8009ece:	0512      	lsls	r2, r2, #20
 8009ed0:	f100 80ac 	bmi.w	800a02c <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ed4:	69db      	ldr	r3, [r3, #28]
 8009ed6:	025b      	lsls	r3, r3, #9
 8009ed8:	d4bb      	bmi.n	8009e52 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009eda:	f7fd fac3 	bl	8007464 <HAL_GetTick>
 8009ede:	1b43      	subs	r3, r0, r5
 8009ee0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ee4:	6823      	ldr	r3, [r4, #0]
 8009ee6:	d3ea      	bcc.n	8009ebe <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee8:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009eec:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef0:	e843 2100 	strex	r1, r2, [r3]
 8009ef4:	2900      	cmp	r1, #0
 8009ef6:	d1f7      	bne.n	8009ee8 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef8:	f103 0208 	add.w	r2, r3, #8
 8009efc:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f00:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f04:	f103 0008 	add.w	r0, r3, #8
 8009f08:	e840 2100 	strex	r1, r2, [r0]
 8009f0c:	2900      	cmp	r1, #0
 8009f0e:	d1f3      	bne.n	8009ef8 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8009f10:	2320      	movs	r3, #32
 8009f12:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8009f16:	e7cc      	b.n	8009eb2 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f18:	2208      	movs	r2, #8
 8009f1a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1c:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f20:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f24:	e843 2100 	strex	r1, r2, [r3]
 8009f28:	2900      	cmp	r1, #0
 8009f2a:	d1f7      	bne.n	8009f1c <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f2c:	4856      	ldr	r0, [pc, #344]	@ (800a088 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2e:	f103 0208 	add.w	r2, r3, #8
 8009f32:	e852 2f00 	ldrex	r2, [r2]
 8009f36:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f38:	f103 0508 	add.w	r5, r3, #8
 8009f3c:	e845 2100 	strex	r1, r2, [r5]
 8009f40:	2900      	cmp	r1, #0
 8009f42:	d1f4      	bne.n	8009f2e <UART_CheckIdleState+0xfa>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f44:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009f46:	2a01      	cmp	r2, #1
 8009f48:	d00b      	beq.n	8009f62 <UART_CheckIdleState+0x12e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f4a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009f4c:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009f4e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8009f50:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f54:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f56:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8009f58:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009f5c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8009f60:	e79c      	b.n	8009e9c <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f62:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f66:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6a:	e843 2100 	strex	r1, r2, [r3]
 8009f6e:	2900      	cmp	r1, #0
 8009f70:	d1f7      	bne.n	8009f62 <UART_CheckIdleState+0x12e>
 8009f72:	e7ea      	b.n	8009f4a <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009f78:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f7e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f82:	e843 2100 	strex	r1, r2, [r3]
 8009f86:	2900      	cmp	r1, #0
 8009f88:	d1f7      	bne.n	8009f7a <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f8a:	483f      	ldr	r0, [pc, #252]	@ (800a088 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8c:	f103 0208 	add.w	r2, r3, #8
 8009f90:	e852 2f00 	ldrex	r2, [r2]
 8009f94:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f96:	f103 0508 	add.w	r5, r3, #8
 8009f9a:	e845 2100 	strex	r1, r2, [r5]
 8009f9e:	2900      	cmp	r1, #0
 8009fa0:	d1f4      	bne.n	8009f8c <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fa2:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009fa4:	2a01      	cmp	r2, #1
 8009fa6:	d00a      	beq.n	8009fbe <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fa8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009faa:	2120      	movs	r1, #32
 8009fac:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8009fb0:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fb2:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8009fb4:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009fb8:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8009fbc:	e76e      	b.n	8009e9c <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fbe:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fc2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc6:	e843 2100 	strex	r1, r2, [r3]
 8009fca:	2900      	cmp	r1, #0
 8009fcc:	d1f7      	bne.n	8009fbe <UART_CheckIdleState+0x18a>
 8009fce:	e7eb      	b.n	8009fa8 <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009fd0:	2208      	movs	r2, #8
 8009fd2:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd4:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fd8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fdc:	e843 2100 	strex	r1, r2, [r3]
 8009fe0:	2900      	cmp	r1, #0
 8009fe2:	d1f7      	bne.n	8009fd4 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009fe4:	4828      	ldr	r0, [pc, #160]	@ (800a088 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe6:	f103 0208 	add.w	r2, r3, #8
 8009fea:	e852 2f00 	ldrex	r2, [r2]
 8009fee:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff0:	f103 0508 	add.w	r5, r3, #8
 8009ff4:	e845 2100 	strex	r1, r2, [r5]
 8009ff8:	2900      	cmp	r1, #0
 8009ffa:	d1f4      	bne.n	8009fe6 <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ffc:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009ffe:	2a01      	cmp	r2, #1
 800a000:	d00b      	beq.n	800a01a <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a002:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800a004:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a006:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800a008:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 800a00c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a00e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 800a010:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a014:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 800a018:	e766      	b.n	8009ee8 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a01e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a022:	e843 2100 	strex	r1, r2, [r3]
 800a026:	2900      	cmp	r1, #0
 800a028:	d1f7      	bne.n	800a01a <UART_CheckIdleState+0x1e6>
 800a02a:	e7ea      	b.n	800a002 <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a02c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a030:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a032:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a036:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03a:	e843 2100 	strex	r1, r2, [r3]
 800a03e:	2900      	cmp	r1, #0
 800a040:	d1f7      	bne.n	800a032 <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a042:	4811      	ldr	r0, [pc, #68]	@ (800a088 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a044:	f103 0208 	add.w	r2, r3, #8
 800a048:	e852 2f00 	ldrex	r2, [r2]
 800a04c:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04e:	f103 0508 	add.w	r5, r3, #8
 800a052:	e845 2100 	strex	r1, r2, [r5]
 800a056:	2900      	cmp	r1, #0
 800a058:	d1f4      	bne.n	800a044 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a05a:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800a05c:	2a01      	cmp	r2, #1
 800a05e:	d00a      	beq.n	800a076 <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a060:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800a062:	2120      	movs	r1, #32
 800a064:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 800a068:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a06a:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 800a06c:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a070:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 800a074:	e738      	b.n	8009ee8 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a076:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a07a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07e:	e843 2100 	strex	r1, r2, [r3]
 800a082:	2900      	cmp	r1, #0
 800a084:	d1f7      	bne.n	800a076 <UART_CheckIdleState+0x242>
 800a086:	e7eb      	b.n	800a060 <UART_CheckIdleState+0x22c>
 800a088:	effffffe 	.word	0xeffffffe

0800a08c <HAL_UART_Init>:
  if (huart == NULL)
 800a08c:	b380      	cbz	r0, 800a0f0 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800a08e:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 800a092:	b510      	push	{r4, lr}
 800a094:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800a096:	b333      	cbz	r3, 800a0e6 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 800a098:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a09a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 800a09c:	2324      	movs	r3, #36	@ 0x24
 800a09e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800a0a2:	6813      	ldr	r3, [r2, #0]
 800a0a4:	f023 0301 	bic.w	r3, r3, #1
 800a0a8:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a0aa:	b9c1      	cbnz	r1, 800a0de <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f7ff fd07 	bl	8009ac0 <UART_SetConfig>
 800a0b2:	2801      	cmp	r0, #1
 800a0b4:	d011      	beq.n	800a0da <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0b6:	6823      	ldr	r3, [r4, #0]
 800a0b8:	685a      	ldr	r2, [r3, #4]
 800a0ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a0be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0c0:	689a      	ldr	r2, [r3, #8]
 800a0c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a0c6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800a0ce:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800a0d0:	601a      	str	r2, [r3, #0]
}
 800a0d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800a0d6:	f7ff bead 	b.w	8009e34 <UART_CheckIdleState>
}
 800a0da:	2001      	movs	r0, #1
 800a0dc:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800a0de:	4620      	mov	r0, r4
 800a0e0:	f7ff fe50 	bl	8009d84 <UART_AdvFeatureConfig>
 800a0e4:	e7e2      	b.n	800a0ac <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800a0e6:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800a0ea:	f7fd f833 	bl	8007154 <HAL_UART_MspInit>
 800a0ee:	e7d3      	b.n	800a098 <HAL_UART_Init+0xc>
}
 800a0f0:	2001      	movs	r0, #1
 800a0f2:	4770      	bx	lr

0800a0f4 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0f4:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d017      	beq.n	800a12c <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0fc:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a0fe:	2324      	movs	r3, #36	@ 0x24
{
 800a100:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 800a102:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a106:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a108:	6814      	ldr	r4, [r2, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a10a:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800a10c:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a110:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 800a114:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a116:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a118:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a11a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 800a11e:	2220      	movs	r2, #32
 800a120:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88

  return HAL_OK;
}
 800a124:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 800a128:	4618      	mov	r0, r3
}
 800a12a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800a12c:	2002      	movs	r0, #2
}
 800a12e:	4770      	bx	lr

0800a130 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a130:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 800a134:	2a01      	cmp	r2, #1
 800a136:	d037      	beq.n	800a1a8 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 800a138:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a13a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a13c:	2024      	movs	r0, #36	@ 0x24
{
 800a13e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800a140:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a144:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a146:	6810      	ldr	r0, [r2, #0]
 800a148:	f020 0001 	bic.w	r0, r0, #1
 800a14c:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a14e:	6890      	ldr	r0, [r2, #8]
 800a150:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 800a154:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a156:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a158:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a15a:	b310      	cbz	r0, 800a1a2 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a15c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a15e:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 800a160:	4d12      	ldr	r5, [pc, #72]	@ (800a1ac <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a162:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a166:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a16a:	4911      	ldr	r1, [pc, #68]	@ (800a1b0 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 800a16c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a170:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800a174:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800a178:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a17c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a17e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a180:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a184:	fbb1 f1f5 	udiv	r1, r1, r5
 800a188:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 800a18c:	2100      	movs	r1, #0
 800a18e:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800a192:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a194:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800a196:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 800a19a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800a19c:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 800a1a0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800a1a2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800a1a4:	4608      	mov	r0, r1
 800a1a6:	e7ef      	b.n	800a188 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800a1a8:	2002      	movs	r0, #2
}
 800a1aa:	4770      	bx	lr
 800a1ac:	0800c65c 	.word	0x0800c65c
 800a1b0:	0800c664 	.word	0x0800c664

0800a1b4 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800a1b4:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 800a1b8:	2a01      	cmp	r2, #1
 800a1ba:	d037      	beq.n	800a22c <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 800a1bc:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1be:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a1c0:	2024      	movs	r0, #36	@ 0x24
{
 800a1c2:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800a1c4:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1c8:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800a1ca:	6810      	ldr	r0, [r2, #0]
 800a1cc:	f020 0001 	bic.w	r0, r0, #1
 800a1d0:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a1d2:	6890      	ldr	r0, [r2, #8]
 800a1d4:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 800a1d8:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a1da:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a1dc:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a1de:	b310      	cbz	r0, 800a226 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a1e0:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a1e2:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800a1e4:	4d12      	ldr	r5, [pc, #72]	@ (800a230 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1e6:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a1ea:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1ee:	4911      	ldr	r1, [pc, #68]	@ (800a234 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a1f0:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1f4:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800a1f8:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800a1fc:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a200:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a202:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a204:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a208:	fbb1 f1f5 	udiv	r1, r1, r5
 800a20c:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 800a210:	2100      	movs	r1, #0
 800a212:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800a216:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a218:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800a21a:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 800a21e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800a220:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 800a224:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800a226:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800a228:	4608      	mov	r0, r1
 800a22a:	e7ef      	b.n	800a20c <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800a22c:	2002      	movs	r0, #2
}
 800a22e:	4770      	bx	lr
 800a230:	0800c65c 	.word	0x0800c65c
 800a234:	0800c664 	.word	0x0800c664

0800a238 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 800a238:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 800a23a:	8840      	ldrh	r0, [r0, #2]
 800a23c:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 800a240:	0c00      	lsrs	r0, r0, #16
 800a242:	4770      	bx	lr

0800a244 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 800a244:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 800a246:	8803      	ldrh	r3, [r0, #0]
 800a248:	140d      	asrs	r5, r1, #16
 800a24a:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 800a24c:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 800a250:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 800a254:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 800a258:	428b      	cmp	r3, r1
{
 800a25a:	b084      	sub	sp, #16
    if (square_sum > square_limit)
 800a25c:	da0f      	bge.n	800a27e <Circle_Limitation+0x3a>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 800a25e:	8846      	ldrh	r6, [r0, #2]
 800a260:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 800a264:	4282      	cmp	r2, r0
 800a266:	dd13      	ble.n	800a290 <Circle_Limitation+0x4c>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 800a268:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 800a26a:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 800a26e:	bfb8      	it	lt
 800a270:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 800a272:	f7f9 ffe3 	bl	800423c <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 800a276:	2c00      	cmp	r4, #0
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
      local_vqd.d = (int16_t)new_d;
 800a278:	b235      	sxth	r5, r6
        if (Vqd.q < 0)
 800a27a:	db0e      	blt.n	800a29a <Circle_Limitation+0x56>
      local_vqd.q = (int16_t)new_q;
 800a27c:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 800a27e:	b2a4      	uxth	r4, r4
 800a280:	2000      	movs	r0, #0
 800a282:	f364 000f 	bfi	r0, r4, #0, #16
 800a286:	b2ad      	uxth	r5, r5
 800a288:	f365 401f 	bfi	r0, r5, #16, #16
}
 800a28c:	b004      	add	sp, #16
 800a28e:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 800a290:	1a98      	subs	r0, r3, r2
 800a292:	f7f9 ffd3 	bl	800423c <MCM_Sqrt>
        if (Vqd.q < 0)
 800a296:	2c00      	cmp	r4, #0
 800a298:	daf0      	bge.n	800a27c <Circle_Limitation+0x38>
          new_q = - new_q;
 800a29a:	4240      	negs	r0, r0
      local_vqd.q = (int16_t)new_q;
 800a29c:	b204      	sxth	r4, r0
      local_vqd.d = (int16_t)new_d;
 800a29e:	e7ee      	b.n	800a27e <Circle_Limitation+0x3a>

0800a2a0 <MCPA_dataLog>:
  * @brief  Allocates and fills buffer with asynchronous data to be sent to controller
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 800a2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 800a2a2:	7fc3      	ldrb	r3, [r0, #31]
 800a2a4:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 800a2a8:	429a      	cmp	r2, r3
{
 800a2aa:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 800a2ac:	d002      	beq.n	800a2b4 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* Nothing to log just waiting next call to MCPA_datalog */
      pHandle->HFIndex++;
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 800a2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 800a2b4:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 800a2ba:	b1a5      	cbz	r5, 800a2e6 <MCPA_dataLog+0x46>
 800a2bc:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 800a2be:	8ba2      	ldrh	r2, [r4, #28]
 800a2c0:	42aa      	cmp	r2, r5
 800a2c2:	d24e      	bcs.n	800a362 <MCPA_dataLog+0xc2>
 800a2c4:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 800a2c8:	2bfe      	cmp	r3, #254	@ 0xfe
 800a2ca:	d066      	beq.n	800a39a <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 800a2cc:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 800a2d0:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 800a2d2:	8b22      	ldrh	r2, [r4, #24]
 800a2d4:	6820      	ldr	r0, [r4, #0]
 800a2d6:	3202      	adds	r2, #2
 800a2d8:	2309      	movs	r3, #9
 800a2da:	6845      	ldr	r5, [r0, #4]
 800a2dc:	b292      	uxth	r2, r2
 800a2de:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	8323      	strh	r3, [r4, #24]
}
 800a2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 800a2e6:	4601      	mov	r1, r0
 800a2e8:	2209      	movs	r2, #9
 800a2ea:	f851 0b14 	ldr.w	r0, [r1], #20
 800a2ee:	6803      	ldr	r3, [r0, #0]
 800a2f0:	4798      	blx	r3
 800a2f2:	b390      	cbz	r0, 800a35a <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 800a2f4:	4b49      	ldr	r3, [pc, #292]	@ (800a41c <MCPA_dataLog+0x17c>)
 800a2f6:	6961      	ldr	r1, [r4, #20]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 800a2fc:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 800a300:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer */
 800a304:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 800a308:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 800a30a:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 800a30c:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 800a30e:	d101      	bne.n	800a314 <MCPA_dataLog+0x74>
 800a310:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 800a312:	e7d4      	b.n	800a2be <MCPA_dataLog+0x1e>
            pHandle->MFNumBuff           = pHandle->MFNum;
 800a314:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            pHandle->HFNumBuff           = pHandle->HFNum;
 800a318:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
            pHandle->MFRateBuff          = pHandle->MFRate;
 800a31c:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
            pHandle->HFRateBuff          = pHandle->HFRate;
 800a320:	f894 5021 	ldrb.w	r5, [r4, #33]	@ 0x21
            pHandle->HFNumBuff           = pHandle->HFNum;
 800a324:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
            pHandle->MFNumBuff           = pHandle->MFNum;
 800a328:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 800a32c:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 800a32e:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff            = pHandle->Mark;
 800a330:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 800a334:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff          = pHandle->MFRate;
 800a336:	f884 1026 	strb.w	r1, [r4, #38]	@ 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 800a33a:	83a3      	strh	r3, [r4, #28]
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 800a33c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
            pHandle->HFRateBuff          = pHandle->HFRate;
 800a340:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 800a344:	f002 f812 	bl	800c36c <memcpy>
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 800a348:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 800a34c:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 800a350:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 800a354:	441a      	add	r2, r3
 800a356:	f002 f809 	bl	800c36c <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 800a35a:	8b25      	ldrh	r5, [r4, #24]
 800a35c:	2d00      	cmp	r5, #0
 800a35e:	d1ad      	bne.n	800a2bc <MCPA_dataLog+0x1c>
}
 800a360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800a362:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800a366:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800a368:	b36e      	cbz	r6, 800a3c6 <MCPA_dataLog+0x126>
 800a36a:	68a2      	ldr	r2, [r4, #8]
 800a36c:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 800a370:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]) ; //cstat !MISRAC2012-Rule-11.5
 800a372:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800a376:	8800      	ldrh	r0, [r0, #0]
 800a378:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 800a37c:	8b25      	ldrh	r5, [r4, #24]
 800a37e:	3502      	adds	r5, #2
 800a380:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800a382:	459c      	cmp	ip, r3
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 800a384:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800a386:	d1f4      	bne.n	800a372 <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 800a388:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800a38c:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 800a38e:	2bfd      	cmp	r3, #253	@ 0xfd
 800a390:	4618      	mov	r0, r3
 800a392:	d91d      	bls.n	800a3d0 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800a394:	4295      	cmp	r5, r2
 800a396:	d897      	bhi.n	800a2c8 <MCPA_dataLog+0x28>
}
 800a398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800a39a:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800a39e:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 800a3a2:	4418      	add	r0, r3
 800a3a4:	4298      	cmp	r0, r3
 800a3a6:	dd91      	ble.n	800a2cc <MCPA_dataLog+0x2c>
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800a3a8:	68a7      	ldr	r7, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 800a3aa:	6926      	ldr	r6, [r4, #16]
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800a3ac:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 800a3b0:	6812      	ldr	r2, [r2, #0]
 800a3b2:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800a3b4:	1c5a      	adds	r2, r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 800a3b6:	5cf3      	ldrb	r3, [r6, r3]
 800a3b8:	442b      	add	r3, r5
 800a3ba:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800a3bc:	b2d3      	uxtb	r3, r2
 800a3be:	4283      	cmp	r3, r0
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 800a3c0:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800a3c2:	dbf3      	blt.n	800a3ac <MCPA_dataLog+0x10c>
 800a3c4:	e782      	b.n	800a2cc <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 800a3c6:	f894 0026 	ldrb.w	r0, [r4, #38]	@ 0x26
 800a3ca:	28fd      	cmp	r0, #253	@ 0xfd
 800a3cc:	f63f af71 	bhi.w	800a2b2 <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 800a3d0:	f894 3020 	ldrb.w	r3, [r4, #32]
 800a3d4:	4283      	cmp	r3, r0
 800a3d6:	d006      	beq.n	800a3e6 <MCPA_dataLog+0x146>
            pHandle->MFIndex ++;
 800a3d8:	3301      	adds	r3, #1
 800a3da:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800a3de:	4295      	cmp	r5, r2
 800a3e0:	f63f af74 	bhi.w	800a2cc <MCPA_dataLog+0x2c>
}
 800a3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800a3e6:	f894 7028 	ldrb.w	r7, [r4, #40]	@ 0x28
 800a3ea:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 800a3ec:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800a3ee:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 800a3f0:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800a3f4:	ddf3      	ble.n	800a3de <MCPA_dataLog+0x13e>
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800a3f6:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800a3fa:	f8d4 c010 	ldr.w	ip, [r4, #16]
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800a3fe:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800a406:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800a40a:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800a40c:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800a40e:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800a410:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800a412:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800a414:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800a416:	dbf2      	blt.n	800a3fe <MCPA_dataLog+0x15e>
 800a418:	e7e1      	b.n	800a3de <MCPA_dataLog+0x13e>
 800a41a:	bf00      	nop
 800a41c:	200020f0 	.word	0x200020f0

0800a420 <MCPA_flushDataLog>:
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->bufferIndex > 0U)
 800a420:	8b03      	ldrh	r3, [r0, #24]
 800a422:	b19b      	cbz	r3, 800a44c <MCPA_flushDataLog+0x2c>
{
 800a424:	b570      	push	{r4, r5, r6, lr}
    {  /* If buffer is allocated, we must send it */
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 800a426:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
                                          proper decoding */
      {
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
        {
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800a42a:	6941      	ldr	r1, [r0, #20]
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 800a42c:	2afe      	cmp	r2, #254	@ 0xfe
 800a42e:	4604      	mov	r4, r0
 800a430:	d00d      	beq.n	800a44e <MCPA_flushDataLog+0x2e>
      else
      {
        /* Nothing to do */
      }
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 800a432:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 800a436:	52ca      	strh	r2, [r1, r3]
                                          the MARK */
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 800a438:	8b22      	ldrh	r2, [r4, #24]
 800a43a:	6820      	ldr	r0, [r4, #0]
 800a43c:	3202      	adds	r2, #2
 800a43e:	2309      	movs	r3, #9
 800a440:	6845      	ldr	r5, [r0, #4]
 800a442:	b292      	uxth	r2, r2
 800a444:	47a8      	blx	r5
                                             pHandle->bufferIndex + 2U, MCTL_ASYNC);
      pHandle->bufferIndex = 0U;
 800a446:	2300      	movs	r3, #0
 800a448:	8323      	strh	r3, [r4, #24]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 800a44a:	bd70      	pop	{r4, r5, r6, pc}
 800a44c:	4770      	bx	lr
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800a44e:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 800a452:	f890 c028 	ldrb.w	ip, [r0, #40]	@ 0x28
 800a456:	4494      	add	ip, r2
 800a458:	4562      	cmp	r2, ip
 800a45a:	daea      	bge.n	800a432 <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800a45c:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800a45e:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800a460:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 800a464:	6800      	ldr	r0, [r0, #0]
 800a466:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800a468:	5ca8      	ldrb	r0, [r5, r2]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800a46a:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800a46c:	4403      	add	r3, r0
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800a46e:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800a470:	b29b      	uxth	r3, r3
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800a472:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800a474:	8323      	strh	r3, [r4, #24]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800a476:	dbf3      	blt.n	800a460 <MCPA_flushDataLog+0x40>
 800a478:	e7db      	b.n	800a432 <MCPA_flushDataLog+0x12>
 800a47a:	bf00      	nop

0800a47c <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 800a47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 800a480:	880f      	ldrh	r7, [r1, #0]
{
 800a482:	4604      	mov	r4, r0

    if (buffSize == 0U)
 800a484:	2f00      	cmp	r7, #0
 800a486:	d046      	beq.n	800a516 <MCPA_cfgLog+0x9a>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 800a488:	6803      	ldr	r3, [r0, #0]
 800a48a:	89db      	ldrh	r3, [r3, #14]
 800a48c:	42bb      	cmp	r3, r7
 800a48e:	d33f      	bcc.n	800a510 <MCPA_cfgLog+0x94>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 800a490:	788b      	ldrb	r3, [r1, #2]
 800a492:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 800a496:	f891 8003 	ldrb.w	r8, [r1, #3]
 800a49a:	f880 8023 	strb.w	r8, [r0, #35]	@ 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 800a49e:	790b      	ldrb	r3, [r1, #4]
 800a4a0:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 800a4a4:	794b      	ldrb	r3, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 800a4a6:	7f82      	ldrb	r2, [r0, #30]
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 800a4a8:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 800a4ac:	4443      	add	r3, r8
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	dc57      	bgt.n	800a562 <MCPA_cfgLog+0xe6>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 800a4b2:	1d8e      	adds	r6, r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d057      	beq.n	800a568 <MCPA_cfgLog+0xec>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 800a4b8:	f04f 0800 	mov.w	r8, #0
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800a4bc:	4645      	mov	r5, r8
 800a4be:	e011      	b.n	800a4e4 <MCPA_cfgLog+0x68>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 800a4c0:	68e3      	ldr	r3, [r4, #12]
 800a4c2:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 800a4c4:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800a4c6:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 800a4ca:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 800a4ce:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800a4d0:	f105 0c01 	add.w	ip, r5, #1
 800a4d4:	fa5f f58c 	uxtb.w	r5, ip
 800a4d8:	440b      	add	r3, r1
          logSize = logSize+pHandle->dataSizeTable[i];
 800a4da:	4442      	add	r2, r8
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800a4dc:	429d      	cmp	r5, r3
          logSize = logSize+pHandle->dataSizeTable[i];
 800a4de:	fa1f f882 	uxth.w	r8, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800a4e2:	da11      	bge.n	800a508 <MCPA_cfgLog+0x8c>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 800a4e4:	f836 9b02 	ldrh.w	r9, [r6], #2
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 800a4e8:	6861      	ldr	r1, [r4, #4]
 800a4ea:	4648      	mov	r0, r9
 800a4ec:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800a4f0:	f7fc f950 	bl	8006794 <RI_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 800a4f4:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 800a4f8:	42ab      	cmp	r3, r5
 800a4fa:	f04f 0002 	mov.w	r0, #2
 800a4fe:	d8df      	bhi.n	800a4c0 <MCPA_cfgLog+0x44>
 800a500:	4648      	mov	r0, r9
 800a502:	f7fc f93b 	bl	800677c <RI_GetIDSize>
 800a506:	e7db      	b.n	800a4c0 <MCPA_cfgLog+0x44>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 800a508:	f108 0206 	add.w	r2, r8, #6
 800a50c:	4297      	cmp	r7, r2
 800a50e:	d210      	bcs.n	800a532 <MCPA_cfgLog+0xb6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 800a510:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 800a512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 800a516:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 800a518:	f880 7029 	strb.w	r7, [r0, #41]	@ 0x29
  if (pHandle->bufferIndex > 0U)
 800a51c:	b9ab      	cbnz	r3, 800a54a <MCPA_cfgLog+0xce>
  pHandle->bufferIndex = 0U;
 800a51e:	2300      	movs	r3, #0
 800a520:	8323      	strh	r3, [r4, #24]
  pHandle->MarkBuff    = 0U;
 800a522:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pHandle->HFIndex     = 0U;
 800a526:	77e3      	strb	r3, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 800a528:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  uint8_t result = MCP_CMD_OK;
 800a52c:	2000      	movs	r0, #0
}
 800a52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 800a532:	3f02      	subs	r7, #2
 800a534:	eba7 0708 	sub.w	r7, r7, r8
 800a538:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 800a53a:	7833      	ldrb	r3, [r6, #0]
 800a53c:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
          if (0U == pHandle->Mark)
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1f3      	bne.n	800a52c <MCPA_cfgLog+0xb0>
  if (pHandle->bufferIndex > 0U)
 800a544:	8b23      	ldrh	r3, [r4, #24]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d0e9      	beq.n	800a51e <MCPA_cfgLog+0xa2>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800a54a:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 800a54c:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 800a550:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 800a552:	8b22      	ldrh	r2, [r4, #24]
 800a554:	6820      	ldr	r0, [r4, #0]
 800a556:	3202      	adds	r2, #2
 800a558:	6845      	ldr	r5, [r0, #4]
 800a55a:	b292      	uxth	r2, r2
 800a55c:	2309      	movs	r3, #9
 800a55e:	47a8      	blx	r5
 800a560:	e7dd      	b.n	800a51e <MCPA_cfgLog+0xa2>
        result = MCP_ERROR_BAD_RAW_FORMAT;
 800a562:	200a      	movs	r0, #10
}
 800a564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800a568:	2206      	movs	r2, #6
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 800a56a:	4698      	mov	r8, r3
 800a56c:	e7ce      	b.n	800a50c <MCPA_cfgLog+0x90>
 800a56e:	bf00      	nop

0800a570 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 )
 800a570:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
    {
      if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 800a574:	8843      	ldrh	r3, [r0, #2]
 800a576:	8982      	ldrh	r2, [r0, #12]
    if (pHandle->hSensitivity > 0 )
 800a578:	2900      	cmp	r1, #0
 800a57a:	dd08      	ble.n	800a58e <NTC_SetFaultState+0x1e>
      if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d804      	bhi.n	800a58a <NTC_SetFaultState+0x1a>
      {
        hFault = MC_OVER_TEMP;
      }
      else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 800a580:	89c2      	ldrh	r2, [r0, #14]
 800a582:	429a      	cmp	r2, r3
 800a584:	d908      	bls.n	800a598 <NTC_SetFaultState+0x28>
      {
        hFault = MC_NO_ERROR;
 800a586:	2000      	movs	r0, #0
 800a588:	4770      	bx	lr
    }
    else
    {
      if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
      {
        hFault = MC_OVER_TEMP;
 800a58a:	2008      	movs	r0, #8
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (hFault);
}
 800a58c:	4770      	bx	lr
      if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d3fb      	bcc.n	800a58a <NTC_SetFaultState+0x1a>
      else if (pHandle->hAvTemp_d > pHandle->hOverTempDeactThreshold)
 800a592:	89c2      	ldrh	r2, [r0, #14]
 800a594:	429a      	cmp	r2, r3
 800a596:	d3f6      	bcc.n	800a586 <NTC_SetFaultState+0x16>
        hFault = pHandle->hFaultState;
 800a598:	8900      	ldrh	r0, [r0, #8]
 800a59a:	4770      	bx	lr

0800a59c <NTC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 800a59c:	7803      	ldrb	r3, [r0, #0]
 800a59e:	b94b      	cbnz	r3, 800a5b4 <NTC_Init+0x18>
    /* nothing to do */
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 ) 
 800a5a0:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	bfcc      	ite	gt
 800a5a8:	2300      	movgt	r3, #0
 800a5aa:	2301      	movle	r3, #1
 800a5ac:	425b      	negs	r3, r3
 800a5ae:	b29b      	uxth	r3, r3
    {
      pHandle->hAvTemp_d = 0U;
    }
    else
    {
      pHandle->hAvTemp_d = 0xFFFFU;
 800a5b0:	8043      	strh	r3, [r0, #2]
}
 800a5b2:	4770      	bx	lr
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 800a5b4:	8883      	ldrh	r3, [r0, #4]
      pHandle->hAvTemp_d = 0xFFFFU;
 800a5b6:	8043      	strh	r3, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	8102      	strh	r2, [r0, #8]
}
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop

0800a5c0 <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle, uint16_t rawValue)
{
 800a5c0:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 800a5c2:	7803      	ldrb	r3, [r0, #0]
{
 800a5c4:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 800a5c6:	b983      	cbnz	r3, 800a5ea <NTC_CalcAvTemp+0x2a>
    {
      uint16_t hAux;
      hAux = rawValue;

      if (0xFFFFU == hAux)
 800a5c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a5cc:	4299      	cmp	r1, r3
 800a5ce:	d007      	beq.n	800a5e0 <NTC_CalcAvTemp+0x20>
        /* Nothing to do */
      }
      else
      {
        uint32_t wtemp;
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 800a5d0:	8943      	ldrh	r3, [r0, #10]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 800a5d2:	8842      	ldrh	r2, [r0, #2]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 800a5d4:	1e58      	subs	r0, r3, #1
        wtemp += hAux;
 800a5d6:	fb00 1102 	mla	r1, r0, r2, r1
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 800a5da:	fbb1 f1f3 	udiv	r1, r1, r3

        pHandle->hAvTemp_d = (uint16_t)wtemp;
 800a5de:	8061      	strh	r1, [r4, #2]
      }

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	f7ff ffc5 	bl	800a570 <NTC_SetFaultState>
 800a5e6:	8120      	strh	r0, [r4, #8]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 800a5e8:	bd10      	pop	{r4, pc}
 800a5ea:	2000      	movs	r0, #0
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 800a5ec:	8120      	strh	r0, [r4, #8]
}
 800a5ee:	bd10      	pop	{r4, pc}

0800a5f0 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 800a5f0:	7803      	ldrb	r3, [r0, #0]
 800a5f2:	b95b      	cbnz	r3, 800a60c <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 800a5f4:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 800a5f6:	6941      	ldr	r1, [r0, #20]
      wTemp *= pHandle->hSensitivity;
 800a5f8:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 800a5fc:	8b00      	ldrh	r0, [r0, #24]
      wTemp -= ((int32_t)pHandle->wV0);
 800a5fe:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 800a600:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 800a604:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 800a608:	b200      	sxth	r0, r0
 800a60a:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 800a60c:	88c0      	ldrh	r0, [r0, #6]
}
 800a60e:	b200      	sxth	r0, r0
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop

0800a614 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 800a614:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 800a616:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 800a618:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 800a61a:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 800a61c:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 800a61e:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 800a620:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a622:	4770      	bx	lr

0800a624 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 800a624:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a626:	4770      	bx	lr

0800a628 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 800a628:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a62a:	4770      	bx	lr

0800a62c <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 800a62c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop

0800a634 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 800a634:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop

0800a63c <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 800a63c:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 800a63e:	4770      	bx	lr

0800a640 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 800a640:	8b80      	ldrh	r0, [r0, #28]
 800a642:	4770      	bx	lr

0800a644 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 800a644:	2301      	movs	r3, #1
 800a646:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 800a648:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 800a64a:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop

0800a650 <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 800a650:	8b40      	ldrh	r0, [r0, #26]
 800a652:	4770      	bx	lr

0800a654 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 800a654:	8bc0      	ldrh	r0, [r0, #30]
 800a656:	4770      	bx	lr

0800a658 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 800a658:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a65a:	4770      	bx	lr

0800a65c <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 800a65c:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a65e:	4770      	bx	lr

0800a660 <PID_SetKIDivisorPOW2>:
{
 800a660:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 800a662:	2301      	movs	r3, #1
{
 800a664:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 800a666:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 800a668:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800a66c:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 800a66e:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 800a670:	8343      	strh	r3, [r0, #26]
{
 800a672:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 800a674:	f7ff fff2 	bl	800a65c <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 800a678:	4902      	ldr	r1, [pc, #8]	@ (800a684 <PID_SetKIDivisorPOW2+0x24>)
 800a67a:	4628      	mov	r0, r5
 800a67c:	40a1      	lsls	r1, r4
 800a67e:	f7ff ffeb 	bl	800a658 <PID_SetLowerIntegralTermLimit>
}
 800a682:	bd38      	pop	{r3, r4, r5, pc}
 800a684:	ffff8001 	.word	0xffff8001

0800a688 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 800a688:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a68a:	4770      	bx	lr

0800a68c <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 800a68c:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop

0800a694 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 800a694:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 800a696:	4770      	bx	lr

0800a698 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 800a698:	2301      	movs	r3, #1
 800a69a:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 800a69c:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 800a69e:	8483      	strh	r3, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop

0800a6a4 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800a6a4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 800a6ac:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800a6b0:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800a6b4:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800a6b8:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 800a6bc:	b17c      	cbz	r4, 800a6de <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800a6be:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800a6c2:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 800a6c6:	eb15 0e01 	adds.w	lr, r5, r1
 800a6ca:	d41d      	bmi.n	800a708 <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 800a6cc:	420d      	tst	r5, r1
 800a6ce:	4914      	ldr	r1, [pc, #80]	@ (800a720 <PI_Controller+0x7c>)
 800a6d0:	bf48      	it	mi
 800a6d2:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800a6d4:	45a6      	cmp	lr, r4
 800a6d6:	dc02      	bgt.n	800a6de <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 800a6d8:	691c      	ldr	r4, [r3, #16]
 800a6da:	4574      	cmp	r4, lr
 800a6dc:	dd1d      	ble.n	800a71a <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 800a6de:	8b99      	ldrh	r1, [r3, #28]
 800a6e0:	410a      	asrs	r2, r1
 800a6e2:	8bd9      	ldrh	r1, [r3, #30]
 800a6e4:	fa44 f101 	asr.w	r1, r4, r1
 800a6e8:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 800a6ea:	4290      	cmp	r0, r2
 800a6ec:	da03      	bge.n	800a6f6 <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 800a6ee:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 800a6f0:	4414      	add	r4, r2
 800a6f2:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 800a6f4:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 800a6f6:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 800a6f8:	bfc5      	ittet	gt
 800a6fa:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 800a6fe:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 800a700:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 800a702:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 800a704:	609c      	str	r4, [r3, #8]
}
 800a706:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 800a708:	2d00      	cmp	r5, #0
 800a70a:	dde3      	ble.n	800a6d4 <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 800a70c:	2900      	cmp	r1, #0
 800a70e:	dde1      	ble.n	800a6d4 <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800a710:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a714:	428c      	cmp	r4, r1
 800a716:	d1e2      	bne.n	800a6de <PI_Controller+0x3a>
 800a718:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 800a71a:	4674      	mov	r4, lr
 800a71c:	e7df      	b.n	800a6de <PI_Controller+0x3a>
 800a71e:	bf00      	nop
 800a720:	80000001 	.word	0x80000001

0800a724 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 800a724:	6882      	ldr	r2, [r0, #8]
{
 800a726:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 800a728:	89d1      	ldrh	r1, [r2, #14]
 800a72a:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 800a72e:	8993      	ldrh	r3, [r2, #12]
 800a730:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 800a734:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 800a738:	fb13 230c 	smlabb	r3, r3, ip, r2
 800a73c:	2b00      	cmp	r3, #0

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 800a73e:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 800a742:	bfbc      	itt	lt
 800a744:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 800a748:	33ff      	addlt	r3, #255	@ 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 800a74a:	ebd2 4323 	rsbs	r3, r2, r3, asr #16
 800a74e:	bf48      	it	mi
 800a750:	330f      	addmi	r3, #15
 800a752:	eb02 1223 	add.w	r2, r2, r3, asr #4
 800a756:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 800a758:	f85d fb04 	ldr.w	pc, [sp], #4

0800a75c <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 800a75c:	b510      	push	{r4, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 800a75e:	f9b0 3000 	ldrsh.w	r3, [r0]
 800a762:	ee07 3a90 	vmov	s15, r3
{
 800a766:	ed2d 8b02 	vpush	{d8}
 800a76a:	4604      	mov	r4, r0
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 800a76c:	68c0      	ldr	r0, [r0, #12]
 800a76e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800a772:	f7ff fd61 	bl	800a238 <VBS_GetAvBusVoltage_V>
 800a776:	edd4 7a01 	vldr	s15, [r4, #4]
 800a77a:	ee68 7a27 	vmul.f32	s15, s16, s15

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 800a77e:	ecbd 8b02 	vpop	{d8}
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 800a782:	ee00 0a10 	vmov	s0, r0
 800a786:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 800a78a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a78e:	bd10      	pop	{r4, pc}

0800a790 <R3_1_GetPhaseCurrents>:
  * @brief  Computes and stores in the handler the latest converted motor phase currents in ab_t format.
  *
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 800a790:	b1c1      	cbz	r1, 800a7c4 <R3_1_GetPhaseCurrents+0x34>

    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a792:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
{
 800a796:	b470      	push	{r4, r5, r6}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a798:	e9d2 3400 	ldrd	r3, r4, [r2]
    ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
    ADCDataReg1 = ADCx->JDR1;
 800a79c:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
    ADCDataReg2 = ADCx->JDR2;
 800a7a0:	f8d3 6084 	ldr.w	r6, [r3, #132]	@ 0x84
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a7a4:	6863      	ldr	r3, [r4, #4]
    Sector = (uint8_t)pHandle->_Super.Sector;
 800a7a6:	f890 207a 	ldrb.w	r2, [r0, #122]	@ 0x7a
 800a7aa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a7ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7b2:	6063      	str	r3, [r4, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    switch (Sector)
 800a7b4:	2a05      	cmp	r2, #5
 800a7b6:	f200 809e 	bhi.w	800a8f6 <R3_1_GetPhaseCurrents+0x166>
 800a7ba:	e8df f002 	tbb	[pc, r2]
 800a7be:	1f11      	.short	0x1f11
 800a7c0:	1104041f 	.word	0x1104041f
 800a7c4:	4770      	bx	lr
      case SECTOR_4:
      case SECTOR_5:
      {
        /* Current on Phase C is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800a7c6:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 800a7ca:	4a4e      	ldr	r2, [pc, #312]	@ (800a904 <R3_1_GetPhaseCurrents+0x174>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800a7cc:	1b5b      	subs	r3, r3, r5
        if (Aux < -INT16_MAX)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	db22      	blt.n	800a818 <R3_1_GetPhaseCurrents+0x88>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 800a7d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7d6:	f2c0 808b 	blt.w	800a8f0 <R3_1_GetPhaseCurrents+0x160>
 800a7da:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 800a7de:	e01c      	b.n	800a81a <R3_1_GetPhaseCurrents+0x8a>
      case SECTOR_6:
      case SECTOR_1:
      {
        /* Current on Phase A is not accessible     */
        /* Ib = PhaseBOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 800a7e0:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c

        /* Saturation of Ib */
        if (Aux < -INT16_MAX)
 800a7e4:	4b47      	ldr	r3, [pc, #284]	@ (800a904 <R3_1_GetPhaseCurrents+0x174>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 800a7e6:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 800a7e8:	429c      	cmp	r4, r3
 800a7ea:	db2d      	blt.n	800a848 <R3_1_GetPhaseCurrents+0xb8>
        {
          Iab->b = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 800a7ec:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 800a7f0:	db7b      	blt.n	800a8ea <R3_1_GetPhaseCurrents+0x15a>
 800a7f2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a7f6:	4614      	mov	r4, r2
 800a7f8:	4615      	mov	r5, r2
 800a7fa:	e029      	b.n	800a850 <R3_1_GetPhaseCurrents+0xc0>
      case SECTOR_2:
      case SECTOR_3:
      {
        /* Current on Phase B is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800a7fc:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 800a800:	4b40      	ldr	r3, [pc, #256]	@ (800a904 <R3_1_GetPhaseCurrents+0x174>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800a802:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 800a804:	429c      	cmp	r4, r3
 800a806:	db30      	blt.n	800a86a <R3_1_GetPhaseCurrents+0xda>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 800a808:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 800a80c:	db69      	blt.n	800a8e2 <R3_1_GetPhaseCurrents+0x152>
 800a80e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800a812:	461c      	mov	r4, r3
 800a814:	469c      	mov	ip, r3
 800a816:	e02c      	b.n	800a872 <R3_1_GetPhaseCurrents+0xe2>
 800a818:	4694      	mov	ip, r2
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 800a81a:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
        if (Aux < -INT16_MAX)
 800a81e:	4d39      	ldr	r5, [pc, #228]	@ (800a904 <R3_1_GetPhaseCurrents+0x174>)
          Iab->a = -INT16_MAX;
 800a820:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 800a824:	1b92      	subs	r2, r2, r6
        if (Aux < -INT16_MAX)
 800a826:	42aa      	cmp	r2, r5
 800a828:	da31      	bge.n	800a88e <R3_1_GetPhaseCurrents+0xfe>
          Iab->b = -INT16_MAX;
 800a82a:	804d      	strh	r5, [r1, #2]
        break;
    }

    pHandle->_Super.Ia = Iab->a;
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a82c:	fa1f f38c 	uxth.w	r3, ip
 800a830:	f248 0201 	movw	r2, #32769	@ 0x8001
 800a834:	4413      	add	r3, r2
 800a836:	425b      	negs	r3, r3
    pHandle->_Super.Ib = Iab->b;
 800a838:	f8a0 5064 	strh.w	r5, [r0, #100]	@ 0x64
    pHandle->_Super.Ia = Iab->a;
 800a83c:	f8a0 c062 	strh.w	ip, [r0, #98]	@ 0x62
  }
}
 800a840:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a842:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
}
 800a846:	4770      	bx	lr
 800a848:	461c      	mov	r4, r3
 800a84a:	f248 0201 	movw	r2, #32769	@ 0x8001
 800a84e:	461d      	mov	r5, r3
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800a850:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
          Iab->b = -INT16_MAX;
 800a854:	804d      	strh	r5, [r1, #2]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800a856:	1af3      	subs	r3, r6, r3
        Aux -= (int32_t)Iab->b;             /* Ia  */
 800a858:	1b1b      	subs	r3, r3, r4
        if (Aux > INT16_MAX)
 800a85a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a85e:	db21      	blt.n	800a8a4 <R3_1_GetPhaseCurrents+0x114>
          Iab->a = INT16_MAX;
 800a860:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800a864:	800b      	strh	r3, [r1, #0]
 800a866:	469c      	mov	ip, r3
 800a868:	e7e4      	b.n	800a834 <R3_1_GetPhaseCurrents+0xa4>
 800a86a:	461c      	mov	r4, r3
 800a86c:	46a4      	mov	ip, r4
 800a86e:	f248 0301 	movw	r3, #32769	@ 0x8001
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800a872:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
          Iab->a = -INT16_MAX;
 800a876:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800a87a:	1ab2      	subs	r2, r6, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 800a87c:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 800a87e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800a882:	db17      	blt.n	800a8b4 <R3_1_GetPhaseCurrents+0x124>
          Iab->b = INT16_MAX;
 800a884:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a888:	804a      	strh	r2, [r1, #2]
 800a88a:	4615      	mov	r5, r2
 800a88c:	e7d2      	b.n	800a834 <R3_1_GetPhaseCurrents+0xa4>
        else  if (Aux > INT16_MAX)
 800a88e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800a892:	db20      	blt.n	800a8d6 <R3_1_GetPhaseCurrents+0x146>
          Iab->b = INT16_MAX;
 800a894:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800a898:	461a      	mov	r2, r3
 800a89a:	804b      	strh	r3, [r1, #2]
 800a89c:	4615      	mov	r5, r2
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a89e:	fa1f f38c 	uxth.w	r3, ip
 800a8a2:	e7c7      	b.n	800a834 <R3_1_GetPhaseCurrents+0xa4>
        else  if (Aux < -INT16_MAX)
 800a8a4:	4c17      	ldr	r4, [pc, #92]	@ (800a904 <R3_1_GetPhaseCurrents+0x174>)
 800a8a6:	42a3      	cmp	r3, r4
 800a8a8:	da0f      	bge.n	800a8ca <R3_1_GetPhaseCurrents+0x13a>
          Iab->a = -INT16_MAX;
 800a8aa:	800c      	strh	r4, [r1, #0]
 800a8ac:	f248 0301 	movw	r3, #32769	@ 0x8001
 800a8b0:	46a4      	mov	ip, r4
 800a8b2:	e7bf      	b.n	800a834 <R3_1_GetPhaseCurrents+0xa4>
        else  if (Aux < -INT16_MAX)
 800a8b4:	4d13      	ldr	r5, [pc, #76]	@ (800a904 <R3_1_GetPhaseCurrents+0x174>)
 800a8b6:	42aa      	cmp	r2, r5
 800a8b8:	da03      	bge.n	800a8c2 <R3_1_GetPhaseCurrents+0x132>
          Iab->b = -INT16_MAX;
 800a8ba:	804d      	strh	r5, [r1, #2]
 800a8bc:	f248 0201 	movw	r2, #32769	@ 0x8001
 800a8c0:	e7b8      	b.n	800a834 <R3_1_GetPhaseCurrents+0xa4>
          Iab->b = (int16_t)Aux;
 800a8c2:	b215      	sxth	r5, r2
 800a8c4:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a8c6:	b292      	uxth	r2, r2
 800a8c8:	e7b4      	b.n	800a834 <R3_1_GetPhaseCurrents+0xa4>
          Iab->a = (int16_t)Aux;
 800a8ca:	fa0f fc83 	sxth.w	ip, r3
 800a8ce:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	e7ae      	b.n	800a834 <R3_1_GetPhaseCurrents+0xa4>
          Iab->b = (int16_t)Aux;
 800a8d6:	b215      	sxth	r5, r2
 800a8d8:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a8da:	fa1f f38c 	uxth.w	r3, ip
 800a8de:	b292      	uxth	r2, r2
 800a8e0:	e7a8      	b.n	800a834 <R3_1_GetPhaseCurrents+0xa4>
          Iab->a = (int16_t)Aux;
 800a8e2:	fa0f fc84 	sxth.w	ip, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a8e6:	b2a3      	uxth	r3, r4
 800a8e8:	e7c3      	b.n	800a872 <R3_1_GetPhaseCurrents+0xe2>
          Iab->b = (int16_t)Aux;
 800a8ea:	b225      	sxth	r5, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a8ec:	b2a2      	uxth	r2, r4
 800a8ee:	e7af      	b.n	800a850 <R3_1_GetPhaseCurrents+0xc0>
          Iab->a = (int16_t)Aux;
 800a8f0:	fa0f fc83 	sxth.w	ip, r3
 800a8f4:	e791      	b.n	800a81a <R3_1_GetPhaseCurrents+0x8a>
    pHandle->_Super.Ia = Iab->a;
 800a8f6:	f9b1 c000 	ldrsh.w	ip, [r1]
    pHandle->_Super.Ib = Iab->b;
 800a8fa:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a8fe:	880b      	ldrh	r3, [r1, #0]
 800a900:	884a      	ldrh	r2, [r1, #2]
 800a902:	e797      	b.n	800a834 <R3_1_GetPhaseCurrents+0xa4>
 800a904:	ffff8001 	.word	0xffff8001

0800a908 <R3_1_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns the return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_1_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 800a908:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a90a:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 800a90e:	f890 4099 	ldrb.w	r4, [r0, #153]	@ 0x99
 800a912:	f880 407a 	strb.w	r4, [r0, #122]	@ 0x7a
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800a916:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a91a:	685b      	ldr	r3, [r3, #4]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 800a91c:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a920:	635c      	str	r4, [r3, #52]	@ 0x34
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800a922:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 800a924:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 800a928:	f8b0 0054 	ldrh.w	r0, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a92c:	639c      	str	r4, [r3, #56]	@ 0x38
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800a92e:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a930:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a932:	641a      	str	r2, [r3, #64]	@ 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800a934:	4904      	ldr	r1, [pc, #16]	@ (800a948 <R3_1_SetADCSampPointPolarization+0x40>)
 800a936:	685b      	ldr	r3, [r3, #4]
}
 800a938:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800a93c:	420b      	tst	r3, r1
}
 800a93e:	bf14      	ite	ne
 800a940:	2001      	movne	r0, #1
 800a942:	2000      	moveq	r0, #0
 800a944:	4770      	bx	lr
 800a946:	bf00      	nop
 800a948:	02000070 	.word	0x02000070

0800a94c <R3_1_HFCurrentsPolarizationAB>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_1_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 800a94c:	b321      	cbz	r1, 800a998 <R3_1_HFCurrentsPolarizationAB+0x4c>
#endif /* __ICCARM__ */
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a94e:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
 800a952:	e9d2 3200 	ldrd	r3, r2, [r2]
{
 800a956:	b430      	push	{r4, r5}
    ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
    uint32_t ADCDataReg1 = ADCx->JDR1;
 800a958:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
    uint32_t ADCDataReg2 = ADCx->JDR2;
 800a95c:	f8d3 5084 	ldr.w	r5, [r3, #132]	@ 0x84
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a960:	6853      	ldr	r3, [r2, #4]
 800a962:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a96a:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 800a96c:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800a970:	2b0f      	cmp	r3, #15
 800a972:	d80d      	bhi.n	800a990 <R3_1_HFCurrentsPolarizationAB+0x44>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
 800a974:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
      pHandle-> PhaseBOffset += ADCDataReg2;
 800a978:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
      pHandle-> PhaseAOffset += ADCDataReg1;
 800a97c:	441c      	add	r4, r3
      pHandle->PolarizationCounter++;
 800a97e:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseBOffset += ADCDataReg2;
 800a982:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 800a984:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 800a986:	e9c0 4222 	strd	r4, r2, [r0, #136]	@ 0x88
      pHandle->PolarizationCounter++;
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 800a990:	2300      	movs	r3, #0
    Iab->b = 0;
  }
}
 800a992:	bc30      	pop	{r4, r5}
    Iab->a = 0;
 800a994:	600b      	str	r3, [r1, #0]
}
 800a996:	4770      	bx	lr
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop

0800a99c <R3_1_HFCurrentsPolarizationC>:
  *                Min value: 0 (low sides ON)
  *                Max value: PWM_PERIOD_CYCLES/2 (low sides OFF)
  */
static void R3_1_HFCurrentsPolarizationC(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 800a99c:	b301      	cbz	r1, 800a9e0 <R3_1_HFCurrentsPolarizationC+0x44>
#endif /* __ICCARM__ */
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a99e:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800a9a2:	e9d3 3200 	ldrd	r3, r2, [r3]
{
 800a9a6:	b410      	push	{r4}
    uint32_t ADCDataReg2 = ADCx->JDR2;
 800a9a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a9ac:	6853      	ldr	r3, [r2, #4]
 800a9ae:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a9b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9b6:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 800a9b8:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800a9bc:	2b0f      	cmp	r3, #15
 800a9be:	d80a      	bhi.n	800a9d6 <R3_1_HFCurrentsPolarizationC+0x3a>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 800a9c0:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseCOffset += ADCDataReg2;
 800a9c4:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 800a9c8:	3301      	adds	r3, #1
      pHandle-> PhaseCOffset += ADCDataReg2;
 800a9ca:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 800a9cc:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 800a9ce:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 800a9d2:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 800a9d6:	2300      	movs	r3, #0
    Iab->b = 0;
  }
}
 800a9d8:	f85d 4b04 	ldr.w	r4, [sp], #4
    Iab->a = 0;
 800a9dc:	600b      	str	r3, [r1, #0]
}
 800a9de:	4770      	bx	lr
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop

0800a9e4 <R3_1_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a9e4:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  pHandle->ADCRegularLocked = true;

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 800a9e8:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a9ec:	685b      	ldr	r3, [r3, #4]
  pHandle->ADCRegularLocked = true;
 800a9ee:	f04f 0c01 	mov.w	ip, #1
{
 800a9f2:	b5f0      	push	{r4, r5, r6, r7, lr}
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 800a9f4:	fa22 f10c 	lsr.w	r1, r2, ip
  pHandle->_Super.TurnOnLowSidesAction = false;
 800a9f8:	f04f 0e00 	mov.w	lr, #0
 800a9fc:	f880 e07c 	strb.w	lr, [r0, #124]	@ 0x7c
  pHandle->ADCRegularLocked = true;
 800aa00:	f880 c0a0 	strb.w	ip, [r0, #160]	@ 0xa0
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 800aa04:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800aa06:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800aa08:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800aa0a:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800aa0c:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 800aa10:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800aa12:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800aa14:	691a      	ldr	r2, [r3, #16]
 800aa16:	07d2      	lsls	r2, r2, #31
 800aa18:	d5fc      	bpl.n	800aa14 <R3_1_SwitchOnPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800aa1a:	f06f 0201 	mvn.w	r2, #1
 800aa1e:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800aa20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa22:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aa26:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800aa28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aa2e:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 800aa30:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800aa34:	2a02      	cmp	r2, #2
 800aa36:	d007      	beq.n	800aa48 <R3_1_SwitchOnPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800aa38:	f06f 0201 	mvn.w	r2, #1
 800aa3c:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800aa3e:	68da      	ldr	r2, [r3, #12]
 800aa40:	f042 0201 	orr.w	r2, r2, #1
 800aa44:	60da      	str	r2, [r3, #12]
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);
}
 800aa46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 800aa48:	6a19      	ldr	r1, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800aa4a:	6bc7      	ldr	r7, [r0, #60]	@ 0x3c
 800aa4c:	f8b0 c048 	ldrh.w	ip, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800aa50:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800aa52:	f8b0 604a 	ldrh.w	r6, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800aa56:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800aa58:	f8b0 004c 	ldrh.w	r0, [r0, #76]	@ 0x4c
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 800aa5c:	f240 5255 	movw	r2, #1365	@ 0x555
 800aa60:	4211      	tst	r1, r2
 800aa62:	d004      	beq.n	800aa6e <R3_1_SwitchOnPWM+0x8a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800aa64:	f8c7 c018 	str.w	ip, [r7, #24]
 800aa68:	61ae      	str	r6, [r5, #24]
 800aa6a:	61a0      	str	r0, [r4, #24]
}
 800aa6c:	e7e4      	b.n	800aa38 <R3_1_SwitchOnPWM+0x54>
  WRITE_REG(GPIOx->BRR, PinMask);
 800aa6e:	f8c7 c028 	str.w	ip, [r7, #40]	@ 0x28
 800aa72:	62ae      	str	r6, [r5, #40]	@ 0x28
 800aa74:	62a0      	str	r0, [r4, #40]	@ 0x28
}
 800aa76:	e7df      	b.n	800aa38 <R3_1_SwitchOnPWM+0x54>

0800aa78 <R3_1_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800aa78:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (true == pHandle->_Super.BrakeActionLock)
 800aa7c:	f890 1083 	ldrb.w	r1, [r0, #131]	@ 0x83
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800aa80:	685a      	ldr	r2, [r3, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800aa82:	68d3      	ldr	r3, [r2, #12]
 800aa84:	f023 0301 	bic.w	r3, r3, #1
 800aa88:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800aa8a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 800aa8c:	f04f 0c00 	mov.w	ip, #0
 800aa90:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800aa94:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
 800aa98:	6453      	str	r3, [r2, #68]	@ 0x44
  if (true == pHandle->_Super.BrakeActionLock)
 800aa9a:	b919      	cbnz	r1, 800aaa4 <R3_1_SwitchOffPWM+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800aa9c:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d00c      	beq.n	800aabe <R3_1_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800aaa4:	f06f 0301 	mvn.w	r3, #1
 800aaa8:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800aaaa:	6913      	ldr	r3, [r2, #16]
 800aaac:	07db      	lsls	r3, r3, #31
 800aaae:	d5fc      	bpl.n	800aaaa <R3_1_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800aab0:	f06f 0101 	mvn.w	r1, #1
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked = false;
 800aab4:	2300      	movs	r3, #0
 800aab6:	6111      	str	r1, [r2, #16]
 800aab8:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800aabc:	4770      	bx	lr
{
 800aabe:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800aac0:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	@ 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800aac4:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800aac8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BRR, PinMask);
 800aaca:	62a5      	str	r5, [r4, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800aacc:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 800aad0:	628c      	str	r4, [r1, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800aad2:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 800aad6:	6299      	str	r1, [r3, #40]	@ 0x28
 800aad8:	f06f 0301 	mvn.w	r3, #1
 800aadc:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800aade:	6913      	ldr	r3, [r2, #16]
 800aae0:	07d9      	lsls	r1, r3, #31
 800aae2:	d5fc      	bpl.n	800aade <R3_1_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800aae4:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked = false;
 800aae8:	2300      	movs	r3, #0
 800aaea:	6111      	str	r1, [r2, #16]
}
 800aaec:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked = false;
 800aaee:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 800aaf2:	4770      	bx	lr

0800aaf4 <R3_1_RLGetPhaseCurrents>:
  }
  else
  {
#endif
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800aaf4:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
    int32_t wAux;

    /* Disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset)
 800aaf8:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
{
 800aafc:	b410      	push	{r4}
    ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 800aafe:	e9d2 4000 	ldrd	r4, r0, [r2]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800ab02:	6842      	ldr	r2, [r0, #4]
 800ab04:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800ab08:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800ab0c:	6042      	str	r2, [r0, #4]
         - (int32_t)ADCx->JDR2;
 800ab0e:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
    else
    {
      wAux = -INT16_MAX;
    }

    pStator_Currents->a = (int16_t)wAux;
 800ab12:	4a0a      	ldr	r2, [pc, #40]	@ (800ab3c <R3_1_RLGetPhaseCurrents+0x48>)
    pStator_Currents->b = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_R3_1_PWM_CURR_FDB
  }
#endif
}
 800ab14:	f85d 4b04 	ldr.w	r4, [sp], #4
    wAux = ((int32_t)pHandle->PhaseBOffset)
 800ab18:	1a1b      	subs	r3, r3, r0
      if (wAux < INT16_MAX)
 800ab1a:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 800ab1e:	4283      	cmp	r3, r0
 800ab20:	bfa8      	it	ge
 800ab22:	4603      	movge	r3, r0
    pStator_Currents->a = (int16_t)wAux;
 800ab24:	4293      	cmp	r3, r2
 800ab26:	bfb8      	it	lt
 800ab28:	4613      	movlt	r3, r2
 800ab2a:	b21b      	sxth	r3, r3
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f363 020f 	bfi	r2, r3, #0, #16
 800ab32:	f363 421f 	bfi	r2, r3, #16, #16
 800ab36:	600a      	str	r2, [r1, #0]
}
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop
 800ab3c:	ffff8001 	.word	0xffff8001

0800ab40 <R3_1_RLSwitchOnPWM>:
  }
  else
  {
#endif
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800ab40:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
    ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 800ab44:	e9d2 1300 	ldrd	r1, r3, [r2]
{
 800ab48:	b5f0      	push	{r4, r5, r6, r7, lr}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800ab4a:	f06f 0201 	mvn.w	r2, #1

    pHandle->ADCRegularLocked=true;
 800ab4e:	2401      	movs	r4, #1
 800ab50:	f880 40a0 	strb.w	r4, [r0, #160]	@ 0xa0
 800ab54:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800ab56:	691a      	ldr	r2, [r3, #16]
 800ab58:	07d4      	lsls	r4, r2, #31
 800ab5a:	d5fc      	bpl.n	800ab56 <R3_1_RLSwitchOnPWM+0x16>
    }
    /* Clear Update Flag */
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 800ab5c:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800ab60:	f06f 0401 	mvn.w	r4, #1
 800ab64:	611c      	str	r4, [r3, #16]
 800ab66:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ab68:	2401      	movs	r4, #1
 800ab6a:	635c      	str	r4, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 800ab6c:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800ab6e:	691a      	ldr	r2, [r3, #16]
 800ab70:	07d2      	lsls	r2, r2, #31
 800ab72:	d5fc      	bpl.n	800ab6e <R3_1_RLSwitchOnPWM+0x2e>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800ab74:	68da      	ldr	r2, [r3, #12]
 800ab76:	f042 0201 	orr.w	r2, r2, #1
 800ab7a:	60da      	str	r2, [r3, #12]

    /* Enable TIMx update interrupt */
    LL_TIM_EnableIT_UPDATE(TIMx);

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800ab7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab7e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ab82:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800ab84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ab8a:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 800ab8c:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800ab90:	2a02      	cmp	r2, #2
 800ab92:	d115      	bne.n	800abc0 <R3_1_RLSwitchOnPWM+0x80>
    {
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 800ab94:	6a1a      	ldr	r2, [r3, #32]
      {
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800ab96:	f8d0 c03c 	ldr.w	ip, [r0, #60]	@ 0x3c
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800ab9a:	6c06      	ldr	r6, [r0, #64]	@ 0x40
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800ab9c:	6c44      	ldr	r4, [r0, #68]	@ 0x44
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800ab9e:	f8b0 e048 	ldrh.w	lr, [r0, #72]	@ 0x48
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800aba2:	f8b0 704a 	ldrh.w	r7, [r0, #74]	@ 0x4a
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800aba6:	f8b0 504c 	ldrh.w	r5, [r0, #76]	@ 0x4c
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 800abaa:	f240 5355 	movw	r3, #1365	@ 0x555
 800abae:	421a      	tst	r2, r3
  WRITE_REG(GPIOx->BSRR, PinMask);
 800abb0:	bf15      	itete	ne
 800abb2:	f8cc e018 	strne.w	lr, [ip, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800abb6:	f8cc e028 	streq.w	lr, [ip, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 800abba:	61b7      	strne	r7, [r6, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800abbc:	62b7      	streq	r7, [r6, #40]	@ 0x28
 800abbe:	62a5      	str	r5, [r4, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx */
    pHdl->Sector = SECTOR_4;
 800abc0:	2303      	movs	r3, #3
 800abc2:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
  MODIFY_REG(ADCx->CR,
 800abc6:	688b      	ldr	r3, [r1, #8]
 800abc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800abcc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800abd0:	f043 0308 	orr.w	r3, r3, #8
 800abd4:	608b      	str	r3, [r1, #8]
    LL_ADC_INJ_StartConversion(ADCx);

#ifdef NULL_PTR_CHECK_R3_1_PWM_CURR_FDB
  }
#endif
}
 800abd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800abd8 <R3_1_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800abd8:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800abdc:	685a      	ldr	r2, [r3, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800abde:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800abe2:	f06f 0301 	mvn.w	r3, #1
 800abe6:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
 800abea:	6113      	str	r3, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800abec:	6351      	str	r1, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800abee:	6391      	str	r1, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800abf0:	63d1      	str	r1, [r2, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800abf2:	6913      	ldr	r3, [r2, #16]
 800abf4:	07db      	lsls	r3, r3, #31
 800abf6:	d5fc      	bpl.n	800abf2 <R3_1_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800abf8:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800abfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abfe:	6453      	str	r3, [r2, #68]	@ 0x44
  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 800ac00:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	d000      	beq.n	800ac0a <R3_1_TurnOnLowSides+0x32>
 800ac08:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800ac0a:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 800ac0e:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800ac10:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800ac12:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 800ac16:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800ac18:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800ac1c:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 800ac20:	618c      	str	r4, [r1, #24]
}
 800ac22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac26:	619a      	str	r2, [r3, #24]
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop

0800ac2c <R3_1_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 800ac2c:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 800ac30:	b510      	push	{r4, lr}
 800ac32:	f00c 0c3c 	and.w	ip, ip, #60	@ 0x3c
 800ac36:	f101 0e08 	add.w	lr, r1, #8
 800ac3a:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 800ac3c:	f85e 300c 	ldr.w	r3, [lr, ip]
 800ac40:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ac44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	f84e 300c 	str.w	r3, [lr, ip]
  SET_BIT(DACx->SWTRIGR,
 800ac4e:	684a      	ldr	r2, [r1, #4]
 800ac50:	f000 0303 	and.w	r3, r0, #3
 800ac54:	4313      	orrs	r3, r2
 800ac56:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 800ac58:	680a      	ldr	r2, [r1, #0]
 800ac5a:	f000 0010 	and.w	r0, r0, #16
 800ac5e:	2301      	movs	r3, #1
 800ac60:	4083      	lsls	r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 800ac62:	ea33 0202 	bics.w	r2, r3, r2
 800ac66:	d014      	beq.n	800ac92 <R3_1_SetAOReferenceVoltage+0x66>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 800ac68:	4a14      	ldr	r2, [pc, #80]	@ (800acbc <R3_1_SetAOReferenceVoltage+0x90>)
 800ac6a:	4815      	ldr	r0, [pc, #84]	@ (800acc0 <R3_1_SetAOReferenceVoltage+0x94>)
 800ac6c:	6812      	ldr	r2, [r2, #0]
  SET_BIT(DACx->CR,
 800ac6e:	680c      	ldr	r4, [r1, #0]
 800ac70:	fba0 0202 	umull	r0, r2, r0, r2
 800ac74:	0cd2      	lsrs	r2, r2, #19
 800ac76:	4323      	orrs	r3, r4
 800ac78:	00d2      	lsls	r2, r2, #3
 800ac7a:	600b      	str	r3, [r1, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 800ac7c:	9200      	str	r2, [sp, #0]
    while (wait_loop_index != 0UL)
 800ac7e:	9b00      	ldr	r3, [sp, #0]
 800ac80:	b12b      	cbz	r3, 800ac8e <R3_1_SetAOReferenceVoltage+0x62>
      wait_loop_index--;
 800ac82:	9b00      	ldr	r3, [sp, #0]
 800ac84:	3b01      	subs	r3, #1
 800ac86:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 800ac88:	9b00      	ldr	r3, [sp, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1f9      	bne.n	800ac82 <R3_1_SetAOReferenceVoltage+0x56>
}
 800ac8e:	b002      	add	sp, #8
 800ac90:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800ac92:	4b0a      	ldr	r3, [pc, #40]	@ (800acbc <R3_1_SetAOReferenceVoltage+0x90>)
 800ac94:	4a0a      	ldr	r2, [pc, #40]	@ (800acc0 <R3_1_SetAOReferenceVoltage+0x94>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	fba2 2303 	umull	r2, r3, r2, r3
 800ac9c:	0cdb      	lsrs	r3, r3, #19
 800ac9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800aca2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800aca4:	9b01      	ldr	r3, [sp, #4]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d0f1      	beq.n	800ac8e <R3_1_SetAOReferenceVoltage+0x62>
      wait_loop_index--;
 800acaa:	9b01      	ldr	r3, [sp, #4]
 800acac:	3b01      	subs	r3, #1
 800acae:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800acb0:	9b01      	ldr	r3, [sp, #4]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1f9      	bne.n	800acaa <R3_1_SetAOReferenceVoltage+0x7e>
}
 800acb6:	b002      	add	sp, #8
 800acb8:	bd10      	pop	{r4, pc}
 800acba:	bf00      	nop
 800acbc:	20000b5c 	.word	0x20000b5c
 800acc0:	431bde83 	.word	0x431bde83

0800acc4 <R3_1_RLTurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800acc4:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800acc8:	685a      	ldr	r2, [r3, #4]
  pHandle->ADCRegularLocked = true;
 800acca:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800acce:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800acd0:	f06f 0301 	mvn.w	r3, #1
 800acd4:	f880 c0a0 	strb.w	ip, [r0, #160]	@ 0xa0
  WRITE_REG(TIMx->CCR1, CompareValue);
 800acd8:	6351      	str	r1, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800acda:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800acdc:	6913      	ldr	r3, [r2, #16]
 800acde:	07db      	lsls	r3, r3, #31
 800ace0:	d5fc      	bpl.n	800acdc <R3_1_RLTurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800ace2:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800ace4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ace8:	6453      	str	r3, [r2, #68]	@ 0x44
  if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800acea:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d000      	beq.n	800acf4 <R3_1_RLTurnOnLowSides+0x30>
 800acf2:	4770      	bx	lr
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800acf4:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 800acf8:	b410      	push	{r4}
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800acfa:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800acfc:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
 800ad00:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800ad02:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800ad06:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
  WRITE_REG(GPIOx->BRR, PinMask);
 800ad0a:	628c      	str	r4, [r1, #40]	@ 0x28
}
 800ad0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad10:	629a      	str	r2, [r3, #40]	@ 0x28
 800ad12:	4770      	bx	lr

0800ad14 <R3_1_Init>:
  if (MC_NULL == pHandle)
 800ad14:	2800      	cmp	r0, #0
 800ad16:	f000 8140 	beq.w	800af9a <R3_1_Init+0x286>
{
 800ad1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800ad1e:	f8d0 509c 	ldr.w	r5, [r0, #156]	@ 0x9c
    ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 800ad22:	682e      	ldr	r6, [r5, #0]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 800ad24:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800ad26:	6872      	ldr	r2, [r6, #4]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800ad28:	f8d5 a010 	ldr.w	sl, [r5, #16]
{
 800ad2c:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800ad2e:	f04f 0c04 	mov.w	ip, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800ad32:	f022 0204 	bic.w	r2, r2, #4
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 800ad36:	9401      	str	r4, [sp, #4]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 800ad38:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 800ad3a:	9402      	str	r4, [sp, #8]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800ad3c:	e9d5 9805 	ldrd	r9, r8, [r5, #20]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800ad40:	686c      	ldr	r4, [r5, #4]
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 800ad42:	e9d5 1b07 	ldrd	r1, fp, [r5, #28]
 800ad46:	4607      	mov	r7, r0
    COMP_TypeDef *COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 800ad48:	e9d5 0302 	ldrd	r0, r3, [r5, #8]
 800ad4c:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800ad4e:	f8c6 c000 	str.w	ip, [r6]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800ad52:	6872      	ldr	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800ad54:	f04f 0c20 	mov.w	ip, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800ad58:	f022 0220 	bic.w	r2, r2, #32
 800ad5c:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800ad5e:	f8c6 c000 	str.w	ip, [r6]
      if (TIM1 ==  TIMx)
 800ad62:	4aaa      	ldr	r2, [pc, #680]	@ (800b00c <R3_1_Init+0x2f8>)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800ad64:	f8df c2b4 	ldr.w	ip, [pc, #692]	@ 800b01c <R3_1_Init+0x308>
 800ad68:	4294      	cmp	r4, r2
 800ad6a:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800ad6e:	bf0c      	ite	eq
 800ad70:	f442 6200 	orreq.w	r2, r2, #2048	@ 0x800
 800ad74:	f442 5200 	orrne.w	r2, r2, #8192	@ 0x2000
 800ad78:	f8cc 2010 	str.w	r2, [ip, #16]
      if (OPAMPParams != NULL)
 800ad7c:	b190      	cbz	r0, 800ada4 <R3_1_Init+0x90>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 800ad7e:	e9d0 2c00 	ldrd	r2, ip, [r0]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 800ad82:	f8d2 e000 	ldr.w	lr, [r2]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 800ad86:	6980      	ldr	r0, [r0, #24]
 800ad88:	f04e 0e01 	orr.w	lr, lr, #1
 800ad8c:	f8c2 e000 	str.w	lr, [r2]
 800ad90:	f8dc 2000 	ldr.w	r2, [ip]
 800ad94:	f042 0201 	orr.w	r2, r2, #1
 800ad98:	f8cc 2000 	str.w	r2, [ip]
 800ad9c:	6802      	ldr	r2, [r0, #0]
 800ad9e:	f042 0201 	orr.w	r2, r2, #1
 800ada2:	6002      	str	r2, [r0, #0]
      if (COMP_OCPAx != NULL)
 800ada4:	b19b      	cbz	r3, 800adce <R3_1_Init+0xba>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 800ada6:	f895 2063 	ldrb.w	r2, [r5, #99]	@ 0x63
 800adaa:	2a01      	cmp	r2, #1
 800adac:	d007      	beq.n	800adbe <R3_1_Init+0xaa>
 800adae:	b131      	cbz	r1, 800adbe <R3_1_Init+0xaa>
          R3_1_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 800adb0:	f8b5 205e 	ldrh.w	r2, [r5, #94]	@ 0x5e
 800adb4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800adb6:	9303      	str	r3, [sp, #12]
 800adb8:	f7ff ff38 	bl	800ac2c <R3_1_SetAOReferenceVoltage>
 800adbc:	9b03      	ldr	r3, [sp, #12]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	f042 0201 	orr.w	r2, r2, #1
 800adc4:	601a      	str	r2, [r3, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800adcc:	601a      	str	r2, [r3, #0]
      if (COMP_OCPBx != NULL)
 800adce:	f1ba 0f00 	cmp.w	sl, #0
 800add2:	d018      	beq.n	800ae06 <R3_1_Init+0xf2>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 800add4:	f895 3064 	ldrb.w	r3, [r5, #100]	@ 0x64
 800add8:	2b01      	cmp	r3, #1
 800adda:	d008      	beq.n	800adee <R3_1_Init+0xda>
 800addc:	f1bb 0f00 	cmp.w	fp, #0
 800ade0:	d005      	beq.n	800adee <R3_1_Init+0xda>
          R3_1_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 800ade2:	f8b5 205e 	ldrh.w	r2, [r5, #94]	@ 0x5e
 800ade6:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800ade8:	4659      	mov	r1, fp
 800adea:	f7ff ff1f 	bl	800ac2c <R3_1_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800adee:	f8da 3000 	ldr.w	r3, [sl]
 800adf2:	f043 0301 	orr.w	r3, r3, #1
 800adf6:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800adfa:	f8da 3000 	ldr.w	r3, [sl]
 800adfe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ae02:	f8ca 3000 	str.w	r3, [sl]
      if (COMP_OCPCx != NULL)
 800ae06:	f1b9 0f00 	cmp.w	r9, #0
 800ae0a:	d017      	beq.n	800ae3c <R3_1_Init+0x128>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 800ae0c:	f895 3065 	ldrb.w	r3, [r5, #101]	@ 0x65
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d007      	beq.n	800ae24 <R3_1_Init+0x110>
 800ae14:	9b01      	ldr	r3, [sp, #4]
 800ae16:	b12b      	cbz	r3, 800ae24 <R3_1_Init+0x110>
          R3_1_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 800ae18:	f8b5 205e 	ldrh.w	r2, [r5, #94]	@ 0x5e
 800ae1c:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800ae1e:	4619      	mov	r1, r3
 800ae20:	f7ff ff04 	bl	800ac2c <R3_1_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800ae24:	f8d9 3000 	ldr.w	r3, [r9]
 800ae28:	f043 0301 	orr.w	r3, r3, #1
 800ae2c:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800ae30:	f8d9 3000 	ldr.w	r3, [r9]
 800ae34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ae38:	f8c9 3000 	str.w	r3, [r9]
      if (COMP_OVPx != NULL)
 800ae3c:	f1b8 0f00 	cmp.w	r8, #0
 800ae40:	d017      	beq.n	800ae72 <R3_1_Init+0x15e>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 800ae42:	f895 3066 	ldrb.w	r3, [r5, #102]	@ 0x66
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d007      	beq.n	800ae5a <R3_1_Init+0x146>
 800ae4a:	9b02      	ldr	r3, [sp, #8]
 800ae4c:	b12b      	cbz	r3, 800ae5a <R3_1_Init+0x146>
          R3_1_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 800ae4e:	f8b5 2060 	ldrh.w	r2, [r5, #96]	@ 0x60
 800ae52:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800ae54:	4619      	mov	r1, r3
 800ae56:	f7ff fee9 	bl	800ac2c <R3_1_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800ae5a:	f8d8 3000 	ldr.w	r3, [r8]
 800ae5e:	f043 0301 	orr.w	r3, r3, #1
 800ae62:	f8c8 3000 	str.w	r3, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800ae66:	f8d8 3000 	ldr.w	r3, [r8]
 800ae6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ae6e:	f8c8 3000 	str.w	r3, [r8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ae72:	68b3      	ldr	r3, [r6, #8]
 800ae74:	07d8      	lsls	r0, r3, #31
 800ae76:	d45a      	bmi.n	800af2e <R3_1_Init+0x21a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800ae78:	68b3      	ldr	r3, [r6, #8]
 800ae7a:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800ae7e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ae82:	60b3      	str	r3, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800ae84:	68b3      	ldr	r3, [r6, #8]
 800ae86:	00d9      	lsls	r1, r3, #3
 800ae88:	d418      	bmi.n	800aebc <R3_1_Init+0x1a8>
  MODIFY_REG(ADCx->CR,
 800ae8a:	68b3      	ldr	r3, [r6, #8]
                                         * (SystemCoreClock / (100000UL * 2UL)));
 800ae8c:	4a60      	ldr	r2, [pc, #384]	@ (800b010 <R3_1_Init+0x2fc>)
 800ae8e:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800ae92:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ae96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae9a:	60b3      	str	r3, [r6, #8]
 800ae9c:	4b5d      	ldr	r3, [pc, #372]	@ (800b014 <R3_1_Init+0x300>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	099b      	lsrs	r3, r3, #6
 800aea2:	fba2 2303 	umull	r2, r3, r2, r3
 800aea6:	099b      	lsrs	r3, r3, #6
 800aea8:	005b      	lsls	r3, r3, #1
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 800aeaa:	9304      	str	r3, [sp, #16]
    while (wait_loop_index != 0UL)
 800aeac:	9b04      	ldr	r3, [sp, #16]
 800aeae:	b12b      	cbz	r3, 800aebc <R3_1_Init+0x1a8>
      wait_loop_index--;
 800aeb0:	9b04      	ldr	r3, [sp, #16]
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	9304      	str	r3, [sp, #16]
    while (wait_loop_index != 0UL)
 800aeb6:	9b04      	ldr	r3, [sp, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d1f9      	bne.n	800aeb0 <R3_1_Init+0x19c>
  MODIFY_REG(ADCx->CR,
 800aebc:	68b3      	ldr	r3, [r6, #8]
 800aebe:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800aec2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800aec6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aeca:	60b3      	str	r3, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800aecc:	68b3      	ldr	r3, [r6, #8]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	dbfc      	blt.n	800aecc <R3_1_Init+0x1b8>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800aed2:	6833      	ldr	r3, [r6, #0]
 800aed4:	07da      	lsls	r2, r3, #31
 800aed6:	d408      	bmi.n	800aeea <R3_1_Init+0x1d6>
  MODIFY_REG(ADCx->CR,
 800aed8:	4a4f      	ldr	r2, [pc, #316]	@ (800b018 <R3_1_Init+0x304>)
 800aeda:	68b3      	ldr	r3, [r6, #8]
 800aedc:	4013      	ands	r3, r2
 800aede:	f043 0301 	orr.w	r3, r3, #1
 800aee2:	60b3      	str	r3, [r6, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800aee4:	6833      	ldr	r3, [r6, #0]
 800aee6:	07db      	lsls	r3, r3, #31
 800aee8:	d5f7      	bpl.n	800aeda <R3_1_Init+0x1c6>
  MODIFY_REG(ADCx->CR,
 800aeea:	68b3      	ldr	r3, [r6, #8]
 800aeec:	4a4a      	ldr	r2, [pc, #296]	@ (800b018 <R3_1_Init+0x304>)
 800aeee:	4013      	ands	r3, r2
 800aef0:	f043 0308 	orr.w	r3, r3, #8
 800aef4:	60b3      	str	r3, [r6, #8]
  MODIFY_REG(ADCx->CR,
 800aef6:	68b3      	ldr	r3, [r6, #8]
 800aef8:	4013      	ands	r3, r2
 800aefa:	f043 0320 	orr.w	r3, r3, #32
 800aefe:	60b3      	str	r3, [r6, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 800af00:	68f3      	ldr	r3, [r6, #12]
 800af02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800af06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800af0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800af0e:	60f3      	str	r3, [r6, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800af10:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800af12:	f023 030f 	bic.w	r3, r3, #15
 800af16:	6333      	str	r3, [r6, #48]	@ 0x30
  MODIFY_REG(ADCx->CR,
 800af18:	68b3      	ldr	r3, [r6, #8]
 800af1a:	4013      	ands	r3, r2
 800af1c:	f043 0304 	orr.w	r3, r3, #4
 800af20:	60b3      	str	r3, [r6, #8]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800af22:	2340      	movs	r3, #64	@ 0x40
 800af24:	6033      	str	r3, [r6, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800af26:	6873      	ldr	r3, [r6, #4]
 800af28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af2c:	6073      	str	r3, [r6, #4]
  volatile uint32_t Brk2Timeout = 1000;
 800af2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800af32:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800af34:	6823      	ldr	r3, [r4, #0]
 800af36:	f023 0301 	bic.w	r3, r3, #1
 800af3a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800af3c:	6863      	ldr	r3, [r4, #4]
 800af3e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800af42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af46:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800af48:	69a3      	ldr	r3, [r4, #24]
 800af4a:	f043 0308 	orr.w	r3, r3, #8
 800af4e:	61a3      	str	r3, [r4, #24]
 800af50:	69a3      	ldr	r3, [r4, #24]
 800af52:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800af56:	61a3      	str	r3, [r4, #24]
 800af58:	69e3      	ldr	r3, [r4, #28]
 800af5a:	f043 0308 	orr.w	r3, r3, #8
 800af5e:	61e3      	str	r3, [r4, #28]
 800af60:	69e3      	ldr	r3, [r4, #28]
 800af62:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800af66:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800af68:	6963      	ldr	r3, [r4, #20]
 800af6a:	f043 0301 	orr.w	r3, r3, #1
 800af6e:	6163      	str	r3, [r4, #20]
  if (2U == pHandle->pParams_str->FreqRatio)
 800af70:	f895 3067 	ldrb.w	r3, [r5, #103]	@ 0x67
 800af74:	2b02      	cmp	r3, #2
 800af76:	d011      	beq.n	800af9c <R3_1_Init+0x288>
    if (M1 == pHandle->_Super.Motor)
 800af78:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800af7c:	b9b3      	cbnz	r3, 800afac <R3_1_Init+0x298>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 800af7e:	f895 3062 	ldrb.w	r3, [r5, #98]	@ 0x62
 800af82:	2b01      	cmp	r3, #1
 800af84:	d00e      	beq.n	800afa4 <R3_1_Init+0x290>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 800af86:	2b03      	cmp	r3, #3
 800af88:	d110      	bne.n	800afac <R3_1_Init+0x298>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800af8a:	2201      	movs	r2, #1
 800af8c:	6322      	str	r2, [r4, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800af8e:	6962      	ldr	r2, [r4, #20]
 800af90:	f042 0201 	orr.w	r2, r2, #1
 800af94:	6162      	str	r2, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800af96:	6323      	str	r3, [r4, #48]	@ 0x30
}
 800af98:	e008      	b.n	800afac <R3_1_Init+0x298>
 800af9a:	4770      	bx	lr
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 800af9c:	f895 3068 	ldrb.w	r3, [r5, #104]	@ 0x68
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d027      	beq.n	800aff4 <R3_1_Init+0x2e0>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 800afa4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800afa8:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 800afaa:	6263      	str	r3, [r4, #36]	@ 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800afac:	f06f 0380 	mvn.w	r3, #128	@ 0x80
 800afb0:	6123      	str	r3, [r4, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800afb2:	6923      	ldr	r3, [r4, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 800afb4:	9a05      	ldr	r2, [sp, #20]
 800afb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afba:	b172      	cbz	r2, 800afda <R3_1_Init+0x2c6>
 800afbc:	b16b      	cbz	r3, 800afda <R3_1_Init+0x2c6>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800afbe:	f46f 7180 	mvn.w	r1, #256	@ 0x100
 800afc2:	e000      	b.n	800afc6 <R3_1_Init+0x2b2>
 800afc4:	b14b      	cbz	r3, 800afda <R3_1_Init+0x2c6>
 800afc6:	6121      	str	r1, [r4, #16]
    Brk2Timeout--;
 800afc8:	9b05      	ldr	r3, [sp, #20]
 800afca:	3b01      	subs	r3, #1
 800afcc:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800afce:	6923      	ldr	r3, [r4, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 800afd0:	9a05      	ldr	r2, [sp, #20]
 800afd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afd6:	2a00      	cmp	r2, #0
 800afd8:	d1f4      	bne.n	800afc4 <R3_1_Init+0x2b0>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800afda:	68e3      	ldr	r3, [r4, #12]
 800afdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afe0:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 800afe2:	6a23      	ldr	r3, [r4, #32]
 800afe4:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 800afe8:	f043 0305 	orr.w	r3, r3, #5
 800afec:	6223      	str	r3, [r4, #32]
}
 800afee:	b007      	add	sp, #28
 800aff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (3U == pHandle->pParams_str->RepetitionCounter)
 800aff4:	f895 2062 	ldrb.w	r2, [r5, #98]	@ 0x62
 800aff8:	2a03      	cmp	r2, #3
 800affa:	d1d3      	bne.n	800afa4 <R3_1_Init+0x290>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800affc:	6323      	str	r3, [r4, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800affe:	6963      	ldr	r3, [r4, #20]
 800b000:	f043 0301 	orr.w	r3, r3, #1
 800b004:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800b006:	6322      	str	r2, [r4, #48]	@ 0x30
}
 800b008:	e7cc      	b.n	800afa4 <R3_1_Init+0x290>
 800b00a:	bf00      	nop
 800b00c:	40012c00 	.word	0x40012c00
 800b010:	053e2d63 	.word	0x053e2d63
 800b014:	20000b5c 	.word	0x20000b5c
 800b018:	7fffffc0 	.word	0x7fffffc0
 800b01c:	e0042000 	.word	0xe0042000

0800b020 <R3_1_SetOffsetCalib>:
{
 800b020:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 800b022:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800b026:	680b      	ldr	r3, [r1, #0]
 800b028:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  pHdl->offsetCalibStatus = true;
 800b02c:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 800b02e:	e9c0 4223 	strd	r4, r2, [r0, #140]	@ 0x8c
  pHdl->offsetCalibStatus = true;
 800b032:	f880 307f 	strb.w	r3, [r0, #127]	@ 0x7f
}
 800b036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <R3_1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 800b03c:	e9d0 2323 	ldrd	r2, r3, [r0, #140]	@ 0x8c
 800b040:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 800b044:	608b      	str	r3, [r1, #8]
 800b046:	e9c1 0200 	strd	r0, r2, [r1]
}
 800b04a:	4770      	bx	lr

0800b04c <R3_1_CurrentReadingPolarization>:
{
 800b04c:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800b04e:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 800b052:	e9d3 6500 	ldrd	r6, r5, [r3]
  if (true == pHandle->_Super.offsetCalibStatus)
 800b056:	f890 307f 	ldrb.w	r3, [r0, #127]	@ 0x7f
{
 800b05a:	b083      	sub	sp, #12
 800b05c:	4604      	mov	r4, r0
  if (true == pHandle->_Super.offsetCalibStatus)
 800b05e:	b193      	cbz	r3, 800b086 <R3_1_CurrentReadingPolarization+0x3a>
  MODIFY_REG(ADCx->CR,
 800b060:	68b3      	ldr	r3, [r6, #8]
 800b062:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b066:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800b06a:	2280      	movs	r2, #128	@ 0x80
 800b06c:	f043 0308 	orr.w	r3, r3, #8
 800b070:	60b3      	str	r3, [r6, #8]
 800b072:	f8a0 2096 	strh.w	r2, [r0, #150]	@ 0x96
  pHandle->_Super.Sector = SECTOR_5;
 800b076:	2204      	movs	r2, #4
  pHandle->_Super.BrakeActionLock = false;
 800b078:	2300      	movs	r3, #0
  pHandle->_Super.Sector = SECTOR_5;
 800b07a:	f884 207a 	strb.w	r2, [r4, #122]	@ 0x7a
  pHandle->_Super.BrakeActionLock = false;
 800b07e:	f884 3083 	strb.w	r3, [r4, #131]	@ 0x83
}
 800b082:	b003      	add	sp, #12
 800b084:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800b086:	6802      	ldr	r2, [r0, #0]
 800b088:	9200      	str	r2, [sp, #0]
    pHandle->PhaseAOffset = 0U;
 800b08a:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 800b08e:	6942      	ldr	r2, [r0, #20]
 800b090:	9201      	str	r2, [sp, #4]
    pHandle->PolarizationCounter = 0U;
 800b092:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    pHandle->PhaseCOffset = 0U;
 800b096:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  CLEAR_BIT(TIMx->CCER, Channels);
 800b09a:	6a2b      	ldr	r3, [r5, #32]
 800b09c:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 800b0a0:	f023 0305 	bic.w	r3, r3, #5
 800b0a4:	622b      	str	r3, [r5, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationAB;
 800b0a6:	4b34      	ldr	r3, [pc, #208]	@ (800b178 <R3_1_CurrentReadingPolarization+0x12c>)
 800b0a8:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointPolarization;
 800b0aa:	4b34      	ldr	r3, [pc, #208]	@ (800b17c <R3_1_CurrentReadingPolarization+0x130>)
 800b0ac:	6143      	str	r3, [r0, #20]
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800b0ae:	2380      	movs	r3, #128	@ 0x80
 800b0b0:	f8a0 3096 	strh.w	r3, [r0, #150]	@ 0x96
  pHandle->PolarizationSector=SECTOR_5;
 800b0b4:	2304      	movs	r3, #4
 800b0b6:	f880 3099 	strb.w	r3, [r0, #153]	@ 0x99
  pHandle->_Super.Sector = SECTOR_5;   
 800b0ba:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
    R3_1_SwitchOnPWM(&pHandle->_Super);
 800b0be:	f7ff fc91 	bl	800a9e4 <R3_1_SwitchOnPWM>
    while (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF)
 800b0c2:	4a2f      	ldr	r2, [pc, #188]	@ (800b180 <R3_1_CurrentReadingPolarization+0x134>)
 800b0c4:	686b      	ldr	r3, [r5, #4]
 800b0c6:	4013      	ands	r3, r2
 800b0c8:	2b70      	cmp	r3, #112	@ 0x70
 800b0ca:	d1fb      	bne.n	800b0c4 <R3_1_CurrentReadingPolarization+0x78>
 800b0cc:	68b3      	ldr	r3, [r6, #8]
 800b0ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b0d2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b0d6:	f043 0308 	orr.w	r3, r3, #8
 800b0da:	60b3      	str	r3, [r6, #8]
                           pHandle->pParams_str->RepetitionCounter,
 800b0dc:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
    waitForPolarizationEnd(TIMx,
 800b0e0:	f104 0798 	add.w	r7, r4, #152	@ 0x98
 800b0e4:	f893 2062 	ldrb.w	r2, [r3, #98]	@ 0x62
 800b0e8:	f104 0156 	add.w	r1, r4, #86	@ 0x56
 800b0ec:	463b      	mov	r3, r7
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	460e      	mov	r6, r1
 800b0f2:	f7f9 ff4b 	bl	8004f8c <waitForPolarizationEnd>
    R3_1_SwitchOffPWM(&pHandle->_Super);
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f7ff fcbe 	bl	800aa78 <R3_1_SwitchOffPWM>
    pHandle->PolarizationCounter = 0U;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
  pHandle->PolarizationSector=SECTOR_1;
 800b102:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
  pHandle->_Super.Sector = SECTOR_1;   
 800b106:	f884 307a 	strb.w	r3, [r4, #122]	@ 0x7a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationC;
 800b10a:	4b1e      	ldr	r3, [pc, #120]	@ (800b184 <R3_1_CurrentReadingPolarization+0x138>)
 800b10c:	6023      	str	r3, [r4, #0]
    R3_1_SwitchOnPWM(&pHandle->_Super);
 800b10e:	4620      	mov	r0, r4
 800b110:	f7ff fc68 	bl	800a9e4 <R3_1_SwitchOnPWM>
                           pHandle->pParams_str->RepetitionCounter,
 800b114:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
    waitForPolarizationEnd(TIMx,
 800b118:	463b      	mov	r3, r7
 800b11a:	f892 2062 	ldrb.w	r2, [r2, #98]	@ 0x62
 800b11e:	4631      	mov	r1, r6
 800b120:	4628      	mov	r0, r5
 800b122:	f7f9 ff33 	bl	8004f8c <waitForPolarizationEnd>
    R3_1_SwitchOffPWM(&pHandle->_Super);
 800b126:	4620      	mov	r0, r4
 800b128:	f7ff fca6 	bl	800aa78 <R3_1_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800b12c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	@ 0x88
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800b130:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800b134:	0912      	lsrs	r2, r2, #4
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 800b136:	0909      	lsrs	r1, r1, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800b138:	e9c4 1222 	strd	r1, r2, [r4, #136]	@ 0x88
    if (0U == pHandle->_Super.SWerror)
 800b13c:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800b140:	091b      	lsrs	r3, r3, #4
 800b142:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    if (0U == pHandle->_Super.SWerror)
 800b146:	b912      	cbnz	r2, 800b14e <R3_1_CurrentReadingPolarization+0x102>
      pHandle->_Super.offsetCalibStatus = true;
 800b148:	2301      	movs	r3, #1
 800b14a:	f884 307f 	strb.w	r3, [r4, #127]	@ 0x7f
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 800b14e:	f8b4 3094 	ldrh.w	r3, [r4, #148]	@ 0x94
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800b152:	9900      	ldr	r1, [sp, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800b154:	9a01      	ldr	r2, [sp, #4]
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800b156:	6021      	str	r1, [r4, #0]
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 800b158:	085b      	lsrs	r3, r3, #1
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800b15a:	6162      	str	r2, [r4, #20]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800b15c:	636b      	str	r3, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800b15e:	63ab      	str	r3, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800b160:	63eb      	str	r3, [r5, #60]	@ 0x3c
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 800b162:	696b      	ldr	r3, [r5, #20]
 800b164:	f043 0320 	orr.w	r3, r3, #32
 800b168:	616b      	str	r3, [r5, #20]
  SET_BIT(TIMx->CCER, Channels);
 800b16a:	6a2b      	ldr	r3, [r5, #32]
 800b16c:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 800b170:	f043 0305 	orr.w	r3, r3, #5
 800b174:	622b      	str	r3, [r5, #32]
}
 800b176:	e77e      	b.n	800b076 <R3_1_CurrentReadingPolarization+0x2a>
 800b178:	0800a94d 	.word	0x0800a94d
 800b17c:	0800a909 	.word	0x0800a909
 800b180:	02000070 	.word	0x02000070
 800b184:	0800a99d 	.word	0x0800a99d

0800b188 <R3_1_SetADCSampPointSectX>:
  if (MC_NULL == pHdl)
 800b188:	2800      	cmp	r0, #0
 800b18a:	d03b      	beq.n	800b204 <R3_1_SetADCSampPointSectX+0x7c>
{
 800b18c:	b530      	push	{r4, r5, lr}
    if ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) > pHandle->pParams_str->Tafter)
 800b18e:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 800b192:	f8b0 e094 	ldrh.w	lr, [r0, #148]	@ 0x94
 800b196:	f8d0 109c 	ldr.w	r1, [r0, #156]	@ 0x9c
 800b19a:	ebae 0203 	sub.w	r2, lr, r3
 800b19e:	f8b1 4054 	ldrh.w	r4, [r1, #84]	@ 0x54
 800b1a2:	b292      	uxth	r2, r2
 800b1a4:	42a2      	cmp	r2, r4
 800b1a6:	d917      	bls.n	800b1d8 <R3_1_SetADCSampPointSectX+0x50>
      pHandle->_Super.Sector = SECTOR_5;
 800b1a8:	2204      	movs	r2, #4
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 800b1aa:	f10e 33ff 	add.w	r3, lr, #4294967295
      pHandle->_Super.Sector = SECTOR_5;
 800b1ae:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 800b1b2:	b29b      	uxth	r3, r3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800b1b4:	684a      	ldr	r2, [r1, #4]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 800b1b6:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 800b1ba:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 800b1be:	f8b0 1054 	ldrh.w	r1, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR1, CompareValue);
 800b1c2:	6355      	str	r5, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800b1c4:	6394      	str	r4, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800b1c6:	63d1      	str	r1, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800b1c8:	6413      	str	r3, [r2, #64]	@ 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800b1ca:	6852      	ldr	r2, [r2, #4]
 800b1cc:	4b10      	ldr	r3, [pc, #64]	@ (800b210 <R3_1_SetADCSampPointSectX+0x88>)
 800b1ce:	421a      	tst	r2, r3
 800b1d0:	bf14      	ite	ne
 800b1d2:	2001      	movne	r0, #1
 800b1d4:	2000      	moveq	r0, #0
}
 800b1d6:	bd30      	pop	{r4, r5, pc}
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 800b1d8:	f8b0 c05a 	ldrh.w	ip, [r0, #90]	@ 0x5a
 800b1dc:	eba3 0c0c 	sub.w	ip, r3, ip
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 800b1e0:	fa1f fc8c 	uxth.w	ip, ip
 800b1e4:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 800b1e8:	d80d      	bhi.n	800b206 <R3_1_SetADCSampPointSectX+0x7e>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 800b1ea:	4423      	add	r3, r4
 800b1ec:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 800b1ee:	459e      	cmp	lr, r3
 800b1f0:	d8e0      	bhi.n	800b1b4 <R3_1_SetADCSampPointSectX+0x2c>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800b1f2:	43db      	mvns	r3, r3
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 800b1f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800b1f8:	eb03 034e 	add.w	r3, r3, lr, lsl #1
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 800b1fc:	f8a0 2096 	strh.w	r2, [r0, #150]	@ 0x96
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800b200:	b29b      	uxth	r3, r3
 800b202:	e7d7      	b.n	800b1b4 <R3_1_SetADCSampPointSectX+0x2c>
}
 800b204:	4770      	bx	lr
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 800b206:	f8b1 2058 	ldrh.w	r2, [r1, #88]	@ 0x58
 800b20a:	1a9b      	subs	r3, r3, r2
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	e7d1      	b.n	800b1b4 <R3_1_SetADCSampPointSectX+0x2c>
 800b210:	02000070 	.word	0x02000070

0800b214 <R3_1_TIMx_UP_IRQHandler>:
  if (MC_NULL == pHandle)
 800b214:	4602      	mov	r2, r0
 800b216:	2800      	cmp	r0, #0
 800b218:	d034      	beq.n	800b284 <R3_1_TIMx_UP_IRQHandler+0x70>
{
 800b21a:	b4f0      	push	{r4, r5, r6, r7}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800b21c:	f8d0 009c 	ldr.w	r0, [r0, #156]	@ 0x9c
    ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800b220:	f892 c07a 	ldrb.w	ip, [r2, #122]	@ 0x7a
    ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 800b224:	6801      	ldr	r1, [r0, #0]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800b226:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    if (OPAMPParams != NULL)
 800b22a:	b1ac      	cbz	r4, 800b258 <R3_1_TIMx_UP_IRQHandler+0x44>
      while (ADCx->JSQR != 0x0u)
 800b22c:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1fc      	bne.n	800b22c <R3_1_TIMx_UP_IRQHandler+0x18>
      operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 800b232:	f854 702c 	ldr.w	r7, [r4, ip, lsl #2]
      if (operationAmp != NULL)
 800b236:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 800b23a:	b12f      	cbz	r7, 800b248 <R3_1_TIMx_UP_IRQHandler+0x34>
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800b240:	f423 7386 	bic.w	r3, r3, #268	@ 0x10c
 800b244:	4333      	orrs	r3, r6
 800b246:	603b      	str	r3, [r7, #0]
      operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 800b248:	69a6      	ldr	r6, [r4, #24]
      if (operationAmp != NULL)
 800b24a:	b12e      	cbz	r6, 800b258 <R3_1_TIMx_UP_IRQHandler+0x44>
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800b24c:	6833      	ldr	r3, [r6, #0]
 800b24e:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
 800b250:	f423 7386 	bic.w	r3, r3, #268	@ 0x10c
 800b254:	4323      	orrs	r3, r4
 800b256:	6033      	str	r3, [r6, #0]
    ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800b258:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800b25c:	f8b2 3096 	ldrh.w	r3, [r2, #150]	@ 0x96
 800b260:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 800b262:	4303      	orrs	r3, r0
 800b264:	64cb      	str	r3, [r1, #76]	@ 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800b266:	686b      	ldr	r3, [r5, #4]
 800b268:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b26c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800b270:	2180      	movs	r1, #128	@ 0x80
 800b272:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800b276:	606b      	str	r3, [r5, #4]
    tempPointer = &(pHandle->_Super.Motor);
 800b278:	f102 0078 	add.w	r0, r2, #120	@ 0x78
}
 800b27c:	bcf0      	pop	{r4, r5, r6, r7}
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800b27e:	f8a2 1096 	strh.w	r1, [r2, #150]	@ 0x96
}
 800b282:	4770      	bx	lr
 800b284:	4770      	bx	lr
 800b286:	bf00      	nop

0800b288 <R3_1_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 800b288:	f890 107e 	ldrb.w	r1, [r0, #126]	@ 0x7e
{
 800b28c:	b410      	push	{r4}
  if (false == pHandle->_Super.RLDetectionMode)
 800b28e:	2900      	cmp	r1, #0
 800b290:	d13f      	bne.n	800b312 <R3_1_RLDetectionModeEnable+0x8a>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800b292:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800b296:	685b      	ldr	r3, [r3, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800b298:	699a      	ldr	r2, [r3, #24]
 800b29a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b29e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800b2a2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b2a6:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800b2a8:	6a1a      	ldr	r2, [r3, #32]
 800b2aa:	f042 0201 	orr.w	r2, r2, #1
 800b2ae:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800b2b0:	6a1a      	ldr	r2, [r3, #32]
 800b2b2:	f022 0204 	bic.w	r2, r2, #4
 800b2b6:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800b2b8:	6359      	str	r1, [r3, #52]	@ 0x34
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800b2ba:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800b2be:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800b2c0:	f103 0418 	add.w	r4, r3, #24
 800b2c4:	d033      	beq.n	800b32e <R3_1_RLDetectionModeEnable+0xa6>
    else if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 800b2c6:	2a02      	cmp	r2, #2
 800b2c8:	d10f      	bne.n	800b2ea <R3_1_RLDetectionModeEnable+0x62>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800b2ca:	699a      	ldr	r2, [r3, #24]
 800b2cc:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800b2d0:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800b2d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b2d8:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800b2da:	6a1a      	ldr	r2, [r3, #32]
 800b2dc:	f042 0210 	orr.w	r2, r2, #16
 800b2e0:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800b2e2:	6a1a      	ldr	r2, [r3, #32]
 800b2e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b2e8:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800b2ea:	6862      	ldr	r2, [r4, #4]
 800b2ec:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b2f0:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800b2f4:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 800b2f8:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 800b2fa:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 800b2fc:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 800b300:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b304:	621a      	str	r2, [r3, #32]
 800b306:	6a1a      	ldr	r2, [r3, #32]
 800b308:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b30c:	621a      	str	r2, [r3, #32]
 800b30e:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 800b312:	4b0f      	ldr	r3, [pc, #60]	@ (800b350 <R3_1_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 800b314:	490f      	ldr	r1, [pc, #60]	@ (800b354 <R3_1_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800b316:	4a10      	ldr	r2, [pc, #64]	@ (800b358 <R3_1_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 800b318:	4c10      	ldr	r4, [pc, #64]	@ (800b35c <R3_1_RLDetectionModeEnable+0xd4>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 800b31a:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 800b31c:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 800b31e:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800b320:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 800b324:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 800b328:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 800b32c:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800b32e:	699a      	ldr	r2, [r3, #24]
 800b330:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800b334:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800b338:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b33c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800b33e:	6a1a      	ldr	r2, [r3, #32]
 800b340:	f022 0210 	bic.w	r2, r2, #16
 800b344:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 800b346:	6a1a      	ldr	r2, [r3, #32]
 800b348:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b34c:	621a      	str	r2, [r3, #32]
}
 800b34e:	e7cc      	b.n	800b2ea <R3_1_RLDetectionModeEnable+0x62>
 800b350:	0800acc5 	.word	0x0800acc5
 800b354:	0800ab41 	.word	0x0800ab41
 800b358:	0800aa79 	.word	0x0800aa79
 800b35c:	0800aaf5 	.word	0x0800aaf5

0800b360 <R3_1_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 800b360:	f890 307e 	ldrb.w	r3, [r0, #126]	@ 0x7e
 800b364:	2b00      	cmp	r3, #0
 800b366:	d03d      	beq.n	800b3e4 <R3_1_RLDetectionModeDisable+0x84>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800b368:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 800b36c:	f8b0 1094 	ldrh.w	r1, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800b370:	685b      	ldr	r3, [r3, #4]
{
 800b372:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800b374:	699a      	ldr	r2, [r3, #24]
 800b376:	4c40      	ldr	r4, [pc, #256]	@ (800b478 <R3_1_RLDetectionModeDisable+0x118>)
 800b378:	4022      	ands	r2, r4
 800b37a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b37e:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800b380:	6a1a      	ldr	r2, [r3, #32]
 800b382:	f042 0201 	orr.w	r2, r2, #1
 800b386:	621a      	str	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800b388:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800b38c:	2a01      	cmp	r2, #1
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 800b38e:	ea4f 0151 	mov.w	r1, r1, lsr #1
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800b392:	d028      	beq.n	800b3e6 <R3_1_RLDetectionModeDisable+0x86>
    else if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800b394:	2a02      	cmp	r2, #2
 800b396:	d04a      	beq.n	800b42e <R3_1_RLDetectionModeDisable+0xce>
  WRITE_REG(TIMx->CCR1, CompareValue);
 800b398:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800b39a:	699a      	ldr	r2, [r3, #24]
 800b39c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800b3a0:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800b3a4:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800b3a8:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800b3aa:	6a1a      	ldr	r2, [r3, #32]
 800b3ac:	f042 0210 	orr.w	r2, r2, #16
 800b3b0:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800b3b2:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800b3b4:	69da      	ldr	r2, [r3, #28]
 800b3b6:	4022      	ands	r2, r4
 800b3b8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b3bc:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800b3be:	6a1a      	ldr	r2, [r3, #32]
 800b3c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b3c4:	621a      	str	r2, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800b3c6:	4a2d      	ldr	r2, [pc, #180]	@ (800b47c <R3_1_RLDetectionModeDisable+0x11c>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 800b3c8:	63d9      	str	r1, [r3, #60]	@ 0x3c
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 800b3ca:	492d      	ldr	r1, [pc, #180]	@ (800b480 <R3_1_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800b3cc:	6002      	str	r2, [r0, #0]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800b3ce:	4a2d      	ldr	r2, [pc, #180]	@ (800b484 <R3_1_RLDetectionModeDisable+0x124>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 800b3d0:	4c2d      	ldr	r4, [pc, #180]	@ (800b488 <R3_1_RLDetectionModeDisable+0x128>)
 800b3d2:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 800b3d4:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800b3d6:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 800b3da:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 800b3de:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 800b3e2:	4770      	bx	lr
 800b3e4:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800b3e6:	6a1a      	ldr	r2, [r3, #32]
 800b3e8:	f042 0204 	orr.w	r2, r2, #4
 800b3ec:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800b3ee:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800b3f0:	699a      	ldr	r2, [r3, #24]
 800b3f2:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800b3f6:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800b3fa:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800b3fe:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800b400:	6a1a      	ldr	r2, [r3, #32]
 800b402:	f042 0210 	orr.w	r2, r2, #16
 800b406:	621a      	str	r2, [r3, #32]
 800b408:	6a1a      	ldr	r2, [r3, #32]
 800b40a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b40e:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800b410:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800b412:	69da      	ldr	r2, [r3, #28]
 800b414:	4022      	ands	r2, r4
 800b416:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b41a:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800b41c:	6a1a      	ldr	r2, [r3, #32]
 800b41e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b422:	621a      	str	r2, [r3, #32]
 800b424:	6a1a      	ldr	r2, [r3, #32]
 800b426:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b42a:	621a      	str	r2, [r3, #32]
}
 800b42c:	e7cb      	b.n	800b3c6 <R3_1_RLDetectionModeDisable+0x66>
  CLEAR_BIT(TIMx->CCER, Channels);
 800b42e:	6a1a      	ldr	r2, [r3, #32]
 800b430:	f022 0204 	bic.w	r2, r2, #4
 800b434:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800b436:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800b438:	699a      	ldr	r2, [r3, #24]
 800b43a:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800b43e:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800b442:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800b446:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800b448:	6a1a      	ldr	r2, [r3, #32]
 800b44a:	f042 0210 	orr.w	r2, r2, #16
 800b44e:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800b450:	6a1a      	ldr	r2, [r3, #32]
 800b452:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b456:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800b458:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800b45a:	69da      	ldr	r2, [r3, #28]
 800b45c:	4022      	ands	r2, r4
 800b45e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b462:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800b464:	6a1a      	ldr	r2, [r3, #32]
 800b466:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b46a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800b46c:	6a1a      	ldr	r2, [r3, #32]
 800b46e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b472:	621a      	str	r2, [r3, #32]
}
 800b474:	e7a7      	b.n	800b3c6 <R3_1_RLDetectionModeDisable+0x66>
 800b476:	bf00      	nop
 800b478:	fffeff8c 	.word	0xfffeff8c
 800b47c:	0800a791 	.word	0x0800a791
 800b480:	0800a9e5 	.word	0x0800a9e5
 800b484:	0800aa79 	.word	0x0800aa79
 800b488:	0800abd9 	.word	0x0800abd9

0800b48c <R3_1_RLDetectionModeSetDuty>:
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800b48c:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800b490:	f8b0 c094 	ldrh.w	ip, [r0, #148]	@ 0x94
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800b494:	6852      	ldr	r2, [r2, #4]
{
 800b496:	4603      	mov	r3, r0
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800b498:	69d0      	ldr	r0, [r2, #28]
 800b49a:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800b49e:	fb0c f101 	mul.w	r1, ip, r1
 800b4a2:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
{
 800b4a6:	b410      	push	{r4}
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800b4a8:	0c09      	lsrs	r1, r1, #16
    pHandle->ADCRegularLocked = true;
 800b4aa:	2401      	movs	r4, #1
 800b4ac:	f440 40e0 	orr.w	r0, r0, #28672	@ 0x7000
 800b4b0:	f883 40a0 	strb.w	r4, [r3, #160]	@ 0xa0
    pHandle->_Super.CntPhA = (uint16_t)val;
 800b4b4:	f8a3 1050 	strh.w	r1, [r3, #80]	@ 0x50
 800b4b8:	61d0      	str	r0, [r2, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 800b4ba:	f8b3 0074 	ldrh.w	r0, [r3, #116]	@ 0x74
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 800b4be:	f8b3 4076 	ldrh.w	r4, [r3, #118]	@ 0x76
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 800b4c2:	ebac 0000 	sub.w	r0, ip, r0
  WRITE_REG(TIMx->CCR4, CompareValue);
 800b4c6:	6410      	str	r0, [r2, #64]	@ 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 800b4c8:	63d4      	str	r4, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 800b4ca:	6351      	str	r1, [r2, #52]	@ 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800b4cc:	6851      	ldr	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800b4ce:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
 800b4d2:	f021 7100 	bic.w	r1, r1, #33554432	@ 0x2000000
 800b4d6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
    pHdl->Sector = SECTOR_4;
 800b4da:	f04f 0c03 	mov.w	ip, #3
 800b4de:	f041 0170 	orr.w	r1, r1, #112	@ 0x70
 800b4e2:	6051      	str	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800b4e4:	2801      	cmp	r0, #1
    pHdl->Sector = SECTOR_4;
 800b4e6:	f883 c07a 	strb.w	ip, [r3, #122]	@ 0x7a
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800b4ea:	6852      	ldr	r2, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800b4ec:	d007      	beq.n	800b4fe <R3_1_RLDetectionModeSetDuty+0x72>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800b4ee:	4b07      	ldr	r3, [pc, #28]	@ (800b50c <R3_1_RLDetectionModeSetDuty+0x80>)
}
 800b4f0:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800b4f4:	421a      	tst	r2, r3
 800b4f6:	bf14      	ite	ne
 800b4f8:	2001      	movne	r0, #1
 800b4fa:	2000      	moveq	r0, #0
}
 800b4fc:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 800b4fe:	2200      	movs	r2, #0
}
 800b500:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->_Super.SWerror = 0U;
 800b504:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	02000070 	.word	0x02000070

0800b510 <R3_1_RLTurnOnLowSidesAndStart>:
  }
  else
  {
#endif
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800b510:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800b514:	685b      	ldr	r3, [r3, #4]

    pHandle->ADCRegularLocked=true;
 800b516:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800b518:	f06f 0201 	mvn.w	r2, #1
{
 800b51c:	b430      	push	{r4, r5}
    pHandle->ADCRegularLocked=true;
 800b51e:	f880 10a0 	strb.w	r1, [r0, #160]	@ 0xa0
 800b522:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800b524:	691a      	ldr	r2, [r3, #16]
 800b526:	07d1      	lsls	r1, r2, #31
 800b528:	d5fc      	bpl.n	800b524 <R3_1_RLTurnOnLowSidesAndStart+0x14>
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH2(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH3(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 800b52a:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  WRITE_REG(TIMx->CCR1, CompareValue);
 800b52e:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800b530:	f06f 0401 	mvn.w	r4, #1
 800b534:	3a05      	subs	r2, #5
 800b536:	611c      	str	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800b538:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800b53a:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800b53c:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800b53e:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800b540:	691a      	ldr	r2, [r3, #16]
 800b542:	07d2      	lsls	r2, r2, #31
 800b544:	d5fc      	bpl.n	800b540 <R3_1_RLTurnOnLowSidesAndStart+0x30>
    {
      /* Nothing to do */
    }

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800b546:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b548:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b54c:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800b54e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b550:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b554:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs (TIMx);

    if (ES_GPIO == pHandle->_Super.LowSideOutputs )
 800b556:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800b55a:	2a02      	cmp	r2, #2
 800b55c:	d10b      	bne.n	800b576 <R3_1_RLTurnOnLowSidesAndStart+0x66>
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800b55e:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800b562:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800b566:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 800b568:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800b56a:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 800b56e:	618c      	str	r4, [r1, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800b570:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 800b574:	6191      	str	r1, [r2, #24]
    else
    {
      /* Nothing to do */
    }

    pHdl->Sector = SECTOR_4;
 800b576:	2203      	movs	r2, #3
 800b578:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
  SET_BIT(TIMx->CCER, Channels);
 800b57c:	6a1a      	ldr	r2, [r3, #32]
 800b57e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b582:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800b584:	68da      	ldr	r2, [r3, #12]
 800b586:	f042 0201 	orr.w	r2, r2, #1

    LL_TIM_EnableIT_UPDATE(TIMx);
#ifdef NULL_PTR_CHECK_R3_1_PWM_CURR_FDB
  }
#endif
}
 800b58a:	bc30      	pop	{r4, r5}
 800b58c:	60da      	str	r2, [r3, #12]
 800b58e:	4770      	bx	lr

0800b590 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800b590:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 800b594:	8a42      	ldrh	r2, [r0, #18]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800b596:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800b598:	4494      	add	ip, r2
 800b59a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 800b59e:	b430      	push	{r4, r5}
 800b5a0:	2500      	movs	r5, #0
 800b5a2:	f36c 050f 	bfi	r5, ip, #0, #16
 800b5a6:	f36c 451f 	bfi	r5, ip, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800b5aa:	b14b      	cbz	r3, 800b5c0 <RVBS_Clear+0x30>
    {
      pHandle->aBuffer[index] = aux;
 800b5ac:	6944      	ldr	r4, [r0, #20]
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800b5b2:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 800b5b4:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800b5b8:	8941      	ldrh	r1, [r0, #10]
 800b5ba:	b29a      	uxth	r2, r3
 800b5bc:	4291      	cmp	r1, r2
 800b5be:	d8f7      	bhi.n	800b5b0 <RVBS_Clear+0x20>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 800b5c0:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 800b5c2:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 800b5c4:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 800b5c6:	bc30      	pop	{r4, r5}
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop

0800b5cc <RVBS_Init>:
{
 800b5cc:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 800b5ce:	f7ff ffdf 	bl	800b590 <RVBS_Clear>
}
 800b5d2:	bd08      	pop	{r3, pc}

0800b5d4 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800b5d4:	8982      	ldrh	r2, [r0, #12]
 800b5d6:	89c1      	ldrh	r1, [r0, #14]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800b5d8:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800b5da:	428a      	cmp	r2, r1
 800b5dc:	d010      	beq.n	800b600 <RVBS_CheckFaultState+0x2c>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800b5de:	f8b0 c012 	ldrh.w	ip, [r0, #18]
 800b5e2:	459c      	cmp	ip, r3
 800b5e4:	d80a      	bhi.n	800b5fc <RVBS_CheckFaultState+0x28>
{
 800b5e6:	b410      	push	{r4}
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 800b5e8:	7c04      	ldrb	r4, [r0, #16]
 800b5ea:	b994      	cbnz	r4, 800b612 <RVBS_CheckFaultState+0x3e>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 800b5ec:	4299      	cmp	r1, r3
 800b5ee:	d914      	bls.n	800b61a <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	7403      	strb	r3, [r0, #16]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 800b5f4:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 800b5f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5fa:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 800b5fc:	2004      	movs	r0, #4
 800b5fe:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800b600:	429a      	cmp	r2, r3
 800b602:	d30c      	bcc.n	800b61e <RVBS_CheckFaultState+0x4a>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800b604:	8a40      	ldrh	r0, [r0, #18]
 800b606:	4298      	cmp	r0, r3
 800b608:	bf94      	ite	ls
 800b60a:	2000      	movls	r0, #0
 800b60c:	2001      	movhi	r0, #1
 800b60e:	0080      	lsls	r0, r0, #2
 800b610:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800b612:	429a      	cmp	r2, r3
 800b614:	d2ee      	bcs.n	800b5f4 <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 800b616:	2300      	movs	r3, #0
 800b618:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 800b61a:	2002      	movs	r0, #2
 800b61c:	e7eb      	b.n	800b5f6 <RVBS_CheckFaultState+0x22>
 800b61e:	2002      	movs	r0, #2
}
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop

0800b624 <RVBS_CalcAvVbus>:
{
 800b624:	b538      	push	{r3, r4, r5, lr}
    if (0xFFFFU == hAux)
 800b626:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b62a:	4299      	cmp	r1, r3
{
 800b62c:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 800b62e:	d021      	beq.n	800b674 <RVBS_CalcAvVbus+0x50>
      pHandle->aBuffer[pHandle->index] = hAux;
 800b630:	6943      	ldr	r3, [r0, #20]
 800b632:	7e45      	ldrb	r5, [r0, #25]
 800b634:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800b638:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 800b63c:	f01e 02ff 	ands.w	r2, lr, #255	@ 0xff
 800b640:	d00d      	beq.n	800b65e <RVBS_CalcAvVbus+0x3a>
 800b642:	3a01      	subs	r2, #1
 800b644:	b2d2      	uxtb	r2, r2
 800b646:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 800b64a:	3b02      	subs	r3, #2
      wtemp = 0u;
 800b64c:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 800b64e:	f833 cf02 	ldrh.w	ip, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800b652:	4298      	cmp	r0, r3
        wtemp += pHandle->aBuffer[i];
 800b654:	4462      	add	r2, ip
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800b656:	d1fa      	bne.n	800b64e <RVBS_CalcAvVbus+0x2a>
      wtemp /= pHandle->LowPassFilterBW;
 800b658:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800b65c:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 800b65e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b662:	4575      	cmp	r5, lr
        pHandle->index++;
 800b664:	bf34      	ite	cc
 800b666:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 800b668:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800b66a:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 800b66c:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 800b66e:	bf34      	ite	cc
 800b670:	7665      	strbcc	r5, [r4, #25]
        pHandle->index = 0U;
 800b672:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 800b674:	4620      	mov	r0, r4
 800b676:	f7ff ffad 	bl	800b5d4 <RVBS_CheckFaultState>
 800b67a:	8120      	strh	r0, [r4, #8]
}
 800b67c:	bd38      	pop	{r3, r4, r5, pc}
 800b67e:	bf00      	nop

0800b680 <REMNG_Init>:
  }
  else
  {
#endif
    pHandle->Ext = 0;
    pHandle->TargetFinal = 0;
 800b680:	2300      	movs	r3, #0
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 800b682:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 800b684:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 800b688:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 800b68c:	6142      	str	r2, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 800b68e:	4770      	bx	lr

0800b690 <REMNG_Calc>:
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 800b690:	e9d0 2102 	ldrd	r2, r1, [r0, #8]

    /* Update the variable and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 800b694:	2901      	cmp	r1, #1
{
 800b696:	b410      	push	{r4}
 800b698:	4603      	mov	r3, r0
      pHandle->RampRemainingStep --;
    }
    else if (1U == pHandle->RampRemainingStep)
    {
      /* Set the backup value of TargetFinal */
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800b69a:	6944      	ldr	r4, [r0, #20]
    if (pHandle->RampRemainingStep > 1U)
 800b69c:	d909      	bls.n	800b6b2 <REMNG_Calc+0x22>
      current_ref += pHandle->IncDecAmount;
 800b69e:	6900      	ldr	r0, [r0, #16]
      pHandle->RampRemainingStep --;
 800b6a0:	3901      	subs	r1, #1
      current_ref += pHandle->IncDecAmount;
 800b6a2:	4402      	add	r2, r0
      pHandle->RampRemainingStep --;
 800b6a4:	60d9      	str	r1, [r3, #12]
    {
      /* Do nothing */
    }

    pHandle->Ext = current_ref;
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800b6a6:	fb92 f0f4 	sdiv	r0, r2, r4
    pHandle->Ext = current_ref;
 800b6aa:	609a      	str	r2, [r3, #8]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 800b6ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6b0:	4770      	bx	lr
    else if (1U == pHandle->RampRemainingStep)
 800b6b2:	d005      	beq.n	800b6c0 <REMNG_Calc+0x30>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800b6b4:	fb92 f0f4 	sdiv	r0, r2, r4
}
 800b6b8:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->Ext = current_ref;
 800b6bc:	609a      	str	r2, [r3, #8]
}
 800b6be:	4770      	bx	lr
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800b6c0:	6840      	ldr	r0, [r0, #4]
 800b6c2:	fb04 f200 	mul.w	r2, r4, r0
      pHandle->RampRemainingStep = 0U;
 800b6c6:	2100      	movs	r1, #0
}
 800b6c8:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->RampRemainingStep = 0U;
 800b6cc:	60d9      	str	r1, [r3, #12]
    pHandle->Ext = current_ref;
 800b6ce:	609a      	str	r2, [r3, #8]
}
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop

0800b6d4 <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 800b6d4:	68c0      	ldr	r0, [r0, #12]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (retVal);

}
 800b6d6:	fab0 f080 	clz	r0, r0
 800b6da:	0940      	lsrs	r0, r0, #5
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop

0800b6e0 <REMNG_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 800b6e0:	2300      	movs	r3, #0
    pHandle->IncDecAmount = 0;
 800b6e2:	e9c0 3303 	strd	r3, r3, [r0, #12]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 800b6e6:	4770      	bx	lr

0800b6e8 <getScalingFactor>:
  int32_t aux;
  uint8_t i;

  if (Target < 0)
  {
    aux = -Target;
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	bfb8      	it	lt
 800b6ec:	4240      	neglt	r0, r0
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
    if (TargetAbs >= limit)
 800b6ee:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800b6f2:	d213      	bcs.n	800b71c <getScalingFactor+0x34>
 800b6f4:	2302      	movs	r3, #2
    uint32_t limit = (((uint32_t)1) << (31U - i));
 800b6f6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b6fa:	e001      	b.n	800b700 <getScalingFactor+0x18>
  for (i = 1U; i < 32U; i++)
 800b6fc:	2b20      	cmp	r3, #32
 800b6fe:	d00a      	beq.n	800b716 <getScalingFactor+0x2e>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 800b700:	fa2c f203 	lsr.w	r2, ip, r3
    if (TargetAbs >= limit)
 800b704:	4290      	cmp	r0, r2
 800b706:	4619      	mov	r1, r3
 800b708:	f103 0301 	add.w	r3, r3, #1
 800b70c:	d3f6      	bcc.n	800b6fc <getScalingFactor+0x14>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 800b70e:	3901      	subs	r1, #1
 800b710:	2001      	movs	r0, #1
 800b712:	4088      	lsls	r0, r1
 800b714:	4770      	bx	lr
 800b716:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800b71a:	4770      	bx	lr
    if (TargetAbs >= limit)
 800b71c:	2001      	movs	r0, #1
}
 800b71e:	4770      	bx	lr

0800b720 <REMNG_ExecRamp>:
{
 800b720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b724:	4604      	mov	r4, r0
 800b726:	460e      	mov	r6, r1
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800b728:	6880      	ldr	r0, [r0, #8]
 800b72a:	6963      	ldr	r3, [r4, #20]
    if (0U == Durationms)
 800b72c:	4615      	mov	r5, r2
 800b72e:	b962      	cbnz	r2, 800b74a <REMNG_ExecRamp+0x2a>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 800b730:	4608      	mov	r0, r1
 800b732:	f7ff ffd9 	bl	800b6e8 <getScalingFactor>
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800b736:	fb00 f606 	mul.w	r6, r0, r6
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 800b73a:	6160      	str	r0, [r4, #20]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800b73c:	4628      	mov	r0, r5
      pHandle->IncDecAmount = 0;
 800b73e:	e9c4 5003 	strd	r5, r0, [r4, #12]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800b742:	60a6      	str	r6, [r4, #8]
}
 800b744:	2001      	movs	r0, #1
 800b746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800b74a:	fb90 f8f3 	sdiv	r8, r0, r3
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 800b74e:	eba1 0708 	sub.w	r7, r1, r8
 800b752:	4638      	mov	r0, r7
 800b754:	f7ff ffc8 	bl	800b6e8 <getScalingFactor>
 800b758:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 800b75a:	4640      	mov	r0, r8
 800b75c:	f7ff ffc4 	bl	800b6e8 <getScalingFactor>
 800b760:	4681      	mov	r9, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 800b762:	4630      	mov	r0, r6
 800b764:	f7ff ffc0 	bl	800b6e8 <getScalingFactor>
      if (wScalingFactor <  wScalingFactor2)
 800b768:	45ca      	cmp	sl, r9
 800b76a:	d318      	bcc.n	800b79e <REMNG_ExecRamp+0x7e>
        if (wScalingFactor2 < wScalingFactor3)
 800b76c:	4548      	cmp	r0, r9
 800b76e:	bf28      	it	cs
 800b770:	4648      	movcs	r0, r9
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 800b772:	fb08 f300 	mul.w	r3, r8, r0
 800b776:	60a3      	str	r3, [r4, #8]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 800b778:	6823      	ldr	r3, [r4, #0]
      aux /= 1000U;
 800b77a:	4a0b      	ldr	r2, [pc, #44]	@ (800b7a8 <REMNG_ExecRamp+0x88>)
      pHandle->ScalingFactor = wScalingFactorMin;
 800b77c:	6160      	str	r0, [r4, #20]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 800b77e:	fb05 f303 	mul.w	r3, r5, r3
      aux /= 1000U;
 800b782:	fba2 2303 	umull	r2, r3, r2, r3
 800b786:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800b788:	1c5d      	adds	r5, r3, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 800b78a:	fb07 f000 	mul.w	r0, r7, r0
      pHandle->TargetFinal = TargetFinal;
 800b78e:	6066      	str	r6, [r4, #4]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 800b790:	fb90 f0f5 	sdiv	r0, r0, r5
      pHandle->IncDecAmount = 0;
 800b794:	e9c4 5003 	strd	r5, r0, [r4, #12]
}
 800b798:	2001      	movs	r0, #1
 800b79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (wScalingFactor < wScalingFactor3)
 800b79e:	4550      	cmp	r0, sl
 800b7a0:	bf28      	it	cs
 800b7a2:	4650      	movcs	r0, sl
 800b7a4:	e7e5      	b.n	800b772 <REMNG_ExecRamp+0x52>
 800b7a6:	bf00      	nop
 800b7a8:	10624dd3 	.word	0x10624dd3

0800b7ac <RUC_Init>:
__weak void RUC_Init(RevUpCtrl_Handle_t *pHandle,
                     SpeednTorqCtrl_Handle_t *pSTC,
                     VirtualSpeedSensor_Handle_t *pVSS,
                     STO_Handle_t *pSNSL,
                     PWMC_Handle_t *pPWM)
{
 800b7ac:	b500      	push	{lr}
  {
#endif
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
 800b7ae:	6681      	str	r1, [r0, #104]	@ 0x68
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits */
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800b7b0:	6941      	ldr	r1, [r0, #20]
    pHandle->pSNSL = pSNSL;
 800b7b2:	e9c0 231b 	strd	r2, r3, [r0, #108]	@ 0x6c
    pHandle->OTFSCLowside = false;
 800b7b6:	f04f 0c00 	mov.w	ip, #0
    pHandle->pPWM = pPWM;
 800b7ba:	9b01      	ldr	r3, [sp, #4]
    pHandle->OTFSCLowside = false;
 800b7bc:	f8a0 c054 	strh.w	ip, [r0, #84]	@ 0x54
    pHandle->pPWM = pPWM;
 800b7c0:	6743      	str	r3, [r0, #116]	@ 0x74
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800b7c2:	b309      	cbz	r1, 800b808 <RUC_Init+0x5c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800b7c4:	688b      	ldr	r3, [r1, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800b7c6:	b323      	cbz	r3, 800b812 <RUC_Init+0x66>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800b7c8:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800b7ca:	b32b      	cbz	r3, 800b818 <RUC_Init+0x6c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800b7cc:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800b7ce:	b333      	cbz	r3, 800b81e <RUC_Init+0x72>
 800b7d0:	689b      	ldr	r3, [r3, #8]
      bPhase++;
 800b7d2:	f04f 0c05 	mov.w	ip, #5
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800b7d6:	b1cb      	cbz	r3, 800b80c <RUC_Init+0x60>
 800b7d8:	2204      	movs	r2, #4
 800b7da:	f04f 0c05 	mov.w	ip, #5
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

      pHandle->bPhaseNbr = bPhase;

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800b7de:	8803      	ldrh	r3, [r0, #0]
 800b7e0:	4910      	ldr	r1, [pc, #64]	@ (800b824 <RUC_Init+0x78>)
 800b7e2:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800b7e6:	fb0e f303 	mul.w	r3, lr, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800b7ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800b7ee:	fba1 1303 	umull	r1, r3, r1, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800b7f2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b7f6:	2100      	movs	r1, #0
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800b7f8:	099b      	lsrs	r3, r3, #6
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800b7fa:	6151      	str	r1, [r2, #20]
      pHandle->bPhaseNbr = bPhase;
 800b7fc:	f880 c048 	strb.w	ip, [r0, #72]	@ 0x48
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800b800:	f880 3056 	strb.w	r3, [r0, #86]	@ 0x56
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800b804:	f85d fb04 	ldr.w	pc, [sp], #4
      bPhase++;
 800b808:	f04f 0c01 	mov.w	ip, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800b80c:	f10c 32ff 	add.w	r2, ip, #4294967295
 800b810:	e7e5      	b.n	800b7de <RUC_Init+0x32>
      bPhase++;
 800b812:	f04f 0c02 	mov.w	ip, #2
 800b816:	e7f9      	b.n	800b80c <RUC_Init+0x60>
 800b818:	f04f 0c03 	mov.w	ip, #3
 800b81c:	e7f6      	b.n	800b80c <RUC_Init+0x60>
 800b81e:	f04f 0c04 	mov.w	ip, #4
 800b822:	e7f3      	b.n	800b80c <RUC_Init+0x60>
 800b824:	10624dd3 	.word	0x10624dd3

0800b828 <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 800b828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 800b82c:	f8d0 806c 	ldr.w	r8, [r0, #108]	@ 0x6c
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 800b830:	6e87      	ldr	r7, [r0, #104]	@ 0x68
    RevUpCtrl_PhaseParams_t *pPhaseParams = pHandle->ParamsData;

    pHandle->hDirection = hMotorDirection;
 800b832:	80c1      	strh	r1, [r0, #6]
    pHandle->EnteredZone1 = false;

    /* Initializes the rev up stages counter */
    pHandle->bStageCnt = 0U;
 800b834:	2500      	movs	r5, #0
{
 800b836:	4604      	mov	r4, r0
    pHandle->bStageCnt = 0U;
 800b838:	f880 5058 	strb.w	r5, [r0, #88]	@ 0x58
    pHandle->bOTFRelCounter = 0U;
 800b83c:	f880 5053 	strb.w	r5, [r0, #83]	@ 0x53
    pHandle->OTFSCLowside = false;
 800b840:	f8a0 5054 	strh.w	r5, [r0, #84]	@ 0x54

    /* Calls the clear method of VSS */
    VSS_Clear(pVSS);
 800b844:	4640      	mov	r0, r8

    /* Sets the STC in torque mode */
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);

    /* Sets the mechanical starting angle of VSS */
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 800b846:	b28e      	uxth	r6, r1
    VSS_Clear(pVSS);
 800b848:	f000 fc60 	bl	800c10c <VSS_Clear>
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 800b84c:	2104      	movs	r1, #4
 800b84e:	4638      	mov	r0, r7
 800b850:	f000 f8f8 	bl	800ba44 <STC_SetControlMode>
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 800b854:	8863      	ldrh	r3, [r4, #2]
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800b856:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b85a:	fb13 f306 	smulbb	r3, r3, r6
 800b85e:	b21b      	sxth	r3, r3
    pHandle->hElAngleAccu = hMecAngle;
 800b860:	f8a8 3030 	strh.w	r3, [r8, #48]	@ 0x30
    pHandle->_Super.hElAngle = hMecAngle;
 800b864:	f8a8 3004 	strh.w	r3, [r8, #4]

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 800b868:	4629      	mov	r1, r5
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800b86a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b86e:	4638      	mov	r0, r7
 800b870:	f8a8 3006 	strh.w	r3, [r8, #6]
 800b874:	462a      	mov	r2, r5
 800b876:	f000 f8e9 	bl	800ba4c <STC_ExecRamp>

    /* Gives the first command to STC and VSS */
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 800b87a:	8a21      	ldrh	r1, [r4, #16]
 800b87c:	89a2      	ldrh	r2, [r4, #12]
 800b87e:	fb11 f106 	smulbb	r1, r1, r6
 800b882:	b209      	sxth	r1, r1
 800b884:	4638      	mov	r0, r7
 800b886:	f000 f8e1 	bl	800ba4c <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 800b88a:	89e1      	ldrh	r1, [r4, #14]
 800b88c:	89a2      	ldrh	r2, [r4, #12]
 800b88e:	fb11 f106 	smulbb	r1, r1, r6
 800b892:	b209      	sxth	r1, r1
 800b894:	4640      	mov	r0, r8
 800b896:	f000 fcef 	bl	800c278 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks */
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 800b89a:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 800b89c:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 800b89e:	4a07      	ldr	r2, [pc, #28]	@ (800b8bc <RUC_Clear+0x94>)

    /* Set the next phases parameter pointer */
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5

    /* Timeout counter for PLL reset during OTF */
    pHandle->bResetPLLCnt = 0U;
 800b8a0:	f884 5057 	strb.w	r5, [r4, #87]	@ 0x57
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 800b8a4:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 800b8a8:	fba2 2303 	umull	r2, r3, r2, r3
 800b8ac:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800b8ae:	6962      	ldr	r2, [r4, #20]
 800b8b0:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	80a3      	strh	r3, [r4, #4]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800b8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8ba:	bf00      	nop
 800b8bc:	10624dd3 	.word	0x10624dd3

0800b8c0 <RUC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 800b8c0:	8883      	ldrh	r3, [r0, #4]
{
 800b8c2:	b510      	push	{r4, lr}
 800b8c4:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 800b8c6:	bb43      	cbnz	r3, 800b91a <RUC_Exec+0x5a>
      /* Nothing to do */
    }

    if (0U == pHandle->hPhaseRemainingTicks)
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 800b8c8:	68a0      	ldr	r0, [r4, #8]
 800b8ca:	b328      	cbz	r0, 800b918 <RUC_Exec+0x58>
      {
        /* If it becomes zero the current phase has been completed */
        /* Gives the next command to STC and VSS */
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 800b8cc:	8881      	ldrh	r1, [r0, #4]
 800b8ce:	88e3      	ldrh	r3, [r4, #6]
 800b8d0:	8802      	ldrh	r2, [r0, #0]
 800b8d2:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800b8d4:	fb11 f103 	smulbb	r1, r1, r3
 800b8d8:	b209      	sxth	r1, r1
 800b8da:	f000 f8b7 	bl	800ba4c <STC_ExecRamp>
                           (uint32_t)(pHandle->pCurrentPhaseParams->hDurationms));

        VSS_SetMecAcceleration(pHandle->pVSS,
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800b8de:	68a3      	ldr	r3, [r4, #8]
 800b8e0:	88e0      	ldrh	r0, [r4, #6]
 800b8e2:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 800b8e4:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800b8e6:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 800b8ea:	b209      	sxth	r1, r1
 800b8ec:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800b8ee:	f000 fcc3 	bl	800c278 <VSS_SetMecAcceleration>
                               pHandle->pCurrentPhaseParams->hDurationms);

        /* Compute hPhaseRemainingTicks */
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800b8f2:	68a1      	ldr	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800b8f4:	8820      	ldrh	r0, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800b8f6:	880b      	ldrh	r3, [r1, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800b8f8:	4a0b      	ldr	r2, [pc, #44]	@ (800b928 <RUC_Exec+0x68>)
        pHandle->hPhaseRemainingTicks++;

        /* Set the next phases parameter pointer */
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 800b8fa:	6889      	ldr	r1, [r1, #8]
 800b8fc:	60a1      	str	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800b8fe:	fb00 f303 	mul.w	r3, r0, r3
 800b902:	fba2 2303 	umull	r2, r3, r2, r3

        /* Increases the rev up stages counter */
        pHandle->bStageCnt++;
 800b906:	f894 2058 	ldrb.w	r2, [r4, #88]	@ 0x58
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800b90a:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 800b90c:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 800b90e:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 800b910:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 800b912:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
  bool retVal = true;
 800b916:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 800b918:	bd10      	pop	{r4, pc}
      pHandle->hPhaseRemainingTicks--;
 800b91a:	3b01      	subs	r3, #1
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	8083      	strh	r3, [r0, #4]
    if (0U == pHandle->hPhaseRemainingTicks)
 800b920:	2b00      	cmp	r3, #0
 800b922:	d0d1      	beq.n	800b8c8 <RUC_Exec+0x8>
  bool retVal = true;
 800b924:	2001      	movs	r0, #1
}
 800b926:	bd10      	pop	{r4, pc}
 800b928:	10624dd3 	.word	0x10624dd3

0800b92c <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 800b92c:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 800b930:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 800b934:	4282      	cmp	r2, r0
 800b936:	bf34      	ite	cc
 800b938:	2000      	movcc	r0, #0
 800b93a:	2001      	movcs	r0, #1
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop

0800b940 <RUC_SetPhaseDurationms>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->ParamsData[bPhase].hDurationms = hDurationms;
 800b940:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b944:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b948:	8182      	strh	r2, [r0, #12]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800b94a:	4770      	bx	lr

0800b94c <RUC_SetPhaseFinalMecSpeedUnit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->ParamsData[bPhase].hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800b94c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b950:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b954:	81c2      	strh	r2, [r0, #14]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800b956:	4770      	bx	lr

0800b958 <RUC_SetPhaseFinalTorque>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->ParamsData[bPhase].hFinalTorque = hFinalTorque;
 800b958:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b95c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b960:	8202      	strh	r2, [r0, #16]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800b962:	4770      	bx	lr

0800b964 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 800b964:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop

0800b96c <SPD_GetElSpeedDpp>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElSpeedDpp);
#else
  return (pHandle->hElSpeedDpp);
#endif
}
 800b96c:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop

0800b974 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 800b974:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 800b978:	4603      	mov	r3, r0
 800b97a:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 800b97c:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 800b980:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 800b984:	bfb8      	it	lt
 800b986:	4249      	neglt	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800b988:	f8b3 e016 	ldrh.w	lr, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800b98c:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800b98e:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 800b990:	8a9c      	ldrh	r4, [r3, #20]
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 800b992:	f9b3 c012 	ldrsh.w	ip, [r3, #18]
      hAux = -(*pMecSpeedUnit);
 800b996:	bfb8      	it	lt
 800b998:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800b99a:	458e      	cmp	lr, r1
 800b99c:	d816      	bhi.n	800b9cc <SPD_IsMecSpeedReliable+0x58>
    {
      hAux = -(pHandle->hMecAccelUnitP);
 800b99e:	fa1f fe8c 	uxth.w	lr, ip
    if (pHandle->hMecAccelUnitP < 0)
 800b9a2:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(pHandle->hMecAccelUnitP);
 800b9a6:	bfb8      	it	lt
 800b9a8:	f1ce 0e00 	rsblt	lr, lr, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800b9ac:	f8b3 c018 	ldrh.w	ip, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 800b9b0:	bfb8      	it	lt
 800b9b2:	fa1f fe8e 	uxthlt.w	lr, lr
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800b9b6:	45f4      	cmp	ip, lr
 800b9b8:	d308      	bcc.n	800b9cc <SPD_IsMecSpeedReliable+0x58>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 800b9ba:	428c      	cmp	r4, r1
 800b9bc:	d306      	bcc.n	800b9cc <SPD_IsMecSpeedReliable+0x58>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800b9be:	4290      	cmp	r0, r2
 800b9c0:	d809      	bhi.n	800b9d6 <SPD_IsMecSpeedReliable+0x62>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800b9c2:	1a10      	subs	r0, r2, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800b9c4:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800b9c6:	bf18      	it	ne
 800b9c8:	2001      	movne	r0, #1
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 800b9ca:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800b9cc:	4290      	cmp	r0, r2
 800b9ce:	d9f8      	bls.n	800b9c2 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 800b9d0:	3201      	adds	r2, #1
 800b9d2:	b2d2      	uxtb	r2, r2
 800b9d4:	e7f5      	b.n	800b9c2 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 800b9d6:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800b9d8:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 800b9da:	2001      	movs	r0, #1
}
 800b9dc:	bd10      	pop	{r4, pc}
 800b9de:	bf00      	nop

0800b9e0 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 800b9e0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800b9e4:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    wAux *= INT16_MAX;
 800b9e8:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800b9ec:	fb93 f0f2 	sdiv	r0, r3, r2
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 800b9f0:	b200      	sxth	r0, r0
 800b9f2:	4770      	bx	lr

0800b9f4 <SPD_GetElToMecRatio>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0U : pHandle->bElToMecRatio);
#else
  return (pHandle->bElToMecRatio);
#endif
}
 800b9f4:	7840      	ldrb	r0, [r0, #1]
 800b9f6:	4770      	bx	lr

0800b9f8 <SPD_SetElToMecRatio>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->bElToMecRatio = bPP;
 800b9f8:	7041      	strb	r1, [r0, #1]
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
}
 800b9fa:	4770      	bx	lr

0800b9fc <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800b9fc:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
    pHandle->PISpeed = pPI;
 800ba00:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800ba02:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
    pHandle->SPD = SPD_Handle;
 800ba06:	6142      	str	r2, [r0, #20]
{
 800ba08:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 800ba0a:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 800ba0e:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 800ba10:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800ba12:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800ba16:	0409      	lsls	r1, r1, #16
 800ba18:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 800ba1c:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800ba1e:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 800ba22:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 800ba24:	6183      	str	r3, [r0, #24]
}
 800ba26:	4770      	bx	lr

0800ba28 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 800ba28:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800ba2a:	4770      	bx	lr

0800ba2c <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 800ba2c:	7803      	ldrb	r3, [r0, #0]
 800ba2e:	2b03      	cmp	r3, #3
 800ba30:	d000      	beq.n	800ba34 <STC_Clear+0x8>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800ba32:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 800ba34:	6900      	ldr	r0, [r0, #16]
 800ba36:	2100      	movs	r1, #0
 800ba38:	f7fe be00 	b.w	800a63c <PID_SetIntegralTerm>

0800ba3c <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 800ba3c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop

0800ba44 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 800ba44:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 800ba46:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 800ba48:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800ba4a:	4770      	bx	lr

0800ba4c <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 800ba4c:	b410      	push	{r4}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800ba4e:	7803      	ldrb	r3, [r0, #0]
 800ba50:	2b04      	cmp	r3, #4
 800ba52:	d019      	beq.n	800ba88 <STC_ExecRamp+0x3c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800ba54:	f8b0 c01e 	ldrh.w	ip, [r0, #30]
 800ba58:	458c      	cmp	ip, r1
 800ba5a:	da03      	bge.n	800ba64 <STC_ExecRamp+0x18>
 800ba5c:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 800ba5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba62:	4770      	bx	lr
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 800ba64:	f9b0 4024 	ldrsh.w	r4, [r0, #36]	@ 0x24
 800ba68:	428c      	cmp	r4, r1
 800ba6a:	dcf7      	bgt.n	800ba5c <STC_ExecRamp+0x10>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 800ba6c:	8c04      	ldrh	r4, [r0, #32]
 800ba6e:	428c      	cmp	r4, r1
 800ba70:	dd03      	ble.n	800ba7a <STC_ExecRamp+0x2e>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 800ba72:	f9b0 4022 	ldrsh.w	r4, [r0, #34]	@ 0x22
 800ba76:	428c      	cmp	r4, r1
 800ba78:	dbf0      	blt.n	800ba5c <STC_ExecRamp+0x10>
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800ba7a:	6844      	ldr	r4, [r0, #4]
      if (0U == hDurationms)
 800ba7c:	b9b2      	cbnz	r2, 800baac <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 800ba7e:	2b03      	cmp	r3, #3
 800ba80:	d10a      	bne.n	800ba98 <STC_ExecRamp+0x4c>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800ba82:	0409      	lsls	r1, r1, #16
 800ba84:	6041      	str	r1, [r0, #4]
 800ba86:	e009      	b.n	800ba9c <STC_ExecRamp+0x50>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 800ba88:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800ba8a:	428b      	cmp	r3, r1
 800ba8c:	dbe6      	blt.n	800ba5c <STC_ExecRamp+0x10>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 800ba8e:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	@ 0x28
 800ba92:	428b      	cmp	r3, r1
 800ba94:	dce2      	bgt.n	800ba5c <STC_ExecRamp+0x10>
      if (0U == hDurationms)
 800ba96:	b9da      	cbnz	r2, 800bad0 <STC_ExecRamp+0x84>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 800ba98:	0409      	lsls	r1, r1, #16
 800ba9a:	6081      	str	r1, [r0, #8]
        pHandle->IncDecAmount = 0;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	461a      	mov	r2, r3
        pHandle->RampRemainingStep = 0U;
 800baa0:	60c3      	str	r3, [r0, #12]
        pHandle->IncDecAmount = 0;
 800baa2:	6182      	str	r2, [r0, #24]
}
 800baa4:	f85d 4b04 	ldr.w	r4, [sp], #4
        pHandle->IncDecAmount = 0;
 800baa8:	2001      	movs	r0, #1
}
 800baaa:	4770      	bx	lr
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800baac:	ea4f 4c24 	mov.w	ip, r4, asr #16
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800bab0:	8b83      	ldrh	r3, [r0, #28]
        wAux /= 1000U;
 800bab2:	4c09      	ldr	r4, [pc, #36]	@ (800bad8 <STC_ExecRamp+0x8c>)
        pHandle->TargetFinal = hTargetFinal;
 800bab4:	8041      	strh	r1, [r0, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800bab6:	fb02 f303 	mul.w	r3, r2, r3
        wAux /= 1000U;
 800baba:	fba4 4303 	umull	r4, r3, r4, r3
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800babe:	eba1 0c0c 	sub.w	ip, r1, ip
        wAux /= 1000U;
 800bac2:	099b      	lsrs	r3, r3, #6
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800bac4:	ea4f 420c 	mov.w	r2, ip, lsl #16
        pHandle->RampRemainingStep++;
 800bac8:	3301      	adds	r3, #1
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 800baca:	fb92 f2f3 	sdiv	r2, r2, r3
        pHandle->IncDecAmount = wAux1;
 800bace:	e7e7      	b.n	800baa0 <STC_ExecRamp+0x54>
  return ((int16_t)(pHandle->TorqueRef >> 16));
 800bad0:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 800bad4:	e7ec      	b.n	800bab0 <STC_ExecRamp+0x64>
 800bad6:	bf00      	nop
 800bad8:	10624dd3 	.word	0x10624dd3

0800badc <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 800badc:	b538      	push	{r3, r4, r5, lr}
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 800bade:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 800bae0:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800bae2:	2a04      	cmp	r2, #4
{
 800bae4:	4604      	mov	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800bae6:	d012      	beq.n	800bb0e <STC_CalcTorqueReference+0x32>
    if (pHandle->RampRemainingStep > 1U)
 800bae8:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 800baea:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 800baec:	d908      	bls.n	800bb00 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 800baee:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 800baf0:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800baf2:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 800baf4:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 800baf6:	2a03      	cmp	r2, #3
 800baf8:	d011      	beq.n	800bb1e <STC_CalcTorqueReference+0x42>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 800bafa:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800bafc:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 800bafe:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 800bb00:	d1f9      	bne.n	800baf6 <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800bb02:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800bb06:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800bb08:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 800bb0a:	60c3      	str	r3, [r0, #12]
 800bb0c:	e7f3      	b.n	800baf6 <STC_CalcTorqueReference+0x1a>
    if (pHandle->RampRemainingStep > 1U)
 800bb0e:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->TorqueRef;
 800bb10:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 800bb12:	d911      	bls.n	800bb38 <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 800bb14:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 800bb16:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800bb18:	4415      	add	r5, r2
      pHandle->RampRemainingStep--;
 800bb1a:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800bb1c:	e7ed      	b.n	800bafa <STC_CalcTorqueReference+0x1e>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 800bb1e:	6960      	ldr	r0, [r4, #20]
 800bb20:	f7ff ff20 	bl	800b964 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 800bb24:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 800bb28:	b209      	sxth	r1, r1
 800bb2a:	6920      	ldr	r0, [r4, #16]
 800bb2c:	f7fe fdba 	bl	800a6a4 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 800bb30:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800bb32:	0405      	lsls	r5, r0, #16
 800bb34:	60a5      	str	r5, [r4, #8]
}
 800bb36:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 800bb38:	d1df      	bne.n	800bafa <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800bb3a:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800bb3e:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800bb40:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 800bb42:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800bb44:	e7d9      	b.n	800bafa <STC_CalcTorqueReference+0x1e>
 800bb46:	bf00      	nop

0800bb48 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 800bb48:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 800bb4c:	4770      	bx	lr
 800bb4e:	bf00      	nop

0800bb50 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 800bb50:	f8d0 302e 	ldr.w	r3, [r0, #46]	@ 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 800bb54:	2200      	movs	r2, #0
 800bb56:	b299      	uxth	r1, r3
 800bb58:	f361 020f 	bfi	r2, r1, #0, #16
 800bb5c:	0c1b      	lsrs	r3, r3, #16
 800bb5e:	f363 421f 	bfi	r2, r3, #16, #16
{
 800bb62:	b082      	sub	sp, #8
}
 800bb64:	4610      	mov	r0, r2
 800bb66:	b002      	add	sp, #8
 800bb68:	4770      	bx	lr
 800bb6a:	bf00      	nop

0800bb6c <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 800bb6c:	b510      	push	{r4, lr}
 800bb6e:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 800bb70:	6940      	ldr	r0, [r0, #20]
 800bb72:	f7ff fef7 	bl	800b964 <SPD_GetAvrgMecSpeedUnit>
 800bb76:	0400      	lsls	r0, r0, #16
 800bb78:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800bb7a:	bd10      	pop	{r4, pc}

0800bb7c <STO_PLL_CalcElAngle>:
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
//cstat !MISRAC2012-Rule-8.13
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 800bb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 800bb80:	4604      	mov	r4, r0
{
 800bb82:	b089      	sub	sp, #36	@ 0x24
  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 800bb84:	2800      	cmp	r0, #0
 800bb86:	f000 80cf 	beq.w	800bd28 <STO_PLL_CalcElAngle+0x1ac>
 800bb8a:	2900      	cmp	r1, #0
 800bb8c:	f000 80cf 	beq.w	800bd2e <STO_PLL_CalcElAngle+0x1b2>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 800bb90:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	@ 0x2e
 800bb94:	6e87      	ldr	r7, [r0, #104]	@ 0x68
 800bb96:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800bb9a:	429f      	cmp	r7, r3
 800bb9c:	f340 80d1 	ble.w	800bd42 <STO_PLL_CalcElAngle+0x1c6>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 800bba0:	6683      	str	r3, [r0, #104]	@ 0x68
 800bba2:	461f      	mov	r7, r3
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800bba4:	f8b4 511e 	ldrh.w	r5, [r4, #286]	@ 0x11e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800bba8:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800bbaa:	fa47 f205 	asr.w	r2, r7, r5
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800bbae:	42b3      	cmp	r3, r6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800bbb0:	9201      	str	r2, [sp, #4]
 800bbb2:	fa0f fe82 	sxth.w	lr, r2
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800bbb6:	f2c0 80c1 	blt.w	800bd3c <STO_PLL_CalcElAngle+0x1c0>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800bbba:	425b      	negs	r3, r3
 800bbbc:	429e      	cmp	r6, r3
 800bbbe:	f340 80bd 	ble.w	800bd3c <STO_PLL_CalcElAngle+0x1c0>
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800bbc2:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 800bbc6:	f8d4 9060 	ldr.w	r9, [r4, #96]	@ 0x60
 800bbca:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800bbce:	fa46 f505 	asr.w	r5, r6, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800bbd2:	4599      	cmp	r9, r3
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800bbd4:	fa0f fc85 	sxth.w	ip, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800bbd8:	f340 80b9 	ble.w	800bd4e <STO_PLL_CalcElAngle+0x1d2>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 800bbdc:	6623      	str	r3, [r4, #96]	@ 0x60
 800bbde:	4699      	mov	r9, r3
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800bbe0:	f8d4 8064 	ldr.w	r8, [r4, #100]	@ 0x64
 800bbe4:	4543      	cmp	r3, r8
 800bbe6:	f2c0 80a6 	blt.w	800bd36 <STO_PLL_CalcElAngle+0x1ba>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800bbea:	425b      	negs	r3, r3
 800bbec:	4598      	cmp	r8, r3
 800bbee:	f340 80a2 	ble.w	800bd36 <STO_PLL_CalcElAngle+0x1ba>
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800bbf2:	88c8      	ldrh	r0, [r1, #6]

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800bbf4:	f8b1 a008 	ldrh.w	sl, [r1, #8]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800bbf8:	888b      	ldrh	r3, [r1, #4]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800bbfa:	f8ad 0014 	strh.w	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 800bbfe:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800bc02:	f8ad 3010 	strh.w	r3, [sp, #16]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800bc06:	f9b1 3000 	ldrsh.w	r3, [r1]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800bc0a:	f8b4 211c 	ldrh.w	r2, [r4, #284]	@ 0x11c
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 800bc0e:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800bc12:	9904      	ldr	r1, [sp, #16]
    wAux = wAux * pHandle->hC6;
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
    wBemf_beta_est_Next -= wAux;

    /* Calls the PLL blockset */
    pHandle->hBemf_alfa_est = hAux_Alfa;
 800bc14:	f8a4 e070 	strh.w	lr, [r4, #112]	@ 0x70
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 800bc18:	fb0a f000 	mul.w	r0, sl, r0
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800bc1c:	fb0a f303 	mul.w	r3, sl, r3
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800bc20:	1400      	asrs	r0, r0, #16
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800bc22:	141b      	asrs	r3, r3, #16
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800bc24:	9003      	str	r0, [sp, #12]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800bc26:	9805      	ldr	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800bc28:	9302      	str	r3, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800bc2a:	fa49 f302 	asr.w	r3, r9, r2
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800bc2e:	fa48 f202 	asr.w	r2, r8, r2
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800bc32:	eba2 0a00 	sub.w	sl, r2, r0
    wAux = ((int32_t)pHandle->hC1) * hAux;
 800bc36:	fb12 f20b 	smulbb	r2, r2, fp
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 800bc3a:	eba8 0202 	sub.w	r2, r8, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800bc3e:	1a59      	subs	r1, r3, r1
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 800bc40:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	@ 0x22
    wIalfa_est_Next += wAux;
 800bc44:	9802      	ldr	r0, [sp, #8]
    pHandle->hBemf_beta_est = hAux_Beta;
 800bc46:	f8a4 c072 	strh.w	ip, [r4, #114]	@ 0x72
    wAux = ((int32_t)pHandle->hC1) * hAux;
 800bc4a:	fb13 f30b 	smulbb	r3, r3, fp
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 800bc4e:	eba9 0303 	sub.w	r3, r9, r3
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800bc52:	b209      	sxth	r1, r1
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 800bc54:	f9b4 9028 	ldrsh.w	r9, [r4, #40]	@ 0x28
    wIalfa_est_Next += wAux;
 800bc58:	fb08 3301 	mla	r3, r8, r1, r3
    wIalfa_est_Next += wAux;
 800bc5c:	fb09 3300 	mla	r3, r9, r0, r3
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800bc60:	fa0f fa8a 	sxth.w	sl, sl
    wIbeta_est_Next += wAux;
 800bc64:	9803      	ldr	r0, [sp, #12]
    wIbeta_est_Next += wAux;
 800bc66:	fb08 280a 	mla	r8, r8, sl, r2
    wIbeta_est_Next += wAux;
 800bc6a:	fb09 8800 	mla	r8, r9, r0, r8
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 800bc6e:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	@ 0x26
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800bc72:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
    wAux = wAux * pHandle->hC6;
 800bc74:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	@ 0x2a
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 800bc78:	fb01 7100 	mla	r1, r1, r0, r7
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 800bc7c:	fb00 600a 	mla	r0, r0, sl, r6
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 800bc80:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	@ 0x24
    wIalfa_est_Next -= wAux;
 800bc84:	fb06 371e 	mls	r7, r6, lr, r3
    wIbeta_est_Next -= wAux;
 800bc88:	fb06 861c 	mls	r6, r6, ip, r8
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800bc8c:	fa4e fe02 	asr.w	lr, lr, r2
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800bc90:	fa4c fc02 	asr.w	ip, ip, r2
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 800bc94:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
    wAux = wAux * pHandle->hC6;
 800bc98:	fb0e f309 	mul.w	r3, lr, r9
    wBemf_beta_est_Next -= wAux;
 800bc9c:	fb03 0812 	mls	r8, r3, r2, r0

    if (0 == pHandle->hForcedDirection)
 800bca0:	f994 3124 	ldrsb.w	r3, [r4, #292]	@ 0x124
    wAux = wAux * pHandle->hC6;
 800bca4:	fb0c fc09 	mul.w	ip, ip, r9
    wBemf_alfa_est_Next += wAux;
 800bca8:	fb0c 1902 	mla	r9, ip, r2, r1
    if (0 == pHandle->hForcedDirection)
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d154      	bne.n	800bd5a <STO_PLL_CalcElAngle+0x1de>
    {
      /* We are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 800bcb0:	2a00      	cmp	r2, #0
 800bcb2:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 800bcb6:	bfa8      	it	ge
 800bcb8:	f04f 0a01 	movge.w	sl, #1
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;
  Trig_Components Local_Components;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 800bcbc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800bcc0:	f7f8 fa46 	bl	8004150 <MCM_Trig_Functions>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800bcc4:	9b01      	ldr	r3, [sp, #4]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 800bcc6:	fb15 f50a 	smulbb	r5, r5, sl
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800bcca:	fb13 f30a 	smulbb	r3, r3, sl
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 800bcce:	426d      	negs	r5, r5

  /* Alfa & Beta BEMF multiplied by Cos & Sin */
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 800bcd0:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 800bcd4:	fb10 f023 	smultb	r0, r0, r3
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 800bcd8:	f340 31cf 	sbfx	r1, r0, #15, #16
 800bcdc:	f345 35cf 	sbfx	r5, r5, #15, #16
 800bce0:	1a69      	subs	r1, r5, r1
 800bce2:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800bce6:	f7fe fcdd 	bl	800a6a4 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 800bcea:	f894 30f4 	ldrb.w	r3, [r4, #244]	@ 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800bcee:	f894 210e 	ldrb.w	r2, [r4, #270]	@ 0x10e
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 800bcf2:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800bcf8:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800bcfa:	bf12      	itee	ne
 800bcfc:	461a      	movne	r2, r3
 800bcfe:	2200      	moveq	r2, #0
    bBuffer_index = 0U;
 800bd00:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800bd02:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800bd06:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	@ 0x74
 800bd0a:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 800bd0e:	f8a2 0074 	strh.w	r0, [r2, #116]	@ 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 800bd12:	f884 30f4 	strb.w	r3, [r4, #244]	@ 0xf4
    pHandle->_Super.hElAngle += hRotor_Speed;
 800bd16:	88a3      	ldrh	r3, [r4, #4]
    pHandle->Ialfa_est = wIalfa_est_Next;
 800bd18:	6627      	str	r7, [r4, #96]	@ 0x60
    pHandle->_Super.hElAngle += hRotor_Speed;
 800bd1a:	4418      	add	r0, r3
    pHandle->Ibeta_est = wIbeta_est_Next;
 800bd1c:	e9c4 6919 	strd	r6, r9, [r4, #100]	@ 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 800bd20:	b200      	sxth	r0, r0
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 800bd22:	f8c4 806c 	str.w	r8, [r4, #108]	@ 0x6c
    pHandle->_Super.hElAngle += hRotor_Speed;
 800bd26:	80a0      	strh	r0, [r4, #4]
}
 800bd28:	b009      	add	sp, #36	@ 0x24
 800bd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    retValue = 0;
 800bd2e:	4608      	mov	r0, r1
}
 800bd30:	b009      	add	sp, #36	@ 0x24
 800bd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800bd36:	6663      	str	r3, [r4, #100]	@ 0x64
 800bd38:	4698      	mov	r8, r3
 800bd3a:	e75a      	b.n	800bbf2 <STO_PLL_CalcElAngle+0x76>
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 800bd3c:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800bd3e:	461e      	mov	r6, r3
 800bd40:	e73f      	b.n	800bbc2 <STO_PLL_CalcElAngle+0x46>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800bd42:	425a      	negs	r2, r3
 800bd44:	4297      	cmp	r7, r2
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 800bd46:	bfdc      	itt	le
 800bd48:	6682      	strle	r2, [r0, #104]	@ 0x68
 800bd4a:	4617      	movle	r7, r2
 800bd4c:	e72a      	b.n	800bba4 <STO_PLL_CalcElAngle+0x28>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800bd4e:	425a      	negs	r2, r3
 800bd50:	4591      	cmp	r9, r2
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800bd52:	bfdc      	itt	le
 800bd54:	6622      	strle	r2, [r4, #96]	@ 0x60
 800bd56:	4691      	movle	r9, r2
 800bd58:	e742      	b.n	800bbe0 <STO_PLL_CalcElAngle+0x64>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800bd5a:	fa1f fa83 	uxth.w	sl, r3
 800bd5e:	e7ad      	b.n	800bcbc <STO_PLL_CalcElAngle+0x140>

0800bd60 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 800bd60:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 800bd62:	f890 510e 	ldrb.w	r5, [r0, #270]	@ 0x10e
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800bd66:	2d00      	cmp	r5, #0
 800bd68:	f000 8094 	beq.w	800be94 <STO_PLL_CalcAvrgMecSpeedUnit+0x134>
 800bd6c:	f100 0272 	add.w	r2, r0, #114	@ 0x72
 800bd70:	eb02 0445 	add.w	r4, r2, r5, lsl #1
 800bd74:	4613      	mov	r3, r2
    int32_t wAvrSpeed_dpp = (int32_t)0;
 800bd76:	f04f 0c00 	mov.w	ip, #0
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800bd7a:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800bd7e:	42a3      	cmp	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800bd80:	44f4      	add	ip, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800bd82:	d1fa      	bne.n	800bd7a <STO_PLL_CalcAvrgMecSpeedUnit+0x1a>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 800bd84:	fb9c fef5 	sdiv	lr, ip, r5
    int32_t wAvrQuadraticError = 0;
 800bd88:	f04f 0c00 	mov.w	ip, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 800bd8c:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 800bd90:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800bd94:	42a2      	cmp	r2, r4
      wAvrQuadraticError += wError;
 800bd96:	fb03 cc03 	mla	ip, r3, r3, ip
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800bd9a:	d1f7      	bne.n	800bd8c <STO_PLL_CalcAvrgMecSpeedUnit+0x2c>
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 800bd9c:	fbbc f4f5 	udiv	r4, ip, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 800bda0:	fb0e f30e 	mul.w	r3, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 800bda4:	17de      	asrs	r6, r3, #31
 800bda6:	f8b0 c110 	ldrh.w	ip, [r0, #272]	@ 0x110
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 800bdaa:	8b45      	ldrh	r5, [r0, #26]
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 800bdac:	f890 7104 	ldrb.w	r7, [r0, #260]	@ 0x104
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 800bdb0:	fbac 2303 	umull	r2, r3, ip, r3
 800bdb4:	fb0c 3306 	mla	r3, ip, r6, r3
    wAvrSquareSpeed = (int32_t)(lAvrSquareSpeed / (int64_t)128);
 800bdb8:	09d2      	lsrs	r2, r2, #7
 800bdba:	ea42 6243 	orr.w	r2, r2, r3, lsl #25
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800bdbe:	7883      	ldrb	r3, [r0, #2]
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 800bdc0:	fb0e f505 	mul.w	r5, lr, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800bdc4:	42a2      	cmp	r2, r4
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800bdc6:	fb05 f303 	mul.w	r3, r5, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800bdca:	bfd8      	it	le
 800bdcc:	2600      	movle	r6, #0
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 800bdce:	69c5      	ldr	r5, [r0, #28]
 800bdd0:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800bdd4:	bfc8      	it	gt
 800bdd6:	2601      	movgt	r6, #1
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 800bdd8:	7845      	ldrb	r5, [r0, #1]
 800bdda:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 800bdde:	b21d      	sxth	r5, r3
 800bde0:	800d      	strh	r5, [r1, #0]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800bde2:	f880 60f5 	strb.w	r6, [r0, #245]	@ 0xf5
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 800bde6:	8185      	strh	r5, [r0, #12]
    if (false == pHandle->IsAlgorithmConverged)
 800bde8:	f890 60f8 	ldrb.w	r6, [r0, #248]	@ 0xf8
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 800bdec:	b98f      	cbnz	r7, 800be12 <STO_PLL_CalcAvrgMecSpeedUnit+0xb2>
    if (false == pHandle->IsAlgorithmConverged)
 800bdee:	b336      	cbz	r6, 800be3e <STO_PLL_CalcAvrgMecSpeedUnit+0xde>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 800bdf0:	42a2      	cmp	r2, r4
 800bdf2:	dc21      	bgt.n	800be38 <STO_PLL_CalcAvrgMecSpeedUnit+0xd8>
        pHandle->ReliabilityCounter++;
 800bdf4:	f890 30f7 	ldrb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 800bdf8:	78c2      	ldrb	r2, [r0, #3]
        pHandle->ReliabilityCounter++;
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 800bdfe:	4293      	cmp	r3, r2
        pHandle->ReliabilityCounter++;
 800be00:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 800be04:	d31b      	bcc.n	800be3e <STO_PLL_CalcAvrgMecSpeedUnit+0xde>
          pHandle->ReliabilityCounter = 0U;
 800be06:	2300      	movs	r3, #0
 800be08:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800be0c:	7002      	strb	r2, [r0, #0]
}
 800be0e:	4618      	mov	r0, r3
 800be10:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 800be12:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 800be14:	f8b0 511a 	ldrh.w	r5, [r0, #282]	@ 0x11a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 800be18:	bfb8      	it	lt
 800be1a:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 800be1c:	429d      	cmp	r5, r3
 800be1e:	dc12      	bgt.n	800be46 <STO_PLL_CalcAvrgMecSpeedUnit+0xe6>
    bool bIs_Bemf_Consistent = false;
 800be20:	2500      	movs	r5, #0
    int32_t wEstBemfSq = 0;
 800be22:	462b      	mov	r3, r5
    int32_t wObsBemfSq = 0;
 800be24:	462f      	mov	r7, r5
      pHandle->Est_Bemf_Level = wEstBemfSq;
 800be26:	e9c0 733f 	strd	r7, r3, [r0, #252]	@ 0xfc
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 800be2a:	f880 50f9 	strb.w	r5, [r0, #249]	@ 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 800be2e:	b136      	cbz	r6, 800be3e <STO_PLL_CalcAvrgMecSpeedUnit+0xde>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 800be30:	42a2      	cmp	r2, r4
 800be32:	dddf      	ble.n	800bdf4 <STO_PLL_CalcAvrgMecSpeedUnit+0x94>
 800be34:	2d00      	cmp	r5, #0
 800be36:	d0dd      	beq.n	800bdf4 <STO_PLL_CalcAvrgMecSpeedUnit+0x94>
        pHandle->ReliabilityCounter = 0U;
 800be38:	2300      	movs	r3, #0
 800be3a:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 800be3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 800be42:	f7ff bd97 	b.w	800b974 <SPD_IsMecSpeedReliable>
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 800be46:	f9b0 5070 	ldrsh.w	r5, [r0, #112]	@ 0x70
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 800be4a:	f9b0 7072 	ldrsh.w	r7, [r0, #114]	@ 0x72
        wObsBemfSq = wObsBemf * wObsBemf;
 800be4e:	fb05 fc05 	mul.w	ip, r5, r5
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800be52:	f890 5118 	ldrb.w	r5, [r0, #280]	@ 0x118
        wObsBemfSq += wObsBemf * wObsBemf;
 800be56:	fb07 c707 	mla	r7, r7, r7, ip
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 800be5a:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800be5e:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 800be62:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800be66:	fb03 f505 	mul.w	r5, r3, r5
 800be6a:	2d00      	cmp	r5, #0
 800be6c:	bfb8      	it	lt
 800be6e:	353f      	addlt	r5, #63	@ 0x3f
 800be70:	11ad      	asrs	r5, r5, #6
        wEstBemfSq *= wEstBemf;
 800be72:	fb05 f303 	mul.w	r3, r5, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 800be76:	2b00      	cmp	r3, #0
 800be78:	461d      	mov	r5, r3
 800be7a:	f890 c117 	ldrb.w	ip, [r0, #279]	@ 0x117
 800be7e:	bfb8      	it	lt
 800be80:	f103 053f 	addlt.w	r5, r3, #63	@ 0x3f
 800be84:	11ad      	asrs	r5, r5, #6
 800be86:	fb0c 3515 	mls	r5, ip, r5, r3
        if (wObsBemfSq > wEstBemfSqLo)
 800be8a:	42af      	cmp	r7, r5
 800be8c:	bfd4      	ite	le
 800be8e:	2500      	movle	r5, #0
 800be90:	2501      	movgt	r5, #1
 800be92:	e7c8      	b.n	800be26 <STO_PLL_CalcAvrgMecSpeedUnit+0xc6>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800be94:	462c      	mov	r4, r5
 800be96:	462b      	mov	r3, r5
 800be98:	462e      	mov	r6, r5
    int32_t wAvrSpeed_dpp = (int32_t)0;
 800be9a:	46ae      	mov	lr, r5
 800be9c:	e783      	b.n	800bda6 <STO_PLL_CalcAvrgMecSpeedUnit+0x46>
 800be9e:	bf00      	nop

0800bea0 <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 800bea0:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 800bea4:	f890 c10e 	ldrb.w	ip, [r0, #270]	@ 0x10e
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800bea8:	f890 110f 	ldrb.w	r1, [r0, #271]	@ 0x10f
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800beac:	eb00 0342 	add.w	r3, r0, r2, lsl #1
{
 800beb0:	b410      	push	{r4}
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800beb2:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 800beb6:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800beba:	ebac 0101 	sub.w	r1, ip, r1
 800bebe:	b289      	uxth	r1, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800bec0:	4423      	add	r3, r4
    if (0 == hBufferSizeDiff)
 800bec2:	b959      	cbnz	r1, 800bedc <STO_PLL_CalcAvrgElSpeedDpp+0x3c>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800bec4:	f9b0 210c 	ldrsh.w	r2, [r0, #268]	@ 0x10c
 800bec8:	1a9b      	subs	r3, r3, r2
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800beca:	f8b0 2120 	ldrh.w	r2, [r0, #288]	@ 0x120
    pHandle->DppBufferSum = wSum;
 800bece:	f8c0 3108 	str.w	r3, [r0, #264]	@ 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800bed2:	4113      	asrs	r3, r2
}
 800bed4:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 800bed8:	81c3      	strh	r3, [r0, #14]
}
 800beda:	4770      	bx	lr
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800bedc:	440a      	add	r2, r1
 800bede:	b291      	uxth	r1, r2
 800bee0:	b212      	sxth	r2, r2
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 800bee2:	4594      	cmp	ip, r2
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 800bee4:	bfdc      	itt	le
 800bee6:	eba1 010c 	suble.w	r1, r1, ip
 800beea:	b20a      	sxthle	r2, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 800beec:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800bef0:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	@ 0x74
 800bef4:	1a9b      	subs	r3, r3, r2
 800bef6:	e7e8      	b.n	800beca <STO_PLL_CalcAvrgElSpeedDpp+0x2a>

0800bef8 <STO_PLL_Clear>:
{
 800bef8:	b510      	push	{r4, lr}
  *
  */
static inline void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 800befa:	f890 210e 	ldrb.w	r2, [r0, #270]	@ 0x10e
    pHandle->Ialfa_est = (int32_t)0;
 800befe:	2100      	movs	r1, #0
    pHandle->Ibeta_est = (int32_t)0;
 800bf00:	e9c0 1118 	strd	r1, r1, [r0, #96]	@ 0x60
    pHandle->wBemf_beta_est = (int32_t)0;
 800bf04:	e9c0 111a 	strd	r1, r1, [r0, #104]	@ 0x68
    pHandle->Est_Bemf_Level = (int32_t)0;
 800bf08:	e9c0 113f 	strd	r1, r1, [r0, #252]	@ 0xfc
{
 800bf0c:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 800bf0e:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 800bf10:	81c1      	strh	r1, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 800bf12:	f8a0 10f6 	strh.w	r1, [r0, #246]	@ 0xf6
    pHandle->IsAlgorithmConverged = false;
 800bf16:	f8a0 10f8 	strh.w	r1, [r0, #248]	@ 0xf8
    pHandle->DppBufferSum = (int32_t)0;
 800bf1a:	f8c0 1108 	str.w	r1, [r0, #264]	@ 0x108
    pHandle->ForceConvergency = false;
 800bf1e:	f8a0 1122 	strh.w	r1, [r0, #290]	@ 0x122

  /* Init speed buffer */
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 800bf22:	b11a      	cbz	r2, 800bf2c <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 800bf24:	0052      	lsls	r2, r2, #1
 800bf26:	3074      	adds	r0, #116	@ 0x74
 800bf28:	f000 f9f4 	bl	800c314 <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	f884 10f4 	strb.w	r1, [r4, #244]	@ 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 800bf32:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800bf36:	f104 0034 	add.w	r0, r4, #52	@ 0x34
}
 800bf3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800bf3e:	f7fe bb7d 	b.w	800a63c <PID_SetIntegralTerm>
 800bf42:	bf00      	nop

0800bf44 <STO_PLL_Init>:
{
 800bf44:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800bf46:	f890 1116 	ldrb.w	r1, [r0, #278]	@ 0x116
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800bf4a:	4b19      	ldr	r3, [pc, #100]	@ (800bfb0 <STO_PLL_Init+0x6c>)
 800bf4c:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	@ 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800bf50:	f880 10f6 	strb.w	r1, [r0, #246]	@ 0xf6
    pHandle->EnableDualCheck = true;
 800bf54:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0U;
 800bf56:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800bf58:	fb93 f3fe 	sdiv	r3, r3, lr
 800bf5c:	b21b      	sxth	r3, r3
{
 800bf5e:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 800bf60:	f880 2104 	strb.w	r2, [r0, #260]	@ 0x104
    pHandle->F3POW2 = 0U;
 800bf64:	8641      	strh	r1, [r0, #50]	@ 0x32
    while (htempk != 0)
 800bf66:	b30b      	cbz	r3, 800bfac <STO_PLL_Init+0x68>
    wAux = ((int32_t)1);
 800bf68:	4611      	mov	r1, r2
      htempk /= ((int16_t)2);
 800bf6a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 800bf6e:	f102 0c01 	add.w	ip, r2, #1
 800bf72:	105b      	asrs	r3, r3, #1
 800bf74:	4610      	mov	r0, r2
      wAux *= ((int32_t)2);
 800bf76:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 800bf7a:	fa1f f28c 	uxth.w	r2, ip
 800bf7e:	d1f4      	bne.n	800bf6a <STO_PLL_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 800bf80:	b20a      	sxth	r2, r1
 800bf82:	8660      	strh	r0, [r4, #50]	@ 0x32
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 800bf84:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800bf88:	480a      	ldr	r0, [pc, #40]	@ (800bfb4 <STO_PLL_Init+0x70>)
    pHandle->hF3 = (int16_t)wAux;
 800bf8a:	8622      	strh	r2, [r4, #48]	@ 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800bf8c:	17cb      	asrs	r3, r1, #31
 800bf8e:	fb80 0101 	smull	r0, r1, r0, r1
 800bf92:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 800bf96:	8563      	strh	r3, [r4, #42]	@ 0x2a
    STO_PLL_Clear(pHandle);
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f7ff ffad 	bl	800bef8 <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 800bf9e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800bfa2:	f7fe fb37 	bl	800a614 <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	8263      	strh	r3, [r4, #18]
}
 800bfaa:	bd10      	pop	{r4, pc}
 800bfac:	4671      	mov	r1, lr
 800bfae:	e7eb      	b.n	800bf88 <STO_PLL_Init+0x44>
 800bfb0:	000fea5e 	.word	0x000fea5e
 800bfb4:	06488dc5 	.word	0x06488dc5

0800bfb8 <STO_PLL_IsObserverConverged>:
    int32_t wtemp;
    int16_t hEstimatedSpeedUnit;
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;

    if (true == pHandle->ForceConvergency2)
 800bfb8:	f890 2123 	ldrb.w	r2, [r0, #291]	@ 0x123
{
 800bfbc:	4603      	mov	r3, r0
    if (true == pHandle->ForceConvergency2)
 800bfbe:	b112      	cbz	r2, 800bfc6 <STO_PLL_IsObserverConverged+0xe>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800bfc0:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 800bfc4:	800a      	strh	r2, [r1, #0]
    else
    {
      /* Nothing to do */
    }

    if (true == pHandle->ForceConvergency)
 800bfc6:	f893 0122 	ldrb.w	r0, [r3, #290]	@ 0x122
 800bfca:	b128      	cbz	r0, 800bfd8 <STO_PLL_IsObserverConverged+0x20>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 800bfcc:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800bfce:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 800bfd0:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800bfd4:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 800bfd6:	4770      	bx	lr
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800bfd8:	f9b1 2000 	ldrsh.w	r2, [r1]
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800bfdc:	f9b3 c00c 	ldrsh.w	ip, [r3, #12]
{
 800bfe0:	b530      	push	{r4, r5, lr}
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800bfe2:	fb0c fe02 	mul.w	lr, ip, r2
      if (wtemp > 0)
 800bfe6:	f1be 0f00 	cmp.w	lr, #0
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800bfea:	4614      	mov	r4, r2
      if (wtemp > 0)
 800bfec:	dd38      	ble.n	800c060 <STO_PLL_IsObserverConverged+0xa8>
        if (hEstimatedSpeedUnit < 0)
 800bfee:	f1bc 0f00 	cmp.w	ip, #0
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 800bff2:	bfbc      	itt	lt
 800bff4:	f1cc 0c00 	rsblt	ip, ip, #0
 800bff8:	fa0f fc8c 	sxthlt.w	ip, ip
        if (*phForcedMecSpeedUnit < 0)
 800bffc:	2a00      	cmp	r2, #0
 800bffe:	db34      	blt.n	800c06a <STO_PLL_IsObserverConverged+0xb2>
        if (true == pHandle->IsSpeedReliable)
 800c000:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800c004:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800c008:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 800c00c:	b349      	cbz	r1, 800c062 <STO_PLL_IsObserverConverged+0xaa>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 800c00e:	f8b3 5114 	ldrh.w	r5, [r3, #276]	@ 0x114
 800c012:	fa1f f18c 	uxth.w	r1, ip
 800c016:	428d      	cmp	r5, r1
 800c018:	d223      	bcs.n	800c062 <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800c01a:	fb04 f202 	mul.w	r2, r4, r2
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 800c01e:	2a00      	cmp	r2, #0
 800c020:	bfb8      	it	lt
 800c022:	320f      	addlt	r2, #15
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 800c024:	f342 120f 	sbfx	r2, r2, #4, #16
 800c028:	4594      	cmp	ip, r2
 800c02a:	db1a      	blt.n	800c062 <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800c02c:	fb04 fe0e 	mul.w	lr, r4, lr
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 800c030:	f1be 0f00 	cmp.w	lr, #0
 800c034:	bfb8      	it	lt
 800c036:	f10e 0e0f 	addlt.w	lr, lr, #15
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 800c03a:	f34e 1e0f 	sbfx	lr, lr, #4, #16
 800c03e:	45f4      	cmp	ip, lr
 800c040:	dc0f      	bgt.n	800c062 <STO_PLL_IsObserverConverged+0xaa>
                pHandle->ConsistencyCounter++;
 800c042:	f893 20f6 	ldrb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800c046:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
                pHandle->ConsistencyCounter++;
 800c04a:	3201      	adds	r2, #1
 800c04c:	b2d2      	uxtb	r2, r2
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800c04e:	4291      	cmp	r1, r2
                pHandle->ConsistencyCounter++;
 800c050:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800c054:	d804      	bhi.n	800c060 <STO_PLL_IsObserverConverged+0xa8>
      pHandle->IsAlgorithmConverged = true;
 800c056:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800c058:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 800c05a:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800c05e:	701a      	strb	r2, [r3, #0]
}
 800c060:	bd30      	pop	{r4, r5, pc}
                pHandle->ConsistencyCounter = 0U;
 800c062:	2200      	movs	r2, #0
 800c064:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
}
 800c068:	bd30      	pop	{r4, r5, pc}
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 800c06a:	4252      	negs	r2, r2
 800c06c:	b212      	sxth	r2, r2
 800c06e:	800a      	strh	r2, [r1, #0]
        if (true == pHandle->IsSpeedReliable)
 800c070:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800c074:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
 800c078:	4614      	mov	r4, r2
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800c07a:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 800c07e:	2900      	cmp	r1, #0
 800c080:	d0ef      	beq.n	800c062 <STO_PLL_IsObserverConverged+0xaa>
 800c082:	e7c4      	b.n	800c00e <STO_PLL_IsObserverConverged+0x56>

0800c084 <STO_PLL_GetEstimatedBemf>:
    vaux.alpha = pHandle->hBemf_alfa_est;
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
 800c084:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800c086:	2200      	movs	r2, #0
 800c088:	b299      	uxth	r1, r3
 800c08a:	f361 020f 	bfi	r2, r1, #0, #16
 800c08e:	0c1b      	lsrs	r3, r3, #16
 800c090:	f363 421f 	bfi	r2, r3, #16, #16
{
 800c094:	b082      	sub	sp, #8
}
 800c096:	4610      	mov	r0, r2
 800c098:	b002      	add	sp, #8
 800c09a:	4770      	bx	lr

0800c09c <STO_PLL_GetEstimatedCurrent>:
  * @brief  Exports from @p pHandle the stator current alpha-beta as estimated by state observer.
  * 
  * @retval alphabeta_t State observer estimated stator current Ialpha-beta.
  */
__weak alphabeta_t STO_PLL_GetEstimatedCurrent(STO_PLL_Handle_t *pHandle)
{
 800c09c:	4603      	mov	r3, r0
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 800c09e:	2000      	movs	r0, #0
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800c0a0:	f8b3 111c 	ldrh.w	r1, [r3, #284]	@ 0x11c
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800c0a4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800c0a8:	410a      	asrs	r2, r1
  return (iaux);
 800c0aa:	410b      	asrs	r3, r1
 800c0ac:	b292      	uxth	r2, r2
 800c0ae:	f362 000f 	bfi	r0, r2, #0, #16
 800c0b2:	b29b      	uxth	r3, r3
{
 800c0b4:	b082      	sub	sp, #8
  return (iaux);
 800c0b6:	f363 401f 	bfi	r0, r3, #16, #16
}
 800c0ba:	b002      	add	sp, #8
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop

0800c0c0 <STO_PLL_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 800c0c0:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 800c0c4:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 800c0c6:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	@ 0x26
 800c0ca:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800c0cc:	4770      	bx	lr
 800c0ce:	bf00      	nop

0800c0d0 <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 800c0d0:	8441      	strh	r1, [r0, #34]	@ 0x22
    pHandle->hC4 = hhC2;
 800c0d2:	84c2      	strh	r2, [r0, #38]	@ 0x26
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop

0800c0d8 <STO_OTF_ResetPLL>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 800c0d8:	6800      	ldr	r0, [r0, #0]
 800c0da:	2100      	movs	r1, #0
 800c0dc:	3034      	adds	r0, #52	@ 0x34
 800c0de:	f7fe baad 	b.w	800a63c <PID_SetIntegralTerm>
 800c0e2:	bf00      	nop

0800c0e4 <STO_PLL_IsVarianceTight>:
  }
  else
  {
#endif
    const STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
 800c0e4:	6803      	ldr	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
}
 800c0e6:	f893 00f5 	ldrb.w	r0, [r3, #245]	@ 0xf5
 800c0ea:	4770      	bx	lr

0800c0ec <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 800c0ec:	6803      	ldr	r3, [r0, #0]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800c0f4:	4770      	bx	lr
 800c0f6:	bf00      	nop

0800c0f8 <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 800c0f8:	6803      	ldr	r3, [r0, #0]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800c100:	4770      	bx	lr
 800c102:	bf00      	nop

0800c104 <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 800c104:	f880 1124 	strb.w	r1, [r0, #292]	@ 0x124
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800c108:	4770      	bx	lr
 800c10a:	bf00      	nop

0800c10c <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800c10c:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800c10e:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800c110:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 800c112:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 800c116:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 800c118:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 800c11a:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 800c11c:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 800c11e:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800c120:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 800c122:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800c124:	4770      	bx	lr
 800c126:	bf00      	nop

0800c128 <VSS_Init>:
{
 800c128:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 800c12a:	f7ff ffef 	bl	800c10c <VSS_Clear>
}
 800c12e:	bd08      	pop	{r3, pc}

0800c130 <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 800c130:	f890 2033 	ldrb.w	r2, [r0, #51]	@ 0x33
{
 800c134:	4603      	mov	r3, r0
    if (true == pHandle->bCopyObserver)
 800c136:	b11a      	cbz	r2, 800c140 <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 800c138:	f9b1 0000 	ldrsh.w	r0, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 800c13c:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 800c13e:	4770      	bx	lr
{
 800c140:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800c142:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 800c146:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800c148:	88dd      	ldrh	r5, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800c14a:	f893 402c 	ldrb.w	r4, [r3, #44]	@ 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800c14e:	785a      	ldrb	r2, [r3, #1]
 800c150:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800c154:	4460      	add	r0, ip
 800c156:	fa1f fe80 	uxth.w	lr, r0
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800c15a:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800c15c:	b200      	sxth	r0, r0
 800c15e:	8618      	strh	r0, [r3, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800c160:	80da      	strh	r2, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800c162:	b1fc      	cbz	r4, 800c1a4 <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 800c164:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 800c168:	b1f2      	cbz	r2, 800c1a8 <VSS_CalcElAngle+0x78>
          pHandle->hTransitionRemainingSteps--;
 800c16a:	3a01      	subs	r2, #1
 800c16c:	b212      	sxth	r2, r2
 800c16e:	85da      	strh	r2, [r3, #46]	@ 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800c170:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800c174:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800c176:	db26      	blt.n	800c1c6 <VSS_CalcElAngle+0x96>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800c178:	eba1 0e0e 	sub.w	lr, r1, lr
 800c17c:	fa0f fe8e 	sxth.w	lr, lr
 800c180:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800c182:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	@ 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 800c186:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 800c18a:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800c18e:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 800c192:	fb12 f205 	smulbb	r2, r2, r5
 800c196:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 800c198:	db0e      	blt.n	800c1b8 <VSS_CalcElAngle+0x88>
            pHandle->bTransitionLocked = true;
 800c19a:	2001      	movs	r0, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800c19c:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 800c19e:	f883 0032 	strb.w	r0, [r3, #50]	@ 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800c1a2:	b210      	sxth	r0, r2
    pHandle->_Super.hElAngle = hRetAngle;
 800c1a4:	8098      	strh	r0, [r3, #4]
}
 800c1a6:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 800c1a8:	f9b1 0000 	ldrsh.w	r0, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 800c1ac:	701a      	strb	r2, [r3, #0]
          pHandle->bTransitionEnded = true;
 800c1ae:	2401      	movs	r4, #1
 800c1b0:	f883 402d 	strb.w	r4, [r3, #45]	@ 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 800c1b4:	8098      	strh	r0, [r3, #4]
}
 800c1b6:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 800c1b8:	f893 4032 	ldrb.w	r4, [r3, #50]	@ 0x32
 800c1bc:	2c00      	cmp	r4, #0
 800c1be:	d0f1      	beq.n	800c1a4 <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 800c1c0:	440a      	add	r2, r1
 800c1c2:	b210      	sxth	r0, r2
 800c1c4:	e7ee      	b.n	800c1a4 <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 800c1c6:	ebae 0e01 	sub.w	lr, lr, r1
 800c1ca:	fa0f fe8e 	sxth.w	lr, lr
 800c1ce:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 800c1d2:	e7d6      	b.n	800c182 <VSS_CalcElAngle+0x52>

0800c1d4 <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 800c1d4:	8d02      	ldrh	r2, [r0, #40]	@ 0x28
 800c1d6:	2a01      	cmp	r2, #1
{
 800c1d8:	4603      	mov	r3, r0
    if (pHandle->hRemainingStep > 1u)
 800c1da:	d922      	bls.n	800c222 <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 800c1dc:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800c1de:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800c1e0:	6a1c      	ldr	r4, [r3, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800c1e2:	8b5a      	ldrh	r2, [r3, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800c1e4:	4420      	add	r0, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800c1e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800c1ea:	69dc      	ldr	r4, [r3, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800c1ec:	6258      	str	r0, [r3, #36]	@ 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800c1ee:	fb0c f202 	mul.w	r2, ip, r2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800c1f2:	7858      	ldrb	r0, [r3, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800c1f4:	f8a3 c00e 	strh.w	ip, [r3, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800c1f8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800c1fc:	fb04 f000 	mul.w	r0, r4, r0
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800c200:	0052      	lsls	r2, r2, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800c202:	fb92 f2f0 	sdiv	r2, r2, r0
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 800c206:	b212      	sxth	r2, r2
 800c208:	800a      	strh	r2, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 800c20a:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800c20c:	819a      	strh	r2, [r3, #12]
      pHandle->hRemainingStep--;
 800c20e:	1e42      	subs	r2, r0, #1
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 800c210:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->hRemainingStep--;
 800c214:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 800c216:	b970      	cbnz	r0, 800c236 <VSS_CalcAvrgMecSpeedUnit+0x62>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800c218:	78da      	ldrb	r2, [r3, #3]
 800c21a:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 800c21c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c220:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 800c222:	d00d      	beq.n	800c240 <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800c224:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    if (false == pHandle->bTransitionEnded)
 800c228:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800c22c:	800a      	strh	r2, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 800c22e:	bb00      	cbnz	r0, 800c272 <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800c230:	78da      	ldrb	r2, [r3, #3]
 800c232:	701a      	strb	r2, [r3, #0]
}
 800c234:	4770      	bx	lr
 800c236:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7ff bb9a 	b.w	800b974 <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800c240:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	@ 0x2a
 800c244:	f8a1 c000 	strh.w	ip, [r1]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800c248:	8b42      	ldrh	r2, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800c24a:	69c0      	ldr	r0, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800c24c:	f8a3 c00c 	strh.w	ip, [r3, #12]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800c250:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800c254:	0052      	lsls	r2, r2, #1
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800c256:	fb00 f00c 	mul.w	r0, r0, ip
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800c25a:	fb90 f0f2 	sdiv	r0, r0, r2
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800c25e:	785a      	ldrb	r2, [r3, #1]
 800c260:	fb12 f200 	smulbb	r2, r2, r0
      pHandle->hRemainingStep = 0U;
 800c264:	2000      	movs	r0, #0
 800c266:	8518      	strh	r0, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 800c268:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800c26c:	81da      	strh	r2, [r3, #14]
    if (false == pHandle->bTransitionEnded)
 800c26e:	2800      	cmp	r0, #0
 800c270:	d0de      	beq.n	800c230 <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800c272:	4618      	mov	r0, r3
 800c274:	f7ff bb7e 	b.w	800b974 <SPD_IsMecSpeedReliable>

0800c278 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 800c278:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800c27c:	b9a3      	cbnz	r3, 800c2a8 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800c27e:	8b43      	ldrh	r3, [r0, #26]
{
 800c280:	b510      	push	{r4, lr}
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800c282:	69c4      	ldr	r4, [r0, #28]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800c284:	f890 e001 	ldrb.w	lr, [r0, #1]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800c288:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800c28c:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800c290:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 800c292:	fb9c fcf3 	sdiv	ip, ip, r3
      if (0U == hDurationms)
 800c296:	b942      	cbnz	r2, 800c2aa <VSS_SetMecAcceleration+0x32>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800c298:	fb1c fc0e 	smulbb	ip, ip, lr
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800c29c:	8181      	strh	r1, [r0, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800c29e:	f8a0 c00e 	strh.w	ip, [r0, #14]

        pHandle->hRemainingStep = 0U;
 800c2a2:	8502      	strh	r2, [r0, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800c2a4:	8541      	strh	r1, [r0, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800c2a6:	bd10      	pop	{r4, pc}
 800c2a8:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800c2aa:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 800c2ac:	fb02 f303 	mul.w	r3, r2, r3
 800c2b0:	4a0e      	ldr	r2, [pc, #56]	@ (800c2ec <VSS_SetMecAcceleration+0x74>)
 800c2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2b6:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	b29b      	uxth	r3, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800c2be:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
        pHandle->hRemainingStep = hNbrStep;
 800c2c2:	8503      	strh	r3, [r0, #40]	@ 0x28
        if (0U == hNbrStep)
 800c2c4:	b91b      	cbnz	r3, 800c2ce <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800c2c6:	0412      	lsls	r2, r2, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800c2c8:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800c2ca:	6242      	str	r2, [r0, #36]	@ 0x24
}
 800c2cc:	bd10      	pop	{r4, pc}
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800c2ce:	fb92 f4fe 	sdiv	r4, r2, lr
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800c2d2:	ebac 0c04 	sub.w	ip, ip, r4
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 800c2d6:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800c2da:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800c2dc:	fb9c f3f3 	sdiv	r3, ip, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 800c2e0:	fb0e f303 	mul.w	r3, lr, r3
 800c2e4:	6203      	str	r3, [r0, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800c2e6:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800c2e8:	6242      	str	r2, [r0, #36]	@ 0x24
    }
 800c2ea:	e7ef      	b.n	800c2cc <VSS_SetMecAcceleration+0x54>
 800c2ec:	10624dd3 	.word	0x10624dd3

0800c2f0 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 800c2f0:	b151      	cbz	r1, 800c308 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 800c2f2:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	@ 0x36
      pHandle->bTransitionStarted = true;
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
      if (0 == pHandle->hTransitionSteps)
 800c2fc:	b923      	cbnz	r3, 800c308 <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 800c2fe:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 800c302:	7003      	strb	r3, [r0, #0]
        bAux = false;
 800c304:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 800c306:	4770      	bx	lr
  bool bAux = true;
 800c308:	2001      	movs	r0, #1
 800c30a:	4770      	bx	lr

0800c30c <VSS_TransitionEnded>:
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 800c30c:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop

0800c314 <memset>:
 800c314:	4402      	add	r2, r0
 800c316:	4603      	mov	r3, r0
 800c318:	4293      	cmp	r3, r2
 800c31a:	d100      	bne.n	800c31e <memset+0xa>
 800c31c:	4770      	bx	lr
 800c31e:	f803 1b01 	strb.w	r1, [r3], #1
 800c322:	e7f9      	b.n	800c318 <memset+0x4>

0800c324 <__libc_init_array>:
 800c324:	b570      	push	{r4, r5, r6, lr}
 800c326:	4d0d      	ldr	r5, [pc, #52]	@ (800c35c <__libc_init_array+0x38>)
 800c328:	4c0d      	ldr	r4, [pc, #52]	@ (800c360 <__libc_init_array+0x3c>)
 800c32a:	1b64      	subs	r4, r4, r5
 800c32c:	10a4      	asrs	r4, r4, #2
 800c32e:	2600      	movs	r6, #0
 800c330:	42a6      	cmp	r6, r4
 800c332:	d109      	bne.n	800c348 <__libc_init_array+0x24>
 800c334:	4d0b      	ldr	r5, [pc, #44]	@ (800c364 <__libc_init_array+0x40>)
 800c336:	4c0c      	ldr	r4, [pc, #48]	@ (800c368 <__libc_init_array+0x44>)
 800c338:	f000 f826 	bl	800c388 <_init>
 800c33c:	1b64      	subs	r4, r4, r5
 800c33e:	10a4      	asrs	r4, r4, #2
 800c340:	2600      	movs	r6, #0
 800c342:	42a6      	cmp	r6, r4
 800c344:	d105      	bne.n	800c352 <__libc_init_array+0x2e>
 800c346:	bd70      	pop	{r4, r5, r6, pc}
 800c348:	f855 3b04 	ldr.w	r3, [r5], #4
 800c34c:	4798      	blx	r3
 800c34e:	3601      	adds	r6, #1
 800c350:	e7ee      	b.n	800c330 <__libc_init_array+0xc>
 800c352:	f855 3b04 	ldr.w	r3, [r5], #4
 800c356:	4798      	blx	r3
 800c358:	3601      	adds	r6, #1
 800c35a:	e7f2      	b.n	800c342 <__libc_init_array+0x1e>
 800c35c:	0800c674 	.word	0x0800c674
 800c360:	0800c674 	.word	0x0800c674
 800c364:	0800c674 	.word	0x0800c674
 800c368:	0800c678 	.word	0x0800c678

0800c36c <memcpy>:
 800c36c:	440a      	add	r2, r1
 800c36e:	4291      	cmp	r1, r2
 800c370:	f100 33ff 	add.w	r3, r0, #4294967295
 800c374:	d100      	bne.n	800c378 <memcpy+0xc>
 800c376:	4770      	bx	lr
 800c378:	b510      	push	{r4, lr}
 800c37a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c37e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c382:	4291      	cmp	r1, r2
 800c384:	d1f9      	bne.n	800c37a <memcpy+0xe>
 800c386:	bd10      	pop	{r4, pc}

0800c388 <_init>:
 800c388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c38a:	bf00      	nop
 800c38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c38e:	bc08      	pop	{r3}
 800c390:	469e      	mov	lr, r3
 800c392:	4770      	bx	lr

0800c394 <_fini>:
 800c394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c396:	bf00      	nop
 800c398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c39a:	bc08      	pop	{r3}
 800c39c:	469e      	mov	lr, r3
 800c39e:	4770      	bx	lr
